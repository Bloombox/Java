/*
 * Copyright 2018, Momentum Ideas, Co. All rights reserved.
 *
 * Source and object computer code contained herein is the private intellectual
 * property of Momentum Ideas Co., a Delaware Corporation. Use of this
 * code in source form requires permission in writing before use or the
 * assembly, distribution, or publishing of derivative works, for commercial
 * purposes or any other purpose, from a duly authorized officer of Momentum
 * Ideas Co.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crypto/Container.proto

package io.opencannabis.schema.crypto;

public interface EncryptedDataOrBuilder extends
    // @@protoc_insertion_point(interface_extends:opencannabis.crypto.EncryptedData)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Ciphertext, i.e., data contained in the encrypted container.
   * </pre>
   *
   * <code>bytes data = 1;</code>
   */
  com.google.protobuf.ByteString getData();

  /**
   * <pre>
   * Content encoding for the raw ciphertext data specified.
   * </pre>
   *
   * <code>.opencannabis.content.Encoding encoding = 2;</code>
   */
  int getEncodingValue();
  /**
   * <pre>
   * Content encoding for the raw ciphertext data specified.
   * </pre>
   *
   * <code>.opencannabis.content.Encoding encoding = 2;</code>
   */
  io.opencannabis.schema.content.GenericContent.Encoding getEncoding();

  /**
   * <pre>
   * Compression applied to the cleartext, if applicable and specified.
   * </pre>
   *
   * <code>.opencannabis.base.Compression compression = 3;</code>
   */
  boolean hasCompression();
  /**
   * <pre>
   * Compression applied to the cleartext, if applicable and specified.
   * </pre>
   *
   * <code>.opencannabis.base.Compression compression = 3;</code>
   */
  io.opencannabis.schema.base.BaseCompression.Compression getCompression();
  /**
   * <pre>
   * Compression applied to the cleartext, if applicable and specified.
   * </pre>
   *
   * <code>.opencannabis.base.Compression compression = 3;</code>
   */
  io.opencannabis.schema.base.BaseCompression.CompressionOrBuilder getCompressionOrBuilder();

  /**
   * <pre>
   * Cryptographic fingerprint of the ciphertext data. If compression is active, this is applied beforehand.
   * </pre>
   *
   * <code>.opencannabis.crypto.Hash fingerprint = 4;</code>
   */
  boolean hasFingerprint();
  /**
   * <pre>
   * Cryptographic fingerprint of the ciphertext data. If compression is active, this is applied beforehand.
   * </pre>
   *
   * <code>.opencannabis.crypto.Hash fingerprint = 4;</code>
   */
  io.opencannabis.schema.crypto.primitives.integrity.Hash getFingerprint();
  /**
   * <pre>
   * Cryptographic fingerprint of the ciphertext data. If compression is active, this is applied beforehand.
   * </pre>
   *
   * <code>.opencannabis.crypto.Hash fingerprint = 4;</code>
   */
  io.opencannabis.schema.crypto.primitives.integrity.HashOrBuilder getFingerprintOrBuilder();
}
