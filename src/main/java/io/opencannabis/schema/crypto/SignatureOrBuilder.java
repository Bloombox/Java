/*
 * Copyright 2018, Momentum Ideas, Co. All rights reserved.
 *
 * Source and object computer code contained herein is the private intellectual
 * property of Momentum Ideas Co., a Delaware Corporation. Use of this
 * code in source form requires permission in writing before use or the
 * assembly, distribution, or publishing of derivative works, for commercial
 * purposes or any other purpose, from a duly authorized officer of Momentum
 * Ideas Co.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crypto/Signature.proto

package io.opencannabis.schema.crypto;

public interface SignatureOrBuilder extends
    // @@protoc_insertion_point(interface_extends:opencannabis.crypto.Signature)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Public key fingerprint, or raw content of the public key, that performed the signing operation.
   * </pre>
   *
   * <code>.opencannabis.crypto.KeyMaterial public_key = 1;</code>
   */
  boolean hasPublicKey();
  /**
   * <pre>
   * Public key fingerprint, or raw content of the public key, that performed the signing operation.
   * </pre>
   *
   * <code>.opencannabis.crypto.KeyMaterial public_key = 1;</code>
   */
  io.opencannabis.schema.crypto.primitives.KeyMaterial getPublicKey();
  /**
   * <pre>
   * Public key fingerprint, or raw content of the public key, that performed the signing operation.
   * </pre>
   *
   * <code>.opencannabis.crypto.KeyMaterial public_key = 1;</code>
   */
  io.opencannabis.schema.crypto.primitives.KeyMaterialOrBuilder getPublicKeyOrBuilder();

  /**
   * <pre>
   * Cryptographic fingerprint of the subject data that was signed. This is the actual value that should be signed by
   * the private key and recomputed via the public key.
   * </pre>
   *
   * <code>.opencannabis.crypto.Hash fingerprint = 2;</code>
   */
  boolean hasFingerprint();
  /**
   * <pre>
   * Cryptographic fingerprint of the subject data that was signed. This is the actual value that should be signed by
   * the private key and recomputed via the public key.
   * </pre>
   *
   * <code>.opencannabis.crypto.Hash fingerprint = 2;</code>
   */
  io.opencannabis.schema.crypto.primitives.integrity.Hash getFingerprint();
  /**
   * <pre>
   * Cryptographic fingerprint of the subject data that was signed. This is the actual value that should be signed by
   * the private key and recomputed via the public key.
   * </pre>
   *
   * <code>.opencannabis.crypto.Hash fingerprint = 2;</code>
   */
  io.opencannabis.schema.crypto.primitives.integrity.HashOrBuilder getFingerprintOrBuilder();

  /**
   * <pre>
   * Raw bytes of the digital signature, performed over `fingerprint` by the private key corresponding to the
   * `public_key` listed in this request.
   * </pre>
   *
   * <code>bytes raw = 5;</code>
   */
  com.google.protobuf.ByteString getRaw();

  /**
   * <pre>
   * Base-64 encoded raw bytes of the digital signature, performed over `fingerprint` by the private key corresponding
   * to the `public_key` listed in this request.
   * </pre>
   *
   * <code>string b64 = 6;</code>
   */
  java.lang.String getB64();
  /**
   * <pre>
   * Base-64 encoded raw bytes of the digital signature, performed over `fingerprint` by the private key corresponding
   * to the `public_key` listed in this request.
   * </pre>
   *
   * <code>string b64 = 6;</code>
   */
  com.google.protobuf.ByteString
      getB64Bytes();

  /**
   * <pre>
   * Hex-encoded and uppercased raw bytes of the digital signature, performed over `fingerprint` by the private key
   * corresponding to the `public_key` listed in the request.
   * </pre>
   *
   * <code>string hex = 7;</code>
   */
  java.lang.String getHex();
  /**
   * <pre>
   * Hex-encoded and uppercased raw bytes of the digital signature, performed over `fingerprint` by the private key
   * corresponding to the `public_key` listed in the request.
   * </pre>
   *
   * <code>string hex = 7;</code>
   */
  com.google.protobuf.ByteString
      getHexBytes();

  public io.opencannabis.schema.crypto.Signature.SignatureCase getSignatureCase();
}
