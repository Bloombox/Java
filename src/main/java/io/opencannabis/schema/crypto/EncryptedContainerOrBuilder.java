/*
 * Copyright 2018, Momentum Ideas, Co. All rights reserved.
 *
 * Source and object computer code contained herein is the private intellectual
 * property of Momentum Ideas Co., a Delaware Corporation. Use of this
 * code in source form requires permission in writing before use or the
 * assembly, distribution, or publishing of derivative works, for commercial
 * purposes or any other purpose, from a duly authorized officer of Momentum
 * Ideas Co.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crypto/Container.proto

package io.opencannabis.schema.crypto;

public interface EncryptedContainerOrBuilder extends
    // @@protoc_insertion_point(interface_extends:opencannabis.crypto.EncryptedContainer)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Specifies the encrypted data payload, or, the content inside this encrypted container.
   * </pre>
   *
   * <code>.opencannabis.crypto.EncryptedData payload = 1;</code>
   */
  boolean hasPayload();
  /**
   * <pre>
   * Specifies the encrypted data payload, or, the content inside this encrypted container.
   * </pre>
   *
   * <code>.opencannabis.crypto.EncryptedData payload = 1;</code>
   */
  io.opencannabis.schema.crypto.EncryptedData getPayload();
  /**
   * <pre>
   * Specifies the encrypted data payload, or, the content inside this encrypted container.
   * </pre>
   *
   * <code>.opencannabis.crypto.EncryptedData payload = 1;</code>
   */
  io.opencannabis.schema.crypto.EncryptedDataOrBuilder getPayloadOrBuilder();

  /**
   * <pre>
   * Type of keying used to encrypt/decrypt this payload.
   * </pre>
   *
   * <code>.opencannabis.crypto.KeyType keying = 2;</code>
   */
  int getKeyingValue();
  /**
   * <pre>
   * Type of keying used to encrypt/decrypt this payload.
   * </pre>
   *
   * <code>.opencannabis.crypto.KeyType keying = 2;</code>
   */
  io.opencannabis.schema.crypto.primitives.KeyType getKeying();

  /**
   * <pre>
   * Initialization vector value for this container, if applicable according to the algorithm in use.
   * </pre>
   *
   * <code>.opencannabis.crypto.InitializationVector vector = 3;</code>
   */
  boolean hasVector();
  /**
   * <pre>
   * Initialization vector value for this container, if applicable according to the algorithm in use.
   * </pre>
   *
   * <code>.opencannabis.crypto.InitializationVector vector = 3;</code>
   */
  io.opencannabis.schema.crypto.primitives.InitializationVector getVector();
  /**
   * <pre>
   * Initialization vector value for this container, if applicable according to the algorithm in use.
   * </pre>
   *
   * <code>.opencannabis.crypto.InitializationVector vector = 3;</code>
   */
  io.opencannabis.schema.crypto.primitives.InitializationVectorOrBuilder getVectorOrBuilder();

  /**
   * <pre>
   * Specifies information regarding the key used to encrypt this container.
   * </pre>
   *
   * <code>.opencannabis.crypto.SymmetricKeyParameters key = 4;</code>
   */
  boolean hasKey();
  /**
   * <pre>
   * Specifies information regarding the key used to encrypt this container.
   * </pre>
   *
   * <code>.opencannabis.crypto.SymmetricKeyParameters key = 4;</code>
   */
  io.opencannabis.schema.crypto.primitives.SymmetricKeyParameters getKey();
  /**
   * <pre>
   * Specifies information regarding the key used to encrypt this container.
   * </pre>
   *
   * <code>.opencannabis.crypto.SymmetricKeyParameters key = 4;</code>
   */
  io.opencannabis.schema.crypto.primitives.SymmetricKeyParametersOrBuilder getKeyOrBuilder();

  /**
   * <pre>
   * Specifies information regarding the key pair used to encrypt this container.
   * </pre>
   *
   * <code>.opencannabis.crypto.AsymmetricKeypairParameters keypair = 5;</code>
   */
  boolean hasKeypair();
  /**
   * <pre>
   * Specifies information regarding the key pair used to encrypt this container.
   * </pre>
   *
   * <code>.opencannabis.crypto.AsymmetricKeypairParameters keypair = 5;</code>
   */
  io.opencannabis.schema.crypto.primitives.AsymmetricKeypairParameters getKeypair();
  /**
   * <pre>
   * Specifies information regarding the key pair used to encrypt this container.
   * </pre>
   *
   * <code>.opencannabis.crypto.AsymmetricKeypairParameters keypair = 5;</code>
   */
  io.opencannabis.schema.crypto.primitives.AsymmetricKeypairParametersOrBuilder getKeypairOrBuilder();

  public io.opencannabis.schema.crypto.EncryptedContainer.ParametersCase getParametersCase();
}
