/*
 * Copyright 2018, Momentum Ideas, Co. All rights reserved.
 *
 * Source and object computer code contained herein is the private intellectual
 * property of Momentum Ideas Co., a Delaware Corporation. Use of this
 * code in source form requires permission in writing before use or the
 * assembly, distribution, or publishing of derivative works, for commercial
 * purposes or any other purpose, from a duly authorized officer of Momentum
 * Ideas Co.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crypto/primitives/Keys.proto

package io.opencannabis.schema.crypto.primitives;

public interface KeyParametersOrBuilder extends
    // @@protoc_insertion_point(interface_extends:opencannabis.crypto.KeyParameters)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Algorithm in use to generate the key.
   * </pre>
   *
   * <code>string algorithm = 1;</code>
   */
  java.lang.String getAlgorithm();
  /**
   * <pre>
   * Algorithm in use to generate the key.
   * </pre>
   *
   * <code>string algorithm = 1;</code>
   */
  com.google.protobuf.ByteString
      getAlgorithmBytes();

  /**
   * <pre>
   * Format name for the key.
   * </pre>
   *
   * <code>string format = 2;</code>
   */
  java.lang.String getFormat();
  /**
   * <pre>
   * Format name for the key.
   * </pre>
   *
   * <code>string format = 2;</code>
   */
  com.google.protobuf.ByteString
      getFormatBytes();

  /**
   * <pre>
   * Key size, in bits, if applicable.
   * </pre>
   *
   * <code>uint32 bits = 3;</code>
   */
  int getBits();

  /**
   * <pre>
   * Type/architecture of the keys.
   * </pre>
   *
   * <code>.opencannabis.crypto.KeyType type = 4;</code>
   */
  int getTypeValue();
  /**
   * <pre>
   * Type/architecture of the keys.
   * </pre>
   *
   * <code>.opencannabis.crypto.KeyType type = 4;</code>
   */
  io.opencannabis.schema.crypto.primitives.KeyType getType();

  /**
   * <pre>
   * Disposition of the subject key (i.e. scope).
   * </pre>
   *
   * <code>.opencannabis.crypto.KeyDisposition disposition = 5;</code>
   */
  int getDispositionValue();
  /**
   * <pre>
   * Disposition of the subject key (i.e. scope).
   * </pre>
   *
   * <code>.opencannabis.crypto.KeyDisposition disposition = 5;</code>
   */
  io.opencannabis.schema.crypto.primitives.KeyDisposition getDisposition();

  /**
   * <pre>
   * Key type/keying scheme.
   * </pre>
   *
   * <code>.opencannabis.crypto.KeyingScheme scheme = 10;</code>
   */
  int getSchemeValue();
  /**
   * <pre>
   * Key type/keying scheme.
   * </pre>
   *
   * <code>.opencannabis.crypto.KeyingScheme scheme = 10;</code>
   */
  io.opencannabis.schema.crypto.primitives.KeyingScheme getScheme();

  /**
   * <pre>
   * Specifies parameters for symmetric keying.
   * </pre>
   *
   * <code>.opencannabis.crypto.SymmetricKeyParameters symmetric = 11;</code>
   */
  boolean hasSymmetric();
  /**
   * <pre>
   * Specifies parameters for symmetric keying.
   * </pre>
   *
   * <code>.opencannabis.crypto.SymmetricKeyParameters symmetric = 11;</code>
   */
  io.opencannabis.schema.crypto.primitives.SymmetricKeyParameters getSymmetric();
  /**
   * <pre>
   * Specifies parameters for symmetric keying.
   * </pre>
   *
   * <code>.opencannabis.crypto.SymmetricKeyParameters symmetric = 11;</code>
   */
  io.opencannabis.schema.crypto.primitives.SymmetricKeyParametersOrBuilder getSymmetricOrBuilder();

  public io.opencannabis.schema.crypto.primitives.KeyParameters.ArchitectureCase getArchitectureCase();
}
