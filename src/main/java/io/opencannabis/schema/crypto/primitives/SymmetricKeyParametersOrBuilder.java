/*
 * Copyright 2019, Momentum Ideas Co.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crypto/primitives/Keys.proto

package io.opencannabis.schema.crypto.primitives;

public interface SymmetricKeyParametersOrBuilder extends
    // @@protoc_insertion_point(interface_extends:opencannabis.crypto.SymmetricKeyParameters)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Specifies a stream cipher.
   * </pre>
   *
   * <code>.opencannabis.crypto.StreamCipher stream = 1;</code>
   */
  int getStreamValue();
  /**
   * <pre>
   * Specifies a stream cipher.
   * </pre>
   *
   * <code>.opencannabis.crypto.StreamCipher stream = 1;</code>
   */
  io.opencannabis.schema.crypto.primitives.StreamCipher getStream();

  /**
   * <pre>
   * Specifies a block cipher.
   * </pre>
   *
   * <code>.opencannabis.crypto.BlockCipherParameters block = 2;</code>
   */
  boolean hasBlock();
  /**
   * <pre>
   * Specifies a block cipher.
   * </pre>
   *
   * <code>.opencannabis.crypto.BlockCipherParameters block = 2;</code>
   */
  io.opencannabis.schema.crypto.primitives.BlockCipherParameters getBlock();
  /**
   * <pre>
   * Specifies a block cipher.
   * </pre>
   *
   * <code>.opencannabis.crypto.BlockCipherParameters block = 2;</code>
   */
  io.opencannabis.schema.crypto.primitives.BlockCipherParametersOrBuilder getBlockOrBuilder();

  public io.opencannabis.schema.crypto.primitives.SymmetricKeyParameters.CipherCase getCipherCase();
}
