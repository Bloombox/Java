/*
 * Copyright 2019, Momentum Ideas Co.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crypto/primitives/Keys.proto

package io.opencannabis.schema.crypto.primitives;

/**
 * <pre>
 * Specifies key material for a set (pair) of asymmetric keys, which is to say, a public and a private key. This
 * structure may be used to transmit both keys in full, or just a hash of the public key, depending on the fields that
 * are filled in or not when the object is constructed.
 * </pre>
 *
 * Protobuf type {@code opencannabis.crypto.Keypair}
 */
public  final class Keypair extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:opencannabis.crypto.Keypair)
    KeypairOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Keypair.newBuilder() to construct.
  private Keypair(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Keypair() {
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Keypair(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            io.opencannabis.schema.crypto.primitives.KeyMaterial.Builder subBuilder = null;
            if (public_ != null) {
              subBuilder = public_.toBuilder();
            }
            public_ = input.readMessage(io.opencannabis.schema.crypto.primitives.KeyMaterial.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(public_);
              public_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            io.opencannabis.schema.crypto.primitives.KeyMaterial.Builder subBuilder = null;
            if (private_ != null) {
              subBuilder = private_.toBuilder();
            }
            private_ = input.readMessage(io.opencannabis.schema.crypto.primitives.KeyMaterial.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(private_);
              private_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.opencannabis.schema.crypto.primitives.Keys.internal_static_opencannabis_crypto_Keypair_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.opencannabis.schema.crypto.primitives.Keys.internal_static_opencannabis_crypto_Keypair_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.opencannabis.schema.crypto.primitives.Keypair.class, io.opencannabis.schema.crypto.primitives.Keypair.Builder.class);
  }

  public static final int PUBLIC_FIELD_NUMBER = 1;
  private io.opencannabis.schema.crypto.primitives.KeyMaterial public_;
  /**
   * <pre>
   * Public key. In PKI, the public key can be used only to encrypt data.
   * </pre>
   *
   * <code>.opencannabis.crypto.KeyMaterial public = 1;</code>
   */
  public boolean hasPublic() {
    return public_ != null;
  }
  /**
   * <pre>
   * Public key. In PKI, the public key can be used only to encrypt data.
   * </pre>
   *
   * <code>.opencannabis.crypto.KeyMaterial public = 1;</code>
   */
  public io.opencannabis.schema.crypto.primitives.KeyMaterial getPublic() {
    return public_ == null ? io.opencannabis.schema.crypto.primitives.KeyMaterial.getDefaultInstance() : public_;
  }
  /**
   * <pre>
   * Public key. In PKI, the public key can be used only to encrypt data.
   * </pre>
   *
   * <code>.opencannabis.crypto.KeyMaterial public = 1;</code>
   */
  public io.opencannabis.schema.crypto.primitives.KeyMaterialOrBuilder getPublicOrBuilder() {
    return getPublic();
  }

  public static final int PRIVATE_FIELD_NUMBER = 2;
  private io.opencannabis.schema.crypto.primitives.KeyMaterial private_;
  /**
   * <pre>
   * Private key. In PKI, the private key can be used to encrypt or decrypt data.
   * </pre>
   *
   * <code>.opencannabis.crypto.KeyMaterial private = 2;</code>
   */
  public boolean hasPrivate() {
    return private_ != null;
  }
  /**
   * <pre>
   * Private key. In PKI, the private key can be used to encrypt or decrypt data.
   * </pre>
   *
   * <code>.opencannabis.crypto.KeyMaterial private = 2;</code>
   */
  public io.opencannabis.schema.crypto.primitives.KeyMaterial getPrivate() {
    return private_ == null ? io.opencannabis.schema.crypto.primitives.KeyMaterial.getDefaultInstance() : private_;
  }
  /**
   * <pre>
   * Private key. In PKI, the private key can be used to encrypt or decrypt data.
   * </pre>
   *
   * <code>.opencannabis.crypto.KeyMaterial private = 2;</code>
   */
  public io.opencannabis.schema.crypto.primitives.KeyMaterialOrBuilder getPrivateOrBuilder() {
    return getPrivate();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (public_ != null) {
      output.writeMessage(1, getPublic());
    }
    if (private_ != null) {
      output.writeMessage(2, getPrivate());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (public_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getPublic());
    }
    if (private_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getPrivate());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.opencannabis.schema.crypto.primitives.Keypair)) {
      return super.equals(obj);
    }
    io.opencannabis.schema.crypto.primitives.Keypair other = (io.opencannabis.schema.crypto.primitives.Keypair) obj;

    if (hasPublic() != other.hasPublic()) return false;
    if (hasPublic()) {
      if (!getPublic()
          .equals(other.getPublic())) return false;
    }
    if (hasPrivate() != other.hasPrivate()) return false;
    if (hasPrivate()) {
      if (!getPrivate()
          .equals(other.getPrivate())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasPublic()) {
      hash = (37 * hash) + PUBLIC_FIELD_NUMBER;
      hash = (53 * hash) + getPublic().hashCode();
    }
    if (hasPrivate()) {
      hash = (37 * hash) + PRIVATE_FIELD_NUMBER;
      hash = (53 * hash) + getPrivate().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.opencannabis.schema.crypto.primitives.Keypair parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.opencannabis.schema.crypto.primitives.Keypair parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.opencannabis.schema.crypto.primitives.Keypair parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.opencannabis.schema.crypto.primitives.Keypair parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.opencannabis.schema.crypto.primitives.Keypair parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.opencannabis.schema.crypto.primitives.Keypair parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.opencannabis.schema.crypto.primitives.Keypair parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.opencannabis.schema.crypto.primitives.Keypair parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.opencannabis.schema.crypto.primitives.Keypair parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.opencannabis.schema.crypto.primitives.Keypair parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.opencannabis.schema.crypto.primitives.Keypair parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.opencannabis.schema.crypto.primitives.Keypair parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.opencannabis.schema.crypto.primitives.Keypair prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Specifies key material for a set (pair) of asymmetric keys, which is to say, a public and a private key. This
   * structure may be used to transmit both keys in full, or just a hash of the public key, depending on the fields that
   * are filled in or not when the object is constructed.
   * </pre>
   *
   * Protobuf type {@code opencannabis.crypto.Keypair}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:opencannabis.crypto.Keypair)
      io.opencannabis.schema.crypto.primitives.KeypairOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.opencannabis.schema.crypto.primitives.Keys.internal_static_opencannabis_crypto_Keypair_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.opencannabis.schema.crypto.primitives.Keys.internal_static_opencannabis_crypto_Keypair_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.opencannabis.schema.crypto.primitives.Keypair.class, io.opencannabis.schema.crypto.primitives.Keypair.Builder.class);
    }

    // Construct using io.opencannabis.schema.crypto.primitives.Keypair.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (publicBuilder_ == null) {
        public_ = null;
      } else {
        public_ = null;
        publicBuilder_ = null;
      }
      if (privateBuilder_ == null) {
        private_ = null;
      } else {
        private_ = null;
        privateBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.opencannabis.schema.crypto.primitives.Keys.internal_static_opencannabis_crypto_Keypair_descriptor;
    }

    @java.lang.Override
    public io.opencannabis.schema.crypto.primitives.Keypair getDefaultInstanceForType() {
      return io.opencannabis.schema.crypto.primitives.Keypair.getDefaultInstance();
    }

    @java.lang.Override
    public io.opencannabis.schema.crypto.primitives.Keypair build() {
      io.opencannabis.schema.crypto.primitives.Keypair result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.opencannabis.schema.crypto.primitives.Keypair buildPartial() {
      io.opencannabis.schema.crypto.primitives.Keypair result = new io.opencannabis.schema.crypto.primitives.Keypair(this);
      if (publicBuilder_ == null) {
        result.public_ = public_;
      } else {
        result.public_ = publicBuilder_.build();
      }
      if (privateBuilder_ == null) {
        result.private_ = private_;
      } else {
        result.private_ = privateBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.opencannabis.schema.crypto.primitives.Keypair) {
        return mergeFrom((io.opencannabis.schema.crypto.primitives.Keypair)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.opencannabis.schema.crypto.primitives.Keypair other) {
      if (other == io.opencannabis.schema.crypto.primitives.Keypair.getDefaultInstance()) return this;
      if (other.hasPublic()) {
        mergePublic(other.getPublic());
      }
      if (other.hasPrivate()) {
        mergePrivate(other.getPrivate());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.opencannabis.schema.crypto.primitives.Keypair parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.opencannabis.schema.crypto.primitives.Keypair) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private io.opencannabis.schema.crypto.primitives.KeyMaterial public_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.opencannabis.schema.crypto.primitives.KeyMaterial, io.opencannabis.schema.crypto.primitives.KeyMaterial.Builder, io.opencannabis.schema.crypto.primitives.KeyMaterialOrBuilder> publicBuilder_;
    /**
     * <pre>
     * Public key. In PKI, the public key can be used only to encrypt data.
     * </pre>
     *
     * <code>.opencannabis.crypto.KeyMaterial public = 1;</code>
     */
    public boolean hasPublic() {
      return publicBuilder_ != null || public_ != null;
    }
    /**
     * <pre>
     * Public key. In PKI, the public key can be used only to encrypt data.
     * </pre>
     *
     * <code>.opencannabis.crypto.KeyMaterial public = 1;</code>
     */
    public io.opencannabis.schema.crypto.primitives.KeyMaterial getPublic() {
      if (publicBuilder_ == null) {
        return public_ == null ? io.opencannabis.schema.crypto.primitives.KeyMaterial.getDefaultInstance() : public_;
      } else {
        return publicBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Public key. In PKI, the public key can be used only to encrypt data.
     * </pre>
     *
     * <code>.opencannabis.crypto.KeyMaterial public = 1;</code>
     */
    public Builder setPublic(io.opencannabis.schema.crypto.primitives.KeyMaterial value) {
      if (publicBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        public_ = value;
        onChanged();
      } else {
        publicBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Public key. In PKI, the public key can be used only to encrypt data.
     * </pre>
     *
     * <code>.opencannabis.crypto.KeyMaterial public = 1;</code>
     */
    public Builder setPublic(
        io.opencannabis.schema.crypto.primitives.KeyMaterial.Builder builderForValue) {
      if (publicBuilder_ == null) {
        public_ = builderForValue.build();
        onChanged();
      } else {
        publicBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Public key. In PKI, the public key can be used only to encrypt data.
     * </pre>
     *
     * <code>.opencannabis.crypto.KeyMaterial public = 1;</code>
     */
    public Builder mergePublic(io.opencannabis.schema.crypto.primitives.KeyMaterial value) {
      if (publicBuilder_ == null) {
        if (public_ != null) {
          public_ =
            io.opencannabis.schema.crypto.primitives.KeyMaterial.newBuilder(public_).mergeFrom(value).buildPartial();
        } else {
          public_ = value;
        }
        onChanged();
      } else {
        publicBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Public key. In PKI, the public key can be used only to encrypt data.
     * </pre>
     *
     * <code>.opencannabis.crypto.KeyMaterial public = 1;</code>
     */
    public Builder clearPublic() {
      if (publicBuilder_ == null) {
        public_ = null;
        onChanged();
      } else {
        public_ = null;
        publicBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Public key. In PKI, the public key can be used only to encrypt data.
     * </pre>
     *
     * <code>.opencannabis.crypto.KeyMaterial public = 1;</code>
     */
    public io.opencannabis.schema.crypto.primitives.KeyMaterial.Builder getPublicBuilder() {
      
      onChanged();
      return getPublicFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Public key. In PKI, the public key can be used only to encrypt data.
     * </pre>
     *
     * <code>.opencannabis.crypto.KeyMaterial public = 1;</code>
     */
    public io.opencannabis.schema.crypto.primitives.KeyMaterialOrBuilder getPublicOrBuilder() {
      if (publicBuilder_ != null) {
        return publicBuilder_.getMessageOrBuilder();
      } else {
        return public_ == null ?
            io.opencannabis.schema.crypto.primitives.KeyMaterial.getDefaultInstance() : public_;
      }
    }
    /**
     * <pre>
     * Public key. In PKI, the public key can be used only to encrypt data.
     * </pre>
     *
     * <code>.opencannabis.crypto.KeyMaterial public = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.opencannabis.schema.crypto.primitives.KeyMaterial, io.opencannabis.schema.crypto.primitives.KeyMaterial.Builder, io.opencannabis.schema.crypto.primitives.KeyMaterialOrBuilder> 
        getPublicFieldBuilder() {
      if (publicBuilder_ == null) {
        publicBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.opencannabis.schema.crypto.primitives.KeyMaterial, io.opencannabis.schema.crypto.primitives.KeyMaterial.Builder, io.opencannabis.schema.crypto.primitives.KeyMaterialOrBuilder>(
                getPublic(),
                getParentForChildren(),
                isClean());
        public_ = null;
      }
      return publicBuilder_;
    }

    private io.opencannabis.schema.crypto.primitives.KeyMaterial private_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.opencannabis.schema.crypto.primitives.KeyMaterial, io.opencannabis.schema.crypto.primitives.KeyMaterial.Builder, io.opencannabis.schema.crypto.primitives.KeyMaterialOrBuilder> privateBuilder_;
    /**
     * <pre>
     * Private key. In PKI, the private key can be used to encrypt or decrypt data.
     * </pre>
     *
     * <code>.opencannabis.crypto.KeyMaterial private = 2;</code>
     */
    public boolean hasPrivate() {
      return privateBuilder_ != null || private_ != null;
    }
    /**
     * <pre>
     * Private key. In PKI, the private key can be used to encrypt or decrypt data.
     * </pre>
     *
     * <code>.opencannabis.crypto.KeyMaterial private = 2;</code>
     */
    public io.opencannabis.schema.crypto.primitives.KeyMaterial getPrivate() {
      if (privateBuilder_ == null) {
        return private_ == null ? io.opencannabis.schema.crypto.primitives.KeyMaterial.getDefaultInstance() : private_;
      } else {
        return privateBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Private key. In PKI, the private key can be used to encrypt or decrypt data.
     * </pre>
     *
     * <code>.opencannabis.crypto.KeyMaterial private = 2;</code>
     */
    public Builder setPrivate(io.opencannabis.schema.crypto.primitives.KeyMaterial value) {
      if (privateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        private_ = value;
        onChanged();
      } else {
        privateBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Private key. In PKI, the private key can be used to encrypt or decrypt data.
     * </pre>
     *
     * <code>.opencannabis.crypto.KeyMaterial private = 2;</code>
     */
    public Builder setPrivate(
        io.opencannabis.schema.crypto.primitives.KeyMaterial.Builder builderForValue) {
      if (privateBuilder_ == null) {
        private_ = builderForValue.build();
        onChanged();
      } else {
        privateBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Private key. In PKI, the private key can be used to encrypt or decrypt data.
     * </pre>
     *
     * <code>.opencannabis.crypto.KeyMaterial private = 2;</code>
     */
    public Builder mergePrivate(io.opencannabis.schema.crypto.primitives.KeyMaterial value) {
      if (privateBuilder_ == null) {
        if (private_ != null) {
          private_ =
            io.opencannabis.schema.crypto.primitives.KeyMaterial.newBuilder(private_).mergeFrom(value).buildPartial();
        } else {
          private_ = value;
        }
        onChanged();
      } else {
        privateBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Private key. In PKI, the private key can be used to encrypt or decrypt data.
     * </pre>
     *
     * <code>.opencannabis.crypto.KeyMaterial private = 2;</code>
     */
    public Builder clearPrivate() {
      if (privateBuilder_ == null) {
        private_ = null;
        onChanged();
      } else {
        private_ = null;
        privateBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Private key. In PKI, the private key can be used to encrypt or decrypt data.
     * </pre>
     *
     * <code>.opencannabis.crypto.KeyMaterial private = 2;</code>
     */
    public io.opencannabis.schema.crypto.primitives.KeyMaterial.Builder getPrivateBuilder() {
      
      onChanged();
      return getPrivateFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Private key. In PKI, the private key can be used to encrypt or decrypt data.
     * </pre>
     *
     * <code>.opencannabis.crypto.KeyMaterial private = 2;</code>
     */
    public io.opencannabis.schema.crypto.primitives.KeyMaterialOrBuilder getPrivateOrBuilder() {
      if (privateBuilder_ != null) {
        return privateBuilder_.getMessageOrBuilder();
      } else {
        return private_ == null ?
            io.opencannabis.schema.crypto.primitives.KeyMaterial.getDefaultInstance() : private_;
      }
    }
    /**
     * <pre>
     * Private key. In PKI, the private key can be used to encrypt or decrypt data.
     * </pre>
     *
     * <code>.opencannabis.crypto.KeyMaterial private = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.opencannabis.schema.crypto.primitives.KeyMaterial, io.opencannabis.schema.crypto.primitives.KeyMaterial.Builder, io.opencannabis.schema.crypto.primitives.KeyMaterialOrBuilder> 
        getPrivateFieldBuilder() {
      if (privateBuilder_ == null) {
        privateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.opencannabis.schema.crypto.primitives.KeyMaterial, io.opencannabis.schema.crypto.primitives.KeyMaterial.Builder, io.opencannabis.schema.crypto.primitives.KeyMaterialOrBuilder>(
                getPrivate(),
                getParentForChildren(),
                isClean());
        private_ = null;
      }
      return privateBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:opencannabis.crypto.Keypair)
  }

  // @@protoc_insertion_point(class_scope:opencannabis.crypto.Keypair)
  private static final io.opencannabis.schema.crypto.primitives.Keypair DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.opencannabis.schema.crypto.primitives.Keypair();
  }

  public static io.opencannabis.schema.crypto.primitives.Keypair getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Keypair>
      PARSER = new com.google.protobuf.AbstractParser<Keypair>() {
    @java.lang.Override
    public Keypair parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Keypair(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Keypair> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Keypair> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.opencannabis.schema.crypto.primitives.Keypair getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

