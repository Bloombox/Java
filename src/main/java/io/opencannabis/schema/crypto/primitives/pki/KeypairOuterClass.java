/*
 * Copyright 2018, Bloombox, LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crypto/primitives/Keypair.proto

package io.opencannabis.schema.crypto.primitives.pki;

public final class KeypairOuterClass {
  private KeypairOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_opencannabis_crypto_primitives_pki_KeyParameters_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_opencannabis_crypto_primitives_pki_KeyParameters_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_opencannabis_crypto_primitives_pki_KeyMaterial_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_opencannabis_crypto_primitives_pki_KeyMaterial_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_opencannabis_crypto_primitives_pki_Keypair_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_opencannabis_crypto_primitives_pki_Keypair_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\037crypto/primitives/Keypair.proto\022\"openc" +
      "annabis.crypto.primitives.pki\032!crypto/pr" +
      "imitives/Integrity.proto\"\202\001\n\rKeyParamete" +
      "rs\022@\n\006scheme\030\001 \001(\01620.opencannabis.crypto" +
      ".primitives.pki.KeyingScheme\022\021\n\talgorith" +
      "m\030\002 \001(\t\022\016\n\006format\030\003 \001(\t\022\014\n\004bits\030\004 \001(\r\"\273\001" +
      "\n\013KeyMaterial\022C\n\013fingerprint\030\001 \001(\0132..ope" +
      "ncannabis.crypto.primitives.integrity.Ha" +
      "sh\022A\n\006params\030\002 \001(\01321.opencannabis.crypto" +
      ".primitives.pki.KeyParameters\022\r\n\003raw\030\n \001" +
      "(\014H\000\022\r\n\003pem\030\013 \001(\tH\000B\006\n\004data\"\214\001\n\007Keypair\022" +
      "?\n\006public\030\001 \001(\0132/.opencannabis.crypto.pr" +
      "imitives.pki.KeyMaterial\022@\n\007private\030\002 \001(" +
      "\0132/.opencannabis.crypto.primitives.pki.K" +
      "eyMaterial*4\n\014KeyingScheme\022\007\n\003RSA\020\000\022\007\n\003E" +
      "CC\020\001\022\007\n\003DSA\020\002\022\t\n\005EdDSA\020\003B8\n,io.opencanna" +
      "bis.schema.crypto.primitives.pkiH\001P\001\242\002\003O" +
      "CSb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          io.opencannabis.schema.crypto.primitives.integrity.Integrity.getDescriptor(),
        }, assigner);
    internal_static_opencannabis_crypto_primitives_pki_KeyParameters_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_opencannabis_crypto_primitives_pki_KeyParameters_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_opencannabis_crypto_primitives_pki_KeyParameters_descriptor,
        new java.lang.String[] { "Scheme", "Algorithm", "Format", "Bits", });
    internal_static_opencannabis_crypto_primitives_pki_KeyMaterial_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_opencannabis_crypto_primitives_pki_KeyMaterial_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_opencannabis_crypto_primitives_pki_KeyMaterial_descriptor,
        new java.lang.String[] { "Fingerprint", "Params", "Raw", "Pem", "Data", });
    internal_static_opencannabis_crypto_primitives_pki_Keypair_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_opencannabis_crypto_primitives_pki_Keypair_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_opencannabis_crypto_primitives_pki_Keypair_descriptor,
        new java.lang.String[] { "Public", "Private", });
    io.opencannabis.schema.crypto.primitives.integrity.Integrity.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
