/*
 * Copyright 2018, Momentum Ideas, Co. All rights reserved.
 *
 * Source and object computer code contained herein is the private intellectual
 * property of Momentum Ideas Co., a Delaware Corporation. Use of this
 * code in source form requires permission in writing before use or the
 * assembly, distribution, or publishing of derivative works, for commercial
 * purposes or any other purpose, from a duly authorized officer of Momentum
 * Ideas Co.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crypto/primitives/Keys.proto

package io.opencannabis.schema.crypto.primitives;

/**
 * <pre>
 * Specifies symmetric keying-based systems' block cipher operating mode. Some ciphers only support a subset of the
 * operating modes defined herein.
 * </pre>
 *
 * Protobuf enum {@code opencannabis.crypto.BlockMode}
 */
public enum BlockMode
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Unspecified block cipher operation mode.
   * </pre>
   *
   * <code>UNSPECIFIED_BLOCK_MODE = 0;</code>
   */
  UNSPECIFIED_BLOCK_MODE(0),
  /**
   * <pre>
   * Electronic Code Book mode.
   * </pre>
   *
   * <code>ECB = 1;</code>
   */
  ECB(1),
  /**
   * <pre>
   * Cipher Block Chaining mode.
   * </pre>
   *
   * <code>CBC = 2;</code>
   */
  CBC(2),
  /**
   * <pre>
   * Cipher Feedback mode.
   * </pre>
   *
   * <code>CFB = 3;</code>
   */
  CFB(3),
  /**
   * <pre>
   * Output Feedback mode.
   * </pre>
   *
   * <code>OFB = 4;</code>
   */
  OFB(4),
  /**
   * <pre>
   * Counter mode.
   * </pre>
   *
   * <code>CTR = 5;</code>
   */
  CTR(5),
  /**
   * <pre>
   * Counter with CBC-MAC mode.
   * </pre>
   *
   * <code>CCM = 6;</code>
   */
  CCM(6),
  /**
   * <pre>
   * Galois Counter mode.
   * </pre>
   *
   * <code>GCM = 7;</code>
   */
  GCM(7),
  /**
   * <pre>
   * XEX with Ciphertext Stealing mode.
   * </pre>
   *
   * <code>XTS = 8;</code>
   */
  XTS(8),
  /**
   * <pre>
   * Key Wrap Padding mode.
   * </pre>
   *
   * <code>KWP = 9;</code>
   */
  KWP(9),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Unspecified block cipher operation mode.
   * </pre>
   *
   * <code>UNSPECIFIED_BLOCK_MODE = 0;</code>
   */
  public static final int UNSPECIFIED_BLOCK_MODE_VALUE = 0;
  /**
   * <pre>
   * Electronic Code Book mode.
   * </pre>
   *
   * <code>ECB = 1;</code>
   */
  public static final int ECB_VALUE = 1;
  /**
   * <pre>
   * Cipher Block Chaining mode.
   * </pre>
   *
   * <code>CBC = 2;</code>
   */
  public static final int CBC_VALUE = 2;
  /**
   * <pre>
   * Cipher Feedback mode.
   * </pre>
   *
   * <code>CFB = 3;</code>
   */
  public static final int CFB_VALUE = 3;
  /**
   * <pre>
   * Output Feedback mode.
   * </pre>
   *
   * <code>OFB = 4;</code>
   */
  public static final int OFB_VALUE = 4;
  /**
   * <pre>
   * Counter mode.
   * </pre>
   *
   * <code>CTR = 5;</code>
   */
  public static final int CTR_VALUE = 5;
  /**
   * <pre>
   * Counter with CBC-MAC mode.
   * </pre>
   *
   * <code>CCM = 6;</code>
   */
  public static final int CCM_VALUE = 6;
  /**
   * <pre>
   * Galois Counter mode.
   * </pre>
   *
   * <code>GCM = 7;</code>
   */
  public static final int GCM_VALUE = 7;
  /**
   * <pre>
   * XEX with Ciphertext Stealing mode.
   * </pre>
   *
   * <code>XTS = 8;</code>
   */
  public static final int XTS_VALUE = 8;
  /**
   * <pre>
   * Key Wrap Padding mode.
   * </pre>
   *
   * <code>KWP = 9;</code>
   */
  public static final int KWP_VALUE = 9;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static BlockMode valueOf(int value) {
    return forNumber(value);
  }

  public static BlockMode forNumber(int value) {
    switch (value) {
      case 0: return UNSPECIFIED_BLOCK_MODE;
      case 1: return ECB;
      case 2: return CBC;
      case 3: return CFB;
      case 4: return OFB;
      case 5: return CTR;
      case 6: return CCM;
      case 7: return GCM;
      case 8: return XTS;
      case 9: return KWP;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<BlockMode>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      BlockMode> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<BlockMode>() {
          public BlockMode findValueByNumber(int number) {
            return BlockMode.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return io.opencannabis.schema.crypto.primitives.Keys.getDescriptor().getEnumTypes().get(5);
  }

  private static final BlockMode[] VALUES = values();

  public static BlockMode valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private BlockMode(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:opencannabis.crypto.BlockMode)
}

