/*
 * Copyright 2018, Momentum Ideas, Co. All rights reserved.
 *
 * Source and object computer code contained herein is the private intellectual
 * property of Momentum Ideas Co., a Delaware Corporation. Use of this
 * code in source form requires permission in writing before use or the
 * assembly, distribution, or publishing of derivative works, for commercial
 * purposes or any other purpose, from a duly authorized officer of Momentum
 * Ideas Co.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crypto/Signature.proto

package io.opencannabis.schema.crypto;

public final class SignatureOuterClass {
  private SignatureOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_opencannabis_crypto_Signature_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_opencannabis_crypto_Signature_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\026crypto/Signature.proto\022\023opencannabis.c" +
      "rypto\032\034crypto/primitives/Keys.proto\032!cry" +
      "pto/primitives/Integrity.proto\"\253\001\n\tSigna" +
      "ture\0224\n\npublic_key\030\001 \001(\0132 .opencannabis." +
      "crypto.KeyMaterial\022.\n\013fingerprint\030\002 \001(\0132" +
      "\031.opencannabis.crypto.Hash\022\r\n\003raw\030\005 \001(\014H" +
      "\000\022\r\n\003b64\030\006 \001(\tH\000\022\r\n\003hex\030\007 \001(\tH\000B\013\n\tsigna" +
      "tureB)\n\035io.opencannabis.schema.cryptoH\001P" +
      "\001\242\002\003OCSb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          io.opencannabis.schema.crypto.primitives.Keys.getDescriptor(),
          io.opencannabis.schema.crypto.primitives.integrity.Integrity.getDescriptor(),
        }, assigner);
    internal_static_opencannabis_crypto_Signature_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_opencannabis_crypto_Signature_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_opencannabis_crypto_Signature_descriptor,
        new java.lang.String[] { "PublicKey", "Fingerprint", "Raw", "B64", "Hex", "Signature", });
    io.opencannabis.schema.crypto.primitives.Keys.getDescriptor();
    io.opencannabis.schema.crypto.primitives.integrity.Integrity.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
