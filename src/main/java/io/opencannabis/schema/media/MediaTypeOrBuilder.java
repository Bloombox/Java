// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: media/MediaType.proto

package io.opencannabis.schema.media;

public interface MediaTypeOrBuilder extends
    // @@protoc_insertion_point(interface_extends:opencannabis.media.MediaType)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Specifies the generic kind of media being described or attached.
   * </pre>
   *
   * <code>.opencannabis.media.MediaType.Kind kind = 1 [(.gen_bq_schema.description) = "Specifies the generic kind of media being described or attached."];</code>
   */
  int getKindValue();
  /**
   * <pre>
   * Specifies the generic kind of media being described or attached.
   * </pre>
   *
   * <code>.opencannabis.media.MediaType.Kind kind = 1 [(.gen_bq_schema.description) = "Specifies the generic kind of media being described or attached."];</code>
   */
  io.opencannabis.schema.media.MediaType.Kind getKind();

  /**
   * <pre>
   * Specifies content for an image-based media item.
   * </pre>
   *
   * <code>.opencannabis.media.ImageType image_type = 101 [(.gen_bq_schema.description) = "Specifies content for an image-based media item."];</code>
   */
  boolean hasImageType();
  /**
   * <pre>
   * Specifies content for an image-based media item.
   * </pre>
   *
   * <code>.opencannabis.media.ImageType image_type = 101 [(.gen_bq_schema.description) = "Specifies content for an image-based media item."];</code>
   */
  io.opencannabis.schema.media.ImageType getImageType();
  /**
   * <pre>
   * Specifies content for an image-based media item.
   * </pre>
   *
   * <code>.opencannabis.media.ImageType image_type = 101 [(.gen_bq_schema.description) = "Specifies content for an image-based media item."];</code>
   */
  io.opencannabis.schema.media.ImageTypeOrBuilder getImageTypeOrBuilder();

  /**
   * <pre>
   * Specifies content for a document-based media item.
   * </pre>
   *
   * <code>.opencannabis.media.DocumentType document_type = 201 [(.gen_bq_schema.description) = "Specifies content for a document-based media item."];</code>
   */
  boolean hasDocumentType();
  /**
   * <pre>
   * Specifies content for a document-based media item.
   * </pre>
   *
   * <code>.opencannabis.media.DocumentType document_type = 201 [(.gen_bq_schema.description) = "Specifies content for a document-based media item."];</code>
   */
  io.opencannabis.schema.media.DocumentType getDocumentType();
  /**
   * <pre>
   * Specifies content for a document-based media item.
   * </pre>
   *
   * <code>.opencannabis.media.DocumentType document_type = 201 [(.gen_bq_schema.description) = "Specifies content for a document-based media item."];</code>
   */
  io.opencannabis.schema.media.DocumentTypeOrBuilder getDocumentTypeOrBuilder();

  /**
   * <pre>
   * Specifies content for a video-based media item.
   * </pre>
   *
   * <code>.opencannabis.media.VideoType video_type = 301 [(.gen_bq_schema.description) = "Specifies content for a video-based media item."];</code>
   */
  boolean hasVideoType();
  /**
   * <pre>
   * Specifies content for a video-based media item.
   * </pre>
   *
   * <code>.opencannabis.media.VideoType video_type = 301 [(.gen_bq_schema.description) = "Specifies content for a video-based media item."];</code>
   */
  io.opencannabis.schema.media.VideoType getVideoType();
  /**
   * <pre>
   * Specifies content for a video-based media item.
   * </pre>
   *
   * <code>.opencannabis.media.VideoType video_type = 301 [(.gen_bq_schema.description) = "Specifies content for a video-based media item."];</code>
   */
  io.opencannabis.schema.media.VideoTypeOrBuilder getVideoTypeOrBuilder();

  public io.opencannabis.schema.media.MediaType.ContentCase getContentCase();
}
