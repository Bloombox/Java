/*
 * Copyright 2019, Momentum Ideas Co.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inventory/rfid/RFID.proto

package io.opencannabis.schema.inventory;

public interface TagOrBuilder extends
    // @@protoc_insertion_point(interface_extends:opencannabis.inventory.rfid.Tag)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Tag ID, assigned to the tag at manufacturing time and never over-written. Uniquely identifies this particular RFID
   * tag in a permanent, hard-to-reproduce manner.
   * </pre>
   *
   * <code>string tid = 1 [(.gen_bq_schema.description) = "Tag ID, assigned to the tag at manufacturing time and never over-written."];</code>
   */
  java.lang.String getTid();
  /**
   * <pre>
   * Tag ID, assigned to the tag at manufacturing time and never over-written. Uniquely identifies this particular RFID
   * tag in a permanent, hard-to-reproduce manner.
   * </pre>
   *
   * <code>string tid = 1 [(.gen_bq_schema.description) = "Tag ID, assigned to the tag at manufacturing time and never over-written."];</code>
   */
  com.google.protobuf.ByteString
      getTidBytes();

  /**
   * <pre>
   * Raw content encoded onto the tag. This payload is set to complement any decoded content payload which might be
   * available as a result of this scan.
   * </pre>
   *
   * <code>bytes payload = 2 [(.gen_bq_schema.ignore) = true, (.gen_bq_schema.description) = "Raw content encoded onto the tag."];</code>
   */
  com.google.protobuf.ByteString getPayload();

  /**
   * <pre>
   * EPC, or Electronic Product Code, which was read from the encoded data section of the subject RFID tag which we
   * are describing in this payload.
   * </pre>
   *
   * <code>string epc = 10 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Electronic Product Code (EPC) that was present on the tag."];</code>
   */
  java.lang.String getEpc();
  /**
   * <pre>
   * EPC, or Electronic Product Code, which was read from the encoded data section of the subject RFID tag which we
   * are describing in this payload.
   * </pre>
   *
   * <code>string epc = 10 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Electronic Product Code (EPC) that was present on the tag."];</code>
   */
  com.google.protobuf.ByteString
      getEpcBytes();

  public io.opencannabis.schema.inventory.Tag.ContentCase getContentCase();
}
