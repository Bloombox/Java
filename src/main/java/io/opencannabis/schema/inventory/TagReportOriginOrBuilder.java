/*
 * Copyright 2019, Momentum Ideas Co.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inventory/rfid/LLRP.proto

package io.opencannabis.schema.inventory;

public interface TagReportOriginOrBuilder extends
    // @@protoc_insertion_point(interface_extends:opencannabis.inventory.rfid.TagReportOrigin)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Describes the RFID reader/controller device which is reporting a tag. Readers control antennae, and emit read
   * events over LLRP to facilitate RF operations.
   * </pre>
   *
   * <code>.opencannabis.inventory.rfid.Reader reader = 1 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Describes info about the RFID reader device involved in a tag report."];</code>
   */
  boolean hasReader();
  /**
   * <pre>
   * Describes the RFID reader/controller device which is reporting a tag. Readers control antennae, and emit read
   * events over LLRP to facilitate RF operations.
   * </pre>
   *
   * <code>.opencannabis.inventory.rfid.Reader reader = 1 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Describes info about the RFID reader device involved in a tag report."];</code>
   */
  io.opencannabis.schema.inventory.Reader getReader();
  /**
   * <pre>
   * Describes the RFID reader/controller device which is reporting a tag. Readers control antennae, and emit read
   * events over LLRP to facilitate RF operations.
   * </pre>
   *
   * <code>.opencannabis.inventory.rfid.Reader reader = 1 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Describes info about the RFID reader device involved in a tag report."];</code>
   */
  io.opencannabis.schema.inventory.ReaderOrBuilder getReaderOrBuilder();

  /**
   * <pre>
   * Describes the partner account to which the reader device is assigned, if applicable, so that it may be reported to
   * telemetry or inventory systems along with the location at which the device is located.
   * </pre>
   *
   * <code>string partner = 2 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Describes the partner account to which the reader device is assigned."];</code>
   */
  java.lang.String getPartner();
  /**
   * <pre>
   * Describes the partner account to which the reader device is assigned, if applicable, so that it may be reported to
   * telemetry or inventory systems along with the location at which the device is located.
   * </pre>
   *
   * <code>string partner = 2 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Describes the partner account to which the reader device is assigned."];</code>
   */
  com.google.protobuf.ByteString
      getPartnerBytes();

  /**
   * <pre>
   * Describes the location account, owned by the partner account specified, where the RFID reader device is physically
   * located. Annotates RFID traffic with licensure/physical boundaries.
   * </pre>
   *
   * <code>string location = 3 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Describes the location, owned by the partner, where the RFID reader is located."];</code>
   */
  java.lang.String getLocation();
  /**
   * <pre>
   * Describes the location account, owned by the partner account specified, where the RFID reader device is physically
   * located. Annotates RFID traffic with licensure/physical boundaries.
   * </pre>
   *
   * <code>string location = 3 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Describes the location, owned by the partner, where the RFID reader is located."];</code>
   */
  com.google.protobuf.ByteString
      getLocationBytes();
}
