/*
 * Copyright 2019, Momentum Ideas Co.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inventory/rfid/LLRP.proto

package io.opencannabis.schema.inventory;

/**
 * <pre>
 * Describes the types of start triggers that can be applied to an `ROSpec`. These describe the ways an RFID reader may
 * trigger itself to begin scanning for tags.
 * </pre>
 *
 * Protobuf enum {@code opencannabis.inventory.rfid.StartTriggerType}
 */
public enum StartTriggerType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * No trigger condition is specified. The `ROSpec` will be triggered manually over LLRP.
   * </pre>
   *
   * <code>NO_START_TRIGGER = 0;</code>
   */
  NO_START_TRIGGER(0),
  /**
   * <pre>
   * Immediately trigger the `ROSpec` after installation.
   * </pre>
   *
   * <code>IMMEDIATE = 1;</code>
   */
  IMMEDIATE(1),
  /**
   * <pre>
   * Trigger the `ROSpec` periodically, on some time-based interval.
   * </pre>
   *
   * <code>PERIODIC = 2;</code>
   */
  PERIODIC(2),
  /**
   * <pre>
   * Trigger the `ROSpec` via hardware GPIO signals.
   * </pre>
   *
   * <code>GPIO_START = 3;</code>
   */
  GPIO_START(3),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * No trigger condition is specified. The `ROSpec` will be triggered manually over LLRP.
   * </pre>
   *
   * <code>NO_START_TRIGGER = 0;</code>
   */
  public static final int NO_START_TRIGGER_VALUE = 0;
  /**
   * <pre>
   * Immediately trigger the `ROSpec` after installation.
   * </pre>
   *
   * <code>IMMEDIATE = 1;</code>
   */
  public static final int IMMEDIATE_VALUE = 1;
  /**
   * <pre>
   * Trigger the `ROSpec` periodically, on some time-based interval.
   * </pre>
   *
   * <code>PERIODIC = 2;</code>
   */
  public static final int PERIODIC_VALUE = 2;
  /**
   * <pre>
   * Trigger the `ROSpec` via hardware GPIO signals.
   * </pre>
   *
   * <code>GPIO_START = 3;</code>
   */
  public static final int GPIO_START_VALUE = 3;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static StartTriggerType valueOf(int value) {
    return forNumber(value);
  }

  public static StartTriggerType forNumber(int value) {
    switch (value) {
      case 0: return NO_START_TRIGGER;
      case 1: return IMMEDIATE;
      case 2: return PERIODIC;
      case 3: return GPIO_START;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<StartTriggerType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      StartTriggerType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<StartTriggerType>() {
          public StartTriggerType findValueByNumber(int number) {
            return StartTriggerType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return io.opencannabis.schema.inventory.LLRP.getDescriptor().getEnumTypes().get(1);
  }

  private static final StartTriggerType[] VALUES = values();

  public static StartTriggerType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private StartTriggerType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:opencannabis.inventory.rfid.StartTriggerType)
}

