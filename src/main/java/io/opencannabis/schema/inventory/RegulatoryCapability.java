/*
 * Copyright 2019, Momentum Ideas Co.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inventory/rfid/LLRP.proto

package io.opencannabis.schema.inventory;

/**
 * <pre>
 * Describes available regulatory capabilities, each of which map to a jurisdiction or region, and relevant regulatory
 * agency in that region. RFID reader devices support one or more of these region/regulatory configuration profiles and
 * should apply the relevant profile when operating in that subject region.
 * </pre>
 *
 * Protobuf enum {@code opencannabis.inventory.rfid.RegulatoryCapability}
 */
public enum RegulatoryCapability
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * Unspecified regulatory region capability.
   * </pre>
   *
   * <code>UNSPECIFIED_REGULATORY_REGION = 0;</code>
   */
  UNSPECIFIED_REGULATORY_REGION(0),
  /**
   * <pre>
   * United States: Federal Communications Commission (FCC), Part 15.
   * </pre>
   *
   * <code>US_FCC = 1;</code>
   */
  US_FCC(1),
  /**
   * <pre>
   * ETSI standard 302-208.
   * </pre>
   *
   * <code>ETSI_302_208 = 2;</code>
   */
  ETSI_302_208(2),
  /**
   * <pre>
   * ETSI standard 300-220.
   * </pre>
   *
   * <code>ETSI_300_220 = 3;</code>
   */
  ETSI_300_220(3),
  /**
   * <pre>
   * Australia: LIPD 1W.
   * </pre>
   *
   * <code>AUSTRALIA_LIPD_1W = 4;</code>
   */
  AUSTRALIA_LIPD_1W(4),
  /**
   * <pre>
   * Australia: LIPD 4W.
   * </pre>
   *
   * <code>AUSTRALIA_LIPD_4W = 5;</code>
   */
  AUSTRALIA_LIPD_4W(5),
  /**
   * <pre>
   * Japan: ARIB Standard T89.
   * </pre>
   *
   * <code>JAPAN_ARIB_STD_T89 = 6;</code>
   */
  JAPAN_ARIB_STD_T89(6),
  /**
   * <pre>
   * Hong Kong: OFTA-1049.
   * </pre>
   *
   * <code>HONGKONG_OFTA_1049 = 7;</code>
   */
  HONGKONG_OFTA_1049(7),
  /**
   * <pre>
   * Taiwan: DGT-LP0002
   * </pre>
   *
   * <code>TAIWAN_DGT_LP0002 = 8;</code>
   */
  TAIWAN_DGT_LP0002(8),
  /**
   * <pre>
   * Korea: MIC Article 5-2
   * </pre>
   *
   * <code>KOREA_MIC_ARTICLE_5_2 = 9;</code>
   */
  KOREA_MIC_ARTICLE_5_2(9),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * Unspecified regulatory region capability.
   * </pre>
   *
   * <code>UNSPECIFIED_REGULATORY_REGION = 0;</code>
   */
  public static final int UNSPECIFIED_REGULATORY_REGION_VALUE = 0;
  /**
   * <pre>
   * United States: Federal Communications Commission (FCC), Part 15.
   * </pre>
   *
   * <code>US_FCC = 1;</code>
   */
  public static final int US_FCC_VALUE = 1;
  /**
   * <pre>
   * ETSI standard 302-208.
   * </pre>
   *
   * <code>ETSI_302_208 = 2;</code>
   */
  public static final int ETSI_302_208_VALUE = 2;
  /**
   * <pre>
   * ETSI standard 300-220.
   * </pre>
   *
   * <code>ETSI_300_220 = 3;</code>
   */
  public static final int ETSI_300_220_VALUE = 3;
  /**
   * <pre>
   * Australia: LIPD 1W.
   * </pre>
   *
   * <code>AUSTRALIA_LIPD_1W = 4;</code>
   */
  public static final int AUSTRALIA_LIPD_1W_VALUE = 4;
  /**
   * <pre>
   * Australia: LIPD 4W.
   * </pre>
   *
   * <code>AUSTRALIA_LIPD_4W = 5;</code>
   */
  public static final int AUSTRALIA_LIPD_4W_VALUE = 5;
  /**
   * <pre>
   * Japan: ARIB Standard T89.
   * </pre>
   *
   * <code>JAPAN_ARIB_STD_T89 = 6;</code>
   */
  public static final int JAPAN_ARIB_STD_T89_VALUE = 6;
  /**
   * <pre>
   * Hong Kong: OFTA-1049.
   * </pre>
   *
   * <code>HONGKONG_OFTA_1049 = 7;</code>
   */
  public static final int HONGKONG_OFTA_1049_VALUE = 7;
  /**
   * <pre>
   * Taiwan: DGT-LP0002
   * </pre>
   *
   * <code>TAIWAN_DGT_LP0002 = 8;</code>
   */
  public static final int TAIWAN_DGT_LP0002_VALUE = 8;
  /**
   * <pre>
   * Korea: MIC Article 5-2
   * </pre>
   *
   * <code>KOREA_MIC_ARTICLE_5_2 = 9;</code>
   */
  public static final int KOREA_MIC_ARTICLE_5_2_VALUE = 9;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static RegulatoryCapability valueOf(int value) {
    return forNumber(value);
  }

  public static RegulatoryCapability forNumber(int value) {
    switch (value) {
      case 0: return UNSPECIFIED_REGULATORY_REGION;
      case 1: return US_FCC;
      case 2: return ETSI_302_208;
      case 3: return ETSI_300_220;
      case 4: return AUSTRALIA_LIPD_1W;
      case 5: return AUSTRALIA_LIPD_4W;
      case 6: return JAPAN_ARIB_STD_T89;
      case 7: return HONGKONG_OFTA_1049;
      case 8: return TAIWAN_DGT_LP0002;
      case 9: return KOREA_MIC_ARTICLE_5_2;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<RegulatoryCapability>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      RegulatoryCapability> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<RegulatoryCapability>() {
          public RegulatoryCapability findValueByNumber(int number) {
            return RegulatoryCapability.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return io.opencannabis.schema.inventory.LLRP.getDescriptor().getEnumTypes().get(0);
  }

  private static final RegulatoryCapability[] VALUES = values();

  public static RegulatoryCapability valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private RegulatoryCapability(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:opencannabis.inventory.rfid.RegulatoryCapability)
}

