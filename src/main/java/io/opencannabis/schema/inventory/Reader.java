/*
 * Copyright 2019, Momentum Ideas Co.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inventory/rfid/RFID.proto

package io.opencannabis.schema.inventory;

/**
 * <pre>
 * Describes the notion of an RFID reader device, which manages one or more RFID antennae. RFID readers control the RF
 * scanning process, and correspond over LLRP with clients to facilitate reading RFID tags.
 * </pre>
 *
 * Protobuf type {@code opencannabis.inventory.rfid.Reader}
 */
public  final class Reader extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:opencannabis.inventory.rfid.Reader)
    ReaderOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Reader.newBuilder() to construct.
  private Reader(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Reader() {
    name_ = "";
    mac_ = "";
    ip_ = "";
    vendor_ = 0;
    model_ = 0;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Reader(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            java.lang.String s = input.readStringRequireUtf8();

            name_ = s;
            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();

            mac_ = s;
            break;
          }
          case 26: {
            java.lang.String s = input.readStringRequireUtf8();

            ip_ = s;
            break;
          }
          case 32: {
            int rawValue = input.readEnum();

            vendor_ = rawValue;
            break;
          }
          case 40: {
            int rawValue = input.readEnum();

            model_ = rawValue;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.opencannabis.schema.inventory.RFID.internal_static_opencannabis_inventory_rfid_Reader_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.opencannabis.schema.inventory.RFID.internal_static_opencannabis_inventory_rfid_Reader_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.opencannabis.schema.inventory.Reader.class, io.opencannabis.schema.inventory.Reader.Builder.class);
  }

  public static final int NAME_FIELD_NUMBER = 1;
  private volatile java.lang.Object name_;
  /**
   * <pre>
   * Specifies the string name of the reader, if one is assigned and could be detected.
   * </pre>
   *
   * <code>string name = 1 [(.gen_bq_schema.description) = "Canonical label/name for the reader device involved in an RFID operation."];</code>
   */
  public java.lang.String getName() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      name_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Specifies the string name of the reader, if one is assigned and could be detected.
   * </pre>
   *
   * <code>string name = 1 [(.gen_bq_schema.description) = "Canonical label/name for the reader device involved in an RFID operation."];</code>
   */
  public com.google.protobuf.ByteString
      getNameBytes() {
    java.lang.Object ref = name_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      name_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int MAC_FIELD_NUMBER = 2;
  private volatile java.lang.Object mac_;
  /**
   * <pre>
   * Specifies the MAC address of the reader device, assigned to the Ethernet/PoE port embedded on the device and hooked
   * into the local network.
   * </pre>
   *
   * <code>string mac = 2 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "MAC address of the reader device involved in an RFID operation."];</code>
   */
  public java.lang.String getMac() {
    java.lang.Object ref = mac_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      mac_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Specifies the MAC address of the reader device, assigned to the Ethernet/PoE port embedded on the device and hooked
   * into the local network.
   * </pre>
   *
   * <code>string mac = 2 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "MAC address of the reader device involved in an RFID operation."];</code>
   */
  public com.google.protobuf.ByteString
      getMacBytes() {
    java.lang.Object ref = mac_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      mac_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int IP_FIELD_NUMBER = 3;
  private volatile java.lang.Object ip_;
  /**
   * <pre>
   * Specifies the IP address of the reader device, where it can be connected to over LLRP, assuming no firewall or
   * security IDS/IPS interference.
   * </pre>
   *
   * <code>string ip = 3 [(.gen_bq_schema.description) = "IP address of the reader device involved in an RFID operation."];</code>
   */
  public java.lang.String getIp() {
    java.lang.Object ref = ip_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      ip_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Specifies the IP address of the reader device, where it can be connected to over LLRP, assuming no firewall or
   * security IDS/IPS interference.
   * </pre>
   *
   * <code>string ip = 3 [(.gen_bq_schema.description) = "IP address of the reader device involved in an RFID operation."];</code>
   */
  public com.google.protobuf.ByteString
      getIpBytes() {
    java.lang.Object ref = ip_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      ip_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int VENDOR_FIELD_NUMBER = 4;
  private int vendor_;
  /**
   * <pre>
   * Describes the vendor of the RFID reader controller, if one could be detected.
   * </pre>
   *
   * <code>.opencannabis.inventory.rfid.ReaderVendor vendor = 4 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Vendor for the reader involved in an RFID operation."];</code>
   */
  public int getVendorValue() {
    return vendor_;
  }
  /**
   * <pre>
   * Describes the vendor of the RFID reader controller, if one could be detected.
   * </pre>
   *
   * <code>.opencannabis.inventory.rfid.ReaderVendor vendor = 4 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Vendor for the reader involved in an RFID operation."];</code>
   */
  public io.opencannabis.schema.inventory.ReaderVendor getVendor() {
    @SuppressWarnings("deprecation")
    io.opencannabis.schema.inventory.ReaderVendor result = io.opencannabis.schema.inventory.ReaderVendor.valueOf(vendor_);
    return result == null ? io.opencannabis.schema.inventory.ReaderVendor.UNRECOGNIZED : result;
  }

  public static final int MODEL_FIELD_NUMBER = 5;
  private int model_;
  /**
   * <pre>
   * Describes the model of the RFID reader controller, if one could be detected.
   * </pre>
   *
   * <code>.opencannabis.inventory.rfid.ReaderModel model = 5 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Model of the reader involved in an RFID operation."];</code>
   */
  public int getModelValue() {
    return model_;
  }
  /**
   * <pre>
   * Describes the model of the RFID reader controller, if one could be detected.
   * </pre>
   *
   * <code>.opencannabis.inventory.rfid.ReaderModel model = 5 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Model of the reader involved in an RFID operation."];</code>
   */
  public io.opencannabis.schema.inventory.ReaderModel getModel() {
    @SuppressWarnings("deprecation")
    io.opencannabis.schema.inventory.ReaderModel result = io.opencannabis.schema.inventory.ReaderModel.valueOf(model_);
    return result == null ? io.opencannabis.schema.inventory.ReaderModel.UNRECOGNIZED : result;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!getNameBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
    }
    if (!getMacBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, mac_);
    }
    if (!getIpBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, ip_);
    }
    if (vendor_ != io.opencannabis.schema.inventory.ReaderVendor.UNRECOGNIZED_VENDOR.getNumber()) {
      output.writeEnum(4, vendor_);
    }
    if (model_ != io.opencannabis.schema.inventory.ReaderModel.UNRECOGNIZED_READER.getNumber()) {
      output.writeEnum(5, model_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!getNameBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
    }
    if (!getMacBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, mac_);
    }
    if (!getIpBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, ip_);
    }
    if (vendor_ != io.opencannabis.schema.inventory.ReaderVendor.UNRECOGNIZED_VENDOR.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(4, vendor_);
    }
    if (model_ != io.opencannabis.schema.inventory.ReaderModel.UNRECOGNIZED_READER.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(5, model_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.opencannabis.schema.inventory.Reader)) {
      return super.equals(obj);
    }
    io.opencannabis.schema.inventory.Reader other = (io.opencannabis.schema.inventory.Reader) obj;

    if (!getName()
        .equals(other.getName())) return false;
    if (!getMac()
        .equals(other.getMac())) return false;
    if (!getIp()
        .equals(other.getIp())) return false;
    if (vendor_ != other.vendor_) return false;
    if (model_ != other.model_) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + NAME_FIELD_NUMBER;
    hash = (53 * hash) + getName().hashCode();
    hash = (37 * hash) + MAC_FIELD_NUMBER;
    hash = (53 * hash) + getMac().hashCode();
    hash = (37 * hash) + IP_FIELD_NUMBER;
    hash = (53 * hash) + getIp().hashCode();
    hash = (37 * hash) + VENDOR_FIELD_NUMBER;
    hash = (53 * hash) + vendor_;
    hash = (37 * hash) + MODEL_FIELD_NUMBER;
    hash = (53 * hash) + model_;
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.opencannabis.schema.inventory.Reader parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.opencannabis.schema.inventory.Reader parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.opencannabis.schema.inventory.Reader parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.opencannabis.schema.inventory.Reader parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.opencannabis.schema.inventory.Reader parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.opencannabis.schema.inventory.Reader parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.opencannabis.schema.inventory.Reader parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.opencannabis.schema.inventory.Reader parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.opencannabis.schema.inventory.Reader parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.opencannabis.schema.inventory.Reader parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.opencannabis.schema.inventory.Reader parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.opencannabis.schema.inventory.Reader parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.opencannabis.schema.inventory.Reader prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Describes the notion of an RFID reader device, which manages one or more RFID antennae. RFID readers control the RF
   * scanning process, and correspond over LLRP with clients to facilitate reading RFID tags.
   * </pre>
   *
   * Protobuf type {@code opencannabis.inventory.rfid.Reader}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:opencannabis.inventory.rfid.Reader)
      io.opencannabis.schema.inventory.ReaderOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.opencannabis.schema.inventory.RFID.internal_static_opencannabis_inventory_rfid_Reader_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.opencannabis.schema.inventory.RFID.internal_static_opencannabis_inventory_rfid_Reader_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.opencannabis.schema.inventory.Reader.class, io.opencannabis.schema.inventory.Reader.Builder.class);
    }

    // Construct using io.opencannabis.schema.inventory.Reader.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      name_ = "";

      mac_ = "";

      ip_ = "";

      vendor_ = 0;

      model_ = 0;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.opencannabis.schema.inventory.RFID.internal_static_opencannabis_inventory_rfid_Reader_descriptor;
    }

    @java.lang.Override
    public io.opencannabis.schema.inventory.Reader getDefaultInstanceForType() {
      return io.opencannabis.schema.inventory.Reader.getDefaultInstance();
    }

    @java.lang.Override
    public io.opencannabis.schema.inventory.Reader build() {
      io.opencannabis.schema.inventory.Reader result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.opencannabis.schema.inventory.Reader buildPartial() {
      io.opencannabis.schema.inventory.Reader result = new io.opencannabis.schema.inventory.Reader(this);
      result.name_ = name_;
      result.mac_ = mac_;
      result.ip_ = ip_;
      result.vendor_ = vendor_;
      result.model_ = model_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.opencannabis.schema.inventory.Reader) {
        return mergeFrom((io.opencannabis.schema.inventory.Reader)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.opencannabis.schema.inventory.Reader other) {
      if (other == io.opencannabis.schema.inventory.Reader.getDefaultInstance()) return this;
      if (!other.getName().isEmpty()) {
        name_ = other.name_;
        onChanged();
      }
      if (!other.getMac().isEmpty()) {
        mac_ = other.mac_;
        onChanged();
      }
      if (!other.getIp().isEmpty()) {
        ip_ = other.ip_;
        onChanged();
      }
      if (other.vendor_ != 0) {
        setVendorValue(other.getVendorValue());
      }
      if (other.model_ != 0) {
        setModelValue(other.getModelValue());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.opencannabis.schema.inventory.Reader parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.opencannabis.schema.inventory.Reader) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private java.lang.Object name_ = "";
    /**
     * <pre>
     * Specifies the string name of the reader, if one is assigned and could be detected.
     * </pre>
     *
     * <code>string name = 1 [(.gen_bq_schema.description) = "Canonical label/name for the reader device involved in an RFID operation."];</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Specifies the string name of the reader, if one is assigned and could be detected.
     * </pre>
     *
     * <code>string name = 1 [(.gen_bq_schema.description) = "Canonical label/name for the reader device involved in an RFID operation."];</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Specifies the string name of the reader, if one is assigned and could be detected.
     * </pre>
     *
     * <code>string name = 1 [(.gen_bq_schema.description) = "Canonical label/name for the reader device involved in an RFID operation."];</code>
     */
    public Builder setName(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      name_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies the string name of the reader, if one is assigned and could be detected.
     * </pre>
     *
     * <code>string name = 1 [(.gen_bq_schema.description) = "Canonical label/name for the reader device involved in an RFID operation."];</code>
     */
    public Builder clearName() {
      
      name_ = getDefaultInstance().getName();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies the string name of the reader, if one is assigned and could be detected.
     * </pre>
     *
     * <code>string name = 1 [(.gen_bq_schema.description) = "Canonical label/name for the reader device involved in an RFID operation."];</code>
     */
    public Builder setNameBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      name_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object mac_ = "";
    /**
     * <pre>
     * Specifies the MAC address of the reader device, assigned to the Ethernet/PoE port embedded on the device and hooked
     * into the local network.
     * </pre>
     *
     * <code>string mac = 2 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "MAC address of the reader device involved in an RFID operation."];</code>
     */
    public java.lang.String getMac() {
      java.lang.Object ref = mac_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        mac_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Specifies the MAC address of the reader device, assigned to the Ethernet/PoE port embedded on the device and hooked
     * into the local network.
     * </pre>
     *
     * <code>string mac = 2 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "MAC address of the reader device involved in an RFID operation."];</code>
     */
    public com.google.protobuf.ByteString
        getMacBytes() {
      java.lang.Object ref = mac_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mac_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Specifies the MAC address of the reader device, assigned to the Ethernet/PoE port embedded on the device and hooked
     * into the local network.
     * </pre>
     *
     * <code>string mac = 2 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "MAC address of the reader device involved in an RFID operation."];</code>
     */
    public Builder setMac(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      mac_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies the MAC address of the reader device, assigned to the Ethernet/PoE port embedded on the device and hooked
     * into the local network.
     * </pre>
     *
     * <code>string mac = 2 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "MAC address of the reader device involved in an RFID operation."];</code>
     */
    public Builder clearMac() {
      
      mac_ = getDefaultInstance().getMac();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies the MAC address of the reader device, assigned to the Ethernet/PoE port embedded on the device and hooked
     * into the local network.
     * </pre>
     *
     * <code>string mac = 2 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "MAC address of the reader device involved in an RFID operation."];</code>
     */
    public Builder setMacBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      mac_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object ip_ = "";
    /**
     * <pre>
     * Specifies the IP address of the reader device, where it can be connected to over LLRP, assuming no firewall or
     * security IDS/IPS interference.
     * </pre>
     *
     * <code>string ip = 3 [(.gen_bq_schema.description) = "IP address of the reader device involved in an RFID operation."];</code>
     */
    public java.lang.String getIp() {
      java.lang.Object ref = ip_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        ip_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Specifies the IP address of the reader device, where it can be connected to over LLRP, assuming no firewall or
     * security IDS/IPS interference.
     * </pre>
     *
     * <code>string ip = 3 [(.gen_bq_schema.description) = "IP address of the reader device involved in an RFID operation."];</code>
     */
    public com.google.protobuf.ByteString
        getIpBytes() {
      java.lang.Object ref = ip_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        ip_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Specifies the IP address of the reader device, where it can be connected to over LLRP, assuming no firewall or
     * security IDS/IPS interference.
     * </pre>
     *
     * <code>string ip = 3 [(.gen_bq_schema.description) = "IP address of the reader device involved in an RFID operation."];</code>
     */
    public Builder setIp(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      ip_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies the IP address of the reader device, where it can be connected to over LLRP, assuming no firewall or
     * security IDS/IPS interference.
     * </pre>
     *
     * <code>string ip = 3 [(.gen_bq_schema.description) = "IP address of the reader device involved in an RFID operation."];</code>
     */
    public Builder clearIp() {
      
      ip_ = getDefaultInstance().getIp();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies the IP address of the reader device, where it can be connected to over LLRP, assuming no firewall or
     * security IDS/IPS interference.
     * </pre>
     *
     * <code>string ip = 3 [(.gen_bq_schema.description) = "IP address of the reader device involved in an RFID operation."];</code>
     */
    public Builder setIpBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      ip_ = value;
      onChanged();
      return this;
    }

    private int vendor_ = 0;
    /**
     * <pre>
     * Describes the vendor of the RFID reader controller, if one could be detected.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.ReaderVendor vendor = 4 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Vendor for the reader involved in an RFID operation."];</code>
     */
    public int getVendorValue() {
      return vendor_;
    }
    /**
     * <pre>
     * Describes the vendor of the RFID reader controller, if one could be detected.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.ReaderVendor vendor = 4 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Vendor for the reader involved in an RFID operation."];</code>
     */
    public Builder setVendorValue(int value) {
      vendor_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Describes the vendor of the RFID reader controller, if one could be detected.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.ReaderVendor vendor = 4 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Vendor for the reader involved in an RFID operation."];</code>
     */
    public io.opencannabis.schema.inventory.ReaderVendor getVendor() {
      @SuppressWarnings("deprecation")
      io.opencannabis.schema.inventory.ReaderVendor result = io.opencannabis.schema.inventory.ReaderVendor.valueOf(vendor_);
      return result == null ? io.opencannabis.schema.inventory.ReaderVendor.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Describes the vendor of the RFID reader controller, if one could be detected.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.ReaderVendor vendor = 4 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Vendor for the reader involved in an RFID operation."];</code>
     */
    public Builder setVendor(io.opencannabis.schema.inventory.ReaderVendor value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      vendor_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Describes the vendor of the RFID reader controller, if one could be detected.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.ReaderVendor vendor = 4 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Vendor for the reader involved in an RFID operation."];</code>
     */
    public Builder clearVendor() {
      
      vendor_ = 0;
      onChanged();
      return this;
    }

    private int model_ = 0;
    /**
     * <pre>
     * Describes the model of the RFID reader controller, if one could be detected.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.ReaderModel model = 5 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Model of the reader involved in an RFID operation."];</code>
     */
    public int getModelValue() {
      return model_;
    }
    /**
     * <pre>
     * Describes the model of the RFID reader controller, if one could be detected.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.ReaderModel model = 5 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Model of the reader involved in an RFID operation."];</code>
     */
    public Builder setModelValue(int value) {
      model_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Describes the model of the RFID reader controller, if one could be detected.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.ReaderModel model = 5 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Model of the reader involved in an RFID operation."];</code>
     */
    public io.opencannabis.schema.inventory.ReaderModel getModel() {
      @SuppressWarnings("deprecation")
      io.opencannabis.schema.inventory.ReaderModel result = io.opencannabis.schema.inventory.ReaderModel.valueOf(model_);
      return result == null ? io.opencannabis.schema.inventory.ReaderModel.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Describes the model of the RFID reader controller, if one could be detected.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.ReaderModel model = 5 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Model of the reader involved in an RFID operation."];</code>
     */
    public Builder setModel(io.opencannabis.schema.inventory.ReaderModel value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      model_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Describes the model of the RFID reader controller, if one could be detected.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.ReaderModel model = 5 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Model of the reader involved in an RFID operation."];</code>
     */
    public Builder clearModel() {
      
      model_ = 0;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:opencannabis.inventory.rfid.Reader)
  }

  // @@protoc_insertion_point(class_scope:opencannabis.inventory.rfid.Reader)
  private static final io.opencannabis.schema.inventory.Reader DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.opencannabis.schema.inventory.Reader();
  }

  public static io.opencannabis.schema.inventory.Reader getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Reader>
      PARSER = new com.google.protobuf.AbstractParser<Reader>() {
    @java.lang.Override
    public Reader parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Reader(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Reader> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Reader> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.opencannabis.schema.inventory.Reader getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

