/*
 * Copyright 2019, Momentum Ideas Co.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inventory/rfid/LLRP.proto

package io.opencannabis.schema.inventory;

public interface TagReportOrBuilder extends
    // @@protoc_insertion_point(interface_extends:opencannabis.inventory.rfid.TagReport)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Describes information about the antenna that reported a set of tags, if information about the antenna was requested
   * and made available by the reader.
   * </pre>
   *
   * <code>.opencannabis.inventory.rfid.Antenna antenna = 1 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Describes info, if available, about the RFID antenna involved in a tag report."];</code>
   */
  boolean hasAntenna();
  /**
   * <pre>
   * Describes information about the antenna that reported a set of tags, if information about the antenna was requested
   * and made available by the reader.
   * </pre>
   *
   * <code>.opencannabis.inventory.rfid.Antenna antenna = 1 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Describes info, if available, about the RFID antenna involved in a tag report."];</code>
   */
  io.opencannabis.schema.inventory.Antenna getAntenna();
  /**
   * <pre>
   * Describes information about the antenna that reported a set of tags, if information about the antenna was requested
   * and made available by the reader.
   * </pre>
   *
   * <code>.opencannabis.inventory.rfid.Antenna antenna = 1 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Describes info, if available, about the RFID antenna involved in a tag report."];</code>
   */
  io.opencannabis.schema.inventory.AntennaOrBuilder getAntennaOrBuilder();

  /**
   * <pre>
   * Specifies information about the tag that was detected in this event.
   * </pre>
   *
   * <code>.opencannabis.inventory.rfid.Tag tag = 2 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Specifies information about the tag that was detected in this event."];</code>
   */
  boolean hasTag();
  /**
   * <pre>
   * Specifies information about the tag that was detected in this event.
   * </pre>
   *
   * <code>.opencannabis.inventory.rfid.Tag tag = 2 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Specifies information about the tag that was detected in this event."];</code>
   */
  io.opencannabis.schema.inventory.Tag getTag();
  /**
   * <pre>
   * Specifies information about the tag that was detected in this event.
   * </pre>
   *
   * <code>.opencannabis.inventory.rfid.Tag tag = 2 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Specifies information about the tag that was detected in this event."];</code>
   */
  io.opencannabis.schema.inventory.TagOrBuilder getTagOrBuilder();

  /**
   * <pre>
   * Relative Signal Strength indicator value for this tag reading, which describes the relative strength of the signal
   * between the subject tag and the reader/antenna that attenuated with it.
   * </pre>
   *
   * <code>double rssi = 3 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Relative Signal Strength indicator value for this tag reading."];</code>
   */
  double getRssi();

  /**
   * <pre>
   * Timestamp describing when this tag was first seen by the RFID apparatus.
   * </pre>
   *
   * <code>.opencannabis.temporal.Instant first_seen = 4 [(.gen_bq_schema.require) = true, (.gen_bq_schema.type_override) = "TIMESTAMP", (.gen_bq_schema.description) = "Timestamp describing when this tag was first seen by the RFID apparatus."];</code>
   */
  boolean hasFirstSeen();
  /**
   * <pre>
   * Timestamp describing when this tag was first seen by the RFID apparatus.
   * </pre>
   *
   * <code>.opencannabis.temporal.Instant first_seen = 4 [(.gen_bq_schema.require) = true, (.gen_bq_schema.type_override) = "TIMESTAMP", (.gen_bq_schema.description) = "Timestamp describing when this tag was first seen by the RFID apparatus."];</code>
   */
  io.opencannabis.schema.temporal.TemporalInstant.Instant getFirstSeen();
  /**
   * <pre>
   * Timestamp describing when this tag was first seen by the RFID apparatus.
   * </pre>
   *
   * <code>.opencannabis.temporal.Instant first_seen = 4 [(.gen_bq_schema.require) = true, (.gen_bq_schema.type_override) = "TIMESTAMP", (.gen_bq_schema.description) = "Timestamp describing when this tag was first seen by the RFID apparatus."];</code>
   */
  io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getFirstSeenOrBuilder();

  /**
   * <pre>
   * Timestamp describing the last moment this tag was seen by the RFID apparatus.
   * </pre>
   *
   * <code>.opencannabis.temporal.Instant last_seen = 5 [(.gen_bq_schema.require) = true, (.gen_bq_schema.type_override) = "TIMESTAMP", (.gen_bq_schema.description) = "Timestamp describing the last moment this tag was seen by the RFID apparatus."];</code>
   */
  boolean hasLastSeen();
  /**
   * <pre>
   * Timestamp describing the last moment this tag was seen by the RFID apparatus.
   * </pre>
   *
   * <code>.opencannabis.temporal.Instant last_seen = 5 [(.gen_bq_schema.require) = true, (.gen_bq_schema.type_override) = "TIMESTAMP", (.gen_bq_schema.description) = "Timestamp describing the last moment this tag was seen by the RFID apparatus."];</code>
   */
  io.opencannabis.schema.temporal.TemporalInstant.Instant getLastSeen();
  /**
   * <pre>
   * Timestamp describing the last moment this tag was seen by the RFID apparatus.
   * </pre>
   *
   * <code>.opencannabis.temporal.Instant last_seen = 5 [(.gen_bq_schema.require) = true, (.gen_bq_schema.type_override) = "TIMESTAMP", (.gen_bq_schema.description) = "Timestamp describing the last moment this tag was seen by the RFID apparatus."];</code>
   */
  io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getLastSeenOrBuilder();

  /**
   * <pre>
   * Timestamp describing when the edge engine received this reading event.
   * </pre>
   *
   * <code>.opencannabis.temporal.Instant received = 6 [(.gen_bq_schema.require) = true, (.gen_bq_schema.type_override) = "TIMESTAMP", (.gen_bq_schema.description) = "Timestamp describing when the edge engine received this reading event."];</code>
   */
  boolean hasReceived();
  /**
   * <pre>
   * Timestamp describing when the edge engine received this reading event.
   * </pre>
   *
   * <code>.opencannabis.temporal.Instant received = 6 [(.gen_bq_schema.require) = true, (.gen_bq_schema.type_override) = "TIMESTAMP", (.gen_bq_schema.description) = "Timestamp describing when the edge engine received this reading event."];</code>
   */
  io.opencannabis.schema.temporal.TemporalInstant.Instant getReceived();
  /**
   * <pre>
   * Timestamp describing when the edge engine received this reading event.
   * </pre>
   *
   * <code>.opencannabis.temporal.Instant received = 6 [(.gen_bq_schema.require) = true, (.gen_bq_schema.type_override) = "TIMESTAMP", (.gen_bq_schema.description) = "Timestamp describing when the edge engine received this reading event."];</code>
   */
  io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getReceivedOrBuilder();

  /**
   * <pre>
   * Describes the count of tags read at the same moment, or in the same tag report, as this tag reading.
   * </pre>
   *
   * <code>uint32 peers = 7 [(.gen_bq_schema.description) = "Describes the count of tags read at the same moment, or in the same tag report."];</code>
   */
  int getPeers();
}
