/*
 * Copyright 2019, Momentum Ideas Co.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inventory/rfid/LLRP.proto

package io.opencannabis.schema.inventory;

/**
 * <pre>
 * Describes a configuration profile that applies settings to an RFID reader and set of connected antennae. `ROSpec`
 * objects correspond with objects in the LLRP spec that control RFID boundary triggers, tag reporting configuration,
 * and other aspects of the RF scanning process.
 * </pre>
 *
 * Protobuf type {@code opencannabis.inventory.rfid.ROSpec}
 */
public  final class ROSpec extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:opencannabis.inventory.rfid.ROSpec)
    ROSpecOrBuilder {
private static final long serialVersionUID = 0L;
  // Use ROSpec.newBuilder() to construct.
  private ROSpec(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private ROSpec() {
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private ROSpec(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {

            id_ = input.readUInt32();
            break;
          }
          case 16: {

            priority_ = input.readUInt32();
            break;
          }
          case 26: {
            io.opencannabis.schema.inventory.BoundaryConfig.Builder subBuilder = null;
            if (boundary_ != null) {
              subBuilder = boundary_.toBuilder();
            }
            boundary_ = input.readMessage(io.opencannabis.schema.inventory.BoundaryConfig.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(boundary_);
              boundary_ = subBuilder.buildPartial();
            }

            break;
          }
          case 34: {
            io.opencannabis.schema.inventory.ReportingConfig.Builder subBuilder = null;
            if (reporting_ != null) {
              subBuilder = reporting_.toBuilder();
            }
            reporting_ = input.readMessage(io.opencannabis.schema.inventory.ReportingConfig.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(reporting_);
              reporting_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.opencannabis.schema.inventory.LLRP.internal_static_opencannabis_inventory_rfid_ROSpec_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.opencannabis.schema.inventory.LLRP.internal_static_opencannabis_inventory_rfid_ROSpec_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.opencannabis.schema.inventory.ROSpec.class, io.opencannabis.schema.inventory.ROSpec.Builder.class);
  }

  public static final int ID_FIELD_NUMBER = 1;
  private int id_;
  /**
   * <pre>
   * Unique ID assigned to reference this `ROSpec`.
   * </pre>
   *
   * <code>uint32 id = 1;</code>
   */
  public int getId() {
    return id_;
  }

  public static final int PRIORITY_FIELD_NUMBER = 2;
  private int priority_;
  /**
   * <pre>
   * Priority value this `ROSpec` should assume.
   * </pre>
   *
   * <code>uint32 priority = 2;</code>
   */
  public int getPriority() {
    return priority_;
  }

  public static final int BOUNDARY_FIELD_NUMBER = 3;
  private io.opencannabis.schema.inventory.BoundaryConfig boundary_;
  /**
   * <pre>
   * Configuration of triggering, and scanning, boundaries. Start and stop boundaries define when to start scanning and
   * for how long, or how to know when to stop.
   * </pre>
   *
   * <code>.opencannabis.inventory.rfid.BoundaryConfig boundary = 3;</code>
   */
  public boolean hasBoundary() {
    return boundary_ != null;
  }
  /**
   * <pre>
   * Configuration of triggering, and scanning, boundaries. Start and stop boundaries define when to start scanning and
   * for how long, or how to know when to stop.
   * </pre>
   *
   * <code>.opencannabis.inventory.rfid.BoundaryConfig boundary = 3;</code>
   */
  public io.opencannabis.schema.inventory.BoundaryConfig getBoundary() {
    return boundary_ == null ? io.opencannabis.schema.inventory.BoundaryConfig.getDefaultInstance() : boundary_;
  }
  /**
   * <pre>
   * Configuration of triggering, and scanning, boundaries. Start and stop boundaries define when to start scanning and
   * for how long, or how to know when to stop.
   * </pre>
   *
   * <code>.opencannabis.inventory.rfid.BoundaryConfig boundary = 3;</code>
   */
  public io.opencannabis.schema.inventory.BoundaryConfigOrBuilder getBoundaryOrBuilder() {
    return getBoundary();
  }

  public static final int REPORTING_FIELD_NUMBER = 4;
  private io.opencannabis.schema.inventory.ReportingConfig reporting_;
  /**
   * <pre>
   * Reporting settings, that describe what should be reported back for each RFID tag detected within the subject
   * reader's RFID range. This may include RSSI, antenna number, and more.
   * </pre>
   *
   * <code>.opencannabis.inventory.rfid.ReportingConfig reporting = 4;</code>
   */
  public boolean hasReporting() {
    return reporting_ != null;
  }
  /**
   * <pre>
   * Reporting settings, that describe what should be reported back for each RFID tag detected within the subject
   * reader's RFID range. This may include RSSI, antenna number, and more.
   * </pre>
   *
   * <code>.opencannabis.inventory.rfid.ReportingConfig reporting = 4;</code>
   */
  public io.opencannabis.schema.inventory.ReportingConfig getReporting() {
    return reporting_ == null ? io.opencannabis.schema.inventory.ReportingConfig.getDefaultInstance() : reporting_;
  }
  /**
   * <pre>
   * Reporting settings, that describe what should be reported back for each RFID tag detected within the subject
   * reader's RFID range. This may include RSSI, antenna number, and more.
   * </pre>
   *
   * <code>.opencannabis.inventory.rfid.ReportingConfig reporting = 4;</code>
   */
  public io.opencannabis.schema.inventory.ReportingConfigOrBuilder getReportingOrBuilder() {
    return getReporting();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (id_ != 0) {
      output.writeUInt32(1, id_);
    }
    if (priority_ != 0) {
      output.writeUInt32(2, priority_);
    }
    if (boundary_ != null) {
      output.writeMessage(3, getBoundary());
    }
    if (reporting_ != null) {
      output.writeMessage(4, getReporting());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (id_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(1, id_);
    }
    if (priority_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(2, priority_);
    }
    if (boundary_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getBoundary());
    }
    if (reporting_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getReporting());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.opencannabis.schema.inventory.ROSpec)) {
      return super.equals(obj);
    }
    io.opencannabis.schema.inventory.ROSpec other = (io.opencannabis.schema.inventory.ROSpec) obj;

    if (getId()
        != other.getId()) return false;
    if (getPriority()
        != other.getPriority()) return false;
    if (hasBoundary() != other.hasBoundary()) return false;
    if (hasBoundary()) {
      if (!getBoundary()
          .equals(other.getBoundary())) return false;
    }
    if (hasReporting() != other.hasReporting()) return false;
    if (hasReporting()) {
      if (!getReporting()
          .equals(other.getReporting())) return false;
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + ID_FIELD_NUMBER;
    hash = (53 * hash) + getId();
    hash = (37 * hash) + PRIORITY_FIELD_NUMBER;
    hash = (53 * hash) + getPriority();
    if (hasBoundary()) {
      hash = (37 * hash) + BOUNDARY_FIELD_NUMBER;
      hash = (53 * hash) + getBoundary().hashCode();
    }
    if (hasReporting()) {
      hash = (37 * hash) + REPORTING_FIELD_NUMBER;
      hash = (53 * hash) + getReporting().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.opencannabis.schema.inventory.ROSpec parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.opencannabis.schema.inventory.ROSpec parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.opencannabis.schema.inventory.ROSpec parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.opencannabis.schema.inventory.ROSpec parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.opencannabis.schema.inventory.ROSpec parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.opencannabis.schema.inventory.ROSpec parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.opencannabis.schema.inventory.ROSpec parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.opencannabis.schema.inventory.ROSpec parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.opencannabis.schema.inventory.ROSpec parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.opencannabis.schema.inventory.ROSpec parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.opencannabis.schema.inventory.ROSpec parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.opencannabis.schema.inventory.ROSpec parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.opencannabis.schema.inventory.ROSpec prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Describes a configuration profile that applies settings to an RFID reader and set of connected antennae. `ROSpec`
   * objects correspond with objects in the LLRP spec that control RFID boundary triggers, tag reporting configuration,
   * and other aspects of the RF scanning process.
   * </pre>
   *
   * Protobuf type {@code opencannabis.inventory.rfid.ROSpec}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:opencannabis.inventory.rfid.ROSpec)
      io.opencannabis.schema.inventory.ROSpecOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.opencannabis.schema.inventory.LLRP.internal_static_opencannabis_inventory_rfid_ROSpec_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.opencannabis.schema.inventory.LLRP.internal_static_opencannabis_inventory_rfid_ROSpec_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.opencannabis.schema.inventory.ROSpec.class, io.opencannabis.schema.inventory.ROSpec.Builder.class);
    }

    // Construct using io.opencannabis.schema.inventory.ROSpec.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      id_ = 0;

      priority_ = 0;

      if (boundaryBuilder_ == null) {
        boundary_ = null;
      } else {
        boundary_ = null;
        boundaryBuilder_ = null;
      }
      if (reportingBuilder_ == null) {
        reporting_ = null;
      } else {
        reporting_ = null;
        reportingBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.opencannabis.schema.inventory.LLRP.internal_static_opencannabis_inventory_rfid_ROSpec_descriptor;
    }

    @java.lang.Override
    public io.opencannabis.schema.inventory.ROSpec getDefaultInstanceForType() {
      return io.opencannabis.schema.inventory.ROSpec.getDefaultInstance();
    }

    @java.lang.Override
    public io.opencannabis.schema.inventory.ROSpec build() {
      io.opencannabis.schema.inventory.ROSpec result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.opencannabis.schema.inventory.ROSpec buildPartial() {
      io.opencannabis.schema.inventory.ROSpec result = new io.opencannabis.schema.inventory.ROSpec(this);
      result.id_ = id_;
      result.priority_ = priority_;
      if (boundaryBuilder_ == null) {
        result.boundary_ = boundary_;
      } else {
        result.boundary_ = boundaryBuilder_.build();
      }
      if (reportingBuilder_ == null) {
        result.reporting_ = reporting_;
      } else {
        result.reporting_ = reportingBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.opencannabis.schema.inventory.ROSpec) {
        return mergeFrom((io.opencannabis.schema.inventory.ROSpec)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.opencannabis.schema.inventory.ROSpec other) {
      if (other == io.opencannabis.schema.inventory.ROSpec.getDefaultInstance()) return this;
      if (other.getId() != 0) {
        setId(other.getId());
      }
      if (other.getPriority() != 0) {
        setPriority(other.getPriority());
      }
      if (other.hasBoundary()) {
        mergeBoundary(other.getBoundary());
      }
      if (other.hasReporting()) {
        mergeReporting(other.getReporting());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.opencannabis.schema.inventory.ROSpec parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.opencannabis.schema.inventory.ROSpec) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private int id_ ;
    /**
     * <pre>
     * Unique ID assigned to reference this `ROSpec`.
     * </pre>
     *
     * <code>uint32 id = 1;</code>
     */
    public int getId() {
      return id_;
    }
    /**
     * <pre>
     * Unique ID assigned to reference this `ROSpec`.
     * </pre>
     *
     * <code>uint32 id = 1;</code>
     */
    public Builder setId(int value) {
      
      id_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Unique ID assigned to reference this `ROSpec`.
     * </pre>
     *
     * <code>uint32 id = 1;</code>
     */
    public Builder clearId() {
      
      id_ = 0;
      onChanged();
      return this;
    }

    private int priority_ ;
    /**
     * <pre>
     * Priority value this `ROSpec` should assume.
     * </pre>
     *
     * <code>uint32 priority = 2;</code>
     */
    public int getPriority() {
      return priority_;
    }
    /**
     * <pre>
     * Priority value this `ROSpec` should assume.
     * </pre>
     *
     * <code>uint32 priority = 2;</code>
     */
    public Builder setPriority(int value) {
      
      priority_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Priority value this `ROSpec` should assume.
     * </pre>
     *
     * <code>uint32 priority = 2;</code>
     */
    public Builder clearPriority() {
      
      priority_ = 0;
      onChanged();
      return this;
    }

    private io.opencannabis.schema.inventory.BoundaryConfig boundary_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.opencannabis.schema.inventory.BoundaryConfig, io.opencannabis.schema.inventory.BoundaryConfig.Builder, io.opencannabis.schema.inventory.BoundaryConfigOrBuilder> boundaryBuilder_;
    /**
     * <pre>
     * Configuration of triggering, and scanning, boundaries. Start and stop boundaries define when to start scanning and
     * for how long, or how to know when to stop.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.BoundaryConfig boundary = 3;</code>
     */
    public boolean hasBoundary() {
      return boundaryBuilder_ != null || boundary_ != null;
    }
    /**
     * <pre>
     * Configuration of triggering, and scanning, boundaries. Start and stop boundaries define when to start scanning and
     * for how long, or how to know when to stop.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.BoundaryConfig boundary = 3;</code>
     */
    public io.opencannabis.schema.inventory.BoundaryConfig getBoundary() {
      if (boundaryBuilder_ == null) {
        return boundary_ == null ? io.opencannabis.schema.inventory.BoundaryConfig.getDefaultInstance() : boundary_;
      } else {
        return boundaryBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Configuration of triggering, and scanning, boundaries. Start and stop boundaries define when to start scanning and
     * for how long, or how to know when to stop.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.BoundaryConfig boundary = 3;</code>
     */
    public Builder setBoundary(io.opencannabis.schema.inventory.BoundaryConfig value) {
      if (boundaryBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        boundary_ = value;
        onChanged();
      } else {
        boundaryBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Configuration of triggering, and scanning, boundaries. Start and stop boundaries define when to start scanning and
     * for how long, or how to know when to stop.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.BoundaryConfig boundary = 3;</code>
     */
    public Builder setBoundary(
        io.opencannabis.schema.inventory.BoundaryConfig.Builder builderForValue) {
      if (boundaryBuilder_ == null) {
        boundary_ = builderForValue.build();
        onChanged();
      } else {
        boundaryBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Configuration of triggering, and scanning, boundaries. Start and stop boundaries define when to start scanning and
     * for how long, or how to know when to stop.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.BoundaryConfig boundary = 3;</code>
     */
    public Builder mergeBoundary(io.opencannabis.schema.inventory.BoundaryConfig value) {
      if (boundaryBuilder_ == null) {
        if (boundary_ != null) {
          boundary_ =
            io.opencannabis.schema.inventory.BoundaryConfig.newBuilder(boundary_).mergeFrom(value).buildPartial();
        } else {
          boundary_ = value;
        }
        onChanged();
      } else {
        boundaryBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Configuration of triggering, and scanning, boundaries. Start and stop boundaries define when to start scanning and
     * for how long, or how to know when to stop.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.BoundaryConfig boundary = 3;</code>
     */
    public Builder clearBoundary() {
      if (boundaryBuilder_ == null) {
        boundary_ = null;
        onChanged();
      } else {
        boundary_ = null;
        boundaryBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Configuration of triggering, and scanning, boundaries. Start and stop boundaries define when to start scanning and
     * for how long, or how to know when to stop.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.BoundaryConfig boundary = 3;</code>
     */
    public io.opencannabis.schema.inventory.BoundaryConfig.Builder getBoundaryBuilder() {
      
      onChanged();
      return getBoundaryFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Configuration of triggering, and scanning, boundaries. Start and stop boundaries define when to start scanning and
     * for how long, or how to know when to stop.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.BoundaryConfig boundary = 3;</code>
     */
    public io.opencannabis.schema.inventory.BoundaryConfigOrBuilder getBoundaryOrBuilder() {
      if (boundaryBuilder_ != null) {
        return boundaryBuilder_.getMessageOrBuilder();
      } else {
        return boundary_ == null ?
            io.opencannabis.schema.inventory.BoundaryConfig.getDefaultInstance() : boundary_;
      }
    }
    /**
     * <pre>
     * Configuration of triggering, and scanning, boundaries. Start and stop boundaries define when to start scanning and
     * for how long, or how to know when to stop.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.BoundaryConfig boundary = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.opencannabis.schema.inventory.BoundaryConfig, io.opencannabis.schema.inventory.BoundaryConfig.Builder, io.opencannabis.schema.inventory.BoundaryConfigOrBuilder> 
        getBoundaryFieldBuilder() {
      if (boundaryBuilder_ == null) {
        boundaryBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.opencannabis.schema.inventory.BoundaryConfig, io.opencannabis.schema.inventory.BoundaryConfig.Builder, io.opencannabis.schema.inventory.BoundaryConfigOrBuilder>(
                getBoundary(),
                getParentForChildren(),
                isClean());
        boundary_ = null;
      }
      return boundaryBuilder_;
    }

    private io.opencannabis.schema.inventory.ReportingConfig reporting_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.opencannabis.schema.inventory.ReportingConfig, io.opencannabis.schema.inventory.ReportingConfig.Builder, io.opencannabis.schema.inventory.ReportingConfigOrBuilder> reportingBuilder_;
    /**
     * <pre>
     * Reporting settings, that describe what should be reported back for each RFID tag detected within the subject
     * reader's RFID range. This may include RSSI, antenna number, and more.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.ReportingConfig reporting = 4;</code>
     */
    public boolean hasReporting() {
      return reportingBuilder_ != null || reporting_ != null;
    }
    /**
     * <pre>
     * Reporting settings, that describe what should be reported back for each RFID tag detected within the subject
     * reader's RFID range. This may include RSSI, antenna number, and more.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.ReportingConfig reporting = 4;</code>
     */
    public io.opencannabis.schema.inventory.ReportingConfig getReporting() {
      if (reportingBuilder_ == null) {
        return reporting_ == null ? io.opencannabis.schema.inventory.ReportingConfig.getDefaultInstance() : reporting_;
      } else {
        return reportingBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Reporting settings, that describe what should be reported back for each RFID tag detected within the subject
     * reader's RFID range. This may include RSSI, antenna number, and more.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.ReportingConfig reporting = 4;</code>
     */
    public Builder setReporting(io.opencannabis.schema.inventory.ReportingConfig value) {
      if (reportingBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        reporting_ = value;
        onChanged();
      } else {
        reportingBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Reporting settings, that describe what should be reported back for each RFID tag detected within the subject
     * reader's RFID range. This may include RSSI, antenna number, and more.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.ReportingConfig reporting = 4;</code>
     */
    public Builder setReporting(
        io.opencannabis.schema.inventory.ReportingConfig.Builder builderForValue) {
      if (reportingBuilder_ == null) {
        reporting_ = builderForValue.build();
        onChanged();
      } else {
        reportingBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Reporting settings, that describe what should be reported back for each RFID tag detected within the subject
     * reader's RFID range. This may include RSSI, antenna number, and more.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.ReportingConfig reporting = 4;</code>
     */
    public Builder mergeReporting(io.opencannabis.schema.inventory.ReportingConfig value) {
      if (reportingBuilder_ == null) {
        if (reporting_ != null) {
          reporting_ =
            io.opencannabis.schema.inventory.ReportingConfig.newBuilder(reporting_).mergeFrom(value).buildPartial();
        } else {
          reporting_ = value;
        }
        onChanged();
      } else {
        reportingBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Reporting settings, that describe what should be reported back for each RFID tag detected within the subject
     * reader's RFID range. This may include RSSI, antenna number, and more.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.ReportingConfig reporting = 4;</code>
     */
    public Builder clearReporting() {
      if (reportingBuilder_ == null) {
        reporting_ = null;
        onChanged();
      } else {
        reporting_ = null;
        reportingBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Reporting settings, that describe what should be reported back for each RFID tag detected within the subject
     * reader's RFID range. This may include RSSI, antenna number, and more.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.ReportingConfig reporting = 4;</code>
     */
    public io.opencannabis.schema.inventory.ReportingConfig.Builder getReportingBuilder() {
      
      onChanged();
      return getReportingFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Reporting settings, that describe what should be reported back for each RFID tag detected within the subject
     * reader's RFID range. This may include RSSI, antenna number, and more.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.ReportingConfig reporting = 4;</code>
     */
    public io.opencannabis.schema.inventory.ReportingConfigOrBuilder getReportingOrBuilder() {
      if (reportingBuilder_ != null) {
        return reportingBuilder_.getMessageOrBuilder();
      } else {
        return reporting_ == null ?
            io.opencannabis.schema.inventory.ReportingConfig.getDefaultInstance() : reporting_;
      }
    }
    /**
     * <pre>
     * Reporting settings, that describe what should be reported back for each RFID tag detected within the subject
     * reader's RFID range. This may include RSSI, antenna number, and more.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.ReportingConfig reporting = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.opencannabis.schema.inventory.ReportingConfig, io.opencannabis.schema.inventory.ReportingConfig.Builder, io.opencannabis.schema.inventory.ReportingConfigOrBuilder> 
        getReportingFieldBuilder() {
      if (reportingBuilder_ == null) {
        reportingBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.opencannabis.schema.inventory.ReportingConfig, io.opencannabis.schema.inventory.ReportingConfig.Builder, io.opencannabis.schema.inventory.ReportingConfigOrBuilder>(
                getReporting(),
                getParentForChildren(),
                isClean());
        reporting_ = null;
      }
      return reportingBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:opencannabis.inventory.rfid.ROSpec)
  }

  // @@protoc_insertion_point(class_scope:opencannabis.inventory.rfid.ROSpec)
  private static final io.opencannabis.schema.inventory.ROSpec DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.opencannabis.schema.inventory.ROSpec();
  }

  public static io.opencannabis.schema.inventory.ROSpec getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ROSpec>
      PARSER = new com.google.protobuf.AbstractParser<ROSpec>() {
    @java.lang.Override
    public ROSpec parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new ROSpec(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<ROSpec> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ROSpec> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.opencannabis.schema.inventory.ROSpec getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

