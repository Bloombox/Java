/*
 * Copyright 2019, Momentum Ideas Co.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inventory/rfid/LLRP.proto

package io.opencannabis.schema.inventory;

/**
 * <pre>
 * Specifies where a given tag report came from. This would usually include information about the RFID reader that
 * emitted the tag report, potentially including an antenna index.
 * </pre>
 *
 * Protobuf type {@code opencannabis.inventory.rfid.TagReportOrigin}
 */
public  final class TagReportOrigin extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:opencannabis.inventory.rfid.TagReportOrigin)
    TagReportOriginOrBuilder {
private static final long serialVersionUID = 0L;
  // Use TagReportOrigin.newBuilder() to construct.
  private TagReportOrigin(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private TagReportOrigin() {
    partner_ = "";
    location_ = "";
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private TagReportOrigin(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            io.opencannabis.schema.inventory.Reader.Builder subBuilder = null;
            if (reader_ != null) {
              subBuilder = reader_.toBuilder();
            }
            reader_ = input.readMessage(io.opencannabis.schema.inventory.Reader.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(reader_);
              reader_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();

            partner_ = s;
            break;
          }
          case 26: {
            java.lang.String s = input.readStringRequireUtf8();

            location_ = s;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.opencannabis.schema.inventory.LLRP.internal_static_opencannabis_inventory_rfid_TagReportOrigin_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.opencannabis.schema.inventory.LLRP.internal_static_opencannabis_inventory_rfid_TagReportOrigin_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.opencannabis.schema.inventory.TagReportOrigin.class, io.opencannabis.schema.inventory.TagReportOrigin.Builder.class);
  }

  public static final int READER_FIELD_NUMBER = 1;
  private io.opencannabis.schema.inventory.Reader reader_;
  /**
   * <pre>
   * Describes the RFID reader/controller device which is reporting a tag. Readers control antennae, and emit read
   * events over LLRP to facilitate RF operations.
   * </pre>
   *
   * <code>.opencannabis.inventory.rfid.Reader reader = 1 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Describes info about the RFID reader device involved in a tag report."];</code>
   */
  public boolean hasReader() {
    return reader_ != null;
  }
  /**
   * <pre>
   * Describes the RFID reader/controller device which is reporting a tag. Readers control antennae, and emit read
   * events over LLRP to facilitate RF operations.
   * </pre>
   *
   * <code>.opencannabis.inventory.rfid.Reader reader = 1 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Describes info about the RFID reader device involved in a tag report."];</code>
   */
  public io.opencannabis.schema.inventory.Reader getReader() {
    return reader_ == null ? io.opencannabis.schema.inventory.Reader.getDefaultInstance() : reader_;
  }
  /**
   * <pre>
   * Describes the RFID reader/controller device which is reporting a tag. Readers control antennae, and emit read
   * events over LLRP to facilitate RF operations.
   * </pre>
   *
   * <code>.opencannabis.inventory.rfid.Reader reader = 1 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Describes info about the RFID reader device involved in a tag report."];</code>
   */
  public io.opencannabis.schema.inventory.ReaderOrBuilder getReaderOrBuilder() {
    return getReader();
  }

  public static final int PARTNER_FIELD_NUMBER = 2;
  private volatile java.lang.Object partner_;
  /**
   * <pre>
   * Describes the partner account to which the reader device is assigned, if applicable, so that it may be reported to
   * telemetry or inventory systems along with the location at which the device is located.
   * </pre>
   *
   * <code>string partner = 2 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Describes the partner account to which the reader device is assigned."];</code>
   */
  public java.lang.String getPartner() {
    java.lang.Object ref = partner_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      partner_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Describes the partner account to which the reader device is assigned, if applicable, so that it may be reported to
   * telemetry or inventory systems along with the location at which the device is located.
   * </pre>
   *
   * <code>string partner = 2 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Describes the partner account to which the reader device is assigned."];</code>
   */
  public com.google.protobuf.ByteString
      getPartnerBytes() {
    java.lang.Object ref = partner_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      partner_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int LOCATION_FIELD_NUMBER = 3;
  private volatile java.lang.Object location_;
  /**
   * <pre>
   * Describes the location account, owned by the partner account specified, where the RFID reader device is physically
   * located. Annotates RFID traffic with licensure/physical boundaries.
   * </pre>
   *
   * <code>string location = 3 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Describes the location, owned by the partner, where the RFID reader is located."];</code>
   */
  public java.lang.String getLocation() {
    java.lang.Object ref = location_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      location_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Describes the location account, owned by the partner account specified, where the RFID reader device is physically
   * located. Annotates RFID traffic with licensure/physical boundaries.
   * </pre>
   *
   * <code>string location = 3 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Describes the location, owned by the partner, where the RFID reader is located."];</code>
   */
  public com.google.protobuf.ByteString
      getLocationBytes() {
    java.lang.Object ref = location_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      location_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (reader_ != null) {
      output.writeMessage(1, getReader());
    }
    if (!getPartnerBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, partner_);
    }
    if (!getLocationBytes().isEmpty()) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 3, location_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (reader_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getReader());
    }
    if (!getPartnerBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, partner_);
    }
    if (!getLocationBytes().isEmpty()) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, location_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.opencannabis.schema.inventory.TagReportOrigin)) {
      return super.equals(obj);
    }
    io.opencannabis.schema.inventory.TagReportOrigin other = (io.opencannabis.schema.inventory.TagReportOrigin) obj;

    if (hasReader() != other.hasReader()) return false;
    if (hasReader()) {
      if (!getReader()
          .equals(other.getReader())) return false;
    }
    if (!getPartner()
        .equals(other.getPartner())) return false;
    if (!getLocation()
        .equals(other.getLocation())) return false;
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasReader()) {
      hash = (37 * hash) + READER_FIELD_NUMBER;
      hash = (53 * hash) + getReader().hashCode();
    }
    hash = (37 * hash) + PARTNER_FIELD_NUMBER;
    hash = (53 * hash) + getPartner().hashCode();
    hash = (37 * hash) + LOCATION_FIELD_NUMBER;
    hash = (53 * hash) + getLocation().hashCode();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.opencannabis.schema.inventory.TagReportOrigin parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.opencannabis.schema.inventory.TagReportOrigin parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.opencannabis.schema.inventory.TagReportOrigin parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.opencannabis.schema.inventory.TagReportOrigin parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.opencannabis.schema.inventory.TagReportOrigin parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.opencannabis.schema.inventory.TagReportOrigin parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.opencannabis.schema.inventory.TagReportOrigin parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.opencannabis.schema.inventory.TagReportOrigin parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.opencannabis.schema.inventory.TagReportOrigin parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.opencannabis.schema.inventory.TagReportOrigin parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.opencannabis.schema.inventory.TagReportOrigin parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.opencannabis.schema.inventory.TagReportOrigin parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.opencannabis.schema.inventory.TagReportOrigin prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Specifies where a given tag report came from. This would usually include information about the RFID reader that
   * emitted the tag report, potentially including an antenna index.
   * </pre>
   *
   * Protobuf type {@code opencannabis.inventory.rfid.TagReportOrigin}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:opencannabis.inventory.rfid.TagReportOrigin)
      io.opencannabis.schema.inventory.TagReportOriginOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.opencannabis.schema.inventory.LLRP.internal_static_opencannabis_inventory_rfid_TagReportOrigin_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.opencannabis.schema.inventory.LLRP.internal_static_opencannabis_inventory_rfid_TagReportOrigin_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.opencannabis.schema.inventory.TagReportOrigin.class, io.opencannabis.schema.inventory.TagReportOrigin.Builder.class);
    }

    // Construct using io.opencannabis.schema.inventory.TagReportOrigin.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (readerBuilder_ == null) {
        reader_ = null;
      } else {
        reader_ = null;
        readerBuilder_ = null;
      }
      partner_ = "";

      location_ = "";

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.opencannabis.schema.inventory.LLRP.internal_static_opencannabis_inventory_rfid_TagReportOrigin_descriptor;
    }

    @java.lang.Override
    public io.opencannabis.schema.inventory.TagReportOrigin getDefaultInstanceForType() {
      return io.opencannabis.schema.inventory.TagReportOrigin.getDefaultInstance();
    }

    @java.lang.Override
    public io.opencannabis.schema.inventory.TagReportOrigin build() {
      io.opencannabis.schema.inventory.TagReportOrigin result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.opencannabis.schema.inventory.TagReportOrigin buildPartial() {
      io.opencannabis.schema.inventory.TagReportOrigin result = new io.opencannabis.schema.inventory.TagReportOrigin(this);
      if (readerBuilder_ == null) {
        result.reader_ = reader_;
      } else {
        result.reader_ = readerBuilder_.build();
      }
      result.partner_ = partner_;
      result.location_ = location_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.opencannabis.schema.inventory.TagReportOrigin) {
        return mergeFrom((io.opencannabis.schema.inventory.TagReportOrigin)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.opencannabis.schema.inventory.TagReportOrigin other) {
      if (other == io.opencannabis.schema.inventory.TagReportOrigin.getDefaultInstance()) return this;
      if (other.hasReader()) {
        mergeReader(other.getReader());
      }
      if (!other.getPartner().isEmpty()) {
        partner_ = other.partner_;
        onChanged();
      }
      if (!other.getLocation().isEmpty()) {
        location_ = other.location_;
        onChanged();
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.opencannabis.schema.inventory.TagReportOrigin parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.opencannabis.schema.inventory.TagReportOrigin) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private io.opencannabis.schema.inventory.Reader reader_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.opencannabis.schema.inventory.Reader, io.opencannabis.schema.inventory.Reader.Builder, io.opencannabis.schema.inventory.ReaderOrBuilder> readerBuilder_;
    /**
     * <pre>
     * Describes the RFID reader/controller device which is reporting a tag. Readers control antennae, and emit read
     * events over LLRP to facilitate RF operations.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.Reader reader = 1 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Describes info about the RFID reader device involved in a tag report."];</code>
     */
    public boolean hasReader() {
      return readerBuilder_ != null || reader_ != null;
    }
    /**
     * <pre>
     * Describes the RFID reader/controller device which is reporting a tag. Readers control antennae, and emit read
     * events over LLRP to facilitate RF operations.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.Reader reader = 1 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Describes info about the RFID reader device involved in a tag report."];</code>
     */
    public io.opencannabis.schema.inventory.Reader getReader() {
      if (readerBuilder_ == null) {
        return reader_ == null ? io.opencannabis.schema.inventory.Reader.getDefaultInstance() : reader_;
      } else {
        return readerBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Describes the RFID reader/controller device which is reporting a tag. Readers control antennae, and emit read
     * events over LLRP to facilitate RF operations.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.Reader reader = 1 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Describes info about the RFID reader device involved in a tag report."];</code>
     */
    public Builder setReader(io.opencannabis.schema.inventory.Reader value) {
      if (readerBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        reader_ = value;
        onChanged();
      } else {
        readerBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Describes the RFID reader/controller device which is reporting a tag. Readers control antennae, and emit read
     * events over LLRP to facilitate RF operations.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.Reader reader = 1 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Describes info about the RFID reader device involved in a tag report."];</code>
     */
    public Builder setReader(
        io.opencannabis.schema.inventory.Reader.Builder builderForValue) {
      if (readerBuilder_ == null) {
        reader_ = builderForValue.build();
        onChanged();
      } else {
        readerBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Describes the RFID reader/controller device which is reporting a tag. Readers control antennae, and emit read
     * events over LLRP to facilitate RF operations.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.Reader reader = 1 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Describes info about the RFID reader device involved in a tag report."];</code>
     */
    public Builder mergeReader(io.opencannabis.schema.inventory.Reader value) {
      if (readerBuilder_ == null) {
        if (reader_ != null) {
          reader_ =
            io.opencannabis.schema.inventory.Reader.newBuilder(reader_).mergeFrom(value).buildPartial();
        } else {
          reader_ = value;
        }
        onChanged();
      } else {
        readerBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Describes the RFID reader/controller device which is reporting a tag. Readers control antennae, and emit read
     * events over LLRP to facilitate RF operations.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.Reader reader = 1 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Describes info about the RFID reader device involved in a tag report."];</code>
     */
    public Builder clearReader() {
      if (readerBuilder_ == null) {
        reader_ = null;
        onChanged();
      } else {
        reader_ = null;
        readerBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Describes the RFID reader/controller device which is reporting a tag. Readers control antennae, and emit read
     * events over LLRP to facilitate RF operations.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.Reader reader = 1 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Describes info about the RFID reader device involved in a tag report."];</code>
     */
    public io.opencannabis.schema.inventory.Reader.Builder getReaderBuilder() {
      
      onChanged();
      return getReaderFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Describes the RFID reader/controller device which is reporting a tag. Readers control antennae, and emit read
     * events over LLRP to facilitate RF operations.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.Reader reader = 1 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Describes info about the RFID reader device involved in a tag report."];</code>
     */
    public io.opencannabis.schema.inventory.ReaderOrBuilder getReaderOrBuilder() {
      if (readerBuilder_ != null) {
        return readerBuilder_.getMessageOrBuilder();
      } else {
        return reader_ == null ?
            io.opencannabis.schema.inventory.Reader.getDefaultInstance() : reader_;
      }
    }
    /**
     * <pre>
     * Describes the RFID reader/controller device which is reporting a tag. Readers control antennae, and emit read
     * events over LLRP to facilitate RF operations.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.Reader reader = 1 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Describes info about the RFID reader device involved in a tag report."];</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.opencannabis.schema.inventory.Reader, io.opencannabis.schema.inventory.Reader.Builder, io.opencannabis.schema.inventory.ReaderOrBuilder> 
        getReaderFieldBuilder() {
      if (readerBuilder_ == null) {
        readerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.opencannabis.schema.inventory.Reader, io.opencannabis.schema.inventory.Reader.Builder, io.opencannabis.schema.inventory.ReaderOrBuilder>(
                getReader(),
                getParentForChildren(),
                isClean());
        reader_ = null;
      }
      return readerBuilder_;
    }

    private java.lang.Object partner_ = "";
    /**
     * <pre>
     * Describes the partner account to which the reader device is assigned, if applicable, so that it may be reported to
     * telemetry or inventory systems along with the location at which the device is located.
     * </pre>
     *
     * <code>string partner = 2 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Describes the partner account to which the reader device is assigned."];</code>
     */
    public java.lang.String getPartner() {
      java.lang.Object ref = partner_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        partner_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Describes the partner account to which the reader device is assigned, if applicable, so that it may be reported to
     * telemetry or inventory systems along with the location at which the device is located.
     * </pre>
     *
     * <code>string partner = 2 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Describes the partner account to which the reader device is assigned."];</code>
     */
    public com.google.protobuf.ByteString
        getPartnerBytes() {
      java.lang.Object ref = partner_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        partner_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Describes the partner account to which the reader device is assigned, if applicable, so that it may be reported to
     * telemetry or inventory systems along with the location at which the device is located.
     * </pre>
     *
     * <code>string partner = 2 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Describes the partner account to which the reader device is assigned."];</code>
     */
    public Builder setPartner(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      partner_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Describes the partner account to which the reader device is assigned, if applicable, so that it may be reported to
     * telemetry or inventory systems along with the location at which the device is located.
     * </pre>
     *
     * <code>string partner = 2 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Describes the partner account to which the reader device is assigned."];</code>
     */
    public Builder clearPartner() {
      
      partner_ = getDefaultInstance().getPartner();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Describes the partner account to which the reader device is assigned, if applicable, so that it may be reported to
     * telemetry or inventory systems along with the location at which the device is located.
     * </pre>
     *
     * <code>string partner = 2 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Describes the partner account to which the reader device is assigned."];</code>
     */
    public Builder setPartnerBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      partner_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object location_ = "";
    /**
     * <pre>
     * Describes the location account, owned by the partner account specified, where the RFID reader device is physically
     * located. Annotates RFID traffic with licensure/physical boundaries.
     * </pre>
     *
     * <code>string location = 3 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Describes the location, owned by the partner, where the RFID reader is located."];</code>
     */
    public java.lang.String getLocation() {
      java.lang.Object ref = location_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        location_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Describes the location account, owned by the partner account specified, where the RFID reader device is physically
     * located. Annotates RFID traffic with licensure/physical boundaries.
     * </pre>
     *
     * <code>string location = 3 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Describes the location, owned by the partner, where the RFID reader is located."];</code>
     */
    public com.google.protobuf.ByteString
        getLocationBytes() {
      java.lang.Object ref = location_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        location_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Describes the location account, owned by the partner account specified, where the RFID reader device is physically
     * located. Annotates RFID traffic with licensure/physical boundaries.
     * </pre>
     *
     * <code>string location = 3 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Describes the location, owned by the partner, where the RFID reader is located."];</code>
     */
    public Builder setLocation(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      location_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Describes the location account, owned by the partner account specified, where the RFID reader device is physically
     * located. Annotates RFID traffic with licensure/physical boundaries.
     * </pre>
     *
     * <code>string location = 3 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Describes the location, owned by the partner, where the RFID reader is located."];</code>
     */
    public Builder clearLocation() {
      
      location_ = getDefaultInstance().getLocation();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Describes the location account, owned by the partner account specified, where the RFID reader device is physically
     * located. Annotates RFID traffic with licensure/physical boundaries.
     * </pre>
     *
     * <code>string location = 3 [(.gen_bq_schema.require) = true, (.gen_bq_schema.description) = "Describes the location, owned by the partner, where the RFID reader is located."];</code>
     */
    public Builder setLocationBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      location_ = value;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:opencannabis.inventory.rfid.TagReportOrigin)
  }

  // @@protoc_insertion_point(class_scope:opencannabis.inventory.rfid.TagReportOrigin)
  private static final io.opencannabis.schema.inventory.TagReportOrigin DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.opencannabis.schema.inventory.TagReportOrigin();
  }

  public static io.opencannabis.schema.inventory.TagReportOrigin getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<TagReportOrigin>
      PARSER = new com.google.protobuf.AbstractParser<TagReportOrigin>() {
    @java.lang.Override
    public TagReportOrigin parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new TagReportOrigin(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<TagReportOrigin> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<TagReportOrigin> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.opencannabis.schema.inventory.TagReportOrigin getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

