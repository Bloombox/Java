/*
 * Copyright 2019, Momentum Ideas Co.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inventory/rfid/RFID.proto

package io.opencannabis.schema.inventory;

/**
 * <pre>
 * Describes known, or supported, models of RFID reader controller devices.
 * </pre>
 *
 * Protobuf enum {@code opencannabis.inventory.rfid.ReaderModel}
 */
public enum ReaderModel
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * The model of the reader could not be recognized.
   * </pre>
   *
   * <code>UNRECOGNIZED_READER = 0;</code>
   */
  UNRECOGNIZED_READER(0),
  /**
   * <pre>
   * Impinj Speedway Revolution R120 (1-port).
   * </pre>
   *
   * <code>SPEEDWAY_R120 = 1;</code>
   */
  SPEEDWAY_R120(1),
  /**
   * <pre>
   * Impinj Speedway Revolution R220 (2-port).
   * </pre>
   *
   * <code>SPEEDWAY_R220 = 2;</code>
   */
  SPEEDWAY_R220(2),
  /**
   * <pre>
   * Impinj Speedway Revolution R420 (4-port).
   * </pre>
   *
   * <code>SPEEDWAY_R420 = 2001002;</code>
   */
  SPEEDWAY_R420(2001002),
  /**
   * <pre>
   * Impinj Speedway xPortal Gateway.
   * </pre>
   *
   * <code>SPEEDWAY_XPORTAL = 4;</code>
   */
  SPEEDWAY_XPORTAL(4),
  /**
   * <pre>
   * Alien ALR-H450 handheld reader.
   * </pre>
   *
   * <code>ALIEN_ALRH450 = 5;</code>
   */
  ALIEN_ALRH450(5),
  /**
   * <pre>
   * Alien F800 reader.
   * </pre>
   *
   * <code>ALIEN_F800 = 6;</code>
   */
  ALIEN_F800(6),
  /**
   * <pre>
   * Alien ALR-9680 reader (4-port).
   * </pre>
   *
   * <code>ALIEN_ALR9680 = 7;</code>
   */
  ALIEN_ALR9680(7),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * The model of the reader could not be recognized.
   * </pre>
   *
   * <code>UNRECOGNIZED_READER = 0;</code>
   */
  public static final int UNRECOGNIZED_READER_VALUE = 0;
  /**
   * <pre>
   * Impinj Speedway Revolution R120 (1-port).
   * </pre>
   *
   * <code>SPEEDWAY_R120 = 1;</code>
   */
  public static final int SPEEDWAY_R120_VALUE = 1;
  /**
   * <pre>
   * Impinj Speedway Revolution R220 (2-port).
   * </pre>
   *
   * <code>SPEEDWAY_R220 = 2;</code>
   */
  public static final int SPEEDWAY_R220_VALUE = 2;
  /**
   * <pre>
   * Impinj Speedway Revolution R420 (4-port).
   * </pre>
   *
   * <code>SPEEDWAY_R420 = 2001002;</code>
   */
  public static final int SPEEDWAY_R420_VALUE = 2001002;
  /**
   * <pre>
   * Impinj Speedway xPortal Gateway.
   * </pre>
   *
   * <code>SPEEDWAY_XPORTAL = 4;</code>
   */
  public static final int SPEEDWAY_XPORTAL_VALUE = 4;
  /**
   * <pre>
   * Alien ALR-H450 handheld reader.
   * </pre>
   *
   * <code>ALIEN_ALRH450 = 5;</code>
   */
  public static final int ALIEN_ALRH450_VALUE = 5;
  /**
   * <pre>
   * Alien F800 reader.
   * </pre>
   *
   * <code>ALIEN_F800 = 6;</code>
   */
  public static final int ALIEN_F800_VALUE = 6;
  /**
   * <pre>
   * Alien ALR-9680 reader (4-port).
   * </pre>
   *
   * <code>ALIEN_ALR9680 = 7;</code>
   */
  public static final int ALIEN_ALR9680_VALUE = 7;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static ReaderModel valueOf(int value) {
    return forNumber(value);
  }

  public static ReaderModel forNumber(int value) {
    switch (value) {
      case 0: return UNRECOGNIZED_READER;
      case 1: return SPEEDWAY_R120;
      case 2: return SPEEDWAY_R220;
      case 2001002: return SPEEDWAY_R420;
      case 4: return SPEEDWAY_XPORTAL;
      case 5: return ALIEN_ALRH450;
      case 6: return ALIEN_F800;
      case 7: return ALIEN_ALR9680;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<ReaderModel>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      ReaderModel> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ReaderModel>() {
          public ReaderModel findValueByNumber(int number) {
            return ReaderModel.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return io.opencannabis.schema.inventory.RFID.getDescriptor().getEnumTypes().get(1);
  }

  private static final ReaderModel[] VALUES = values();

  public static ReaderModel valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private ReaderModel(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:opencannabis.inventory.rfid.ReaderModel)
}

