/*
 * Copyright 2018, Bloombox, LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inventory/InventoryProduct.proto

package io.opencannabis.schema.inventory;

/**
 * <pre>
 * Menu product payload stanza. Specifies a single product as a member of a menu section. This generic record is used to
 * wrap concrete menu product structures to make them generically usable. In V2 data stores, menu products are stored
 * generically as a top-level entity (as opposed to V1, in which this model is synthesized from raw map data).
 * </pre>
 *
 * Protobuf type {@code opencannabis.inventory.InventoryProduct}
 */
public  final class InventoryProduct extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:opencannabis.inventory.InventoryProduct)
    InventoryProductOrBuilder {
private static final long serialVersionUID = 0L;
  // Use InventoryProduct.newBuilder() to construct.
  private InventoryProduct(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private InventoryProduct() {
    sku_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    variant_ = java.util.Collections.emptyList();
    history_ = java.util.Collections.emptyList();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private InventoryProduct(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 10: {
            io.opencannabis.schema.inventory.InventoryKey.Builder subBuilder = null;
            if (key_ != null) {
              subBuilder = key_.toBuilder();
            }
            key_ = input.readMessage(io.opencannabis.schema.inventory.InventoryKey.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(key_);
              key_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            java.lang.String s = input.readStringRequireUtf8();
            if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
              sku_ = new com.google.protobuf.LazyStringArrayList();
              mutable_bitField0_ |= 0x00000002;
            }
            sku_.add(s);
            break;
          }
          case 26: {
            if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
              variant_ = new java.util.ArrayList<io.opencannabis.schema.commerce.OrderItem.VariantSpec>();
              mutable_bitField0_ |= 0x00000004;
            }
            variant_.add(
                input.readMessage(io.opencannabis.schema.commerce.OrderItem.VariantSpec.parser(), extensionRegistry));
            break;
          }
          case 82: {
            io.opencannabis.schema.inventory.InventoryState.Builder subBuilder = null;
            if (state_ != null) {
              subBuilder = state_.toBuilder();
            }
            state_ = input.readMessage(io.opencannabis.schema.inventory.InventoryState.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(state_);
              state_ = subBuilder.buildPartial();
            }

            break;
          }
          case 90: {
            if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
              history_ = new java.util.ArrayList<io.opencannabis.schema.inventory.InventoryState>();
              mutable_bitField0_ |= 0x00000010;
            }
            history_.add(
                input.readMessage(io.opencannabis.schema.inventory.InventoryState.parser(), extensionRegistry));
            break;
          }
          case 162: {
            io.opencannabis.schema.menu.MenuProduct.Builder subBuilder = null;
            if (item_ != null) {
              subBuilder = item_.toBuilder();
            }
            item_ = input.readMessage(io.opencannabis.schema.menu.MenuProduct.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(item_);
              item_ = subBuilder.buildPartial();
            }

            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
        sku_ = sku_.getUnmodifiableView();
      }
      if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
        variant_ = java.util.Collections.unmodifiableList(variant_);
      }
      if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
        history_ = java.util.Collections.unmodifiableList(history_);
      }
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.opencannabis.schema.inventory.InventoryProductOuterClass.internal_static_opencannabis_inventory_InventoryProduct_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.opencannabis.schema.inventory.InventoryProductOuterClass.internal_static_opencannabis_inventory_InventoryProduct_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.opencannabis.schema.inventory.InventoryProduct.class, io.opencannabis.schema.inventory.InventoryProduct.Builder.class);
  }

  private int bitField0_;
  public static final int KEY_FIELD_NUMBER = 1;
  private io.opencannabis.schema.inventory.InventoryKey key_;
  /**
   * <pre>
   * Key for this inventory item. Uniquely identifies the subject inventoried product, along with a globally-unique ID,
   * which is set upon inventory item allocation (either provided explicitly or auto-generated).
   * </pre>
   *
   * <code>.opencannabis.inventory.InventoryKey key = 1;</code>
   */
  public boolean hasKey() {
    return key_ != null;
  }
  /**
   * <pre>
   * Key for this inventory item. Uniquely identifies the subject inventoried product, along with a globally-unique ID,
   * which is set upon inventory item allocation (either provided explicitly or auto-generated).
   * </pre>
   *
   * <code>.opencannabis.inventory.InventoryKey key = 1;</code>
   */
  public io.opencannabis.schema.inventory.InventoryKey getKey() {
    return key_ == null ? io.opencannabis.schema.inventory.InventoryKey.getDefaultInstance() : key_;
  }
  /**
   * <pre>
   * Key for this inventory item. Uniquely identifies the subject inventoried product, along with a globally-unique ID,
   * which is set upon inventory item allocation (either provided explicitly or auto-generated).
   * </pre>
   *
   * <code>.opencannabis.inventory.InventoryKey key = 1;</code>
   */
  public io.opencannabis.schema.inventory.InventoryKeyOrBuilder getKeyOrBuilder() {
    return getKey();
  }

  public static final int SKU_FIELD_NUMBER = 2;
  private com.google.protobuf.LazyStringList sku_;
  /**
   * <pre>
   * SKUs that should reference this inventory product. These are arbitrary strings that should map to this inventory
   * item, potentially to/from foreign or 3rd-party systems.
   * </pre>
   *
   * <code>repeated string sku = 2;</code>
   */
  public com.google.protobuf.ProtocolStringList
      getSkuList() {
    return sku_;
  }
  /**
   * <pre>
   * SKUs that should reference this inventory product. These are arbitrary strings that should map to this inventory
   * item, potentially to/from foreign or 3rd-party systems.
   * </pre>
   *
   * <code>repeated string sku = 2;</code>
   */
  public int getSkuCount() {
    return sku_.size();
  }
  /**
   * <pre>
   * SKUs that should reference this inventory product. These are arbitrary strings that should map to this inventory
   * item, potentially to/from foreign or 3rd-party systems.
   * </pre>
   *
   * <code>repeated string sku = 2;</code>
   */
  public java.lang.String getSku(int index) {
    return sku_.get(index);
  }
  /**
   * <pre>
   * SKUs that should reference this inventory product. These are arbitrary strings that should map to this inventory
   * item, potentially to/from foreign or 3rd-party systems.
   * </pre>
   *
   * <code>repeated string sku = 2;</code>
   */
  public com.google.protobuf.ByteString
      getSkuBytes(int index) {
    return sku_.getByteString(index);
  }

  public static final int VARIANT_FIELD_NUMBER = 3;
  private java.util.List<io.opencannabis.schema.commerce.OrderItem.VariantSpec> variant_;
  /**
   * <pre>
   * Product variance specifications. Each variant spec describes a variance property and value for this product.
   * Variance specifies how this particular batch of inventory is concretely parameterized, i.e., the "color" and "red"
   * in "these hats are the color red."
   * </pre>
   *
   * <code>repeated .opencannabis.commerce.VariantSpec variant = 3;</code>
   */
  public java.util.List<io.opencannabis.schema.commerce.OrderItem.VariantSpec> getVariantList() {
    return variant_;
  }
  /**
   * <pre>
   * Product variance specifications. Each variant spec describes a variance property and value for this product.
   * Variance specifies how this particular batch of inventory is concretely parameterized, i.e., the "color" and "red"
   * in "these hats are the color red."
   * </pre>
   *
   * <code>repeated .opencannabis.commerce.VariantSpec variant = 3;</code>
   */
  public java.util.List<? extends io.opencannabis.schema.commerce.OrderItem.VariantSpecOrBuilder> 
      getVariantOrBuilderList() {
    return variant_;
  }
  /**
   * <pre>
   * Product variance specifications. Each variant spec describes a variance property and value for this product.
   * Variance specifies how this particular batch of inventory is concretely parameterized, i.e., the "color" and "red"
   * in "these hats are the color red."
   * </pre>
   *
   * <code>repeated .opencannabis.commerce.VariantSpec variant = 3;</code>
   */
  public int getVariantCount() {
    return variant_.size();
  }
  /**
   * <pre>
   * Product variance specifications. Each variant spec describes a variance property and value for this product.
   * Variance specifies how this particular batch of inventory is concretely parameterized, i.e., the "color" and "red"
   * in "these hats are the color red."
   * </pre>
   *
   * <code>repeated .opencannabis.commerce.VariantSpec variant = 3;</code>
   */
  public io.opencannabis.schema.commerce.OrderItem.VariantSpec getVariant(int index) {
    return variant_.get(index);
  }
  /**
   * <pre>
   * Product variance specifications. Each variant spec describes a variance property and value for this product.
   * Variance specifies how this particular batch of inventory is concretely parameterized, i.e., the "color" and "red"
   * in "these hats are the color red."
   * </pre>
   *
   * <code>repeated .opencannabis.commerce.VariantSpec variant = 3;</code>
   */
  public io.opencannabis.schema.commerce.OrderItem.VariantSpecOrBuilder getVariantOrBuilder(
      int index) {
    return variant_.get(index);
  }

  public static final int STATE_FIELD_NUMBER = 10;
  private io.opencannabis.schema.inventory.InventoryState state_;
  /**
   * <pre>
   * Current/active state for this inventory product. This includes the active status and coordinates for the item, with
   * timestamping information detailing when the status last changed.
   * </pre>
   *
   * <code>.opencannabis.inventory.InventoryState state = 10;</code>
   */
  public boolean hasState() {
    return state_ != null;
  }
  /**
   * <pre>
   * Current/active state for this inventory product. This includes the active status and coordinates for the item, with
   * timestamping information detailing when the status last changed.
   * </pre>
   *
   * <code>.opencannabis.inventory.InventoryState state = 10;</code>
   */
  public io.opencannabis.schema.inventory.InventoryState getState() {
    return state_ == null ? io.opencannabis.schema.inventory.InventoryState.getDefaultInstance() : state_;
  }
  /**
   * <pre>
   * Current/active state for this inventory product. This includes the active status and coordinates for the item, with
   * timestamping information detailing when the status last changed.
   * </pre>
   *
   * <code>.opencannabis.inventory.InventoryState state = 10;</code>
   */
  public io.opencannabis.schema.inventory.InventoryStateOrBuilder getStateOrBuilder() {
    return getState();
  }

  public static final int HISTORY_FIELD_NUMBER = 11;
  private java.util.List<io.opencannabis.schema.inventory.InventoryState> history_;
  /**
   * <pre>
   * Full history for an inventory product, including every inventory state for the item since its creation. Every item
   * in inventory begins with exactly one history entry, stored in the `state` property. Once a second history entry is
   * added for the inventory item, `history` is initialized with the old state as the first item, and `state` is
   * replaced with the new state.
   * </pre>
   *
   * <code>repeated .opencannabis.inventory.InventoryState history = 11;</code>
   */
  public java.util.List<io.opencannabis.schema.inventory.InventoryState> getHistoryList() {
    return history_;
  }
  /**
   * <pre>
   * Full history for an inventory product, including every inventory state for the item since its creation. Every item
   * in inventory begins with exactly one history entry, stored in the `state` property. Once a second history entry is
   * added for the inventory item, `history` is initialized with the old state as the first item, and `state` is
   * replaced with the new state.
   * </pre>
   *
   * <code>repeated .opencannabis.inventory.InventoryState history = 11;</code>
   */
  public java.util.List<? extends io.opencannabis.schema.inventory.InventoryStateOrBuilder> 
      getHistoryOrBuilderList() {
    return history_;
  }
  /**
   * <pre>
   * Full history for an inventory product, including every inventory state for the item since its creation. Every item
   * in inventory begins with exactly one history entry, stored in the `state` property. Once a second history entry is
   * added for the inventory item, `history` is initialized with the old state as the first item, and `state` is
   * replaced with the new state.
   * </pre>
   *
   * <code>repeated .opencannabis.inventory.InventoryState history = 11;</code>
   */
  public int getHistoryCount() {
    return history_.size();
  }
  /**
   * <pre>
   * Full history for an inventory product, including every inventory state for the item since its creation. Every item
   * in inventory begins with exactly one history entry, stored in the `state` property. Once a second history entry is
   * added for the inventory item, `history` is initialized with the old state as the first item, and `state` is
   * replaced with the new state.
   * </pre>
   *
   * <code>repeated .opencannabis.inventory.InventoryState history = 11;</code>
   */
  public io.opencannabis.schema.inventory.InventoryState getHistory(int index) {
    return history_.get(index);
  }
  /**
   * <pre>
   * Full history for an inventory product, including every inventory state for the item since its creation. Every item
   * in inventory begins with exactly one history entry, stored in the `state` property. Once a second history entry is
   * added for the inventory item, `history` is initialized with the old state as the first item, and `state` is
   * replaced with the new state.
   * </pre>
   *
   * <code>repeated .opencannabis.inventory.InventoryState history = 11;</code>
   */
  public io.opencannabis.schema.inventory.InventoryStateOrBuilder getHistoryOrBuilder(
      int index) {
    return history_.get(index);
  }

  public static final int ITEM_FIELD_NUMBER = 20;
  private io.opencannabis.schema.menu.MenuProduct item_;
  /**
   * <pre>
   * Holds a menu product, including all referenced content, retail-side pricing, materials information (including test
   * results), and so on.
   * </pre>
   *
   * <code>.opencannabis.products.menu.MenuProduct item = 20;</code>
   */
  public boolean hasItem() {
    return item_ != null;
  }
  /**
   * <pre>
   * Holds a menu product, including all referenced content, retail-side pricing, materials information (including test
   * results), and so on.
   * </pre>
   *
   * <code>.opencannabis.products.menu.MenuProduct item = 20;</code>
   */
  public io.opencannabis.schema.menu.MenuProduct getItem() {
    return item_ == null ? io.opencannabis.schema.menu.MenuProduct.getDefaultInstance() : item_;
  }
  /**
   * <pre>
   * Holds a menu product, including all referenced content, retail-side pricing, materials information (including test
   * results), and so on.
   * </pre>
   *
   * <code>.opencannabis.products.menu.MenuProduct item = 20;</code>
   */
  public io.opencannabis.schema.menu.MenuProductOrBuilder getItemOrBuilder() {
    return getItem();
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (key_ != null) {
      output.writeMessage(1, getKey());
    }
    for (int i = 0; i < sku_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, sku_.getRaw(i));
    }
    for (int i = 0; i < variant_.size(); i++) {
      output.writeMessage(3, variant_.get(i));
    }
    if (state_ != null) {
      output.writeMessage(10, getState());
    }
    for (int i = 0; i < history_.size(); i++) {
      output.writeMessage(11, history_.get(i));
    }
    if (item_ != null) {
      output.writeMessage(20, getItem());
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (key_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getKey());
    }
    {
      int dataSize = 0;
      for (int i = 0; i < sku_.size(); i++) {
        dataSize += computeStringSizeNoTag(sku_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getSkuList().size();
    }
    for (int i = 0; i < variant_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, variant_.get(i));
    }
    if (state_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, getState());
    }
    for (int i = 0; i < history_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, history_.get(i));
    }
    if (item_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(20, getItem());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.opencannabis.schema.inventory.InventoryProduct)) {
      return super.equals(obj);
    }
    io.opencannabis.schema.inventory.InventoryProduct other = (io.opencannabis.schema.inventory.InventoryProduct) obj;

    boolean result = true;
    result = result && (hasKey() == other.hasKey());
    if (hasKey()) {
      result = result && getKey()
          .equals(other.getKey());
    }
    result = result && getSkuList()
        .equals(other.getSkuList());
    result = result && getVariantList()
        .equals(other.getVariantList());
    result = result && (hasState() == other.hasState());
    if (hasState()) {
      result = result && getState()
          .equals(other.getState());
    }
    result = result && getHistoryList()
        .equals(other.getHistoryList());
    result = result && (hasItem() == other.hasItem());
    if (hasItem()) {
      result = result && getItem()
          .equals(other.getItem());
    }
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasKey()) {
      hash = (37 * hash) + KEY_FIELD_NUMBER;
      hash = (53 * hash) + getKey().hashCode();
    }
    if (getSkuCount() > 0) {
      hash = (37 * hash) + SKU_FIELD_NUMBER;
      hash = (53 * hash) + getSkuList().hashCode();
    }
    if (getVariantCount() > 0) {
      hash = (37 * hash) + VARIANT_FIELD_NUMBER;
      hash = (53 * hash) + getVariantList().hashCode();
    }
    if (hasState()) {
      hash = (37 * hash) + STATE_FIELD_NUMBER;
      hash = (53 * hash) + getState().hashCode();
    }
    if (getHistoryCount() > 0) {
      hash = (37 * hash) + HISTORY_FIELD_NUMBER;
      hash = (53 * hash) + getHistoryList().hashCode();
    }
    if (hasItem()) {
      hash = (37 * hash) + ITEM_FIELD_NUMBER;
      hash = (53 * hash) + getItem().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.opencannabis.schema.inventory.InventoryProduct parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.opencannabis.schema.inventory.InventoryProduct parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.opencannabis.schema.inventory.InventoryProduct parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.opencannabis.schema.inventory.InventoryProduct parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.opencannabis.schema.inventory.InventoryProduct parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.opencannabis.schema.inventory.InventoryProduct parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.opencannabis.schema.inventory.InventoryProduct parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.opencannabis.schema.inventory.InventoryProduct parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.opencannabis.schema.inventory.InventoryProduct parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.opencannabis.schema.inventory.InventoryProduct parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.opencannabis.schema.inventory.InventoryProduct parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.opencannabis.schema.inventory.InventoryProduct parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.opencannabis.schema.inventory.InventoryProduct prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Menu product payload stanza. Specifies a single product as a member of a menu section. This generic record is used to
   * wrap concrete menu product structures to make them generically usable. In V2 data stores, menu products are stored
   * generically as a top-level entity (as opposed to V1, in which this model is synthesized from raw map data).
   * </pre>
   *
   * Protobuf type {@code opencannabis.inventory.InventoryProduct}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:opencannabis.inventory.InventoryProduct)
      io.opencannabis.schema.inventory.InventoryProductOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.opencannabis.schema.inventory.InventoryProductOuterClass.internal_static_opencannabis_inventory_InventoryProduct_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.opencannabis.schema.inventory.InventoryProductOuterClass.internal_static_opencannabis_inventory_InventoryProduct_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.opencannabis.schema.inventory.InventoryProduct.class, io.opencannabis.schema.inventory.InventoryProduct.Builder.class);
    }

    // Construct using io.opencannabis.schema.inventory.InventoryProduct.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getVariantFieldBuilder();
        getHistoryFieldBuilder();
      }
    }
    public Builder clear() {
      super.clear();
      if (keyBuilder_ == null) {
        key_ = null;
      } else {
        key_ = null;
        keyBuilder_ = null;
      }
      sku_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      if (variantBuilder_ == null) {
        variant_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
      } else {
        variantBuilder_.clear();
      }
      if (stateBuilder_ == null) {
        state_ = null;
      } else {
        state_ = null;
        stateBuilder_ = null;
      }
      if (historyBuilder_ == null) {
        history_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
      } else {
        historyBuilder_.clear();
      }
      if (itemBuilder_ == null) {
        item_ = null;
      } else {
        item_ = null;
        itemBuilder_ = null;
      }
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.opencannabis.schema.inventory.InventoryProductOuterClass.internal_static_opencannabis_inventory_InventoryProduct_descriptor;
    }

    public io.opencannabis.schema.inventory.InventoryProduct getDefaultInstanceForType() {
      return io.opencannabis.schema.inventory.InventoryProduct.getDefaultInstance();
    }

    public io.opencannabis.schema.inventory.InventoryProduct build() {
      io.opencannabis.schema.inventory.InventoryProduct result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public io.opencannabis.schema.inventory.InventoryProduct buildPartial() {
      io.opencannabis.schema.inventory.InventoryProduct result = new io.opencannabis.schema.inventory.InventoryProduct(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (keyBuilder_ == null) {
        result.key_ = key_;
      } else {
        result.key_ = keyBuilder_.build();
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        sku_ = sku_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.sku_ = sku_;
      if (variantBuilder_ == null) {
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          variant_ = java.util.Collections.unmodifiableList(variant_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.variant_ = variant_;
      } else {
        result.variant_ = variantBuilder_.build();
      }
      if (stateBuilder_ == null) {
        result.state_ = state_;
      } else {
        result.state_ = stateBuilder_.build();
      }
      if (historyBuilder_ == null) {
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          history_ = java.util.Collections.unmodifiableList(history_);
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.history_ = history_;
      } else {
        result.history_ = historyBuilder_.build();
      }
      if (itemBuilder_ == null) {
        result.item_ = item_;
      } else {
        result.item_ = itemBuilder_.build();
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.opencannabis.schema.inventory.InventoryProduct) {
        return mergeFrom((io.opencannabis.schema.inventory.InventoryProduct)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.opencannabis.schema.inventory.InventoryProduct other) {
      if (other == io.opencannabis.schema.inventory.InventoryProduct.getDefaultInstance()) return this;
      if (other.hasKey()) {
        mergeKey(other.getKey());
      }
      if (!other.sku_.isEmpty()) {
        if (sku_.isEmpty()) {
          sku_ = other.sku_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureSkuIsMutable();
          sku_.addAll(other.sku_);
        }
        onChanged();
      }
      if (variantBuilder_ == null) {
        if (!other.variant_.isEmpty()) {
          if (variant_.isEmpty()) {
            variant_ = other.variant_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureVariantIsMutable();
            variant_.addAll(other.variant_);
          }
          onChanged();
        }
      } else {
        if (!other.variant_.isEmpty()) {
          if (variantBuilder_.isEmpty()) {
            variantBuilder_.dispose();
            variantBuilder_ = null;
            variant_ = other.variant_;
            bitField0_ = (bitField0_ & ~0x00000004);
            variantBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getVariantFieldBuilder() : null;
          } else {
            variantBuilder_.addAllMessages(other.variant_);
          }
        }
      }
      if (other.hasState()) {
        mergeState(other.getState());
      }
      if (historyBuilder_ == null) {
        if (!other.history_.isEmpty()) {
          if (history_.isEmpty()) {
            history_ = other.history_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureHistoryIsMutable();
            history_.addAll(other.history_);
          }
          onChanged();
        }
      } else {
        if (!other.history_.isEmpty()) {
          if (historyBuilder_.isEmpty()) {
            historyBuilder_.dispose();
            historyBuilder_ = null;
            history_ = other.history_;
            bitField0_ = (bitField0_ & ~0x00000010);
            historyBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getHistoryFieldBuilder() : null;
          } else {
            historyBuilder_.addAllMessages(other.history_);
          }
        }
      }
      if (other.hasItem()) {
        mergeItem(other.getItem());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.opencannabis.schema.inventory.InventoryProduct parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.opencannabis.schema.inventory.InventoryProduct) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private io.opencannabis.schema.inventory.InventoryKey key_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.opencannabis.schema.inventory.InventoryKey, io.opencannabis.schema.inventory.InventoryKey.Builder, io.opencannabis.schema.inventory.InventoryKeyOrBuilder> keyBuilder_;
    /**
     * <pre>
     * Key for this inventory item. Uniquely identifies the subject inventoried product, along with a globally-unique ID,
     * which is set upon inventory item allocation (either provided explicitly or auto-generated).
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryKey key = 1;</code>
     */
    public boolean hasKey() {
      return keyBuilder_ != null || key_ != null;
    }
    /**
     * <pre>
     * Key for this inventory item. Uniquely identifies the subject inventoried product, along with a globally-unique ID,
     * which is set upon inventory item allocation (either provided explicitly or auto-generated).
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryKey key = 1;</code>
     */
    public io.opencannabis.schema.inventory.InventoryKey getKey() {
      if (keyBuilder_ == null) {
        return key_ == null ? io.opencannabis.schema.inventory.InventoryKey.getDefaultInstance() : key_;
      } else {
        return keyBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Key for this inventory item. Uniquely identifies the subject inventoried product, along with a globally-unique ID,
     * which is set upon inventory item allocation (either provided explicitly or auto-generated).
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryKey key = 1;</code>
     */
    public Builder setKey(io.opencannabis.schema.inventory.InventoryKey value) {
      if (keyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        key_ = value;
        onChanged();
      } else {
        keyBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Key for this inventory item. Uniquely identifies the subject inventoried product, along with a globally-unique ID,
     * which is set upon inventory item allocation (either provided explicitly or auto-generated).
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryKey key = 1;</code>
     */
    public Builder setKey(
        io.opencannabis.schema.inventory.InventoryKey.Builder builderForValue) {
      if (keyBuilder_ == null) {
        key_ = builderForValue.build();
        onChanged();
      } else {
        keyBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Key for this inventory item. Uniquely identifies the subject inventoried product, along with a globally-unique ID,
     * which is set upon inventory item allocation (either provided explicitly or auto-generated).
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryKey key = 1;</code>
     */
    public Builder mergeKey(io.opencannabis.schema.inventory.InventoryKey value) {
      if (keyBuilder_ == null) {
        if (key_ != null) {
          key_ =
            io.opencannabis.schema.inventory.InventoryKey.newBuilder(key_).mergeFrom(value).buildPartial();
        } else {
          key_ = value;
        }
        onChanged();
      } else {
        keyBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Key for this inventory item. Uniquely identifies the subject inventoried product, along with a globally-unique ID,
     * which is set upon inventory item allocation (either provided explicitly or auto-generated).
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryKey key = 1;</code>
     */
    public Builder clearKey() {
      if (keyBuilder_ == null) {
        key_ = null;
        onChanged();
      } else {
        key_ = null;
        keyBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Key for this inventory item. Uniquely identifies the subject inventoried product, along with a globally-unique ID,
     * which is set upon inventory item allocation (either provided explicitly or auto-generated).
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryKey key = 1;</code>
     */
    public io.opencannabis.schema.inventory.InventoryKey.Builder getKeyBuilder() {
      
      onChanged();
      return getKeyFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Key for this inventory item. Uniquely identifies the subject inventoried product, along with a globally-unique ID,
     * which is set upon inventory item allocation (either provided explicitly or auto-generated).
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryKey key = 1;</code>
     */
    public io.opencannabis.schema.inventory.InventoryKeyOrBuilder getKeyOrBuilder() {
      if (keyBuilder_ != null) {
        return keyBuilder_.getMessageOrBuilder();
      } else {
        return key_ == null ?
            io.opencannabis.schema.inventory.InventoryKey.getDefaultInstance() : key_;
      }
    }
    /**
     * <pre>
     * Key for this inventory item. Uniquely identifies the subject inventoried product, along with a globally-unique ID,
     * which is set upon inventory item allocation (either provided explicitly or auto-generated).
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryKey key = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.opencannabis.schema.inventory.InventoryKey, io.opencannabis.schema.inventory.InventoryKey.Builder, io.opencannabis.schema.inventory.InventoryKeyOrBuilder> 
        getKeyFieldBuilder() {
      if (keyBuilder_ == null) {
        keyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.opencannabis.schema.inventory.InventoryKey, io.opencannabis.schema.inventory.InventoryKey.Builder, io.opencannabis.schema.inventory.InventoryKeyOrBuilder>(
                getKey(),
                getParentForChildren(),
                isClean());
        key_ = null;
      }
      return keyBuilder_;
    }

    private com.google.protobuf.LazyStringList sku_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureSkuIsMutable() {
      if (!((bitField0_ & 0x00000002) == 0x00000002)) {
        sku_ = new com.google.protobuf.LazyStringArrayList(sku_);
        bitField0_ |= 0x00000002;
       }
    }
    /**
     * <pre>
     * SKUs that should reference this inventory product. These are arbitrary strings that should map to this inventory
     * item, potentially to/from foreign or 3rd-party systems.
     * </pre>
     *
     * <code>repeated string sku = 2;</code>
     */
    public com.google.protobuf.ProtocolStringList
        getSkuList() {
      return sku_.getUnmodifiableView();
    }
    /**
     * <pre>
     * SKUs that should reference this inventory product. These are arbitrary strings that should map to this inventory
     * item, potentially to/from foreign or 3rd-party systems.
     * </pre>
     *
     * <code>repeated string sku = 2;</code>
     */
    public int getSkuCount() {
      return sku_.size();
    }
    /**
     * <pre>
     * SKUs that should reference this inventory product. These are arbitrary strings that should map to this inventory
     * item, potentially to/from foreign or 3rd-party systems.
     * </pre>
     *
     * <code>repeated string sku = 2;</code>
     */
    public java.lang.String getSku(int index) {
      return sku_.get(index);
    }
    /**
     * <pre>
     * SKUs that should reference this inventory product. These are arbitrary strings that should map to this inventory
     * item, potentially to/from foreign or 3rd-party systems.
     * </pre>
     *
     * <code>repeated string sku = 2;</code>
     */
    public com.google.protobuf.ByteString
        getSkuBytes(int index) {
      return sku_.getByteString(index);
    }
    /**
     * <pre>
     * SKUs that should reference this inventory product. These are arbitrary strings that should map to this inventory
     * item, potentially to/from foreign or 3rd-party systems.
     * </pre>
     *
     * <code>repeated string sku = 2;</code>
     */
    public Builder setSku(
        int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureSkuIsMutable();
      sku_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * SKUs that should reference this inventory product. These are arbitrary strings that should map to this inventory
     * item, potentially to/from foreign or 3rd-party systems.
     * </pre>
     *
     * <code>repeated string sku = 2;</code>
     */
    public Builder addSku(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureSkuIsMutable();
      sku_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * SKUs that should reference this inventory product. These are arbitrary strings that should map to this inventory
     * item, potentially to/from foreign or 3rd-party systems.
     * </pre>
     *
     * <code>repeated string sku = 2;</code>
     */
    public Builder addAllSku(
        java.lang.Iterable<java.lang.String> values) {
      ensureSkuIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, sku_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * SKUs that should reference this inventory product. These are arbitrary strings that should map to this inventory
     * item, potentially to/from foreign or 3rd-party systems.
     * </pre>
     *
     * <code>repeated string sku = 2;</code>
     */
    public Builder clearSku() {
      sku_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * SKUs that should reference this inventory product. These are arbitrary strings that should map to this inventory
     * item, potentially to/from foreign or 3rd-party systems.
     * </pre>
     *
     * <code>repeated string sku = 2;</code>
     */
    public Builder addSkuBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureSkuIsMutable();
      sku_.add(value);
      onChanged();
      return this;
    }

    private java.util.List<io.opencannabis.schema.commerce.OrderItem.VariantSpec> variant_ =
      java.util.Collections.emptyList();
    private void ensureVariantIsMutable() {
      if (!((bitField0_ & 0x00000004) == 0x00000004)) {
        variant_ = new java.util.ArrayList<io.opencannabis.schema.commerce.OrderItem.VariantSpec>(variant_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.opencannabis.schema.commerce.OrderItem.VariantSpec, io.opencannabis.schema.commerce.OrderItem.VariantSpec.Builder, io.opencannabis.schema.commerce.OrderItem.VariantSpecOrBuilder> variantBuilder_;

    /**
     * <pre>
     * Product variance specifications. Each variant spec describes a variance property and value for this product.
     * Variance specifies how this particular batch of inventory is concretely parameterized, i.e., the "color" and "red"
     * in "these hats are the color red."
     * </pre>
     *
     * <code>repeated .opencannabis.commerce.VariantSpec variant = 3;</code>
     */
    public java.util.List<io.opencannabis.schema.commerce.OrderItem.VariantSpec> getVariantList() {
      if (variantBuilder_ == null) {
        return java.util.Collections.unmodifiableList(variant_);
      } else {
        return variantBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Product variance specifications. Each variant spec describes a variance property and value for this product.
     * Variance specifies how this particular batch of inventory is concretely parameterized, i.e., the "color" and "red"
     * in "these hats are the color red."
     * </pre>
     *
     * <code>repeated .opencannabis.commerce.VariantSpec variant = 3;</code>
     */
    public int getVariantCount() {
      if (variantBuilder_ == null) {
        return variant_.size();
      } else {
        return variantBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Product variance specifications. Each variant spec describes a variance property and value for this product.
     * Variance specifies how this particular batch of inventory is concretely parameterized, i.e., the "color" and "red"
     * in "these hats are the color red."
     * </pre>
     *
     * <code>repeated .opencannabis.commerce.VariantSpec variant = 3;</code>
     */
    public io.opencannabis.schema.commerce.OrderItem.VariantSpec getVariant(int index) {
      if (variantBuilder_ == null) {
        return variant_.get(index);
      } else {
        return variantBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Product variance specifications. Each variant spec describes a variance property and value for this product.
     * Variance specifies how this particular batch of inventory is concretely parameterized, i.e., the "color" and "red"
     * in "these hats are the color red."
     * </pre>
     *
     * <code>repeated .opencannabis.commerce.VariantSpec variant = 3;</code>
     */
    public Builder setVariant(
        int index, io.opencannabis.schema.commerce.OrderItem.VariantSpec value) {
      if (variantBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureVariantIsMutable();
        variant_.set(index, value);
        onChanged();
      } else {
        variantBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Product variance specifications. Each variant spec describes a variance property and value for this product.
     * Variance specifies how this particular batch of inventory is concretely parameterized, i.e., the "color" and "red"
     * in "these hats are the color red."
     * </pre>
     *
     * <code>repeated .opencannabis.commerce.VariantSpec variant = 3;</code>
     */
    public Builder setVariant(
        int index, io.opencannabis.schema.commerce.OrderItem.VariantSpec.Builder builderForValue) {
      if (variantBuilder_ == null) {
        ensureVariantIsMutable();
        variant_.set(index, builderForValue.build());
        onChanged();
      } else {
        variantBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Product variance specifications. Each variant spec describes a variance property and value for this product.
     * Variance specifies how this particular batch of inventory is concretely parameterized, i.e., the "color" and "red"
     * in "these hats are the color red."
     * </pre>
     *
     * <code>repeated .opencannabis.commerce.VariantSpec variant = 3;</code>
     */
    public Builder addVariant(io.opencannabis.schema.commerce.OrderItem.VariantSpec value) {
      if (variantBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureVariantIsMutable();
        variant_.add(value);
        onChanged();
      } else {
        variantBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Product variance specifications. Each variant spec describes a variance property and value for this product.
     * Variance specifies how this particular batch of inventory is concretely parameterized, i.e., the "color" and "red"
     * in "these hats are the color red."
     * </pre>
     *
     * <code>repeated .opencannabis.commerce.VariantSpec variant = 3;</code>
     */
    public Builder addVariant(
        int index, io.opencannabis.schema.commerce.OrderItem.VariantSpec value) {
      if (variantBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureVariantIsMutable();
        variant_.add(index, value);
        onChanged();
      } else {
        variantBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Product variance specifications. Each variant spec describes a variance property and value for this product.
     * Variance specifies how this particular batch of inventory is concretely parameterized, i.e., the "color" and "red"
     * in "these hats are the color red."
     * </pre>
     *
     * <code>repeated .opencannabis.commerce.VariantSpec variant = 3;</code>
     */
    public Builder addVariant(
        io.opencannabis.schema.commerce.OrderItem.VariantSpec.Builder builderForValue) {
      if (variantBuilder_ == null) {
        ensureVariantIsMutable();
        variant_.add(builderForValue.build());
        onChanged();
      } else {
        variantBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Product variance specifications. Each variant spec describes a variance property and value for this product.
     * Variance specifies how this particular batch of inventory is concretely parameterized, i.e., the "color" and "red"
     * in "these hats are the color red."
     * </pre>
     *
     * <code>repeated .opencannabis.commerce.VariantSpec variant = 3;</code>
     */
    public Builder addVariant(
        int index, io.opencannabis.schema.commerce.OrderItem.VariantSpec.Builder builderForValue) {
      if (variantBuilder_ == null) {
        ensureVariantIsMutable();
        variant_.add(index, builderForValue.build());
        onChanged();
      } else {
        variantBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Product variance specifications. Each variant spec describes a variance property and value for this product.
     * Variance specifies how this particular batch of inventory is concretely parameterized, i.e., the "color" and "red"
     * in "these hats are the color red."
     * </pre>
     *
     * <code>repeated .opencannabis.commerce.VariantSpec variant = 3;</code>
     */
    public Builder addAllVariant(
        java.lang.Iterable<? extends io.opencannabis.schema.commerce.OrderItem.VariantSpec> values) {
      if (variantBuilder_ == null) {
        ensureVariantIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, variant_);
        onChanged();
      } else {
        variantBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Product variance specifications. Each variant spec describes a variance property and value for this product.
     * Variance specifies how this particular batch of inventory is concretely parameterized, i.e., the "color" and "red"
     * in "these hats are the color red."
     * </pre>
     *
     * <code>repeated .opencannabis.commerce.VariantSpec variant = 3;</code>
     */
    public Builder clearVariant() {
      if (variantBuilder_ == null) {
        variant_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        variantBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Product variance specifications. Each variant spec describes a variance property and value for this product.
     * Variance specifies how this particular batch of inventory is concretely parameterized, i.e., the "color" and "red"
     * in "these hats are the color red."
     * </pre>
     *
     * <code>repeated .opencannabis.commerce.VariantSpec variant = 3;</code>
     */
    public Builder removeVariant(int index) {
      if (variantBuilder_ == null) {
        ensureVariantIsMutable();
        variant_.remove(index);
        onChanged();
      } else {
        variantBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Product variance specifications. Each variant spec describes a variance property and value for this product.
     * Variance specifies how this particular batch of inventory is concretely parameterized, i.e., the "color" and "red"
     * in "these hats are the color red."
     * </pre>
     *
     * <code>repeated .opencannabis.commerce.VariantSpec variant = 3;</code>
     */
    public io.opencannabis.schema.commerce.OrderItem.VariantSpec.Builder getVariantBuilder(
        int index) {
      return getVariantFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Product variance specifications. Each variant spec describes a variance property and value for this product.
     * Variance specifies how this particular batch of inventory is concretely parameterized, i.e., the "color" and "red"
     * in "these hats are the color red."
     * </pre>
     *
     * <code>repeated .opencannabis.commerce.VariantSpec variant = 3;</code>
     */
    public io.opencannabis.schema.commerce.OrderItem.VariantSpecOrBuilder getVariantOrBuilder(
        int index) {
      if (variantBuilder_ == null) {
        return variant_.get(index);  } else {
        return variantBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Product variance specifications. Each variant spec describes a variance property and value for this product.
     * Variance specifies how this particular batch of inventory is concretely parameterized, i.e., the "color" and "red"
     * in "these hats are the color red."
     * </pre>
     *
     * <code>repeated .opencannabis.commerce.VariantSpec variant = 3;</code>
     */
    public java.util.List<? extends io.opencannabis.schema.commerce.OrderItem.VariantSpecOrBuilder> 
         getVariantOrBuilderList() {
      if (variantBuilder_ != null) {
        return variantBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(variant_);
      }
    }
    /**
     * <pre>
     * Product variance specifications. Each variant spec describes a variance property and value for this product.
     * Variance specifies how this particular batch of inventory is concretely parameterized, i.e., the "color" and "red"
     * in "these hats are the color red."
     * </pre>
     *
     * <code>repeated .opencannabis.commerce.VariantSpec variant = 3;</code>
     */
    public io.opencannabis.schema.commerce.OrderItem.VariantSpec.Builder addVariantBuilder() {
      return getVariantFieldBuilder().addBuilder(
          io.opencannabis.schema.commerce.OrderItem.VariantSpec.getDefaultInstance());
    }
    /**
     * <pre>
     * Product variance specifications. Each variant spec describes a variance property and value for this product.
     * Variance specifies how this particular batch of inventory is concretely parameterized, i.e., the "color" and "red"
     * in "these hats are the color red."
     * </pre>
     *
     * <code>repeated .opencannabis.commerce.VariantSpec variant = 3;</code>
     */
    public io.opencannabis.schema.commerce.OrderItem.VariantSpec.Builder addVariantBuilder(
        int index) {
      return getVariantFieldBuilder().addBuilder(
          index, io.opencannabis.schema.commerce.OrderItem.VariantSpec.getDefaultInstance());
    }
    /**
     * <pre>
     * Product variance specifications. Each variant spec describes a variance property and value for this product.
     * Variance specifies how this particular batch of inventory is concretely parameterized, i.e., the "color" and "red"
     * in "these hats are the color red."
     * </pre>
     *
     * <code>repeated .opencannabis.commerce.VariantSpec variant = 3;</code>
     */
    public java.util.List<io.opencannabis.schema.commerce.OrderItem.VariantSpec.Builder> 
         getVariantBuilderList() {
      return getVariantFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.opencannabis.schema.commerce.OrderItem.VariantSpec, io.opencannabis.schema.commerce.OrderItem.VariantSpec.Builder, io.opencannabis.schema.commerce.OrderItem.VariantSpecOrBuilder> 
        getVariantFieldBuilder() {
      if (variantBuilder_ == null) {
        variantBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.opencannabis.schema.commerce.OrderItem.VariantSpec, io.opencannabis.schema.commerce.OrderItem.VariantSpec.Builder, io.opencannabis.schema.commerce.OrderItem.VariantSpecOrBuilder>(
                variant_,
                ((bitField0_ & 0x00000004) == 0x00000004),
                getParentForChildren(),
                isClean());
        variant_ = null;
      }
      return variantBuilder_;
    }

    private io.opencannabis.schema.inventory.InventoryState state_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.opencannabis.schema.inventory.InventoryState, io.opencannabis.schema.inventory.InventoryState.Builder, io.opencannabis.schema.inventory.InventoryStateOrBuilder> stateBuilder_;
    /**
     * <pre>
     * Current/active state for this inventory product. This includes the active status and coordinates for the item, with
     * timestamping information detailing when the status last changed.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryState state = 10;</code>
     */
    public boolean hasState() {
      return stateBuilder_ != null || state_ != null;
    }
    /**
     * <pre>
     * Current/active state for this inventory product. This includes the active status and coordinates for the item, with
     * timestamping information detailing when the status last changed.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryState state = 10;</code>
     */
    public io.opencannabis.schema.inventory.InventoryState getState() {
      if (stateBuilder_ == null) {
        return state_ == null ? io.opencannabis.schema.inventory.InventoryState.getDefaultInstance() : state_;
      } else {
        return stateBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Current/active state for this inventory product. This includes the active status and coordinates for the item, with
     * timestamping information detailing when the status last changed.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryState state = 10;</code>
     */
    public Builder setState(io.opencannabis.schema.inventory.InventoryState value) {
      if (stateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        state_ = value;
        onChanged();
      } else {
        stateBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Current/active state for this inventory product. This includes the active status and coordinates for the item, with
     * timestamping information detailing when the status last changed.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryState state = 10;</code>
     */
    public Builder setState(
        io.opencannabis.schema.inventory.InventoryState.Builder builderForValue) {
      if (stateBuilder_ == null) {
        state_ = builderForValue.build();
        onChanged();
      } else {
        stateBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Current/active state for this inventory product. This includes the active status and coordinates for the item, with
     * timestamping information detailing when the status last changed.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryState state = 10;</code>
     */
    public Builder mergeState(io.opencannabis.schema.inventory.InventoryState value) {
      if (stateBuilder_ == null) {
        if (state_ != null) {
          state_ =
            io.opencannabis.schema.inventory.InventoryState.newBuilder(state_).mergeFrom(value).buildPartial();
        } else {
          state_ = value;
        }
        onChanged();
      } else {
        stateBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Current/active state for this inventory product. This includes the active status and coordinates for the item, with
     * timestamping information detailing when the status last changed.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryState state = 10;</code>
     */
    public Builder clearState() {
      if (stateBuilder_ == null) {
        state_ = null;
        onChanged();
      } else {
        state_ = null;
        stateBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Current/active state for this inventory product. This includes the active status and coordinates for the item, with
     * timestamping information detailing when the status last changed.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryState state = 10;</code>
     */
    public io.opencannabis.schema.inventory.InventoryState.Builder getStateBuilder() {
      
      onChanged();
      return getStateFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Current/active state for this inventory product. This includes the active status and coordinates for the item, with
     * timestamping information detailing when the status last changed.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryState state = 10;</code>
     */
    public io.opencannabis.schema.inventory.InventoryStateOrBuilder getStateOrBuilder() {
      if (stateBuilder_ != null) {
        return stateBuilder_.getMessageOrBuilder();
      } else {
        return state_ == null ?
            io.opencannabis.schema.inventory.InventoryState.getDefaultInstance() : state_;
      }
    }
    /**
     * <pre>
     * Current/active state for this inventory product. This includes the active status and coordinates for the item, with
     * timestamping information detailing when the status last changed.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryState state = 10;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.opencannabis.schema.inventory.InventoryState, io.opencannabis.schema.inventory.InventoryState.Builder, io.opencannabis.schema.inventory.InventoryStateOrBuilder> 
        getStateFieldBuilder() {
      if (stateBuilder_ == null) {
        stateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.opencannabis.schema.inventory.InventoryState, io.opencannabis.schema.inventory.InventoryState.Builder, io.opencannabis.schema.inventory.InventoryStateOrBuilder>(
                getState(),
                getParentForChildren(),
                isClean());
        state_ = null;
      }
      return stateBuilder_;
    }

    private java.util.List<io.opencannabis.schema.inventory.InventoryState> history_ =
      java.util.Collections.emptyList();
    private void ensureHistoryIsMutable() {
      if (!((bitField0_ & 0x00000010) == 0x00000010)) {
        history_ = new java.util.ArrayList<io.opencannabis.schema.inventory.InventoryState>(history_);
        bitField0_ |= 0x00000010;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.opencannabis.schema.inventory.InventoryState, io.opencannabis.schema.inventory.InventoryState.Builder, io.opencannabis.schema.inventory.InventoryStateOrBuilder> historyBuilder_;

    /**
     * <pre>
     * Full history for an inventory product, including every inventory state for the item since its creation. Every item
     * in inventory begins with exactly one history entry, stored in the `state` property. Once a second history entry is
     * added for the inventory item, `history` is initialized with the old state as the first item, and `state` is
     * replaced with the new state.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.InventoryState history = 11;</code>
     */
    public java.util.List<io.opencannabis.schema.inventory.InventoryState> getHistoryList() {
      if (historyBuilder_ == null) {
        return java.util.Collections.unmodifiableList(history_);
      } else {
        return historyBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Full history for an inventory product, including every inventory state for the item since its creation. Every item
     * in inventory begins with exactly one history entry, stored in the `state` property. Once a second history entry is
     * added for the inventory item, `history` is initialized with the old state as the first item, and `state` is
     * replaced with the new state.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.InventoryState history = 11;</code>
     */
    public int getHistoryCount() {
      if (historyBuilder_ == null) {
        return history_.size();
      } else {
        return historyBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Full history for an inventory product, including every inventory state for the item since its creation. Every item
     * in inventory begins with exactly one history entry, stored in the `state` property. Once a second history entry is
     * added for the inventory item, `history` is initialized with the old state as the first item, and `state` is
     * replaced with the new state.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.InventoryState history = 11;</code>
     */
    public io.opencannabis.schema.inventory.InventoryState getHistory(int index) {
      if (historyBuilder_ == null) {
        return history_.get(index);
      } else {
        return historyBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Full history for an inventory product, including every inventory state for the item since its creation. Every item
     * in inventory begins with exactly one history entry, stored in the `state` property. Once a second history entry is
     * added for the inventory item, `history` is initialized with the old state as the first item, and `state` is
     * replaced with the new state.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.InventoryState history = 11;</code>
     */
    public Builder setHistory(
        int index, io.opencannabis.schema.inventory.InventoryState value) {
      if (historyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHistoryIsMutable();
        history_.set(index, value);
        onChanged();
      } else {
        historyBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Full history for an inventory product, including every inventory state for the item since its creation. Every item
     * in inventory begins with exactly one history entry, stored in the `state` property. Once a second history entry is
     * added for the inventory item, `history` is initialized with the old state as the first item, and `state` is
     * replaced with the new state.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.InventoryState history = 11;</code>
     */
    public Builder setHistory(
        int index, io.opencannabis.schema.inventory.InventoryState.Builder builderForValue) {
      if (historyBuilder_ == null) {
        ensureHistoryIsMutable();
        history_.set(index, builderForValue.build());
        onChanged();
      } else {
        historyBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Full history for an inventory product, including every inventory state for the item since its creation. Every item
     * in inventory begins with exactly one history entry, stored in the `state` property. Once a second history entry is
     * added for the inventory item, `history` is initialized with the old state as the first item, and `state` is
     * replaced with the new state.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.InventoryState history = 11;</code>
     */
    public Builder addHistory(io.opencannabis.schema.inventory.InventoryState value) {
      if (historyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHistoryIsMutable();
        history_.add(value);
        onChanged();
      } else {
        historyBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Full history for an inventory product, including every inventory state for the item since its creation. Every item
     * in inventory begins with exactly one history entry, stored in the `state` property. Once a second history entry is
     * added for the inventory item, `history` is initialized with the old state as the first item, and `state` is
     * replaced with the new state.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.InventoryState history = 11;</code>
     */
    public Builder addHistory(
        int index, io.opencannabis.schema.inventory.InventoryState value) {
      if (historyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureHistoryIsMutable();
        history_.add(index, value);
        onChanged();
      } else {
        historyBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Full history for an inventory product, including every inventory state for the item since its creation. Every item
     * in inventory begins with exactly one history entry, stored in the `state` property. Once a second history entry is
     * added for the inventory item, `history` is initialized with the old state as the first item, and `state` is
     * replaced with the new state.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.InventoryState history = 11;</code>
     */
    public Builder addHistory(
        io.opencannabis.schema.inventory.InventoryState.Builder builderForValue) {
      if (historyBuilder_ == null) {
        ensureHistoryIsMutable();
        history_.add(builderForValue.build());
        onChanged();
      } else {
        historyBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Full history for an inventory product, including every inventory state for the item since its creation. Every item
     * in inventory begins with exactly one history entry, stored in the `state` property. Once a second history entry is
     * added for the inventory item, `history` is initialized with the old state as the first item, and `state` is
     * replaced with the new state.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.InventoryState history = 11;</code>
     */
    public Builder addHistory(
        int index, io.opencannabis.schema.inventory.InventoryState.Builder builderForValue) {
      if (historyBuilder_ == null) {
        ensureHistoryIsMutable();
        history_.add(index, builderForValue.build());
        onChanged();
      } else {
        historyBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Full history for an inventory product, including every inventory state for the item since its creation. Every item
     * in inventory begins with exactly one history entry, stored in the `state` property. Once a second history entry is
     * added for the inventory item, `history` is initialized with the old state as the first item, and `state` is
     * replaced with the new state.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.InventoryState history = 11;</code>
     */
    public Builder addAllHistory(
        java.lang.Iterable<? extends io.opencannabis.schema.inventory.InventoryState> values) {
      if (historyBuilder_ == null) {
        ensureHistoryIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, history_);
        onChanged();
      } else {
        historyBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Full history for an inventory product, including every inventory state for the item since its creation. Every item
     * in inventory begins with exactly one history entry, stored in the `state` property. Once a second history entry is
     * added for the inventory item, `history` is initialized with the old state as the first item, and `state` is
     * replaced with the new state.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.InventoryState history = 11;</code>
     */
    public Builder clearHistory() {
      if (historyBuilder_ == null) {
        history_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
      } else {
        historyBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Full history for an inventory product, including every inventory state for the item since its creation. Every item
     * in inventory begins with exactly one history entry, stored in the `state` property. Once a second history entry is
     * added for the inventory item, `history` is initialized with the old state as the first item, and `state` is
     * replaced with the new state.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.InventoryState history = 11;</code>
     */
    public Builder removeHistory(int index) {
      if (historyBuilder_ == null) {
        ensureHistoryIsMutable();
        history_.remove(index);
        onChanged();
      } else {
        historyBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Full history for an inventory product, including every inventory state for the item since its creation. Every item
     * in inventory begins with exactly one history entry, stored in the `state` property. Once a second history entry is
     * added for the inventory item, `history` is initialized with the old state as the first item, and `state` is
     * replaced with the new state.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.InventoryState history = 11;</code>
     */
    public io.opencannabis.schema.inventory.InventoryState.Builder getHistoryBuilder(
        int index) {
      return getHistoryFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Full history for an inventory product, including every inventory state for the item since its creation. Every item
     * in inventory begins with exactly one history entry, stored in the `state` property. Once a second history entry is
     * added for the inventory item, `history` is initialized with the old state as the first item, and `state` is
     * replaced with the new state.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.InventoryState history = 11;</code>
     */
    public io.opencannabis.schema.inventory.InventoryStateOrBuilder getHistoryOrBuilder(
        int index) {
      if (historyBuilder_ == null) {
        return history_.get(index);  } else {
        return historyBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Full history for an inventory product, including every inventory state for the item since its creation. Every item
     * in inventory begins with exactly one history entry, stored in the `state` property. Once a second history entry is
     * added for the inventory item, `history` is initialized with the old state as the first item, and `state` is
     * replaced with the new state.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.InventoryState history = 11;</code>
     */
    public java.util.List<? extends io.opencannabis.schema.inventory.InventoryStateOrBuilder> 
         getHistoryOrBuilderList() {
      if (historyBuilder_ != null) {
        return historyBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(history_);
      }
    }
    /**
     * <pre>
     * Full history for an inventory product, including every inventory state for the item since its creation. Every item
     * in inventory begins with exactly one history entry, stored in the `state` property. Once a second history entry is
     * added for the inventory item, `history` is initialized with the old state as the first item, and `state` is
     * replaced with the new state.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.InventoryState history = 11;</code>
     */
    public io.opencannabis.schema.inventory.InventoryState.Builder addHistoryBuilder() {
      return getHistoryFieldBuilder().addBuilder(
          io.opencannabis.schema.inventory.InventoryState.getDefaultInstance());
    }
    /**
     * <pre>
     * Full history for an inventory product, including every inventory state for the item since its creation. Every item
     * in inventory begins with exactly one history entry, stored in the `state` property. Once a second history entry is
     * added for the inventory item, `history` is initialized with the old state as the first item, and `state` is
     * replaced with the new state.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.InventoryState history = 11;</code>
     */
    public io.opencannabis.schema.inventory.InventoryState.Builder addHistoryBuilder(
        int index) {
      return getHistoryFieldBuilder().addBuilder(
          index, io.opencannabis.schema.inventory.InventoryState.getDefaultInstance());
    }
    /**
     * <pre>
     * Full history for an inventory product, including every inventory state for the item since its creation. Every item
     * in inventory begins with exactly one history entry, stored in the `state` property. Once a second history entry is
     * added for the inventory item, `history` is initialized with the old state as the first item, and `state` is
     * replaced with the new state.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.InventoryState history = 11;</code>
     */
    public java.util.List<io.opencannabis.schema.inventory.InventoryState.Builder> 
         getHistoryBuilderList() {
      return getHistoryFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        io.opencannabis.schema.inventory.InventoryState, io.opencannabis.schema.inventory.InventoryState.Builder, io.opencannabis.schema.inventory.InventoryStateOrBuilder> 
        getHistoryFieldBuilder() {
      if (historyBuilder_ == null) {
        historyBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            io.opencannabis.schema.inventory.InventoryState, io.opencannabis.schema.inventory.InventoryState.Builder, io.opencannabis.schema.inventory.InventoryStateOrBuilder>(
                history_,
                ((bitField0_ & 0x00000010) == 0x00000010),
                getParentForChildren(),
                isClean());
        history_ = null;
      }
      return historyBuilder_;
    }

    private io.opencannabis.schema.menu.MenuProduct item_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.opencannabis.schema.menu.MenuProduct, io.opencannabis.schema.menu.MenuProduct.Builder, io.opencannabis.schema.menu.MenuProductOrBuilder> itemBuilder_;
    /**
     * <pre>
     * Holds a menu product, including all referenced content, retail-side pricing, materials information (including test
     * results), and so on.
     * </pre>
     *
     * <code>.opencannabis.products.menu.MenuProduct item = 20;</code>
     */
    public boolean hasItem() {
      return itemBuilder_ != null || item_ != null;
    }
    /**
     * <pre>
     * Holds a menu product, including all referenced content, retail-side pricing, materials information (including test
     * results), and so on.
     * </pre>
     *
     * <code>.opencannabis.products.menu.MenuProduct item = 20;</code>
     */
    public io.opencannabis.schema.menu.MenuProduct getItem() {
      if (itemBuilder_ == null) {
        return item_ == null ? io.opencannabis.schema.menu.MenuProduct.getDefaultInstance() : item_;
      } else {
        return itemBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Holds a menu product, including all referenced content, retail-side pricing, materials information (including test
     * results), and so on.
     * </pre>
     *
     * <code>.opencannabis.products.menu.MenuProduct item = 20;</code>
     */
    public Builder setItem(io.opencannabis.schema.menu.MenuProduct value) {
      if (itemBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        item_ = value;
        onChanged();
      } else {
        itemBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Holds a menu product, including all referenced content, retail-side pricing, materials information (including test
     * results), and so on.
     * </pre>
     *
     * <code>.opencannabis.products.menu.MenuProduct item = 20;</code>
     */
    public Builder setItem(
        io.opencannabis.schema.menu.MenuProduct.Builder builderForValue) {
      if (itemBuilder_ == null) {
        item_ = builderForValue.build();
        onChanged();
      } else {
        itemBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Holds a menu product, including all referenced content, retail-side pricing, materials information (including test
     * results), and so on.
     * </pre>
     *
     * <code>.opencannabis.products.menu.MenuProduct item = 20;</code>
     */
    public Builder mergeItem(io.opencannabis.schema.menu.MenuProduct value) {
      if (itemBuilder_ == null) {
        if (item_ != null) {
          item_ =
            io.opencannabis.schema.menu.MenuProduct.newBuilder(item_).mergeFrom(value).buildPartial();
        } else {
          item_ = value;
        }
        onChanged();
      } else {
        itemBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Holds a menu product, including all referenced content, retail-side pricing, materials information (including test
     * results), and so on.
     * </pre>
     *
     * <code>.opencannabis.products.menu.MenuProduct item = 20;</code>
     */
    public Builder clearItem() {
      if (itemBuilder_ == null) {
        item_ = null;
        onChanged();
      } else {
        item_ = null;
        itemBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Holds a menu product, including all referenced content, retail-side pricing, materials information (including test
     * results), and so on.
     * </pre>
     *
     * <code>.opencannabis.products.menu.MenuProduct item = 20;</code>
     */
    public io.opencannabis.schema.menu.MenuProduct.Builder getItemBuilder() {
      
      onChanged();
      return getItemFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Holds a menu product, including all referenced content, retail-side pricing, materials information (including test
     * results), and so on.
     * </pre>
     *
     * <code>.opencannabis.products.menu.MenuProduct item = 20;</code>
     */
    public io.opencannabis.schema.menu.MenuProductOrBuilder getItemOrBuilder() {
      if (itemBuilder_ != null) {
        return itemBuilder_.getMessageOrBuilder();
      } else {
        return item_ == null ?
            io.opencannabis.schema.menu.MenuProduct.getDefaultInstance() : item_;
      }
    }
    /**
     * <pre>
     * Holds a menu product, including all referenced content, retail-side pricing, materials information (including test
     * results), and so on.
     * </pre>
     *
     * <code>.opencannabis.products.menu.MenuProduct item = 20;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.opencannabis.schema.menu.MenuProduct, io.opencannabis.schema.menu.MenuProduct.Builder, io.opencannabis.schema.menu.MenuProductOrBuilder> 
        getItemFieldBuilder() {
      if (itemBuilder_ == null) {
        itemBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.opencannabis.schema.menu.MenuProduct, io.opencannabis.schema.menu.MenuProduct.Builder, io.opencannabis.schema.menu.MenuProductOrBuilder>(
                getItem(),
                getParentForChildren(),
                isClean());
        item_ = null;
      }
      return itemBuilder_;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:opencannabis.inventory.InventoryProduct)
  }

  // @@protoc_insertion_point(class_scope:opencannabis.inventory.InventoryProduct)
  private static final io.opencannabis.schema.inventory.InventoryProduct DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.opencannabis.schema.inventory.InventoryProduct();
  }

  public static io.opencannabis.schema.inventory.InventoryProduct getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<InventoryProduct>
      PARSER = new com.google.protobuf.AbstractParser<InventoryProduct>() {
    public InventoryProduct parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new InventoryProduct(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<InventoryProduct> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<InventoryProduct> getParserForType() {
    return PARSER;
  }

  public io.opencannabis.schema.inventory.InventoryProduct getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

