/*
 * Copyright 2018, Bloombox, LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: content/Colors.proto

package io.opencannabis.schema.content;

public final class Colors {
  private Colors() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * Specifies standard colors.
   * </pre>
   *
   * Protobuf enum {@code opencannabis.content.StandardColor}
   */
  public enum StandardColor
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Unspecified or unrecognized standard color.
     * </pre>
     *
     * <code>UNSPECIFIED_COLOR = 0;</code>
     */
    UNSPECIFIED_COLOR(0),
    /**
     * <pre>
     * The color red.
     * </pre>
     *
     * <code>RED = 1;</code>
     */
    RED(1),
    /**
     * <pre>
     * The color green.
     * </pre>
     *
     * <code>GREEN = 2;</code>
     */
    GREEN(2),
    /**
     * <pre>
     * The color blue.
     * </pre>
     *
     * <code>BLUE = 3;</code>
     */
    BLUE(3),
    /**
     * <pre>
     * The color yellow.
     * </pre>
     *
     * <code>YELLOW = 4;</code>
     */
    YELLOW(4),
    /**
     * <pre>
     * The color purple.
     * </pre>
     *
     * <code>PURPLE = 5;</code>
     */
    PURPLE(5),
    /**
     * <pre>
     * The color orange.
     * </pre>
     *
     * <code>ORANGE = 6;</code>
     */
    ORANGE(6),
    /**
     * <pre>
     * The color pink.
     * </pre>
     *
     * <code>PINK = 7;</code>
     */
    PINK(7),
    /**
     * <pre>
     * The color gray.
     * </pre>
     *
     * <code>GRAY = 8;</code>
     */
    GRAY(8),
    /**
     * <pre>
     * The color brown.
     * </pre>
     *
     * <code>BROWN = 9;</code>
     */
    BROWN(9),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Unspecified or unrecognized standard color.
     * </pre>
     *
     * <code>UNSPECIFIED_COLOR = 0;</code>
     */
    public static final int UNSPECIFIED_COLOR_VALUE = 0;
    /**
     * <pre>
     * The color red.
     * </pre>
     *
     * <code>RED = 1;</code>
     */
    public static final int RED_VALUE = 1;
    /**
     * <pre>
     * The color green.
     * </pre>
     *
     * <code>GREEN = 2;</code>
     */
    public static final int GREEN_VALUE = 2;
    /**
     * <pre>
     * The color blue.
     * </pre>
     *
     * <code>BLUE = 3;</code>
     */
    public static final int BLUE_VALUE = 3;
    /**
     * <pre>
     * The color yellow.
     * </pre>
     *
     * <code>YELLOW = 4;</code>
     */
    public static final int YELLOW_VALUE = 4;
    /**
     * <pre>
     * The color purple.
     * </pre>
     *
     * <code>PURPLE = 5;</code>
     */
    public static final int PURPLE_VALUE = 5;
    /**
     * <pre>
     * The color orange.
     * </pre>
     *
     * <code>ORANGE = 6;</code>
     */
    public static final int ORANGE_VALUE = 6;
    /**
     * <pre>
     * The color pink.
     * </pre>
     *
     * <code>PINK = 7;</code>
     */
    public static final int PINK_VALUE = 7;
    /**
     * <pre>
     * The color gray.
     * </pre>
     *
     * <code>GRAY = 8;</code>
     */
    public static final int GRAY_VALUE = 8;
    /**
     * <pre>
     * The color brown.
     * </pre>
     *
     * <code>BROWN = 9;</code>
     */
    public static final int BROWN_VALUE = 9;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static StandardColor valueOf(int value) {
      return forNumber(value);
    }

    public static StandardColor forNumber(int value) {
      switch (value) {
        case 0: return UNSPECIFIED_COLOR;
        case 1: return RED;
        case 2: return GREEN;
        case 3: return BLUE;
        case 4: return YELLOW;
        case 5: return PURPLE;
        case 6: return ORANGE;
        case 7: return PINK;
        case 8: return GRAY;
        case 9: return BROWN;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<StandardColor>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        StandardColor> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<StandardColor>() {
            public StandardColor findValueByNumber(int number) {
              return StandardColor.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return io.opencannabis.schema.content.Colors.getDescriptor().getEnumTypes().get(0);
    }

    private static final StandardColor[] VALUES = values();

    public static StandardColor valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private StandardColor(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:opencannabis.content.StandardColor)
  }

  public interface RGBAColorSpecOrBuilder extends
      // @@protoc_insertion_point(interface_extends:opencannabis.content.RGBAColorSpec)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Red value for the color.
     * </pre>
     *
     * <code>uint64 r = 1;</code>
     */
    long getR();

    /**
     * <pre>
     * Green value for the color.
     * </pre>
     *
     * <code>uint64 g = 2;</code>
     */
    long getG();

    /**
     * <pre>
     * Blue value for the color.
     * </pre>
     *
     * <code>uint64 b = 3;</code>
     */
    long getB();

    /**
     * <pre>
     * Alpha value for the color.
     * </pre>
     *
     * <code>uint64 a = 4;</code>
     */
    long getA();
  }
  /**
   * <pre>
   * Specifies a component of a high-res color specification.
   * </pre>
   *
   * Protobuf type {@code opencannabis.content.RGBAColorSpec}
   */
  public  static final class RGBAColorSpec extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:opencannabis.content.RGBAColorSpec)
      RGBAColorSpecOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RGBAColorSpec.newBuilder() to construct.
    private RGBAColorSpec(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RGBAColorSpec() {
      r_ = 0L;
      g_ = 0L;
      b_ = 0L;
      a_ = 0L;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private RGBAColorSpec(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              r_ = input.readUInt64();
              break;
            }
            case 16: {

              g_ = input.readUInt64();
              break;
            }
            case 24: {

              b_ = input.readUInt64();
              break;
            }
            case 32: {

              a_ = input.readUInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.opencannabis.schema.content.Colors.internal_static_opencannabis_content_RGBAColorSpec_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.opencannabis.schema.content.Colors.internal_static_opencannabis_content_RGBAColorSpec_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.opencannabis.schema.content.Colors.RGBAColorSpec.class, io.opencannabis.schema.content.Colors.RGBAColorSpec.Builder.class);
    }

    public static final int R_FIELD_NUMBER = 1;
    private long r_;
    /**
     * <pre>
     * Red value for the color.
     * </pre>
     *
     * <code>uint64 r = 1;</code>
     */
    public long getR() {
      return r_;
    }

    public static final int G_FIELD_NUMBER = 2;
    private long g_;
    /**
     * <pre>
     * Green value for the color.
     * </pre>
     *
     * <code>uint64 g = 2;</code>
     */
    public long getG() {
      return g_;
    }

    public static final int B_FIELD_NUMBER = 3;
    private long b_;
    /**
     * <pre>
     * Blue value for the color.
     * </pre>
     *
     * <code>uint64 b = 3;</code>
     */
    public long getB() {
      return b_;
    }

    public static final int A_FIELD_NUMBER = 4;
    private long a_;
    /**
     * <pre>
     * Alpha value for the color.
     * </pre>
     *
     * <code>uint64 a = 4;</code>
     */
    public long getA() {
      return a_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (r_ != 0L) {
        output.writeUInt64(1, r_);
      }
      if (g_ != 0L) {
        output.writeUInt64(2, g_);
      }
      if (b_ != 0L) {
        output.writeUInt64(3, b_);
      }
      if (a_ != 0L) {
        output.writeUInt64(4, a_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (r_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, r_);
      }
      if (g_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, g_);
      }
      if (b_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, b_);
      }
      if (a_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(4, a_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.opencannabis.schema.content.Colors.RGBAColorSpec)) {
        return super.equals(obj);
      }
      io.opencannabis.schema.content.Colors.RGBAColorSpec other = (io.opencannabis.schema.content.Colors.RGBAColorSpec) obj;

      boolean result = true;
      result = result && (getR()
          == other.getR());
      result = result && (getG()
          == other.getG());
      result = result && (getB()
          == other.getB());
      result = result && (getA()
          == other.getA());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + R_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getR());
      hash = (37 * hash) + G_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getG());
      hash = (37 * hash) + B_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getB());
      hash = (37 * hash) + A_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getA());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.opencannabis.schema.content.Colors.RGBAColorSpec parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.opencannabis.schema.content.Colors.RGBAColorSpec parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.opencannabis.schema.content.Colors.RGBAColorSpec parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.opencannabis.schema.content.Colors.RGBAColorSpec parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.opencannabis.schema.content.Colors.RGBAColorSpec parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.opencannabis.schema.content.Colors.RGBAColorSpec parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.opencannabis.schema.content.Colors.RGBAColorSpec parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.opencannabis.schema.content.Colors.RGBAColorSpec parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.opencannabis.schema.content.Colors.RGBAColorSpec parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.opencannabis.schema.content.Colors.RGBAColorSpec parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.opencannabis.schema.content.Colors.RGBAColorSpec parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.opencannabis.schema.content.Colors.RGBAColorSpec parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.opencannabis.schema.content.Colors.RGBAColorSpec prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Specifies a component of a high-res color specification.
     * </pre>
     *
     * Protobuf type {@code opencannabis.content.RGBAColorSpec}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:opencannabis.content.RGBAColorSpec)
        io.opencannabis.schema.content.Colors.RGBAColorSpecOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.opencannabis.schema.content.Colors.internal_static_opencannabis_content_RGBAColorSpec_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.opencannabis.schema.content.Colors.internal_static_opencannabis_content_RGBAColorSpec_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.opencannabis.schema.content.Colors.RGBAColorSpec.class, io.opencannabis.schema.content.Colors.RGBAColorSpec.Builder.class);
      }

      // Construct using io.opencannabis.schema.content.Colors.RGBAColorSpec.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        r_ = 0L;

        g_ = 0L;

        b_ = 0L;

        a_ = 0L;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.opencannabis.schema.content.Colors.internal_static_opencannabis_content_RGBAColorSpec_descriptor;
      }

      public io.opencannabis.schema.content.Colors.RGBAColorSpec getDefaultInstanceForType() {
        return io.opencannabis.schema.content.Colors.RGBAColorSpec.getDefaultInstance();
      }

      public io.opencannabis.schema.content.Colors.RGBAColorSpec build() {
        io.opencannabis.schema.content.Colors.RGBAColorSpec result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.opencannabis.schema.content.Colors.RGBAColorSpec buildPartial() {
        io.opencannabis.schema.content.Colors.RGBAColorSpec result = new io.opencannabis.schema.content.Colors.RGBAColorSpec(this);
        result.r_ = r_;
        result.g_ = g_;
        result.b_ = b_;
        result.a_ = a_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.opencannabis.schema.content.Colors.RGBAColorSpec) {
          return mergeFrom((io.opencannabis.schema.content.Colors.RGBAColorSpec)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.opencannabis.schema.content.Colors.RGBAColorSpec other) {
        if (other == io.opencannabis.schema.content.Colors.RGBAColorSpec.getDefaultInstance()) return this;
        if (other.getR() != 0L) {
          setR(other.getR());
        }
        if (other.getG() != 0L) {
          setG(other.getG());
        }
        if (other.getB() != 0L) {
          setB(other.getB());
        }
        if (other.getA() != 0L) {
          setA(other.getA());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.opencannabis.schema.content.Colors.RGBAColorSpec parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.opencannabis.schema.content.Colors.RGBAColorSpec) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private long r_ ;
      /**
       * <pre>
       * Red value for the color.
       * </pre>
       *
       * <code>uint64 r = 1;</code>
       */
      public long getR() {
        return r_;
      }
      /**
       * <pre>
       * Red value for the color.
       * </pre>
       *
       * <code>uint64 r = 1;</code>
       */
      public Builder setR(long value) {
        
        r_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Red value for the color.
       * </pre>
       *
       * <code>uint64 r = 1;</code>
       */
      public Builder clearR() {
        
        r_ = 0L;
        onChanged();
        return this;
      }

      private long g_ ;
      /**
       * <pre>
       * Green value for the color.
       * </pre>
       *
       * <code>uint64 g = 2;</code>
       */
      public long getG() {
        return g_;
      }
      /**
       * <pre>
       * Green value for the color.
       * </pre>
       *
       * <code>uint64 g = 2;</code>
       */
      public Builder setG(long value) {
        
        g_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Green value for the color.
       * </pre>
       *
       * <code>uint64 g = 2;</code>
       */
      public Builder clearG() {
        
        g_ = 0L;
        onChanged();
        return this;
      }

      private long b_ ;
      /**
       * <pre>
       * Blue value for the color.
       * </pre>
       *
       * <code>uint64 b = 3;</code>
       */
      public long getB() {
        return b_;
      }
      /**
       * <pre>
       * Blue value for the color.
       * </pre>
       *
       * <code>uint64 b = 3;</code>
       */
      public Builder setB(long value) {
        
        b_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Blue value for the color.
       * </pre>
       *
       * <code>uint64 b = 3;</code>
       */
      public Builder clearB() {
        
        b_ = 0L;
        onChanged();
        return this;
      }

      private long a_ ;
      /**
       * <pre>
       * Alpha value for the color.
       * </pre>
       *
       * <code>uint64 a = 4;</code>
       */
      public long getA() {
        return a_;
      }
      /**
       * <pre>
       * Alpha value for the color.
       * </pre>
       *
       * <code>uint64 a = 4;</code>
       */
      public Builder setA(long value) {
        
        a_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Alpha value for the color.
       * </pre>
       *
       * <code>uint64 a = 4;</code>
       */
      public Builder clearA() {
        
        a_ = 0L;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:opencannabis.content.RGBAColorSpec)
    }

    // @@protoc_insertion_point(class_scope:opencannabis.content.RGBAColorSpec)
    private static final io.opencannabis.schema.content.Colors.RGBAColorSpec DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.opencannabis.schema.content.Colors.RGBAColorSpec();
    }

    public static io.opencannabis.schema.content.Colors.RGBAColorSpec getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<RGBAColorSpec>
        PARSER = new com.google.protobuf.AbstractParser<RGBAColorSpec>() {
      public RGBAColorSpec parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RGBAColorSpec(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<RGBAColorSpec> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RGBAColorSpec> getParserForType() {
      return PARSER;
    }

    public io.opencannabis.schema.content.Colors.RGBAColorSpec getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface HSBColorSpecOrBuilder extends
      // @@protoc_insertion_point(interface_extends:opencannabis.content.HSBColorSpec)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Hue value for the color.
     * </pre>
     *
     * <code>uint64 h = 1;</code>
     */
    long getH();

    /**
     * <pre>
     * Saturation value for the color.
     * </pre>
     *
     * <code>uint64 s = 2;</code>
     */
    long getS();

    /**
     * <pre>
     * Brightness value for the color.
     * </pre>
     *
     * <code>uint64 b = 3;</code>
     */
    long getB();
  }
  /**
   * <pre>
   * Specifies a hue-saturation-brightness color specification.
   * </pre>
   *
   * Protobuf type {@code opencannabis.content.HSBColorSpec}
   */
  public  static final class HSBColorSpec extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:opencannabis.content.HSBColorSpec)
      HSBColorSpecOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use HSBColorSpec.newBuilder() to construct.
    private HSBColorSpec(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private HSBColorSpec() {
      h_ = 0L;
      s_ = 0L;
      b_ = 0L;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private HSBColorSpec(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              h_ = input.readUInt64();
              break;
            }
            case 16: {

              s_ = input.readUInt64();
              break;
            }
            case 24: {

              b_ = input.readUInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.opencannabis.schema.content.Colors.internal_static_opencannabis_content_HSBColorSpec_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.opencannabis.schema.content.Colors.internal_static_opencannabis_content_HSBColorSpec_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.opencannabis.schema.content.Colors.HSBColorSpec.class, io.opencannabis.schema.content.Colors.HSBColorSpec.Builder.class);
    }

    public static final int H_FIELD_NUMBER = 1;
    private long h_;
    /**
     * <pre>
     * Hue value for the color.
     * </pre>
     *
     * <code>uint64 h = 1;</code>
     */
    public long getH() {
      return h_;
    }

    public static final int S_FIELD_NUMBER = 2;
    private long s_;
    /**
     * <pre>
     * Saturation value for the color.
     * </pre>
     *
     * <code>uint64 s = 2;</code>
     */
    public long getS() {
      return s_;
    }

    public static final int B_FIELD_NUMBER = 3;
    private long b_;
    /**
     * <pre>
     * Brightness value for the color.
     * </pre>
     *
     * <code>uint64 b = 3;</code>
     */
    public long getB() {
      return b_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (h_ != 0L) {
        output.writeUInt64(1, h_);
      }
      if (s_ != 0L) {
        output.writeUInt64(2, s_);
      }
      if (b_ != 0L) {
        output.writeUInt64(3, b_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (h_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, h_);
      }
      if (s_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, s_);
      }
      if (b_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, b_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.opencannabis.schema.content.Colors.HSBColorSpec)) {
        return super.equals(obj);
      }
      io.opencannabis.schema.content.Colors.HSBColorSpec other = (io.opencannabis.schema.content.Colors.HSBColorSpec) obj;

      boolean result = true;
      result = result && (getH()
          == other.getH());
      result = result && (getS()
          == other.getS());
      result = result && (getB()
          == other.getB());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + H_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getH());
      hash = (37 * hash) + S_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getS());
      hash = (37 * hash) + B_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getB());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.opencannabis.schema.content.Colors.HSBColorSpec parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.opencannabis.schema.content.Colors.HSBColorSpec parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.opencannabis.schema.content.Colors.HSBColorSpec parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.opencannabis.schema.content.Colors.HSBColorSpec parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.opencannabis.schema.content.Colors.HSBColorSpec parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.opencannabis.schema.content.Colors.HSBColorSpec parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.opencannabis.schema.content.Colors.HSBColorSpec parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.opencannabis.schema.content.Colors.HSBColorSpec parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.opencannabis.schema.content.Colors.HSBColorSpec parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.opencannabis.schema.content.Colors.HSBColorSpec parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.opencannabis.schema.content.Colors.HSBColorSpec parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.opencannabis.schema.content.Colors.HSBColorSpec parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.opencannabis.schema.content.Colors.HSBColorSpec prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Specifies a hue-saturation-brightness color specification.
     * </pre>
     *
     * Protobuf type {@code opencannabis.content.HSBColorSpec}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:opencannabis.content.HSBColorSpec)
        io.opencannabis.schema.content.Colors.HSBColorSpecOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.opencannabis.schema.content.Colors.internal_static_opencannabis_content_HSBColorSpec_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.opencannabis.schema.content.Colors.internal_static_opencannabis_content_HSBColorSpec_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.opencannabis.schema.content.Colors.HSBColorSpec.class, io.opencannabis.schema.content.Colors.HSBColorSpec.Builder.class);
      }

      // Construct using io.opencannabis.schema.content.Colors.HSBColorSpec.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        h_ = 0L;

        s_ = 0L;

        b_ = 0L;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.opencannabis.schema.content.Colors.internal_static_opencannabis_content_HSBColorSpec_descriptor;
      }

      public io.opencannabis.schema.content.Colors.HSBColorSpec getDefaultInstanceForType() {
        return io.opencannabis.schema.content.Colors.HSBColorSpec.getDefaultInstance();
      }

      public io.opencannabis.schema.content.Colors.HSBColorSpec build() {
        io.opencannabis.schema.content.Colors.HSBColorSpec result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.opencannabis.schema.content.Colors.HSBColorSpec buildPartial() {
        io.opencannabis.schema.content.Colors.HSBColorSpec result = new io.opencannabis.schema.content.Colors.HSBColorSpec(this);
        result.h_ = h_;
        result.s_ = s_;
        result.b_ = b_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.opencannabis.schema.content.Colors.HSBColorSpec) {
          return mergeFrom((io.opencannabis.schema.content.Colors.HSBColorSpec)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.opencannabis.schema.content.Colors.HSBColorSpec other) {
        if (other == io.opencannabis.schema.content.Colors.HSBColorSpec.getDefaultInstance()) return this;
        if (other.getH() != 0L) {
          setH(other.getH());
        }
        if (other.getS() != 0L) {
          setS(other.getS());
        }
        if (other.getB() != 0L) {
          setB(other.getB());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.opencannabis.schema.content.Colors.HSBColorSpec parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.opencannabis.schema.content.Colors.HSBColorSpec) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private long h_ ;
      /**
       * <pre>
       * Hue value for the color.
       * </pre>
       *
       * <code>uint64 h = 1;</code>
       */
      public long getH() {
        return h_;
      }
      /**
       * <pre>
       * Hue value for the color.
       * </pre>
       *
       * <code>uint64 h = 1;</code>
       */
      public Builder setH(long value) {
        
        h_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Hue value for the color.
       * </pre>
       *
       * <code>uint64 h = 1;</code>
       */
      public Builder clearH() {
        
        h_ = 0L;
        onChanged();
        return this;
      }

      private long s_ ;
      /**
       * <pre>
       * Saturation value for the color.
       * </pre>
       *
       * <code>uint64 s = 2;</code>
       */
      public long getS() {
        return s_;
      }
      /**
       * <pre>
       * Saturation value for the color.
       * </pre>
       *
       * <code>uint64 s = 2;</code>
       */
      public Builder setS(long value) {
        
        s_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Saturation value for the color.
       * </pre>
       *
       * <code>uint64 s = 2;</code>
       */
      public Builder clearS() {
        
        s_ = 0L;
        onChanged();
        return this;
      }

      private long b_ ;
      /**
       * <pre>
       * Brightness value for the color.
       * </pre>
       *
       * <code>uint64 b = 3;</code>
       */
      public long getB() {
        return b_;
      }
      /**
       * <pre>
       * Brightness value for the color.
       * </pre>
       *
       * <code>uint64 b = 3;</code>
       */
      public Builder setB(long value) {
        
        b_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Brightness value for the color.
       * </pre>
       *
       * <code>uint64 b = 3;</code>
       */
      public Builder clearB() {
        
        b_ = 0L;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:opencannabis.content.HSBColorSpec)
    }

    // @@protoc_insertion_point(class_scope:opencannabis.content.HSBColorSpec)
    private static final io.opencannabis.schema.content.Colors.HSBColorSpec DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.opencannabis.schema.content.Colors.HSBColorSpec();
    }

    public static io.opencannabis.schema.content.Colors.HSBColorSpec getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<HSBColorSpec>
        PARSER = new com.google.protobuf.AbstractParser<HSBColorSpec>() {
      public HSBColorSpec parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new HSBColorSpec(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<HSBColorSpec> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<HSBColorSpec> getParserForType() {
      return PARSER;
    }

    public io.opencannabis.schema.content.Colors.HSBColorSpec getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CMYKColorSpecOrBuilder extends
      // @@protoc_insertion_point(interface_extends:opencannabis.content.CMYKColorSpec)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Cyan avalue for the color.
     * </pre>
     *
     * <code>uint64 c = 1;</code>
     */
    long getC();

    /**
     * <pre>
     * Magenta value for the color.
     * </pre>
     *
     * <code>uint64 m = 2;</code>
     */
    long getM();

    /**
     * <pre>
     * Yellow value for the color.
     * </pre>
     *
     * <code>uint64 y = 3;</code>
     */
    long getY();

    /**
     * <pre>
     * Key value (or, black) for the color.
     * </pre>
     *
     * <code>uint64 k = 4;</code>
     */
    long getK();
  }
  /**
   * <pre>
   * Specifies a cyan-magenta-yellow-key color specification.
   * </pre>
   *
   * Protobuf type {@code opencannabis.content.CMYKColorSpec}
   */
  public  static final class CMYKColorSpec extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:opencannabis.content.CMYKColorSpec)
      CMYKColorSpecOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CMYKColorSpec.newBuilder() to construct.
    private CMYKColorSpec(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CMYKColorSpec() {
      c_ = 0L;
      m_ = 0L;
      y_ = 0L;
      k_ = 0L;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CMYKColorSpec(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              c_ = input.readUInt64();
              break;
            }
            case 16: {

              m_ = input.readUInt64();
              break;
            }
            case 24: {

              y_ = input.readUInt64();
              break;
            }
            case 32: {

              k_ = input.readUInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.opencannabis.schema.content.Colors.internal_static_opencannabis_content_CMYKColorSpec_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.opencannabis.schema.content.Colors.internal_static_opencannabis_content_CMYKColorSpec_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.opencannabis.schema.content.Colors.CMYKColorSpec.class, io.opencannabis.schema.content.Colors.CMYKColorSpec.Builder.class);
    }

    public static final int C_FIELD_NUMBER = 1;
    private long c_;
    /**
     * <pre>
     * Cyan avalue for the color.
     * </pre>
     *
     * <code>uint64 c = 1;</code>
     */
    public long getC() {
      return c_;
    }

    public static final int M_FIELD_NUMBER = 2;
    private long m_;
    /**
     * <pre>
     * Magenta value for the color.
     * </pre>
     *
     * <code>uint64 m = 2;</code>
     */
    public long getM() {
      return m_;
    }

    public static final int Y_FIELD_NUMBER = 3;
    private long y_;
    /**
     * <pre>
     * Yellow value for the color.
     * </pre>
     *
     * <code>uint64 y = 3;</code>
     */
    public long getY() {
      return y_;
    }

    public static final int K_FIELD_NUMBER = 4;
    private long k_;
    /**
     * <pre>
     * Key value (or, black) for the color.
     * </pre>
     *
     * <code>uint64 k = 4;</code>
     */
    public long getK() {
      return k_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (c_ != 0L) {
        output.writeUInt64(1, c_);
      }
      if (m_ != 0L) {
        output.writeUInt64(2, m_);
      }
      if (y_ != 0L) {
        output.writeUInt64(3, y_);
      }
      if (k_ != 0L) {
        output.writeUInt64(4, k_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (c_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, c_);
      }
      if (m_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, m_);
      }
      if (y_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, y_);
      }
      if (k_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(4, k_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.opencannabis.schema.content.Colors.CMYKColorSpec)) {
        return super.equals(obj);
      }
      io.opencannabis.schema.content.Colors.CMYKColorSpec other = (io.opencannabis.schema.content.Colors.CMYKColorSpec) obj;

      boolean result = true;
      result = result && (getC()
          == other.getC());
      result = result && (getM()
          == other.getM());
      result = result && (getY()
          == other.getY());
      result = result && (getK()
          == other.getK());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + C_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getC());
      hash = (37 * hash) + M_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getM());
      hash = (37 * hash) + Y_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getY());
      hash = (37 * hash) + K_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getK());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.opencannabis.schema.content.Colors.CMYKColorSpec parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.opencannabis.schema.content.Colors.CMYKColorSpec parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.opencannabis.schema.content.Colors.CMYKColorSpec parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.opencannabis.schema.content.Colors.CMYKColorSpec parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.opencannabis.schema.content.Colors.CMYKColorSpec parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.opencannabis.schema.content.Colors.CMYKColorSpec parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.opencannabis.schema.content.Colors.CMYKColorSpec parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.opencannabis.schema.content.Colors.CMYKColorSpec parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.opencannabis.schema.content.Colors.CMYKColorSpec parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.opencannabis.schema.content.Colors.CMYKColorSpec parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.opencannabis.schema.content.Colors.CMYKColorSpec parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.opencannabis.schema.content.Colors.CMYKColorSpec parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.opencannabis.schema.content.Colors.CMYKColorSpec prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Specifies a cyan-magenta-yellow-key color specification.
     * </pre>
     *
     * Protobuf type {@code opencannabis.content.CMYKColorSpec}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:opencannabis.content.CMYKColorSpec)
        io.opencannabis.schema.content.Colors.CMYKColorSpecOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.opencannabis.schema.content.Colors.internal_static_opencannabis_content_CMYKColorSpec_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.opencannabis.schema.content.Colors.internal_static_opencannabis_content_CMYKColorSpec_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.opencannabis.schema.content.Colors.CMYKColorSpec.class, io.opencannabis.schema.content.Colors.CMYKColorSpec.Builder.class);
      }

      // Construct using io.opencannabis.schema.content.Colors.CMYKColorSpec.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        c_ = 0L;

        m_ = 0L;

        y_ = 0L;

        k_ = 0L;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.opencannabis.schema.content.Colors.internal_static_opencannabis_content_CMYKColorSpec_descriptor;
      }

      public io.opencannabis.schema.content.Colors.CMYKColorSpec getDefaultInstanceForType() {
        return io.opencannabis.schema.content.Colors.CMYKColorSpec.getDefaultInstance();
      }

      public io.opencannabis.schema.content.Colors.CMYKColorSpec build() {
        io.opencannabis.schema.content.Colors.CMYKColorSpec result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.opencannabis.schema.content.Colors.CMYKColorSpec buildPartial() {
        io.opencannabis.schema.content.Colors.CMYKColorSpec result = new io.opencannabis.schema.content.Colors.CMYKColorSpec(this);
        result.c_ = c_;
        result.m_ = m_;
        result.y_ = y_;
        result.k_ = k_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.opencannabis.schema.content.Colors.CMYKColorSpec) {
          return mergeFrom((io.opencannabis.schema.content.Colors.CMYKColorSpec)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.opencannabis.schema.content.Colors.CMYKColorSpec other) {
        if (other == io.opencannabis.schema.content.Colors.CMYKColorSpec.getDefaultInstance()) return this;
        if (other.getC() != 0L) {
          setC(other.getC());
        }
        if (other.getM() != 0L) {
          setM(other.getM());
        }
        if (other.getY() != 0L) {
          setY(other.getY());
        }
        if (other.getK() != 0L) {
          setK(other.getK());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.opencannabis.schema.content.Colors.CMYKColorSpec parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.opencannabis.schema.content.Colors.CMYKColorSpec) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private long c_ ;
      /**
       * <pre>
       * Cyan avalue for the color.
       * </pre>
       *
       * <code>uint64 c = 1;</code>
       */
      public long getC() {
        return c_;
      }
      /**
       * <pre>
       * Cyan avalue for the color.
       * </pre>
       *
       * <code>uint64 c = 1;</code>
       */
      public Builder setC(long value) {
        
        c_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Cyan avalue for the color.
       * </pre>
       *
       * <code>uint64 c = 1;</code>
       */
      public Builder clearC() {
        
        c_ = 0L;
        onChanged();
        return this;
      }

      private long m_ ;
      /**
       * <pre>
       * Magenta value for the color.
       * </pre>
       *
       * <code>uint64 m = 2;</code>
       */
      public long getM() {
        return m_;
      }
      /**
       * <pre>
       * Magenta value for the color.
       * </pre>
       *
       * <code>uint64 m = 2;</code>
       */
      public Builder setM(long value) {
        
        m_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Magenta value for the color.
       * </pre>
       *
       * <code>uint64 m = 2;</code>
       */
      public Builder clearM() {
        
        m_ = 0L;
        onChanged();
        return this;
      }

      private long y_ ;
      /**
       * <pre>
       * Yellow value for the color.
       * </pre>
       *
       * <code>uint64 y = 3;</code>
       */
      public long getY() {
        return y_;
      }
      /**
       * <pre>
       * Yellow value for the color.
       * </pre>
       *
       * <code>uint64 y = 3;</code>
       */
      public Builder setY(long value) {
        
        y_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Yellow value for the color.
       * </pre>
       *
       * <code>uint64 y = 3;</code>
       */
      public Builder clearY() {
        
        y_ = 0L;
        onChanged();
        return this;
      }

      private long k_ ;
      /**
       * <pre>
       * Key value (or, black) for the color.
       * </pre>
       *
       * <code>uint64 k = 4;</code>
       */
      public long getK() {
        return k_;
      }
      /**
       * <pre>
       * Key value (or, black) for the color.
       * </pre>
       *
       * <code>uint64 k = 4;</code>
       */
      public Builder setK(long value) {
        
        k_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Key value (or, black) for the color.
       * </pre>
       *
       * <code>uint64 k = 4;</code>
       */
      public Builder clearK() {
        
        k_ = 0L;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:opencannabis.content.CMYKColorSpec)
    }

    // @@protoc_insertion_point(class_scope:opencannabis.content.CMYKColorSpec)
    private static final io.opencannabis.schema.content.Colors.CMYKColorSpec DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.opencannabis.schema.content.Colors.CMYKColorSpec();
    }

    public static io.opencannabis.schema.content.Colors.CMYKColorSpec getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CMYKColorSpec>
        PARSER = new com.google.protobuf.AbstractParser<CMYKColorSpec>() {
      public CMYKColorSpec parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CMYKColorSpec(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CMYKColorSpec> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CMYKColorSpec> getParserForType() {
      return PARSER;
    }

    public io.opencannabis.schema.content.Colors.CMYKColorSpec getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ColorOrBuilder extends
      // @@protoc_insertion_point(interface_extends:opencannabis.content.Color)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Specifies a reference to a standard, simple color.
     * </pre>
     *
     * <code>.opencannabis.content.StandardColor standard = 1;</code>
     */
    int getStandardValue();
    /**
     * <pre>
     * Specifies a reference to a standard, simple color.
     * </pre>
     *
     * <code>.opencannabis.content.StandardColor standard = 1;</code>
     */
    io.opencannabis.schema.content.Colors.StandardColor getStandard();

    /**
     * <pre>
     * Specifies a reference to a color by RGB hex code.
     * </pre>
     *
     * <code>string hex = 2;</code>
     */
    java.lang.String getHex();
    /**
     * <pre>
     * Specifies a reference to a color by RGB hex code.
     * </pre>
     *
     * <code>string hex = 2;</code>
     */
    com.google.protobuf.ByteString
        getHexBytes();

    /**
     * <pre>
     * Specifies a full RGBA color.
     * </pre>
     *
     * <code>.opencannabis.content.RGBAColorSpec rgba = 3;</code>
     */
    boolean hasRgba();
    /**
     * <pre>
     * Specifies a full RGBA color.
     * </pre>
     *
     * <code>.opencannabis.content.RGBAColorSpec rgba = 3;</code>
     */
    io.opencannabis.schema.content.Colors.RGBAColorSpec getRgba();
    /**
     * <pre>
     * Specifies a full RGBA color.
     * </pre>
     *
     * <code>.opencannabis.content.RGBAColorSpec rgba = 3;</code>
     */
    io.opencannabis.schema.content.Colors.RGBAColorSpecOrBuilder getRgbaOrBuilder();

    /**
     * <pre>
     * Specifies an HSB-based color.
     * </pre>
     *
     * <code>.opencannabis.content.HSBColorSpec hsb = 4;</code>
     */
    boolean hasHsb();
    /**
     * <pre>
     * Specifies an HSB-based color.
     * </pre>
     *
     * <code>.opencannabis.content.HSBColorSpec hsb = 4;</code>
     */
    io.opencannabis.schema.content.Colors.HSBColorSpec getHsb();
    /**
     * <pre>
     * Specifies an HSB-based color.
     * </pre>
     *
     * <code>.opencannabis.content.HSBColorSpec hsb = 4;</code>
     */
    io.opencannabis.schema.content.Colors.HSBColorSpecOrBuilder getHsbOrBuilder();

    /**
     * <pre>
     * Specifies a CMYK-based color.
     * </pre>
     *
     * <code>.opencannabis.content.CMYKColorSpec cmyk = 5;</code>
     */
    boolean hasCmyk();
    /**
     * <pre>
     * Specifies a CMYK-based color.
     * </pre>
     *
     * <code>.opencannabis.content.CMYKColorSpec cmyk = 5;</code>
     */
    io.opencannabis.schema.content.Colors.CMYKColorSpec getCmyk();
    /**
     * <pre>
     * Specifies a CMYK-based color.
     * </pre>
     *
     * <code>.opencannabis.content.CMYKColorSpec cmyk = 5;</code>
     */
    io.opencannabis.schema.content.Colors.CMYKColorSpecOrBuilder getCmykOrBuilder();

    public io.opencannabis.schema.content.Colors.Color.SpecCase getSpecCase();
  }
  /**
   * <pre>
   * Specifies an individual color, via standard reference, or hex, or some other form.
   * </pre>
   *
   * Protobuf type {@code opencannabis.content.Color}
   */
  public  static final class Color extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:opencannabis.content.Color)
      ColorOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Color.newBuilder() to construct.
    private Color(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Color() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Color(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              specCase_ = 1;
              spec_ = rawValue;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();
              specCase_ = 2;
              spec_ = s;
              break;
            }
            case 26: {
              io.opencannabis.schema.content.Colors.RGBAColorSpec.Builder subBuilder = null;
              if (specCase_ == 3) {
                subBuilder = ((io.opencannabis.schema.content.Colors.RGBAColorSpec) spec_).toBuilder();
              }
              spec_ =
                  input.readMessage(io.opencannabis.schema.content.Colors.RGBAColorSpec.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((io.opencannabis.schema.content.Colors.RGBAColorSpec) spec_);
                spec_ = subBuilder.buildPartial();
              }
              specCase_ = 3;
              break;
            }
            case 34: {
              io.opencannabis.schema.content.Colors.HSBColorSpec.Builder subBuilder = null;
              if (specCase_ == 4) {
                subBuilder = ((io.opencannabis.schema.content.Colors.HSBColorSpec) spec_).toBuilder();
              }
              spec_ =
                  input.readMessage(io.opencannabis.schema.content.Colors.HSBColorSpec.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((io.opencannabis.schema.content.Colors.HSBColorSpec) spec_);
                spec_ = subBuilder.buildPartial();
              }
              specCase_ = 4;
              break;
            }
            case 42: {
              io.opencannabis.schema.content.Colors.CMYKColorSpec.Builder subBuilder = null;
              if (specCase_ == 5) {
                subBuilder = ((io.opencannabis.schema.content.Colors.CMYKColorSpec) spec_).toBuilder();
              }
              spec_ =
                  input.readMessage(io.opencannabis.schema.content.Colors.CMYKColorSpec.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((io.opencannabis.schema.content.Colors.CMYKColorSpec) spec_);
                spec_ = subBuilder.buildPartial();
              }
              specCase_ = 5;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.opencannabis.schema.content.Colors.internal_static_opencannabis_content_Color_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.opencannabis.schema.content.Colors.internal_static_opencannabis_content_Color_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.opencannabis.schema.content.Colors.Color.class, io.opencannabis.schema.content.Colors.Color.Builder.class);
    }

    private int specCase_ = 0;
    private java.lang.Object spec_;
    public enum SpecCase
        implements com.google.protobuf.Internal.EnumLite {
      STANDARD(1),
      HEX(2),
      RGBA(3),
      HSB(4),
      CMYK(5),
      SPEC_NOT_SET(0);
      private final int value;
      private SpecCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static SpecCase valueOf(int value) {
        return forNumber(value);
      }

      public static SpecCase forNumber(int value) {
        switch (value) {
          case 1: return STANDARD;
          case 2: return HEX;
          case 3: return RGBA;
          case 4: return HSB;
          case 5: return CMYK;
          case 0: return SPEC_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public SpecCase
    getSpecCase() {
      return SpecCase.forNumber(
          specCase_);
    }

    public static final int STANDARD_FIELD_NUMBER = 1;
    /**
     * <pre>
     * Specifies a reference to a standard, simple color.
     * </pre>
     *
     * <code>.opencannabis.content.StandardColor standard = 1;</code>
     */
    public int getStandardValue() {
      if (specCase_ == 1) {
        return (java.lang.Integer) spec_;
      }
      return 0;
    }
    /**
     * <pre>
     * Specifies a reference to a standard, simple color.
     * </pre>
     *
     * <code>.opencannabis.content.StandardColor standard = 1;</code>
     */
    public io.opencannabis.schema.content.Colors.StandardColor getStandard() {
      if (specCase_ == 1) {
        io.opencannabis.schema.content.Colors.StandardColor result = io.opencannabis.schema.content.Colors.StandardColor.valueOf(
            (java.lang.Integer) spec_);
        return result == null ? io.opencannabis.schema.content.Colors.StandardColor.UNRECOGNIZED : result;
      }
      return io.opencannabis.schema.content.Colors.StandardColor.UNSPECIFIED_COLOR;
    }

    public static final int HEX_FIELD_NUMBER = 2;
    /**
     * <pre>
     * Specifies a reference to a color by RGB hex code.
     * </pre>
     *
     * <code>string hex = 2;</code>
     */
    public java.lang.String getHex() {
      java.lang.Object ref = "";
      if (specCase_ == 2) {
        ref = spec_;
      }
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (specCase_ == 2) {
          spec_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Specifies a reference to a color by RGB hex code.
     * </pre>
     *
     * <code>string hex = 2;</code>
     */
    public com.google.protobuf.ByteString
        getHexBytes() {
      java.lang.Object ref = "";
      if (specCase_ == 2) {
        ref = spec_;
      }
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (specCase_ == 2) {
          spec_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int RGBA_FIELD_NUMBER = 3;
    /**
     * <pre>
     * Specifies a full RGBA color.
     * </pre>
     *
     * <code>.opencannabis.content.RGBAColorSpec rgba = 3;</code>
     */
    public boolean hasRgba() {
      return specCase_ == 3;
    }
    /**
     * <pre>
     * Specifies a full RGBA color.
     * </pre>
     *
     * <code>.opencannabis.content.RGBAColorSpec rgba = 3;</code>
     */
    public io.opencannabis.schema.content.Colors.RGBAColorSpec getRgba() {
      if (specCase_ == 3) {
         return (io.opencannabis.schema.content.Colors.RGBAColorSpec) spec_;
      }
      return io.opencannabis.schema.content.Colors.RGBAColorSpec.getDefaultInstance();
    }
    /**
     * <pre>
     * Specifies a full RGBA color.
     * </pre>
     *
     * <code>.opencannabis.content.RGBAColorSpec rgba = 3;</code>
     */
    public io.opencannabis.schema.content.Colors.RGBAColorSpecOrBuilder getRgbaOrBuilder() {
      if (specCase_ == 3) {
         return (io.opencannabis.schema.content.Colors.RGBAColorSpec) spec_;
      }
      return io.opencannabis.schema.content.Colors.RGBAColorSpec.getDefaultInstance();
    }

    public static final int HSB_FIELD_NUMBER = 4;
    /**
     * <pre>
     * Specifies an HSB-based color.
     * </pre>
     *
     * <code>.opencannabis.content.HSBColorSpec hsb = 4;</code>
     */
    public boolean hasHsb() {
      return specCase_ == 4;
    }
    /**
     * <pre>
     * Specifies an HSB-based color.
     * </pre>
     *
     * <code>.opencannabis.content.HSBColorSpec hsb = 4;</code>
     */
    public io.opencannabis.schema.content.Colors.HSBColorSpec getHsb() {
      if (specCase_ == 4) {
         return (io.opencannabis.schema.content.Colors.HSBColorSpec) spec_;
      }
      return io.opencannabis.schema.content.Colors.HSBColorSpec.getDefaultInstance();
    }
    /**
     * <pre>
     * Specifies an HSB-based color.
     * </pre>
     *
     * <code>.opencannabis.content.HSBColorSpec hsb = 4;</code>
     */
    public io.opencannabis.schema.content.Colors.HSBColorSpecOrBuilder getHsbOrBuilder() {
      if (specCase_ == 4) {
         return (io.opencannabis.schema.content.Colors.HSBColorSpec) spec_;
      }
      return io.opencannabis.schema.content.Colors.HSBColorSpec.getDefaultInstance();
    }

    public static final int CMYK_FIELD_NUMBER = 5;
    /**
     * <pre>
     * Specifies a CMYK-based color.
     * </pre>
     *
     * <code>.opencannabis.content.CMYKColorSpec cmyk = 5;</code>
     */
    public boolean hasCmyk() {
      return specCase_ == 5;
    }
    /**
     * <pre>
     * Specifies a CMYK-based color.
     * </pre>
     *
     * <code>.opencannabis.content.CMYKColorSpec cmyk = 5;</code>
     */
    public io.opencannabis.schema.content.Colors.CMYKColorSpec getCmyk() {
      if (specCase_ == 5) {
         return (io.opencannabis.schema.content.Colors.CMYKColorSpec) spec_;
      }
      return io.opencannabis.schema.content.Colors.CMYKColorSpec.getDefaultInstance();
    }
    /**
     * <pre>
     * Specifies a CMYK-based color.
     * </pre>
     *
     * <code>.opencannabis.content.CMYKColorSpec cmyk = 5;</code>
     */
    public io.opencannabis.schema.content.Colors.CMYKColorSpecOrBuilder getCmykOrBuilder() {
      if (specCase_ == 5) {
         return (io.opencannabis.schema.content.Colors.CMYKColorSpec) spec_;
      }
      return io.opencannabis.schema.content.Colors.CMYKColorSpec.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (specCase_ == 1) {
        output.writeEnum(1, ((java.lang.Integer) spec_));
      }
      if (specCase_ == 2) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, spec_);
      }
      if (specCase_ == 3) {
        output.writeMessage(3, (io.opencannabis.schema.content.Colors.RGBAColorSpec) spec_);
      }
      if (specCase_ == 4) {
        output.writeMessage(4, (io.opencannabis.schema.content.Colors.HSBColorSpec) spec_);
      }
      if (specCase_ == 5) {
        output.writeMessage(5, (io.opencannabis.schema.content.Colors.CMYKColorSpec) spec_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (specCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, ((java.lang.Integer) spec_));
      }
      if (specCase_ == 2) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, spec_);
      }
      if (specCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (io.opencannabis.schema.content.Colors.RGBAColorSpec) spec_);
      }
      if (specCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (io.opencannabis.schema.content.Colors.HSBColorSpec) spec_);
      }
      if (specCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, (io.opencannabis.schema.content.Colors.CMYKColorSpec) spec_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.opencannabis.schema.content.Colors.Color)) {
        return super.equals(obj);
      }
      io.opencannabis.schema.content.Colors.Color other = (io.opencannabis.schema.content.Colors.Color) obj;

      boolean result = true;
      result = result && getSpecCase().equals(
          other.getSpecCase());
      if (!result) return false;
      switch (specCase_) {
        case 1:
          result = result && getStandardValue()
              == other.getStandardValue();
          break;
        case 2:
          result = result && getHex()
              .equals(other.getHex());
          break;
        case 3:
          result = result && getRgba()
              .equals(other.getRgba());
          break;
        case 4:
          result = result && getHsb()
              .equals(other.getHsb());
          break;
        case 5:
          result = result && getCmyk()
              .equals(other.getCmyk());
          break;
        case 0:
        default:
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (specCase_) {
        case 1:
          hash = (37 * hash) + STANDARD_FIELD_NUMBER;
          hash = (53 * hash) + getStandardValue();
          break;
        case 2:
          hash = (37 * hash) + HEX_FIELD_NUMBER;
          hash = (53 * hash) + getHex().hashCode();
          break;
        case 3:
          hash = (37 * hash) + RGBA_FIELD_NUMBER;
          hash = (53 * hash) + getRgba().hashCode();
          break;
        case 4:
          hash = (37 * hash) + HSB_FIELD_NUMBER;
          hash = (53 * hash) + getHsb().hashCode();
          break;
        case 5:
          hash = (37 * hash) + CMYK_FIELD_NUMBER;
          hash = (53 * hash) + getCmyk().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.opencannabis.schema.content.Colors.Color parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.opencannabis.schema.content.Colors.Color parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.opencannabis.schema.content.Colors.Color parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.opencannabis.schema.content.Colors.Color parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.opencannabis.schema.content.Colors.Color parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.opencannabis.schema.content.Colors.Color parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.opencannabis.schema.content.Colors.Color parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.opencannabis.schema.content.Colors.Color parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.opencannabis.schema.content.Colors.Color parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.opencannabis.schema.content.Colors.Color parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.opencannabis.schema.content.Colors.Color parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.opencannabis.schema.content.Colors.Color parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.opencannabis.schema.content.Colors.Color prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Specifies an individual color, via standard reference, or hex, or some other form.
     * </pre>
     *
     * Protobuf type {@code opencannabis.content.Color}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:opencannabis.content.Color)
        io.opencannabis.schema.content.Colors.ColorOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.opencannabis.schema.content.Colors.internal_static_opencannabis_content_Color_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.opencannabis.schema.content.Colors.internal_static_opencannabis_content_Color_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.opencannabis.schema.content.Colors.Color.class, io.opencannabis.schema.content.Colors.Color.Builder.class);
      }

      // Construct using io.opencannabis.schema.content.Colors.Color.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        specCase_ = 0;
        spec_ = null;
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.opencannabis.schema.content.Colors.internal_static_opencannabis_content_Color_descriptor;
      }

      public io.opencannabis.schema.content.Colors.Color getDefaultInstanceForType() {
        return io.opencannabis.schema.content.Colors.Color.getDefaultInstance();
      }

      public io.opencannabis.schema.content.Colors.Color build() {
        io.opencannabis.schema.content.Colors.Color result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.opencannabis.schema.content.Colors.Color buildPartial() {
        io.opencannabis.schema.content.Colors.Color result = new io.opencannabis.schema.content.Colors.Color(this);
        if (specCase_ == 1) {
          result.spec_ = spec_;
        }
        if (specCase_ == 2) {
          result.spec_ = spec_;
        }
        if (specCase_ == 3) {
          if (rgbaBuilder_ == null) {
            result.spec_ = spec_;
          } else {
            result.spec_ = rgbaBuilder_.build();
          }
        }
        if (specCase_ == 4) {
          if (hsbBuilder_ == null) {
            result.spec_ = spec_;
          } else {
            result.spec_ = hsbBuilder_.build();
          }
        }
        if (specCase_ == 5) {
          if (cmykBuilder_ == null) {
            result.spec_ = spec_;
          } else {
            result.spec_ = cmykBuilder_.build();
          }
        }
        result.specCase_ = specCase_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.opencannabis.schema.content.Colors.Color) {
          return mergeFrom((io.opencannabis.schema.content.Colors.Color)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.opencannabis.schema.content.Colors.Color other) {
        if (other == io.opencannabis.schema.content.Colors.Color.getDefaultInstance()) return this;
        switch (other.getSpecCase()) {
          case STANDARD: {
            setStandardValue(other.getStandardValue());
            break;
          }
          case HEX: {
            specCase_ = 2;
            spec_ = other.spec_;
            onChanged();
            break;
          }
          case RGBA: {
            mergeRgba(other.getRgba());
            break;
          }
          case HSB: {
            mergeHsb(other.getHsb());
            break;
          }
          case CMYK: {
            mergeCmyk(other.getCmyk());
            break;
          }
          case SPEC_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.opencannabis.schema.content.Colors.Color parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.opencannabis.schema.content.Colors.Color) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int specCase_ = 0;
      private java.lang.Object spec_;
      public SpecCase
          getSpecCase() {
        return SpecCase.forNumber(
            specCase_);
      }

      public Builder clearSpec() {
        specCase_ = 0;
        spec_ = null;
        onChanged();
        return this;
      }


      /**
       * <pre>
       * Specifies a reference to a standard, simple color.
       * </pre>
       *
       * <code>.opencannabis.content.StandardColor standard = 1;</code>
       */
      public int getStandardValue() {
        if (specCase_ == 1) {
          return ((java.lang.Integer) spec_).intValue();
        }
        return 0;
      }
      /**
       * <pre>
       * Specifies a reference to a standard, simple color.
       * </pre>
       *
       * <code>.opencannabis.content.StandardColor standard = 1;</code>
       */
      public Builder setStandardValue(int value) {
        specCase_ = 1;
        spec_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies a reference to a standard, simple color.
       * </pre>
       *
       * <code>.opencannabis.content.StandardColor standard = 1;</code>
       */
      public io.opencannabis.schema.content.Colors.StandardColor getStandard() {
        if (specCase_ == 1) {
          io.opencannabis.schema.content.Colors.StandardColor result = io.opencannabis.schema.content.Colors.StandardColor.valueOf(
              (java.lang.Integer) spec_);
          return result == null ? io.opencannabis.schema.content.Colors.StandardColor.UNRECOGNIZED : result;
        }
        return io.opencannabis.schema.content.Colors.StandardColor.UNSPECIFIED_COLOR;
      }
      /**
       * <pre>
       * Specifies a reference to a standard, simple color.
       * </pre>
       *
       * <code>.opencannabis.content.StandardColor standard = 1;</code>
       */
      public Builder setStandard(io.opencannabis.schema.content.Colors.StandardColor value) {
        if (value == null) {
          throw new NullPointerException();
        }
        specCase_ = 1;
        spec_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies a reference to a standard, simple color.
       * </pre>
       *
       * <code>.opencannabis.content.StandardColor standard = 1;</code>
       */
      public Builder clearStandard() {
        if (specCase_ == 1) {
          specCase_ = 0;
          spec_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <pre>
       * Specifies a reference to a color by RGB hex code.
       * </pre>
       *
       * <code>string hex = 2;</code>
       */
      public java.lang.String getHex() {
        java.lang.Object ref = "";
        if (specCase_ == 2) {
          ref = spec_;
        }
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (specCase_ == 2) {
            spec_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Specifies a reference to a color by RGB hex code.
       * </pre>
       *
       * <code>string hex = 2;</code>
       */
      public com.google.protobuf.ByteString
          getHexBytes() {
        java.lang.Object ref = "";
        if (specCase_ == 2) {
          ref = spec_;
        }
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          if (specCase_ == 2) {
            spec_ = b;
          }
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Specifies a reference to a color by RGB hex code.
       * </pre>
       *
       * <code>string hex = 2;</code>
       */
      public Builder setHex(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  specCase_ = 2;
        spec_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies a reference to a color by RGB hex code.
       * </pre>
       *
       * <code>string hex = 2;</code>
       */
      public Builder clearHex() {
        if (specCase_ == 2) {
          specCase_ = 0;
          spec_ = null;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Specifies a reference to a color by RGB hex code.
       * </pre>
       *
       * <code>string hex = 2;</code>
       */
      public Builder setHexBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        specCase_ = 2;
        spec_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.content.Colors.RGBAColorSpec, io.opencannabis.schema.content.Colors.RGBAColorSpec.Builder, io.opencannabis.schema.content.Colors.RGBAColorSpecOrBuilder> rgbaBuilder_;
      /**
       * <pre>
       * Specifies a full RGBA color.
       * </pre>
       *
       * <code>.opencannabis.content.RGBAColorSpec rgba = 3;</code>
       */
      public boolean hasRgba() {
        return specCase_ == 3;
      }
      /**
       * <pre>
       * Specifies a full RGBA color.
       * </pre>
       *
       * <code>.opencannabis.content.RGBAColorSpec rgba = 3;</code>
       */
      public io.opencannabis.schema.content.Colors.RGBAColorSpec getRgba() {
        if (rgbaBuilder_ == null) {
          if (specCase_ == 3) {
            return (io.opencannabis.schema.content.Colors.RGBAColorSpec) spec_;
          }
          return io.opencannabis.schema.content.Colors.RGBAColorSpec.getDefaultInstance();
        } else {
          if (specCase_ == 3) {
            return rgbaBuilder_.getMessage();
          }
          return io.opencannabis.schema.content.Colors.RGBAColorSpec.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Specifies a full RGBA color.
       * </pre>
       *
       * <code>.opencannabis.content.RGBAColorSpec rgba = 3;</code>
       */
      public Builder setRgba(io.opencannabis.schema.content.Colors.RGBAColorSpec value) {
        if (rgbaBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          spec_ = value;
          onChanged();
        } else {
          rgbaBuilder_.setMessage(value);
        }
        specCase_ = 3;
        return this;
      }
      /**
       * <pre>
       * Specifies a full RGBA color.
       * </pre>
       *
       * <code>.opencannabis.content.RGBAColorSpec rgba = 3;</code>
       */
      public Builder setRgba(
          io.opencannabis.schema.content.Colors.RGBAColorSpec.Builder builderForValue) {
        if (rgbaBuilder_ == null) {
          spec_ = builderForValue.build();
          onChanged();
        } else {
          rgbaBuilder_.setMessage(builderForValue.build());
        }
        specCase_ = 3;
        return this;
      }
      /**
       * <pre>
       * Specifies a full RGBA color.
       * </pre>
       *
       * <code>.opencannabis.content.RGBAColorSpec rgba = 3;</code>
       */
      public Builder mergeRgba(io.opencannabis.schema.content.Colors.RGBAColorSpec value) {
        if (rgbaBuilder_ == null) {
          if (specCase_ == 3 &&
              spec_ != io.opencannabis.schema.content.Colors.RGBAColorSpec.getDefaultInstance()) {
            spec_ = io.opencannabis.schema.content.Colors.RGBAColorSpec.newBuilder((io.opencannabis.schema.content.Colors.RGBAColorSpec) spec_)
                .mergeFrom(value).buildPartial();
          } else {
            spec_ = value;
          }
          onChanged();
        } else {
          if (specCase_ == 3) {
            rgbaBuilder_.mergeFrom(value);
          }
          rgbaBuilder_.setMessage(value);
        }
        specCase_ = 3;
        return this;
      }
      /**
       * <pre>
       * Specifies a full RGBA color.
       * </pre>
       *
       * <code>.opencannabis.content.RGBAColorSpec rgba = 3;</code>
       */
      public Builder clearRgba() {
        if (rgbaBuilder_ == null) {
          if (specCase_ == 3) {
            specCase_ = 0;
            spec_ = null;
            onChanged();
          }
        } else {
          if (specCase_ == 3) {
            specCase_ = 0;
            spec_ = null;
          }
          rgbaBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Specifies a full RGBA color.
       * </pre>
       *
       * <code>.opencannabis.content.RGBAColorSpec rgba = 3;</code>
       */
      public io.opencannabis.schema.content.Colors.RGBAColorSpec.Builder getRgbaBuilder() {
        return getRgbaFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Specifies a full RGBA color.
       * </pre>
       *
       * <code>.opencannabis.content.RGBAColorSpec rgba = 3;</code>
       */
      public io.opencannabis.schema.content.Colors.RGBAColorSpecOrBuilder getRgbaOrBuilder() {
        if ((specCase_ == 3) && (rgbaBuilder_ != null)) {
          return rgbaBuilder_.getMessageOrBuilder();
        } else {
          if (specCase_ == 3) {
            return (io.opencannabis.schema.content.Colors.RGBAColorSpec) spec_;
          }
          return io.opencannabis.schema.content.Colors.RGBAColorSpec.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Specifies a full RGBA color.
       * </pre>
       *
       * <code>.opencannabis.content.RGBAColorSpec rgba = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.content.Colors.RGBAColorSpec, io.opencannabis.schema.content.Colors.RGBAColorSpec.Builder, io.opencannabis.schema.content.Colors.RGBAColorSpecOrBuilder> 
          getRgbaFieldBuilder() {
        if (rgbaBuilder_ == null) {
          if (!(specCase_ == 3)) {
            spec_ = io.opencannabis.schema.content.Colors.RGBAColorSpec.getDefaultInstance();
          }
          rgbaBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.opencannabis.schema.content.Colors.RGBAColorSpec, io.opencannabis.schema.content.Colors.RGBAColorSpec.Builder, io.opencannabis.schema.content.Colors.RGBAColorSpecOrBuilder>(
                  (io.opencannabis.schema.content.Colors.RGBAColorSpec) spec_,
                  getParentForChildren(),
                  isClean());
          spec_ = null;
        }
        specCase_ = 3;
        onChanged();;
        return rgbaBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.content.Colors.HSBColorSpec, io.opencannabis.schema.content.Colors.HSBColorSpec.Builder, io.opencannabis.schema.content.Colors.HSBColorSpecOrBuilder> hsbBuilder_;
      /**
       * <pre>
       * Specifies an HSB-based color.
       * </pre>
       *
       * <code>.opencannabis.content.HSBColorSpec hsb = 4;</code>
       */
      public boolean hasHsb() {
        return specCase_ == 4;
      }
      /**
       * <pre>
       * Specifies an HSB-based color.
       * </pre>
       *
       * <code>.opencannabis.content.HSBColorSpec hsb = 4;</code>
       */
      public io.opencannabis.schema.content.Colors.HSBColorSpec getHsb() {
        if (hsbBuilder_ == null) {
          if (specCase_ == 4) {
            return (io.opencannabis.schema.content.Colors.HSBColorSpec) spec_;
          }
          return io.opencannabis.schema.content.Colors.HSBColorSpec.getDefaultInstance();
        } else {
          if (specCase_ == 4) {
            return hsbBuilder_.getMessage();
          }
          return io.opencannabis.schema.content.Colors.HSBColorSpec.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Specifies an HSB-based color.
       * </pre>
       *
       * <code>.opencannabis.content.HSBColorSpec hsb = 4;</code>
       */
      public Builder setHsb(io.opencannabis.schema.content.Colors.HSBColorSpec value) {
        if (hsbBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          spec_ = value;
          onChanged();
        } else {
          hsbBuilder_.setMessage(value);
        }
        specCase_ = 4;
        return this;
      }
      /**
       * <pre>
       * Specifies an HSB-based color.
       * </pre>
       *
       * <code>.opencannabis.content.HSBColorSpec hsb = 4;</code>
       */
      public Builder setHsb(
          io.opencannabis.schema.content.Colors.HSBColorSpec.Builder builderForValue) {
        if (hsbBuilder_ == null) {
          spec_ = builderForValue.build();
          onChanged();
        } else {
          hsbBuilder_.setMessage(builderForValue.build());
        }
        specCase_ = 4;
        return this;
      }
      /**
       * <pre>
       * Specifies an HSB-based color.
       * </pre>
       *
       * <code>.opencannabis.content.HSBColorSpec hsb = 4;</code>
       */
      public Builder mergeHsb(io.opencannabis.schema.content.Colors.HSBColorSpec value) {
        if (hsbBuilder_ == null) {
          if (specCase_ == 4 &&
              spec_ != io.opencannabis.schema.content.Colors.HSBColorSpec.getDefaultInstance()) {
            spec_ = io.opencannabis.schema.content.Colors.HSBColorSpec.newBuilder((io.opencannabis.schema.content.Colors.HSBColorSpec) spec_)
                .mergeFrom(value).buildPartial();
          } else {
            spec_ = value;
          }
          onChanged();
        } else {
          if (specCase_ == 4) {
            hsbBuilder_.mergeFrom(value);
          }
          hsbBuilder_.setMessage(value);
        }
        specCase_ = 4;
        return this;
      }
      /**
       * <pre>
       * Specifies an HSB-based color.
       * </pre>
       *
       * <code>.opencannabis.content.HSBColorSpec hsb = 4;</code>
       */
      public Builder clearHsb() {
        if (hsbBuilder_ == null) {
          if (specCase_ == 4) {
            specCase_ = 0;
            spec_ = null;
            onChanged();
          }
        } else {
          if (specCase_ == 4) {
            specCase_ = 0;
            spec_ = null;
          }
          hsbBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Specifies an HSB-based color.
       * </pre>
       *
       * <code>.opencannabis.content.HSBColorSpec hsb = 4;</code>
       */
      public io.opencannabis.schema.content.Colors.HSBColorSpec.Builder getHsbBuilder() {
        return getHsbFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Specifies an HSB-based color.
       * </pre>
       *
       * <code>.opencannabis.content.HSBColorSpec hsb = 4;</code>
       */
      public io.opencannabis.schema.content.Colors.HSBColorSpecOrBuilder getHsbOrBuilder() {
        if ((specCase_ == 4) && (hsbBuilder_ != null)) {
          return hsbBuilder_.getMessageOrBuilder();
        } else {
          if (specCase_ == 4) {
            return (io.opencannabis.schema.content.Colors.HSBColorSpec) spec_;
          }
          return io.opencannabis.schema.content.Colors.HSBColorSpec.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Specifies an HSB-based color.
       * </pre>
       *
       * <code>.opencannabis.content.HSBColorSpec hsb = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.content.Colors.HSBColorSpec, io.opencannabis.schema.content.Colors.HSBColorSpec.Builder, io.opencannabis.schema.content.Colors.HSBColorSpecOrBuilder> 
          getHsbFieldBuilder() {
        if (hsbBuilder_ == null) {
          if (!(specCase_ == 4)) {
            spec_ = io.opencannabis.schema.content.Colors.HSBColorSpec.getDefaultInstance();
          }
          hsbBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.opencannabis.schema.content.Colors.HSBColorSpec, io.opencannabis.schema.content.Colors.HSBColorSpec.Builder, io.opencannabis.schema.content.Colors.HSBColorSpecOrBuilder>(
                  (io.opencannabis.schema.content.Colors.HSBColorSpec) spec_,
                  getParentForChildren(),
                  isClean());
          spec_ = null;
        }
        specCase_ = 4;
        onChanged();;
        return hsbBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.content.Colors.CMYKColorSpec, io.opencannabis.schema.content.Colors.CMYKColorSpec.Builder, io.opencannabis.schema.content.Colors.CMYKColorSpecOrBuilder> cmykBuilder_;
      /**
       * <pre>
       * Specifies a CMYK-based color.
       * </pre>
       *
       * <code>.opencannabis.content.CMYKColorSpec cmyk = 5;</code>
       */
      public boolean hasCmyk() {
        return specCase_ == 5;
      }
      /**
       * <pre>
       * Specifies a CMYK-based color.
       * </pre>
       *
       * <code>.opencannabis.content.CMYKColorSpec cmyk = 5;</code>
       */
      public io.opencannabis.schema.content.Colors.CMYKColorSpec getCmyk() {
        if (cmykBuilder_ == null) {
          if (specCase_ == 5) {
            return (io.opencannabis.schema.content.Colors.CMYKColorSpec) spec_;
          }
          return io.opencannabis.schema.content.Colors.CMYKColorSpec.getDefaultInstance();
        } else {
          if (specCase_ == 5) {
            return cmykBuilder_.getMessage();
          }
          return io.opencannabis.schema.content.Colors.CMYKColorSpec.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Specifies a CMYK-based color.
       * </pre>
       *
       * <code>.opencannabis.content.CMYKColorSpec cmyk = 5;</code>
       */
      public Builder setCmyk(io.opencannabis.schema.content.Colors.CMYKColorSpec value) {
        if (cmykBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          spec_ = value;
          onChanged();
        } else {
          cmykBuilder_.setMessage(value);
        }
        specCase_ = 5;
        return this;
      }
      /**
       * <pre>
       * Specifies a CMYK-based color.
       * </pre>
       *
       * <code>.opencannabis.content.CMYKColorSpec cmyk = 5;</code>
       */
      public Builder setCmyk(
          io.opencannabis.schema.content.Colors.CMYKColorSpec.Builder builderForValue) {
        if (cmykBuilder_ == null) {
          spec_ = builderForValue.build();
          onChanged();
        } else {
          cmykBuilder_.setMessage(builderForValue.build());
        }
        specCase_ = 5;
        return this;
      }
      /**
       * <pre>
       * Specifies a CMYK-based color.
       * </pre>
       *
       * <code>.opencannabis.content.CMYKColorSpec cmyk = 5;</code>
       */
      public Builder mergeCmyk(io.opencannabis.schema.content.Colors.CMYKColorSpec value) {
        if (cmykBuilder_ == null) {
          if (specCase_ == 5 &&
              spec_ != io.opencannabis.schema.content.Colors.CMYKColorSpec.getDefaultInstance()) {
            spec_ = io.opencannabis.schema.content.Colors.CMYKColorSpec.newBuilder((io.opencannabis.schema.content.Colors.CMYKColorSpec) spec_)
                .mergeFrom(value).buildPartial();
          } else {
            spec_ = value;
          }
          onChanged();
        } else {
          if (specCase_ == 5) {
            cmykBuilder_.mergeFrom(value);
          }
          cmykBuilder_.setMessage(value);
        }
        specCase_ = 5;
        return this;
      }
      /**
       * <pre>
       * Specifies a CMYK-based color.
       * </pre>
       *
       * <code>.opencannabis.content.CMYKColorSpec cmyk = 5;</code>
       */
      public Builder clearCmyk() {
        if (cmykBuilder_ == null) {
          if (specCase_ == 5) {
            specCase_ = 0;
            spec_ = null;
            onChanged();
          }
        } else {
          if (specCase_ == 5) {
            specCase_ = 0;
            spec_ = null;
          }
          cmykBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Specifies a CMYK-based color.
       * </pre>
       *
       * <code>.opencannabis.content.CMYKColorSpec cmyk = 5;</code>
       */
      public io.opencannabis.schema.content.Colors.CMYKColorSpec.Builder getCmykBuilder() {
        return getCmykFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Specifies a CMYK-based color.
       * </pre>
       *
       * <code>.opencannabis.content.CMYKColorSpec cmyk = 5;</code>
       */
      public io.opencannabis.schema.content.Colors.CMYKColorSpecOrBuilder getCmykOrBuilder() {
        if ((specCase_ == 5) && (cmykBuilder_ != null)) {
          return cmykBuilder_.getMessageOrBuilder();
        } else {
          if (specCase_ == 5) {
            return (io.opencannabis.schema.content.Colors.CMYKColorSpec) spec_;
          }
          return io.opencannabis.schema.content.Colors.CMYKColorSpec.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Specifies a CMYK-based color.
       * </pre>
       *
       * <code>.opencannabis.content.CMYKColorSpec cmyk = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.content.Colors.CMYKColorSpec, io.opencannabis.schema.content.Colors.CMYKColorSpec.Builder, io.opencannabis.schema.content.Colors.CMYKColorSpecOrBuilder> 
          getCmykFieldBuilder() {
        if (cmykBuilder_ == null) {
          if (!(specCase_ == 5)) {
            spec_ = io.opencannabis.schema.content.Colors.CMYKColorSpec.getDefaultInstance();
          }
          cmykBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.opencannabis.schema.content.Colors.CMYKColorSpec, io.opencannabis.schema.content.Colors.CMYKColorSpec.Builder, io.opencannabis.schema.content.Colors.CMYKColorSpecOrBuilder>(
                  (io.opencannabis.schema.content.Colors.CMYKColorSpec) spec_,
                  getParentForChildren(),
                  isClean());
          spec_ = null;
        }
        specCase_ = 5;
        onChanged();;
        return cmykBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:opencannabis.content.Color)
    }

    // @@protoc_insertion_point(class_scope:opencannabis.content.Color)
    private static final io.opencannabis.schema.content.Colors.Color DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.opencannabis.schema.content.Colors.Color();
    }

    public static io.opencannabis.schema.content.Colors.Color getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Color>
        PARSER = new com.google.protobuf.AbstractParser<Color>() {
      public Color parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Color(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Color> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Color> getParserForType() {
      return PARSER;
    }

    public io.opencannabis.schema.content.Colors.Color getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ColorSchemeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:opencannabis.content.ColorScheme)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Primary color for the color scheme.
     * </pre>
     *
     * <code>.opencannabis.content.Color primary = 1;</code>
     */
    boolean hasPrimary();
    /**
     * <pre>
     * Primary color for the color scheme.
     * </pre>
     *
     * <code>.opencannabis.content.Color primary = 1;</code>
     */
    io.opencannabis.schema.content.Colors.Color getPrimary();
    /**
     * <pre>
     * Primary color for the color scheme.
     * </pre>
     *
     * <code>.opencannabis.content.Color primary = 1;</code>
     */
    io.opencannabis.schema.content.Colors.ColorOrBuilder getPrimaryOrBuilder();

    /**
     * <pre>
     * Secondary color for the color scheme.
     * </pre>
     *
     * <code>.opencannabis.content.Color secondary = 2;</code>
     */
    boolean hasSecondary();
    /**
     * <pre>
     * Secondary color for the color scheme.
     * </pre>
     *
     * <code>.opencannabis.content.Color secondary = 2;</code>
     */
    io.opencannabis.schema.content.Colors.Color getSecondary();
    /**
     * <pre>
     * Secondary color for the color scheme.
     * </pre>
     *
     * <code>.opencannabis.content.Color secondary = 2;</code>
     */
    io.opencannabis.schema.content.Colors.ColorOrBuilder getSecondaryOrBuilder();

    /**
     * <pre>
     * Alert, or attention color, for the color scheme.
     * </pre>
     *
     * <code>.opencannabis.content.Color alert = 3;</code>
     */
    boolean hasAlert();
    /**
     * <pre>
     * Alert, or attention color, for the color scheme.
     * </pre>
     *
     * <code>.opencannabis.content.Color alert = 3;</code>
     */
    io.opencannabis.schema.content.Colors.Color getAlert();
    /**
     * <pre>
     * Alert, or attention color, for the color scheme.
     * </pre>
     *
     * <code>.opencannabis.content.Color alert = 3;</code>
     */
    io.opencannabis.schema.content.Colors.ColorOrBuilder getAlertOrBuilder();

    /**
     * <pre>
     * Color shades to be used in various contexts.
     * </pre>
     *
     * <code>repeated .opencannabis.content.Color shades = 4;</code>
     */
    java.util.List<io.opencannabis.schema.content.Colors.Color> 
        getShadesList();
    /**
     * <pre>
     * Color shades to be used in various contexts.
     * </pre>
     *
     * <code>repeated .opencannabis.content.Color shades = 4;</code>
     */
    io.opencannabis.schema.content.Colors.Color getShades(int index);
    /**
     * <pre>
     * Color shades to be used in various contexts.
     * </pre>
     *
     * <code>repeated .opencannabis.content.Color shades = 4;</code>
     */
    int getShadesCount();
    /**
     * <pre>
     * Color shades to be used in various contexts.
     * </pre>
     *
     * <code>repeated .opencannabis.content.Color shades = 4;</code>
     */
    java.util.List<? extends io.opencannabis.schema.content.Colors.ColorOrBuilder> 
        getShadesOrBuilderList();
    /**
     * <pre>
     * Color shades to be used in various contexts.
     * </pre>
     *
     * <code>repeated .opencannabis.content.Color shades = 4;</code>
     */
    io.opencannabis.schema.content.Colors.ColorOrBuilder getShadesOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Specifies a scheme of color selections, with primary and secondary colors and additional configurable color values.
   * </pre>
   *
   * Protobuf type {@code opencannabis.content.ColorScheme}
   */
  public  static final class ColorScheme extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:opencannabis.content.ColorScheme)
      ColorSchemeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ColorScheme.newBuilder() to construct.
    private ColorScheme(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ColorScheme() {
      shades_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ColorScheme(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              io.opencannabis.schema.content.Colors.Color.Builder subBuilder = null;
              if (primary_ != null) {
                subBuilder = primary_.toBuilder();
              }
              primary_ = input.readMessage(io.opencannabis.schema.content.Colors.Color.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(primary_);
                primary_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              io.opencannabis.schema.content.Colors.Color.Builder subBuilder = null;
              if (secondary_ != null) {
                subBuilder = secondary_.toBuilder();
              }
              secondary_ = input.readMessage(io.opencannabis.schema.content.Colors.Color.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(secondary_);
                secondary_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              io.opencannabis.schema.content.Colors.Color.Builder subBuilder = null;
              if (alert_ != null) {
                subBuilder = alert_.toBuilder();
              }
              alert_ = input.readMessage(io.opencannabis.schema.content.Colors.Color.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(alert_);
                alert_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                shades_ = new java.util.ArrayList<io.opencannabis.schema.content.Colors.Color>();
                mutable_bitField0_ |= 0x00000008;
              }
              shades_.add(
                  input.readMessage(io.opencannabis.schema.content.Colors.Color.parser(), extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          shades_ = java.util.Collections.unmodifiableList(shades_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.opencannabis.schema.content.Colors.internal_static_opencannabis_content_ColorScheme_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.opencannabis.schema.content.Colors.internal_static_opencannabis_content_ColorScheme_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.opencannabis.schema.content.Colors.ColorScheme.class, io.opencannabis.schema.content.Colors.ColorScheme.Builder.class);
    }

    private int bitField0_;
    public static final int PRIMARY_FIELD_NUMBER = 1;
    private io.opencannabis.schema.content.Colors.Color primary_;
    /**
     * <pre>
     * Primary color for the color scheme.
     * </pre>
     *
     * <code>.opencannabis.content.Color primary = 1;</code>
     */
    public boolean hasPrimary() {
      return primary_ != null;
    }
    /**
     * <pre>
     * Primary color for the color scheme.
     * </pre>
     *
     * <code>.opencannabis.content.Color primary = 1;</code>
     */
    public io.opencannabis.schema.content.Colors.Color getPrimary() {
      return primary_ == null ? io.opencannabis.schema.content.Colors.Color.getDefaultInstance() : primary_;
    }
    /**
     * <pre>
     * Primary color for the color scheme.
     * </pre>
     *
     * <code>.opencannabis.content.Color primary = 1;</code>
     */
    public io.opencannabis.schema.content.Colors.ColorOrBuilder getPrimaryOrBuilder() {
      return getPrimary();
    }

    public static final int SECONDARY_FIELD_NUMBER = 2;
    private io.opencannabis.schema.content.Colors.Color secondary_;
    /**
     * <pre>
     * Secondary color for the color scheme.
     * </pre>
     *
     * <code>.opencannabis.content.Color secondary = 2;</code>
     */
    public boolean hasSecondary() {
      return secondary_ != null;
    }
    /**
     * <pre>
     * Secondary color for the color scheme.
     * </pre>
     *
     * <code>.opencannabis.content.Color secondary = 2;</code>
     */
    public io.opencannabis.schema.content.Colors.Color getSecondary() {
      return secondary_ == null ? io.opencannabis.schema.content.Colors.Color.getDefaultInstance() : secondary_;
    }
    /**
     * <pre>
     * Secondary color for the color scheme.
     * </pre>
     *
     * <code>.opencannabis.content.Color secondary = 2;</code>
     */
    public io.opencannabis.schema.content.Colors.ColorOrBuilder getSecondaryOrBuilder() {
      return getSecondary();
    }

    public static final int ALERT_FIELD_NUMBER = 3;
    private io.opencannabis.schema.content.Colors.Color alert_;
    /**
     * <pre>
     * Alert, or attention color, for the color scheme.
     * </pre>
     *
     * <code>.opencannabis.content.Color alert = 3;</code>
     */
    public boolean hasAlert() {
      return alert_ != null;
    }
    /**
     * <pre>
     * Alert, or attention color, for the color scheme.
     * </pre>
     *
     * <code>.opencannabis.content.Color alert = 3;</code>
     */
    public io.opencannabis.schema.content.Colors.Color getAlert() {
      return alert_ == null ? io.opencannabis.schema.content.Colors.Color.getDefaultInstance() : alert_;
    }
    /**
     * <pre>
     * Alert, or attention color, for the color scheme.
     * </pre>
     *
     * <code>.opencannabis.content.Color alert = 3;</code>
     */
    public io.opencannabis.schema.content.Colors.ColorOrBuilder getAlertOrBuilder() {
      return getAlert();
    }

    public static final int SHADES_FIELD_NUMBER = 4;
    private java.util.List<io.opencannabis.schema.content.Colors.Color> shades_;
    /**
     * <pre>
     * Color shades to be used in various contexts.
     * </pre>
     *
     * <code>repeated .opencannabis.content.Color shades = 4;</code>
     */
    public java.util.List<io.opencannabis.schema.content.Colors.Color> getShadesList() {
      return shades_;
    }
    /**
     * <pre>
     * Color shades to be used in various contexts.
     * </pre>
     *
     * <code>repeated .opencannabis.content.Color shades = 4;</code>
     */
    public java.util.List<? extends io.opencannabis.schema.content.Colors.ColorOrBuilder> 
        getShadesOrBuilderList() {
      return shades_;
    }
    /**
     * <pre>
     * Color shades to be used in various contexts.
     * </pre>
     *
     * <code>repeated .opencannabis.content.Color shades = 4;</code>
     */
    public int getShadesCount() {
      return shades_.size();
    }
    /**
     * <pre>
     * Color shades to be used in various contexts.
     * </pre>
     *
     * <code>repeated .opencannabis.content.Color shades = 4;</code>
     */
    public io.opencannabis.schema.content.Colors.Color getShades(int index) {
      return shades_.get(index);
    }
    /**
     * <pre>
     * Color shades to be used in various contexts.
     * </pre>
     *
     * <code>repeated .opencannabis.content.Color shades = 4;</code>
     */
    public io.opencannabis.schema.content.Colors.ColorOrBuilder getShadesOrBuilder(
        int index) {
      return shades_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (primary_ != null) {
        output.writeMessage(1, getPrimary());
      }
      if (secondary_ != null) {
        output.writeMessage(2, getSecondary());
      }
      if (alert_ != null) {
        output.writeMessage(3, getAlert());
      }
      for (int i = 0; i < shades_.size(); i++) {
        output.writeMessage(4, shades_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (primary_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getPrimary());
      }
      if (secondary_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getSecondary());
      }
      if (alert_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getAlert());
      }
      for (int i = 0; i < shades_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, shades_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.opencannabis.schema.content.Colors.ColorScheme)) {
        return super.equals(obj);
      }
      io.opencannabis.schema.content.Colors.ColorScheme other = (io.opencannabis.schema.content.Colors.ColorScheme) obj;

      boolean result = true;
      result = result && (hasPrimary() == other.hasPrimary());
      if (hasPrimary()) {
        result = result && getPrimary()
            .equals(other.getPrimary());
      }
      result = result && (hasSecondary() == other.hasSecondary());
      if (hasSecondary()) {
        result = result && getSecondary()
            .equals(other.getSecondary());
      }
      result = result && (hasAlert() == other.hasAlert());
      if (hasAlert()) {
        result = result && getAlert()
            .equals(other.getAlert());
      }
      result = result && getShadesList()
          .equals(other.getShadesList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasPrimary()) {
        hash = (37 * hash) + PRIMARY_FIELD_NUMBER;
        hash = (53 * hash) + getPrimary().hashCode();
      }
      if (hasSecondary()) {
        hash = (37 * hash) + SECONDARY_FIELD_NUMBER;
        hash = (53 * hash) + getSecondary().hashCode();
      }
      if (hasAlert()) {
        hash = (37 * hash) + ALERT_FIELD_NUMBER;
        hash = (53 * hash) + getAlert().hashCode();
      }
      if (getShadesCount() > 0) {
        hash = (37 * hash) + SHADES_FIELD_NUMBER;
        hash = (53 * hash) + getShadesList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.opencannabis.schema.content.Colors.ColorScheme parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.opencannabis.schema.content.Colors.ColorScheme parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.opencannabis.schema.content.Colors.ColorScheme parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.opencannabis.schema.content.Colors.ColorScheme parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.opencannabis.schema.content.Colors.ColorScheme parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.opencannabis.schema.content.Colors.ColorScheme parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.opencannabis.schema.content.Colors.ColorScheme parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.opencannabis.schema.content.Colors.ColorScheme parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.opencannabis.schema.content.Colors.ColorScheme parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.opencannabis.schema.content.Colors.ColorScheme parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.opencannabis.schema.content.Colors.ColorScheme parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.opencannabis.schema.content.Colors.ColorScheme parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.opencannabis.schema.content.Colors.ColorScheme prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Specifies a scheme of color selections, with primary and secondary colors and additional configurable color values.
     * </pre>
     *
     * Protobuf type {@code opencannabis.content.ColorScheme}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:opencannabis.content.ColorScheme)
        io.opencannabis.schema.content.Colors.ColorSchemeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.opencannabis.schema.content.Colors.internal_static_opencannabis_content_ColorScheme_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.opencannabis.schema.content.Colors.internal_static_opencannabis_content_ColorScheme_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.opencannabis.schema.content.Colors.ColorScheme.class, io.opencannabis.schema.content.Colors.ColorScheme.Builder.class);
      }

      // Construct using io.opencannabis.schema.content.Colors.ColorScheme.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getShadesFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (primaryBuilder_ == null) {
          primary_ = null;
        } else {
          primary_ = null;
          primaryBuilder_ = null;
        }
        if (secondaryBuilder_ == null) {
          secondary_ = null;
        } else {
          secondary_ = null;
          secondaryBuilder_ = null;
        }
        if (alertBuilder_ == null) {
          alert_ = null;
        } else {
          alert_ = null;
          alertBuilder_ = null;
        }
        if (shadesBuilder_ == null) {
          shades_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          shadesBuilder_.clear();
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.opencannabis.schema.content.Colors.internal_static_opencannabis_content_ColorScheme_descriptor;
      }

      public io.opencannabis.schema.content.Colors.ColorScheme getDefaultInstanceForType() {
        return io.opencannabis.schema.content.Colors.ColorScheme.getDefaultInstance();
      }

      public io.opencannabis.schema.content.Colors.ColorScheme build() {
        io.opencannabis.schema.content.Colors.ColorScheme result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.opencannabis.schema.content.Colors.ColorScheme buildPartial() {
        io.opencannabis.schema.content.Colors.ColorScheme result = new io.opencannabis.schema.content.Colors.ColorScheme(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (primaryBuilder_ == null) {
          result.primary_ = primary_;
        } else {
          result.primary_ = primaryBuilder_.build();
        }
        if (secondaryBuilder_ == null) {
          result.secondary_ = secondary_;
        } else {
          result.secondary_ = secondaryBuilder_.build();
        }
        if (alertBuilder_ == null) {
          result.alert_ = alert_;
        } else {
          result.alert_ = alertBuilder_.build();
        }
        if (shadesBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            shades_ = java.util.Collections.unmodifiableList(shades_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.shades_ = shades_;
        } else {
          result.shades_ = shadesBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.opencannabis.schema.content.Colors.ColorScheme) {
          return mergeFrom((io.opencannabis.schema.content.Colors.ColorScheme)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.opencannabis.schema.content.Colors.ColorScheme other) {
        if (other == io.opencannabis.schema.content.Colors.ColorScheme.getDefaultInstance()) return this;
        if (other.hasPrimary()) {
          mergePrimary(other.getPrimary());
        }
        if (other.hasSecondary()) {
          mergeSecondary(other.getSecondary());
        }
        if (other.hasAlert()) {
          mergeAlert(other.getAlert());
        }
        if (shadesBuilder_ == null) {
          if (!other.shades_.isEmpty()) {
            if (shades_.isEmpty()) {
              shades_ = other.shades_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureShadesIsMutable();
              shades_.addAll(other.shades_);
            }
            onChanged();
          }
        } else {
          if (!other.shades_.isEmpty()) {
            if (shadesBuilder_.isEmpty()) {
              shadesBuilder_.dispose();
              shadesBuilder_ = null;
              shades_ = other.shades_;
              bitField0_ = (bitField0_ & ~0x00000008);
              shadesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getShadesFieldBuilder() : null;
            } else {
              shadesBuilder_.addAllMessages(other.shades_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.opencannabis.schema.content.Colors.ColorScheme parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.opencannabis.schema.content.Colors.ColorScheme) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private io.opencannabis.schema.content.Colors.Color primary_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.content.Colors.Color, io.opencannabis.schema.content.Colors.Color.Builder, io.opencannabis.schema.content.Colors.ColorOrBuilder> primaryBuilder_;
      /**
       * <pre>
       * Primary color for the color scheme.
       * </pre>
       *
       * <code>.opencannabis.content.Color primary = 1;</code>
       */
      public boolean hasPrimary() {
        return primaryBuilder_ != null || primary_ != null;
      }
      /**
       * <pre>
       * Primary color for the color scheme.
       * </pre>
       *
       * <code>.opencannabis.content.Color primary = 1;</code>
       */
      public io.opencannabis.schema.content.Colors.Color getPrimary() {
        if (primaryBuilder_ == null) {
          return primary_ == null ? io.opencannabis.schema.content.Colors.Color.getDefaultInstance() : primary_;
        } else {
          return primaryBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Primary color for the color scheme.
       * </pre>
       *
       * <code>.opencannabis.content.Color primary = 1;</code>
       */
      public Builder setPrimary(io.opencannabis.schema.content.Colors.Color value) {
        if (primaryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          primary_ = value;
          onChanged();
        } else {
          primaryBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Primary color for the color scheme.
       * </pre>
       *
       * <code>.opencannabis.content.Color primary = 1;</code>
       */
      public Builder setPrimary(
          io.opencannabis.schema.content.Colors.Color.Builder builderForValue) {
        if (primaryBuilder_ == null) {
          primary_ = builderForValue.build();
          onChanged();
        } else {
          primaryBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Primary color for the color scheme.
       * </pre>
       *
       * <code>.opencannabis.content.Color primary = 1;</code>
       */
      public Builder mergePrimary(io.opencannabis.schema.content.Colors.Color value) {
        if (primaryBuilder_ == null) {
          if (primary_ != null) {
            primary_ =
              io.opencannabis.schema.content.Colors.Color.newBuilder(primary_).mergeFrom(value).buildPartial();
          } else {
            primary_ = value;
          }
          onChanged();
        } else {
          primaryBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Primary color for the color scheme.
       * </pre>
       *
       * <code>.opencannabis.content.Color primary = 1;</code>
       */
      public Builder clearPrimary() {
        if (primaryBuilder_ == null) {
          primary_ = null;
          onChanged();
        } else {
          primary_ = null;
          primaryBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Primary color for the color scheme.
       * </pre>
       *
       * <code>.opencannabis.content.Color primary = 1;</code>
       */
      public io.opencannabis.schema.content.Colors.Color.Builder getPrimaryBuilder() {
        
        onChanged();
        return getPrimaryFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Primary color for the color scheme.
       * </pre>
       *
       * <code>.opencannabis.content.Color primary = 1;</code>
       */
      public io.opencannabis.schema.content.Colors.ColorOrBuilder getPrimaryOrBuilder() {
        if (primaryBuilder_ != null) {
          return primaryBuilder_.getMessageOrBuilder();
        } else {
          return primary_ == null ?
              io.opencannabis.schema.content.Colors.Color.getDefaultInstance() : primary_;
        }
      }
      /**
       * <pre>
       * Primary color for the color scheme.
       * </pre>
       *
       * <code>.opencannabis.content.Color primary = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.content.Colors.Color, io.opencannabis.schema.content.Colors.Color.Builder, io.opencannabis.schema.content.Colors.ColorOrBuilder> 
          getPrimaryFieldBuilder() {
        if (primaryBuilder_ == null) {
          primaryBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.opencannabis.schema.content.Colors.Color, io.opencannabis.schema.content.Colors.Color.Builder, io.opencannabis.schema.content.Colors.ColorOrBuilder>(
                  getPrimary(),
                  getParentForChildren(),
                  isClean());
          primary_ = null;
        }
        return primaryBuilder_;
      }

      private io.opencannabis.schema.content.Colors.Color secondary_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.content.Colors.Color, io.opencannabis.schema.content.Colors.Color.Builder, io.opencannabis.schema.content.Colors.ColorOrBuilder> secondaryBuilder_;
      /**
       * <pre>
       * Secondary color for the color scheme.
       * </pre>
       *
       * <code>.opencannabis.content.Color secondary = 2;</code>
       */
      public boolean hasSecondary() {
        return secondaryBuilder_ != null || secondary_ != null;
      }
      /**
       * <pre>
       * Secondary color for the color scheme.
       * </pre>
       *
       * <code>.opencannabis.content.Color secondary = 2;</code>
       */
      public io.opencannabis.schema.content.Colors.Color getSecondary() {
        if (secondaryBuilder_ == null) {
          return secondary_ == null ? io.opencannabis.schema.content.Colors.Color.getDefaultInstance() : secondary_;
        } else {
          return secondaryBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Secondary color for the color scheme.
       * </pre>
       *
       * <code>.opencannabis.content.Color secondary = 2;</code>
       */
      public Builder setSecondary(io.opencannabis.schema.content.Colors.Color value) {
        if (secondaryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          secondary_ = value;
          onChanged();
        } else {
          secondaryBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Secondary color for the color scheme.
       * </pre>
       *
       * <code>.opencannabis.content.Color secondary = 2;</code>
       */
      public Builder setSecondary(
          io.opencannabis.schema.content.Colors.Color.Builder builderForValue) {
        if (secondaryBuilder_ == null) {
          secondary_ = builderForValue.build();
          onChanged();
        } else {
          secondaryBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Secondary color for the color scheme.
       * </pre>
       *
       * <code>.opencannabis.content.Color secondary = 2;</code>
       */
      public Builder mergeSecondary(io.opencannabis.schema.content.Colors.Color value) {
        if (secondaryBuilder_ == null) {
          if (secondary_ != null) {
            secondary_ =
              io.opencannabis.schema.content.Colors.Color.newBuilder(secondary_).mergeFrom(value).buildPartial();
          } else {
            secondary_ = value;
          }
          onChanged();
        } else {
          secondaryBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Secondary color for the color scheme.
       * </pre>
       *
       * <code>.opencannabis.content.Color secondary = 2;</code>
       */
      public Builder clearSecondary() {
        if (secondaryBuilder_ == null) {
          secondary_ = null;
          onChanged();
        } else {
          secondary_ = null;
          secondaryBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Secondary color for the color scheme.
       * </pre>
       *
       * <code>.opencannabis.content.Color secondary = 2;</code>
       */
      public io.opencannabis.schema.content.Colors.Color.Builder getSecondaryBuilder() {
        
        onChanged();
        return getSecondaryFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Secondary color for the color scheme.
       * </pre>
       *
       * <code>.opencannabis.content.Color secondary = 2;</code>
       */
      public io.opencannabis.schema.content.Colors.ColorOrBuilder getSecondaryOrBuilder() {
        if (secondaryBuilder_ != null) {
          return secondaryBuilder_.getMessageOrBuilder();
        } else {
          return secondary_ == null ?
              io.opencannabis.schema.content.Colors.Color.getDefaultInstance() : secondary_;
        }
      }
      /**
       * <pre>
       * Secondary color for the color scheme.
       * </pre>
       *
       * <code>.opencannabis.content.Color secondary = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.content.Colors.Color, io.opencannabis.schema.content.Colors.Color.Builder, io.opencannabis.schema.content.Colors.ColorOrBuilder> 
          getSecondaryFieldBuilder() {
        if (secondaryBuilder_ == null) {
          secondaryBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.opencannabis.schema.content.Colors.Color, io.opencannabis.schema.content.Colors.Color.Builder, io.opencannabis.schema.content.Colors.ColorOrBuilder>(
                  getSecondary(),
                  getParentForChildren(),
                  isClean());
          secondary_ = null;
        }
        return secondaryBuilder_;
      }

      private io.opencannabis.schema.content.Colors.Color alert_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.content.Colors.Color, io.opencannabis.schema.content.Colors.Color.Builder, io.opencannabis.schema.content.Colors.ColorOrBuilder> alertBuilder_;
      /**
       * <pre>
       * Alert, or attention color, for the color scheme.
       * </pre>
       *
       * <code>.opencannabis.content.Color alert = 3;</code>
       */
      public boolean hasAlert() {
        return alertBuilder_ != null || alert_ != null;
      }
      /**
       * <pre>
       * Alert, or attention color, for the color scheme.
       * </pre>
       *
       * <code>.opencannabis.content.Color alert = 3;</code>
       */
      public io.opencannabis.schema.content.Colors.Color getAlert() {
        if (alertBuilder_ == null) {
          return alert_ == null ? io.opencannabis.schema.content.Colors.Color.getDefaultInstance() : alert_;
        } else {
          return alertBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Alert, or attention color, for the color scheme.
       * </pre>
       *
       * <code>.opencannabis.content.Color alert = 3;</code>
       */
      public Builder setAlert(io.opencannabis.schema.content.Colors.Color value) {
        if (alertBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          alert_ = value;
          onChanged();
        } else {
          alertBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Alert, or attention color, for the color scheme.
       * </pre>
       *
       * <code>.opencannabis.content.Color alert = 3;</code>
       */
      public Builder setAlert(
          io.opencannabis.schema.content.Colors.Color.Builder builderForValue) {
        if (alertBuilder_ == null) {
          alert_ = builderForValue.build();
          onChanged();
        } else {
          alertBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Alert, or attention color, for the color scheme.
       * </pre>
       *
       * <code>.opencannabis.content.Color alert = 3;</code>
       */
      public Builder mergeAlert(io.opencannabis.schema.content.Colors.Color value) {
        if (alertBuilder_ == null) {
          if (alert_ != null) {
            alert_ =
              io.opencannabis.schema.content.Colors.Color.newBuilder(alert_).mergeFrom(value).buildPartial();
          } else {
            alert_ = value;
          }
          onChanged();
        } else {
          alertBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Alert, or attention color, for the color scheme.
       * </pre>
       *
       * <code>.opencannabis.content.Color alert = 3;</code>
       */
      public Builder clearAlert() {
        if (alertBuilder_ == null) {
          alert_ = null;
          onChanged();
        } else {
          alert_ = null;
          alertBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Alert, or attention color, for the color scheme.
       * </pre>
       *
       * <code>.opencannabis.content.Color alert = 3;</code>
       */
      public io.opencannabis.schema.content.Colors.Color.Builder getAlertBuilder() {
        
        onChanged();
        return getAlertFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Alert, or attention color, for the color scheme.
       * </pre>
       *
       * <code>.opencannabis.content.Color alert = 3;</code>
       */
      public io.opencannabis.schema.content.Colors.ColorOrBuilder getAlertOrBuilder() {
        if (alertBuilder_ != null) {
          return alertBuilder_.getMessageOrBuilder();
        } else {
          return alert_ == null ?
              io.opencannabis.schema.content.Colors.Color.getDefaultInstance() : alert_;
        }
      }
      /**
       * <pre>
       * Alert, or attention color, for the color scheme.
       * </pre>
       *
       * <code>.opencannabis.content.Color alert = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.content.Colors.Color, io.opencannabis.schema.content.Colors.Color.Builder, io.opencannabis.schema.content.Colors.ColorOrBuilder> 
          getAlertFieldBuilder() {
        if (alertBuilder_ == null) {
          alertBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.opencannabis.schema.content.Colors.Color, io.opencannabis.schema.content.Colors.Color.Builder, io.opencannabis.schema.content.Colors.ColorOrBuilder>(
                  getAlert(),
                  getParentForChildren(),
                  isClean());
          alert_ = null;
        }
        return alertBuilder_;
      }

      private java.util.List<io.opencannabis.schema.content.Colors.Color> shades_ =
        java.util.Collections.emptyList();
      private void ensureShadesIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          shades_ = new java.util.ArrayList<io.opencannabis.schema.content.Colors.Color>(shades_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.opencannabis.schema.content.Colors.Color, io.opencannabis.schema.content.Colors.Color.Builder, io.opencannabis.schema.content.Colors.ColorOrBuilder> shadesBuilder_;

      /**
       * <pre>
       * Color shades to be used in various contexts.
       * </pre>
       *
       * <code>repeated .opencannabis.content.Color shades = 4;</code>
       */
      public java.util.List<io.opencannabis.schema.content.Colors.Color> getShadesList() {
        if (shadesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(shades_);
        } else {
          return shadesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Color shades to be used in various contexts.
       * </pre>
       *
       * <code>repeated .opencannabis.content.Color shades = 4;</code>
       */
      public int getShadesCount() {
        if (shadesBuilder_ == null) {
          return shades_.size();
        } else {
          return shadesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Color shades to be used in various contexts.
       * </pre>
       *
       * <code>repeated .opencannabis.content.Color shades = 4;</code>
       */
      public io.opencannabis.schema.content.Colors.Color getShades(int index) {
        if (shadesBuilder_ == null) {
          return shades_.get(index);
        } else {
          return shadesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Color shades to be used in various contexts.
       * </pre>
       *
       * <code>repeated .opencannabis.content.Color shades = 4;</code>
       */
      public Builder setShades(
          int index, io.opencannabis.schema.content.Colors.Color value) {
        if (shadesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureShadesIsMutable();
          shades_.set(index, value);
          onChanged();
        } else {
          shadesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Color shades to be used in various contexts.
       * </pre>
       *
       * <code>repeated .opencannabis.content.Color shades = 4;</code>
       */
      public Builder setShades(
          int index, io.opencannabis.schema.content.Colors.Color.Builder builderForValue) {
        if (shadesBuilder_ == null) {
          ensureShadesIsMutable();
          shades_.set(index, builderForValue.build());
          onChanged();
        } else {
          shadesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Color shades to be used in various contexts.
       * </pre>
       *
       * <code>repeated .opencannabis.content.Color shades = 4;</code>
       */
      public Builder addShades(io.opencannabis.schema.content.Colors.Color value) {
        if (shadesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureShadesIsMutable();
          shades_.add(value);
          onChanged();
        } else {
          shadesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Color shades to be used in various contexts.
       * </pre>
       *
       * <code>repeated .opencannabis.content.Color shades = 4;</code>
       */
      public Builder addShades(
          int index, io.opencannabis.schema.content.Colors.Color value) {
        if (shadesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureShadesIsMutable();
          shades_.add(index, value);
          onChanged();
        } else {
          shadesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Color shades to be used in various contexts.
       * </pre>
       *
       * <code>repeated .opencannabis.content.Color shades = 4;</code>
       */
      public Builder addShades(
          io.opencannabis.schema.content.Colors.Color.Builder builderForValue) {
        if (shadesBuilder_ == null) {
          ensureShadesIsMutable();
          shades_.add(builderForValue.build());
          onChanged();
        } else {
          shadesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Color shades to be used in various contexts.
       * </pre>
       *
       * <code>repeated .opencannabis.content.Color shades = 4;</code>
       */
      public Builder addShades(
          int index, io.opencannabis.schema.content.Colors.Color.Builder builderForValue) {
        if (shadesBuilder_ == null) {
          ensureShadesIsMutable();
          shades_.add(index, builderForValue.build());
          onChanged();
        } else {
          shadesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Color shades to be used in various contexts.
       * </pre>
       *
       * <code>repeated .opencannabis.content.Color shades = 4;</code>
       */
      public Builder addAllShades(
          java.lang.Iterable<? extends io.opencannabis.schema.content.Colors.Color> values) {
        if (shadesBuilder_ == null) {
          ensureShadesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, shades_);
          onChanged();
        } else {
          shadesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Color shades to be used in various contexts.
       * </pre>
       *
       * <code>repeated .opencannabis.content.Color shades = 4;</code>
       */
      public Builder clearShades() {
        if (shadesBuilder_ == null) {
          shades_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          shadesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Color shades to be used in various contexts.
       * </pre>
       *
       * <code>repeated .opencannabis.content.Color shades = 4;</code>
       */
      public Builder removeShades(int index) {
        if (shadesBuilder_ == null) {
          ensureShadesIsMutable();
          shades_.remove(index);
          onChanged();
        } else {
          shadesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Color shades to be used in various contexts.
       * </pre>
       *
       * <code>repeated .opencannabis.content.Color shades = 4;</code>
       */
      public io.opencannabis.schema.content.Colors.Color.Builder getShadesBuilder(
          int index) {
        return getShadesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Color shades to be used in various contexts.
       * </pre>
       *
       * <code>repeated .opencannabis.content.Color shades = 4;</code>
       */
      public io.opencannabis.schema.content.Colors.ColorOrBuilder getShadesOrBuilder(
          int index) {
        if (shadesBuilder_ == null) {
          return shades_.get(index);  } else {
          return shadesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Color shades to be used in various contexts.
       * </pre>
       *
       * <code>repeated .opencannabis.content.Color shades = 4;</code>
       */
      public java.util.List<? extends io.opencannabis.schema.content.Colors.ColorOrBuilder> 
           getShadesOrBuilderList() {
        if (shadesBuilder_ != null) {
          return shadesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(shades_);
        }
      }
      /**
       * <pre>
       * Color shades to be used in various contexts.
       * </pre>
       *
       * <code>repeated .opencannabis.content.Color shades = 4;</code>
       */
      public io.opencannabis.schema.content.Colors.Color.Builder addShadesBuilder() {
        return getShadesFieldBuilder().addBuilder(
            io.opencannabis.schema.content.Colors.Color.getDefaultInstance());
      }
      /**
       * <pre>
       * Color shades to be used in various contexts.
       * </pre>
       *
       * <code>repeated .opencannabis.content.Color shades = 4;</code>
       */
      public io.opencannabis.schema.content.Colors.Color.Builder addShadesBuilder(
          int index) {
        return getShadesFieldBuilder().addBuilder(
            index, io.opencannabis.schema.content.Colors.Color.getDefaultInstance());
      }
      /**
       * <pre>
       * Color shades to be used in various contexts.
       * </pre>
       *
       * <code>repeated .opencannabis.content.Color shades = 4;</code>
       */
      public java.util.List<io.opencannabis.schema.content.Colors.Color.Builder> 
           getShadesBuilderList() {
        return getShadesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.opencannabis.schema.content.Colors.Color, io.opencannabis.schema.content.Colors.Color.Builder, io.opencannabis.schema.content.Colors.ColorOrBuilder> 
          getShadesFieldBuilder() {
        if (shadesBuilder_ == null) {
          shadesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.opencannabis.schema.content.Colors.Color, io.opencannabis.schema.content.Colors.Color.Builder, io.opencannabis.schema.content.Colors.ColorOrBuilder>(
                  shades_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          shades_ = null;
        }
        return shadesBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:opencannabis.content.ColorScheme)
    }

    // @@protoc_insertion_point(class_scope:opencannabis.content.ColorScheme)
    private static final io.opencannabis.schema.content.Colors.ColorScheme DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.opencannabis.schema.content.Colors.ColorScheme();
    }

    public static io.opencannabis.schema.content.Colors.ColorScheme getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ColorScheme>
        PARSER = new com.google.protobuf.AbstractParser<ColorScheme>() {
      public ColorScheme parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ColorScheme(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ColorScheme> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ColorScheme> getParserForType() {
      return PARSER;
    }

    public io.opencannabis.schema.content.Colors.ColorScheme getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_opencannabis_content_RGBAColorSpec_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_opencannabis_content_RGBAColorSpec_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_opencannabis_content_HSBColorSpec_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_opencannabis_content_HSBColorSpec_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_opencannabis_content_CMYKColorSpec_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_opencannabis_content_CMYKColorSpec_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_opencannabis_content_Color_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_opencannabis_content_Color_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_opencannabis_content_ColorScheme_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_opencannabis_content_ColorScheme_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\024content/Colors.proto\022\024opencannabis.con" +
      "tent\";\n\rRGBAColorSpec\022\t\n\001r\030\001 \001(\004\022\t\n\001g\030\002 " +
      "\001(\004\022\t\n\001b\030\003 \001(\004\022\t\n\001a\030\004 \001(\004\"/\n\014HSBColorSpe" +
      "c\022\t\n\001h\030\001 \001(\004\022\t\n\001s\030\002 \001(\004\022\t\n\001b\030\003 \001(\004\";\n\rCM" +
      "YKColorSpec\022\t\n\001c\030\001 \001(\004\022\t\n\001m\030\002 \001(\004\022\t\n\001y\030\003" +
      " \001(\004\022\t\n\001k\030\004 \001(\004\"\364\001\n\005Color\0227\n\010standard\030\001 " +
      "\001(\0162#.opencannabis.content.StandardColor" +
      "H\000\022\r\n\003hex\030\002 \001(\tH\000\0223\n\004rgba\030\003 \001(\0132#.openca" +
      "nnabis.content.RGBAColorSpecH\000\0221\n\003hsb\030\004 " +
      "\001(\0132\".opencannabis.content.HSBColorSpecH" +
      "\000\0223\n\004cmyk\030\005 \001(\0132#.opencannabis.content.C" +
      "MYKColorSpecH\000B\006\n\004spec\"\304\001\n\013ColorScheme\022," +
      "\n\007primary\030\001 \001(\0132\033.opencannabis.content.C" +
      "olor\022.\n\tsecondary\030\002 \001(\0132\033.opencannabis.c" +
      "ontent.Color\022*\n\005alert\030\003 \001(\0132\033.opencannab" +
      "is.content.Color\022+\n\006shades\030\004 \003(\0132\033.openc" +
      "annabis.content.Color*\207\001\n\rStandardColor\022" +
      "\025\n\021UNSPECIFIED_COLOR\020\000\022\007\n\003RED\020\001\022\t\n\005GREEN" +
      "\020\002\022\010\n\004BLUE\020\003\022\n\n\006YELLOW\020\004\022\n\n\006PURPLE\020\005\022\n\n\006" +
      "ORANGE\020\006\022\010\n\004PINK\020\007\022\010\n\004GRAY\020\010\022\t\n\005BROWN\020\tB" +
      "2\n\036io.opencannabis.schema.contentB\006Color" +
      "sH\001P\000\242\002\003OCSb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_opencannabis_content_RGBAColorSpec_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_opencannabis_content_RGBAColorSpec_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_opencannabis_content_RGBAColorSpec_descriptor,
        new java.lang.String[] { "R", "G", "B", "A", });
    internal_static_opencannabis_content_HSBColorSpec_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_opencannabis_content_HSBColorSpec_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_opencannabis_content_HSBColorSpec_descriptor,
        new java.lang.String[] { "H", "S", "B", });
    internal_static_opencannabis_content_CMYKColorSpec_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_opencannabis_content_CMYKColorSpec_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_opencannabis_content_CMYKColorSpec_descriptor,
        new java.lang.String[] { "C", "M", "Y", "K", });
    internal_static_opencannabis_content_Color_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_opencannabis_content_Color_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_opencannabis_content_Color_descriptor,
        new java.lang.String[] { "Standard", "Hex", "Rgba", "Hsb", "Cmyk", "Spec", });
    internal_static_opencannabis_content_ColorScheme_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_opencannabis_content_ColorScheme_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_opencannabis_content_ColorScheme_descriptor,
        new java.lang.String[] { "Primary", "Secondary", "Alert", "Shades", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
