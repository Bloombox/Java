// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: structs/labtesting/TestResults.proto

package io.opencannabis.schema.product.struct.testing;

/**
 * <pre>
 * Enumerates taste or aroma notes, either based on subjective product testing or quantitative/empirical terpene
 * compound testing.
 * </pre>
 *
 * Protobuf enum {@code opencannabis.structs.labtesting.TasteNote}
 */
public enum TasteNote
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * No particular taste or aroma preference or value.
   * </pre>
   *
   * <code>NO_TASTE_PREFERENCE = 0;</code>
   */
  NO_TASTE_PREFERENCE(0),
  /**
   * <pre>
   * "Sweet" taste/aroma note.
   * </pre>
   *
   * <code>SWEET = 1;</code>
   */
  SWEET(1),
  /**
   * <pre>
   * "Sour" taste/aroma note.
   * </pre>
   *
   * <code>SOUR = 2;</code>
   */
  SOUR(2),
  /**
   * <pre>
   * "Spice" taste/aroma note.
   * </pre>
   *
   * <code>SPICE = 3;</code>
   */
  SPICE(3),
  /**
   * <pre>
   * "Smooth" taste/aroma note.
   * </pre>
   *
   * <code>SMOOTH = 4;</code>
   */
  SMOOTH(4),
  /**
   * <pre>
   * "Citrus" taste/aroma note.
   * </pre>
   *
   * <code>CITRUS = 5;</code>
   */
  CITRUS(5),
  /**
   * <pre>
   * "Pine" taste/aroma note.
   * </pre>
   *
   * <code>PINE = 6;</code>
   */
  PINE(6),
  /**
   * <pre>
   * "Fruit" taste/aroma note.
   * </pre>
   *
   * <code>FRUIT = 7;</code>
   */
  FRUIT(7),
  /**
   * <pre>
   * "Tropics" taste/aroma note.
   * </pre>
   *
   * <code>TROPICS = 8;</code>
   */
  TROPICS(8),
  /**
   * <pre>
   * "Floral" taste/aroma note.
   * </pre>
   *
   * <code>FLORAL = 9;</code>
   */
  FLORAL(9),
  /**
   * <pre>
   * "Herbal" taste/aroma note.
   * </pre>
   *
   * <code>HERB = 10;</code>
   */
  HERB(10),
  /**
   * <pre>
   * "Earthy" taste/aroma note.
   * </pre>
   *
   * <code>EARTH = 11;</code>
   */
  EARTH(11),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * No particular taste or aroma preference or value.
   * </pre>
   *
   * <code>NO_TASTE_PREFERENCE = 0;</code>
   */
  public static final int NO_TASTE_PREFERENCE_VALUE = 0;
  /**
   * <pre>
   * "Sweet" taste/aroma note.
   * </pre>
   *
   * <code>SWEET = 1;</code>
   */
  public static final int SWEET_VALUE = 1;
  /**
   * <pre>
   * "Sour" taste/aroma note.
   * </pre>
   *
   * <code>SOUR = 2;</code>
   */
  public static final int SOUR_VALUE = 2;
  /**
   * <pre>
   * "Spice" taste/aroma note.
   * </pre>
   *
   * <code>SPICE = 3;</code>
   */
  public static final int SPICE_VALUE = 3;
  /**
   * <pre>
   * "Smooth" taste/aroma note.
   * </pre>
   *
   * <code>SMOOTH = 4;</code>
   */
  public static final int SMOOTH_VALUE = 4;
  /**
   * <pre>
   * "Citrus" taste/aroma note.
   * </pre>
   *
   * <code>CITRUS = 5;</code>
   */
  public static final int CITRUS_VALUE = 5;
  /**
   * <pre>
   * "Pine" taste/aroma note.
   * </pre>
   *
   * <code>PINE = 6;</code>
   */
  public static final int PINE_VALUE = 6;
  /**
   * <pre>
   * "Fruit" taste/aroma note.
   * </pre>
   *
   * <code>FRUIT = 7;</code>
   */
  public static final int FRUIT_VALUE = 7;
  /**
   * <pre>
   * "Tropics" taste/aroma note.
   * </pre>
   *
   * <code>TROPICS = 8;</code>
   */
  public static final int TROPICS_VALUE = 8;
  /**
   * <pre>
   * "Floral" taste/aroma note.
   * </pre>
   *
   * <code>FLORAL = 9;</code>
   */
  public static final int FLORAL_VALUE = 9;
  /**
   * <pre>
   * "Herbal" taste/aroma note.
   * </pre>
   *
   * <code>HERB = 10;</code>
   */
  public static final int HERB_VALUE = 10;
  /**
   * <pre>
   * "Earthy" taste/aroma note.
   * </pre>
   *
   * <code>EARTH = 11;</code>
   */
  public static final int EARTH_VALUE = 11;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static TasteNote valueOf(int value) {
    return forNumber(value);
  }

  public static TasteNote forNumber(int value) {
    switch (value) {
      case 0: return NO_TASTE_PREFERENCE;
      case 1: return SWEET;
      case 2: return SOUR;
      case 3: return SPICE;
      case 4: return SMOOTH;
      case 5: return CITRUS;
      case 6: return PINE;
      case 7: return FRUIT;
      case 8: return TROPICS;
      case 9: return FLORAL;
      case 10: return HERB;
      case 11: return EARTH;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<TasteNote>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      TasteNote> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<TasteNote>() {
          public TasteNote findValueByNumber(int number) {
            return TasteNote.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return io.opencannabis.schema.product.struct.testing.LabTesting.getDescriptor().getEnumTypes().get(4);
  }

  private static final TasteNote[] VALUES = values();

  public static TasteNote valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private TasteNote(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:opencannabis.structs.labtesting.TasteNote)
}

