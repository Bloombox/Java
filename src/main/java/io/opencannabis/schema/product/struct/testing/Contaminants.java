/*
 * Copyright 2018, Momentum Ideas, Co. All rights reserved.
 *
 * Source and object computer code contained herein is the private intellectual
 * property of Momentum Ideas Co., a Delaware Corporation. Use of this
 * code in source form requires permission in writing before use or the
 * assembly, distribution, or publishing of derivative works, for commercial
 * purposes or any other purpose, from a duly authorized officer of Momentum
 * Ideas Co.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: structs/labtesting/TestResults.proto

package io.opencannabis.schema.product.struct.testing;

/**
 * <pre>
 * Test results for contaminants which indicate presense/absense of a compound along with a value (if available)
 * </pre>
 *
 * Protobuf type {@code opencannabis.structs.labtesting.Contaminants}
 */
public  final class Contaminants extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:opencannabis.structs.labtesting.Contaminants)
    ContaminantsOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Contaminants.newBuilder() to construct.
  private Contaminants(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Contaminants() {
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Contaminants(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 10: {
            io.opencannabis.schema.product.struct.testing.Pesticides.Builder subBuilder = null;
            if (pesticides_ != null) {
              subBuilder = pesticides_.toBuilder();
            }
            pesticides_ = input.readMessage(io.opencannabis.schema.product.struct.testing.Pesticides.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(pesticides_);
              pesticides_ = subBuilder.buildPartial();
            }

            break;
          }
          case 18: {
            io.opencannabis.schema.product.struct.testing.Metals.Builder subBuilder = null;
            if (metals_ != null) {
              subBuilder = metals_.toBuilder();
            }
            metals_ = input.readMessage(io.opencannabis.schema.product.struct.testing.Metals.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(metals_);
              metals_ = subBuilder.buildPartial();
            }

            break;
          }
          case 26: {
            io.opencannabis.schema.product.struct.testing.MoldMildew.Builder subBuilder = null;
            if (moldMildew_ != null) {
              subBuilder = moldMildew_.toBuilder();
            }
            moldMildew_ = input.readMessage(io.opencannabis.schema.product.struct.testing.MoldMildew.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(moldMildew_);
              moldMildew_ = subBuilder.buildPartial();
            }

            break;
          }
          case 34: {
            io.opencannabis.schema.product.struct.testing.OtherContaminants.Builder subBuilder = null;
            if (otherContaminants_ != null) {
              subBuilder = otherContaminants_.toBuilder();
            }
            otherContaminants_ = input.readMessage(io.opencannabis.schema.product.struct.testing.OtherContaminants.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom(otherContaminants_);
              otherContaminants_ = subBuilder.buildPartial();
            }

            break;
          }
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.opencannabis.schema.product.struct.testing.LabTesting.internal_static_opencannabis_structs_labtesting_Contaminants_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.opencannabis.schema.product.struct.testing.LabTesting.internal_static_opencannabis_structs_labtesting_Contaminants_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.opencannabis.schema.product.struct.testing.Contaminants.class, io.opencannabis.schema.product.struct.testing.Contaminants.Builder.class);
  }

  public static final int PESTICIDES_FIELD_NUMBER = 1;
  private io.opencannabis.schema.product.struct.testing.Pesticides pesticides_;
  /**
   * <pre>
   * Pesticide-specific test results. Indicates a pesticide reading, by chemical compound name, and a reading value.
   * </pre>
   *
   * <code>.opencannabis.structs.labtesting.Pesticides pesticides = 1;</code>
   */
  public boolean hasPesticides() {
    return pesticides_ != null;
  }
  /**
   * <pre>
   * Pesticide-specific test results. Indicates a pesticide reading, by chemical compound name, and a reading value.
   * </pre>
   *
   * <code>.opencannabis.structs.labtesting.Pesticides pesticides = 1;</code>
   */
  public io.opencannabis.schema.product.struct.testing.Pesticides getPesticides() {
    return pesticides_ == null ? io.opencannabis.schema.product.struct.testing.Pesticides.getDefaultInstance() : pesticides_;
  }
  /**
   * <pre>
   * Pesticide-specific test results. Indicates a pesticide reading, by chemical compound name, and a reading value.
   * </pre>
   *
   * <code>.opencannabis.structs.labtesting.Pesticides pesticides = 1;</code>
   */
  public io.opencannabis.schema.product.struct.testing.PesticidesOrBuilder getPesticidesOrBuilder() {
    return getPesticides();
  }

  public static final int METALS_FIELD_NUMBER = 2;
  private io.opencannabis.schema.product.struct.testing.Metals metals_;
  /**
   * <pre>
   * Heavy metal specific test results. Indicates a heavy metal reading, by chemical compound name, along with a 
   * reading value.
   * </pre>
   *
   * <code>.opencannabis.structs.labtesting.Metals metals = 2;</code>
   */
  public boolean hasMetals() {
    return metals_ != null;
  }
  /**
   * <pre>
   * Heavy metal specific test results. Indicates a heavy metal reading, by chemical compound name, along with a 
   * reading value.
   * </pre>
   *
   * <code>.opencannabis.structs.labtesting.Metals metals = 2;</code>
   */
  public io.opencannabis.schema.product.struct.testing.Metals getMetals() {
    return metals_ == null ? io.opencannabis.schema.product.struct.testing.Metals.getDefaultInstance() : metals_;
  }
  /**
   * <pre>
   * Heavy metal specific test results. Indicates a heavy metal reading, by chemical compound name, along with a 
   * reading value.
   * </pre>
   *
   * <code>.opencannabis.structs.labtesting.Metals metals = 2;</code>
   */
  public io.opencannabis.schema.product.struct.testing.MetalsOrBuilder getMetalsOrBuilder() {
    return getMetals();
  }

  public static final int MOLD_MILDEW_FIELD_NUMBER = 3;
  private io.opencannabis.schema.product.struct.testing.MoldMildew moldMildew_;
  /**
   * <pre>
   * Mold and mildew specific test results. Indicates a mold or mildew reading, by species name, along with a reading
   * value.
   * </pre>
   *
   * <code>.opencannabis.structs.labtesting.MoldMildew mold_mildew = 3;</code>
   */
  public boolean hasMoldMildew() {
    return moldMildew_ != null;
  }
  /**
   * <pre>
   * Mold and mildew specific test results. Indicates a mold or mildew reading, by species name, along with a reading
   * value.
   * </pre>
   *
   * <code>.opencannabis.structs.labtesting.MoldMildew mold_mildew = 3;</code>
   */
  public io.opencannabis.schema.product.struct.testing.MoldMildew getMoldMildew() {
    return moldMildew_ == null ? io.opencannabis.schema.product.struct.testing.MoldMildew.getDefaultInstance() : moldMildew_;
  }
  /**
   * <pre>
   * Mold and mildew specific test results. Indicates a mold or mildew reading, by species name, along with a reading
   * value.
   * </pre>
   *
   * <code>.opencannabis.structs.labtesting.MoldMildew mold_mildew = 3;</code>
   */
  public io.opencannabis.schema.product.struct.testing.MoldMildewOrBuilder getMoldMildewOrBuilder() {
    return getMoldMildew();
  }

  public static final int OTHER_CONTAMINANTS_FIELD_NUMBER = 4;
  private io.opencannabis.schema.product.struct.testing.OtherContaminants otherContaminants_;
  /**
   * <pre>
   * Place to store other contaminants that may be found in cannabis, including, but not limited to: glass, sand,
   * detergents, etc.
   * </pre>
   *
   * <code>.opencannabis.structs.labtesting.OtherContaminants other_contaminants = 4;</code>
   */
  public boolean hasOtherContaminants() {
    return otherContaminants_ != null;
  }
  /**
   * <pre>
   * Place to store other contaminants that may be found in cannabis, including, but not limited to: glass, sand,
   * detergents, etc.
   * </pre>
   *
   * <code>.opencannabis.structs.labtesting.OtherContaminants other_contaminants = 4;</code>
   */
  public io.opencannabis.schema.product.struct.testing.OtherContaminants getOtherContaminants() {
    return otherContaminants_ == null ? io.opencannabis.schema.product.struct.testing.OtherContaminants.getDefaultInstance() : otherContaminants_;
  }
  /**
   * <pre>
   * Place to store other contaminants that may be found in cannabis, including, but not limited to: glass, sand,
   * detergents, etc.
   * </pre>
   *
   * <code>.opencannabis.structs.labtesting.OtherContaminants other_contaminants = 4;</code>
   */
  public io.opencannabis.schema.product.struct.testing.OtherContaminantsOrBuilder getOtherContaminantsOrBuilder() {
    return getOtherContaminants();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (pesticides_ != null) {
      output.writeMessage(1, getPesticides());
    }
    if (metals_ != null) {
      output.writeMessage(2, getMetals());
    }
    if (moldMildew_ != null) {
      output.writeMessage(3, getMoldMildew());
    }
    if (otherContaminants_ != null) {
      output.writeMessage(4, getOtherContaminants());
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (pesticides_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getPesticides());
    }
    if (metals_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getMetals());
    }
    if (moldMildew_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getMoldMildew());
    }
    if (otherContaminants_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getOtherContaminants());
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.opencannabis.schema.product.struct.testing.Contaminants)) {
      return super.equals(obj);
    }
    io.opencannabis.schema.product.struct.testing.Contaminants other = (io.opencannabis.schema.product.struct.testing.Contaminants) obj;

    boolean result = true;
    result = result && (hasPesticides() == other.hasPesticides());
    if (hasPesticides()) {
      result = result && getPesticides()
          .equals(other.getPesticides());
    }
    result = result && (hasMetals() == other.hasMetals());
    if (hasMetals()) {
      result = result && getMetals()
          .equals(other.getMetals());
    }
    result = result && (hasMoldMildew() == other.hasMoldMildew());
    if (hasMoldMildew()) {
      result = result && getMoldMildew()
          .equals(other.getMoldMildew());
    }
    result = result && (hasOtherContaminants() == other.hasOtherContaminants());
    if (hasOtherContaminants()) {
      result = result && getOtherContaminants()
          .equals(other.getOtherContaminants());
    }
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasPesticides()) {
      hash = (37 * hash) + PESTICIDES_FIELD_NUMBER;
      hash = (53 * hash) + getPesticides().hashCode();
    }
    if (hasMetals()) {
      hash = (37 * hash) + METALS_FIELD_NUMBER;
      hash = (53 * hash) + getMetals().hashCode();
    }
    if (hasMoldMildew()) {
      hash = (37 * hash) + MOLD_MILDEW_FIELD_NUMBER;
      hash = (53 * hash) + getMoldMildew().hashCode();
    }
    if (hasOtherContaminants()) {
      hash = (37 * hash) + OTHER_CONTAMINANTS_FIELD_NUMBER;
      hash = (53 * hash) + getOtherContaminants().hashCode();
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.opencannabis.schema.product.struct.testing.Contaminants parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.opencannabis.schema.product.struct.testing.Contaminants parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.opencannabis.schema.product.struct.testing.Contaminants parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.opencannabis.schema.product.struct.testing.Contaminants parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.opencannabis.schema.product.struct.testing.Contaminants parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.opencannabis.schema.product.struct.testing.Contaminants parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.opencannabis.schema.product.struct.testing.Contaminants parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.opencannabis.schema.product.struct.testing.Contaminants parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.opencannabis.schema.product.struct.testing.Contaminants parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.opencannabis.schema.product.struct.testing.Contaminants parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.opencannabis.schema.product.struct.testing.Contaminants parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.opencannabis.schema.product.struct.testing.Contaminants parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.opencannabis.schema.product.struct.testing.Contaminants prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Test results for contaminants which indicate presense/absense of a compound along with a value (if available)
   * </pre>
   *
   * Protobuf type {@code opencannabis.structs.labtesting.Contaminants}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:opencannabis.structs.labtesting.Contaminants)
      io.opencannabis.schema.product.struct.testing.ContaminantsOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.opencannabis.schema.product.struct.testing.LabTesting.internal_static_opencannabis_structs_labtesting_Contaminants_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.opencannabis.schema.product.struct.testing.LabTesting.internal_static_opencannabis_structs_labtesting_Contaminants_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.opencannabis.schema.product.struct.testing.Contaminants.class, io.opencannabis.schema.product.struct.testing.Contaminants.Builder.class);
    }

    // Construct using io.opencannabis.schema.product.struct.testing.Contaminants.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (pesticidesBuilder_ == null) {
        pesticides_ = null;
      } else {
        pesticides_ = null;
        pesticidesBuilder_ = null;
      }
      if (metalsBuilder_ == null) {
        metals_ = null;
      } else {
        metals_ = null;
        metalsBuilder_ = null;
      }
      if (moldMildewBuilder_ == null) {
        moldMildew_ = null;
      } else {
        moldMildew_ = null;
        moldMildewBuilder_ = null;
      }
      if (otherContaminantsBuilder_ == null) {
        otherContaminants_ = null;
      } else {
        otherContaminants_ = null;
        otherContaminantsBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.opencannabis.schema.product.struct.testing.LabTesting.internal_static_opencannabis_structs_labtesting_Contaminants_descriptor;
    }

    @java.lang.Override
    public io.opencannabis.schema.product.struct.testing.Contaminants getDefaultInstanceForType() {
      return io.opencannabis.schema.product.struct.testing.Contaminants.getDefaultInstance();
    }

    @java.lang.Override
    public io.opencannabis.schema.product.struct.testing.Contaminants build() {
      io.opencannabis.schema.product.struct.testing.Contaminants result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.opencannabis.schema.product.struct.testing.Contaminants buildPartial() {
      io.opencannabis.schema.product.struct.testing.Contaminants result = new io.opencannabis.schema.product.struct.testing.Contaminants(this);
      if (pesticidesBuilder_ == null) {
        result.pesticides_ = pesticides_;
      } else {
        result.pesticides_ = pesticidesBuilder_.build();
      }
      if (metalsBuilder_ == null) {
        result.metals_ = metals_;
      } else {
        result.metals_ = metalsBuilder_.build();
      }
      if (moldMildewBuilder_ == null) {
        result.moldMildew_ = moldMildew_;
      } else {
        result.moldMildew_ = moldMildewBuilder_.build();
      }
      if (otherContaminantsBuilder_ == null) {
        result.otherContaminants_ = otherContaminants_;
      } else {
        result.otherContaminants_ = otherContaminantsBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return (Builder) super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.opencannabis.schema.product.struct.testing.Contaminants) {
        return mergeFrom((io.opencannabis.schema.product.struct.testing.Contaminants)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.opencannabis.schema.product.struct.testing.Contaminants other) {
      if (other == io.opencannabis.schema.product.struct.testing.Contaminants.getDefaultInstance()) return this;
      if (other.hasPesticides()) {
        mergePesticides(other.getPesticides());
      }
      if (other.hasMetals()) {
        mergeMetals(other.getMetals());
      }
      if (other.hasMoldMildew()) {
        mergeMoldMildew(other.getMoldMildew());
      }
      if (other.hasOtherContaminants()) {
        mergeOtherContaminants(other.getOtherContaminants());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.opencannabis.schema.product.struct.testing.Contaminants parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.opencannabis.schema.product.struct.testing.Contaminants) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }

    private io.opencannabis.schema.product.struct.testing.Pesticides pesticides_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.opencannabis.schema.product.struct.testing.Pesticides, io.opencannabis.schema.product.struct.testing.Pesticides.Builder, io.opencannabis.schema.product.struct.testing.PesticidesOrBuilder> pesticidesBuilder_;
    /**
     * <pre>
     * Pesticide-specific test results. Indicates a pesticide reading, by chemical compound name, and a reading value.
     * </pre>
     *
     * <code>.opencannabis.structs.labtesting.Pesticides pesticides = 1;</code>
     */
    public boolean hasPesticides() {
      return pesticidesBuilder_ != null || pesticides_ != null;
    }
    /**
     * <pre>
     * Pesticide-specific test results. Indicates a pesticide reading, by chemical compound name, and a reading value.
     * </pre>
     *
     * <code>.opencannabis.structs.labtesting.Pesticides pesticides = 1;</code>
     */
    public io.opencannabis.schema.product.struct.testing.Pesticides getPesticides() {
      if (pesticidesBuilder_ == null) {
        return pesticides_ == null ? io.opencannabis.schema.product.struct.testing.Pesticides.getDefaultInstance() : pesticides_;
      } else {
        return pesticidesBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Pesticide-specific test results. Indicates a pesticide reading, by chemical compound name, and a reading value.
     * </pre>
     *
     * <code>.opencannabis.structs.labtesting.Pesticides pesticides = 1;</code>
     */
    public Builder setPesticides(io.opencannabis.schema.product.struct.testing.Pesticides value) {
      if (pesticidesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        pesticides_ = value;
        onChanged();
      } else {
        pesticidesBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Pesticide-specific test results. Indicates a pesticide reading, by chemical compound name, and a reading value.
     * </pre>
     *
     * <code>.opencannabis.structs.labtesting.Pesticides pesticides = 1;</code>
     */
    public Builder setPesticides(
        io.opencannabis.schema.product.struct.testing.Pesticides.Builder builderForValue) {
      if (pesticidesBuilder_ == null) {
        pesticides_ = builderForValue.build();
        onChanged();
      } else {
        pesticidesBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Pesticide-specific test results. Indicates a pesticide reading, by chemical compound name, and a reading value.
     * </pre>
     *
     * <code>.opencannabis.structs.labtesting.Pesticides pesticides = 1;</code>
     */
    public Builder mergePesticides(io.opencannabis.schema.product.struct.testing.Pesticides value) {
      if (pesticidesBuilder_ == null) {
        if (pesticides_ != null) {
          pesticides_ =
            io.opencannabis.schema.product.struct.testing.Pesticides.newBuilder(pesticides_).mergeFrom(value).buildPartial();
        } else {
          pesticides_ = value;
        }
        onChanged();
      } else {
        pesticidesBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Pesticide-specific test results. Indicates a pesticide reading, by chemical compound name, and a reading value.
     * </pre>
     *
     * <code>.opencannabis.structs.labtesting.Pesticides pesticides = 1;</code>
     */
    public Builder clearPesticides() {
      if (pesticidesBuilder_ == null) {
        pesticides_ = null;
        onChanged();
      } else {
        pesticides_ = null;
        pesticidesBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Pesticide-specific test results. Indicates a pesticide reading, by chemical compound name, and a reading value.
     * </pre>
     *
     * <code>.opencannabis.structs.labtesting.Pesticides pesticides = 1;</code>
     */
    public io.opencannabis.schema.product.struct.testing.Pesticides.Builder getPesticidesBuilder() {
      
      onChanged();
      return getPesticidesFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Pesticide-specific test results. Indicates a pesticide reading, by chemical compound name, and a reading value.
     * </pre>
     *
     * <code>.opencannabis.structs.labtesting.Pesticides pesticides = 1;</code>
     */
    public io.opencannabis.schema.product.struct.testing.PesticidesOrBuilder getPesticidesOrBuilder() {
      if (pesticidesBuilder_ != null) {
        return pesticidesBuilder_.getMessageOrBuilder();
      } else {
        return pesticides_ == null ?
            io.opencannabis.schema.product.struct.testing.Pesticides.getDefaultInstance() : pesticides_;
      }
    }
    /**
     * <pre>
     * Pesticide-specific test results. Indicates a pesticide reading, by chemical compound name, and a reading value.
     * </pre>
     *
     * <code>.opencannabis.structs.labtesting.Pesticides pesticides = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.opencannabis.schema.product.struct.testing.Pesticides, io.opencannabis.schema.product.struct.testing.Pesticides.Builder, io.opencannabis.schema.product.struct.testing.PesticidesOrBuilder> 
        getPesticidesFieldBuilder() {
      if (pesticidesBuilder_ == null) {
        pesticidesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.opencannabis.schema.product.struct.testing.Pesticides, io.opencannabis.schema.product.struct.testing.Pesticides.Builder, io.opencannabis.schema.product.struct.testing.PesticidesOrBuilder>(
                getPesticides(),
                getParentForChildren(),
                isClean());
        pesticides_ = null;
      }
      return pesticidesBuilder_;
    }

    private io.opencannabis.schema.product.struct.testing.Metals metals_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.opencannabis.schema.product.struct.testing.Metals, io.opencannabis.schema.product.struct.testing.Metals.Builder, io.opencannabis.schema.product.struct.testing.MetalsOrBuilder> metalsBuilder_;
    /**
     * <pre>
     * Heavy metal specific test results. Indicates a heavy metal reading, by chemical compound name, along with a 
     * reading value.
     * </pre>
     *
     * <code>.opencannabis.structs.labtesting.Metals metals = 2;</code>
     */
    public boolean hasMetals() {
      return metalsBuilder_ != null || metals_ != null;
    }
    /**
     * <pre>
     * Heavy metal specific test results. Indicates a heavy metal reading, by chemical compound name, along with a 
     * reading value.
     * </pre>
     *
     * <code>.opencannabis.structs.labtesting.Metals metals = 2;</code>
     */
    public io.opencannabis.schema.product.struct.testing.Metals getMetals() {
      if (metalsBuilder_ == null) {
        return metals_ == null ? io.opencannabis.schema.product.struct.testing.Metals.getDefaultInstance() : metals_;
      } else {
        return metalsBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Heavy metal specific test results. Indicates a heavy metal reading, by chemical compound name, along with a 
     * reading value.
     * </pre>
     *
     * <code>.opencannabis.structs.labtesting.Metals metals = 2;</code>
     */
    public Builder setMetals(io.opencannabis.schema.product.struct.testing.Metals value) {
      if (metalsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        metals_ = value;
        onChanged();
      } else {
        metalsBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Heavy metal specific test results. Indicates a heavy metal reading, by chemical compound name, along with a 
     * reading value.
     * </pre>
     *
     * <code>.opencannabis.structs.labtesting.Metals metals = 2;</code>
     */
    public Builder setMetals(
        io.opencannabis.schema.product.struct.testing.Metals.Builder builderForValue) {
      if (metalsBuilder_ == null) {
        metals_ = builderForValue.build();
        onChanged();
      } else {
        metalsBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Heavy metal specific test results. Indicates a heavy metal reading, by chemical compound name, along with a 
     * reading value.
     * </pre>
     *
     * <code>.opencannabis.structs.labtesting.Metals metals = 2;</code>
     */
    public Builder mergeMetals(io.opencannabis.schema.product.struct.testing.Metals value) {
      if (metalsBuilder_ == null) {
        if (metals_ != null) {
          metals_ =
            io.opencannabis.schema.product.struct.testing.Metals.newBuilder(metals_).mergeFrom(value).buildPartial();
        } else {
          metals_ = value;
        }
        onChanged();
      } else {
        metalsBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Heavy metal specific test results. Indicates a heavy metal reading, by chemical compound name, along with a 
     * reading value.
     * </pre>
     *
     * <code>.opencannabis.structs.labtesting.Metals metals = 2;</code>
     */
    public Builder clearMetals() {
      if (metalsBuilder_ == null) {
        metals_ = null;
        onChanged();
      } else {
        metals_ = null;
        metalsBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Heavy metal specific test results. Indicates a heavy metal reading, by chemical compound name, along with a 
     * reading value.
     * </pre>
     *
     * <code>.opencannabis.structs.labtesting.Metals metals = 2;</code>
     */
    public io.opencannabis.schema.product.struct.testing.Metals.Builder getMetalsBuilder() {
      
      onChanged();
      return getMetalsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Heavy metal specific test results. Indicates a heavy metal reading, by chemical compound name, along with a 
     * reading value.
     * </pre>
     *
     * <code>.opencannabis.structs.labtesting.Metals metals = 2;</code>
     */
    public io.opencannabis.schema.product.struct.testing.MetalsOrBuilder getMetalsOrBuilder() {
      if (metalsBuilder_ != null) {
        return metalsBuilder_.getMessageOrBuilder();
      } else {
        return metals_ == null ?
            io.opencannabis.schema.product.struct.testing.Metals.getDefaultInstance() : metals_;
      }
    }
    /**
     * <pre>
     * Heavy metal specific test results. Indicates a heavy metal reading, by chemical compound name, along with a 
     * reading value.
     * </pre>
     *
     * <code>.opencannabis.structs.labtesting.Metals metals = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.opencannabis.schema.product.struct.testing.Metals, io.opencannabis.schema.product.struct.testing.Metals.Builder, io.opencannabis.schema.product.struct.testing.MetalsOrBuilder> 
        getMetalsFieldBuilder() {
      if (metalsBuilder_ == null) {
        metalsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.opencannabis.schema.product.struct.testing.Metals, io.opencannabis.schema.product.struct.testing.Metals.Builder, io.opencannabis.schema.product.struct.testing.MetalsOrBuilder>(
                getMetals(),
                getParentForChildren(),
                isClean());
        metals_ = null;
      }
      return metalsBuilder_;
    }

    private io.opencannabis.schema.product.struct.testing.MoldMildew moldMildew_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.opencannabis.schema.product.struct.testing.MoldMildew, io.opencannabis.schema.product.struct.testing.MoldMildew.Builder, io.opencannabis.schema.product.struct.testing.MoldMildewOrBuilder> moldMildewBuilder_;
    /**
     * <pre>
     * Mold and mildew specific test results. Indicates a mold or mildew reading, by species name, along with a reading
     * value.
     * </pre>
     *
     * <code>.opencannabis.structs.labtesting.MoldMildew mold_mildew = 3;</code>
     */
    public boolean hasMoldMildew() {
      return moldMildewBuilder_ != null || moldMildew_ != null;
    }
    /**
     * <pre>
     * Mold and mildew specific test results. Indicates a mold or mildew reading, by species name, along with a reading
     * value.
     * </pre>
     *
     * <code>.opencannabis.structs.labtesting.MoldMildew mold_mildew = 3;</code>
     */
    public io.opencannabis.schema.product.struct.testing.MoldMildew getMoldMildew() {
      if (moldMildewBuilder_ == null) {
        return moldMildew_ == null ? io.opencannabis.schema.product.struct.testing.MoldMildew.getDefaultInstance() : moldMildew_;
      } else {
        return moldMildewBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Mold and mildew specific test results. Indicates a mold or mildew reading, by species name, along with a reading
     * value.
     * </pre>
     *
     * <code>.opencannabis.structs.labtesting.MoldMildew mold_mildew = 3;</code>
     */
    public Builder setMoldMildew(io.opencannabis.schema.product.struct.testing.MoldMildew value) {
      if (moldMildewBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        moldMildew_ = value;
        onChanged();
      } else {
        moldMildewBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Mold and mildew specific test results. Indicates a mold or mildew reading, by species name, along with a reading
     * value.
     * </pre>
     *
     * <code>.opencannabis.structs.labtesting.MoldMildew mold_mildew = 3;</code>
     */
    public Builder setMoldMildew(
        io.opencannabis.schema.product.struct.testing.MoldMildew.Builder builderForValue) {
      if (moldMildewBuilder_ == null) {
        moldMildew_ = builderForValue.build();
        onChanged();
      } else {
        moldMildewBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Mold and mildew specific test results. Indicates a mold or mildew reading, by species name, along with a reading
     * value.
     * </pre>
     *
     * <code>.opencannabis.structs.labtesting.MoldMildew mold_mildew = 3;</code>
     */
    public Builder mergeMoldMildew(io.opencannabis.schema.product.struct.testing.MoldMildew value) {
      if (moldMildewBuilder_ == null) {
        if (moldMildew_ != null) {
          moldMildew_ =
            io.opencannabis.schema.product.struct.testing.MoldMildew.newBuilder(moldMildew_).mergeFrom(value).buildPartial();
        } else {
          moldMildew_ = value;
        }
        onChanged();
      } else {
        moldMildewBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Mold and mildew specific test results. Indicates a mold or mildew reading, by species name, along with a reading
     * value.
     * </pre>
     *
     * <code>.opencannabis.structs.labtesting.MoldMildew mold_mildew = 3;</code>
     */
    public Builder clearMoldMildew() {
      if (moldMildewBuilder_ == null) {
        moldMildew_ = null;
        onChanged();
      } else {
        moldMildew_ = null;
        moldMildewBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Mold and mildew specific test results. Indicates a mold or mildew reading, by species name, along with a reading
     * value.
     * </pre>
     *
     * <code>.opencannabis.structs.labtesting.MoldMildew mold_mildew = 3;</code>
     */
    public io.opencannabis.schema.product.struct.testing.MoldMildew.Builder getMoldMildewBuilder() {
      
      onChanged();
      return getMoldMildewFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Mold and mildew specific test results. Indicates a mold or mildew reading, by species name, along with a reading
     * value.
     * </pre>
     *
     * <code>.opencannabis.structs.labtesting.MoldMildew mold_mildew = 3;</code>
     */
    public io.opencannabis.schema.product.struct.testing.MoldMildewOrBuilder getMoldMildewOrBuilder() {
      if (moldMildewBuilder_ != null) {
        return moldMildewBuilder_.getMessageOrBuilder();
      } else {
        return moldMildew_ == null ?
            io.opencannabis.schema.product.struct.testing.MoldMildew.getDefaultInstance() : moldMildew_;
      }
    }
    /**
     * <pre>
     * Mold and mildew specific test results. Indicates a mold or mildew reading, by species name, along with a reading
     * value.
     * </pre>
     *
     * <code>.opencannabis.structs.labtesting.MoldMildew mold_mildew = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.opencannabis.schema.product.struct.testing.MoldMildew, io.opencannabis.schema.product.struct.testing.MoldMildew.Builder, io.opencannabis.schema.product.struct.testing.MoldMildewOrBuilder> 
        getMoldMildewFieldBuilder() {
      if (moldMildewBuilder_ == null) {
        moldMildewBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.opencannabis.schema.product.struct.testing.MoldMildew, io.opencannabis.schema.product.struct.testing.MoldMildew.Builder, io.opencannabis.schema.product.struct.testing.MoldMildewOrBuilder>(
                getMoldMildew(),
                getParentForChildren(),
                isClean());
        moldMildew_ = null;
      }
      return moldMildewBuilder_;
    }

    private io.opencannabis.schema.product.struct.testing.OtherContaminants otherContaminants_ = null;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.opencannabis.schema.product.struct.testing.OtherContaminants, io.opencannabis.schema.product.struct.testing.OtherContaminants.Builder, io.opencannabis.schema.product.struct.testing.OtherContaminantsOrBuilder> otherContaminantsBuilder_;
    /**
     * <pre>
     * Place to store other contaminants that may be found in cannabis, including, but not limited to: glass, sand,
     * detergents, etc.
     * </pre>
     *
     * <code>.opencannabis.structs.labtesting.OtherContaminants other_contaminants = 4;</code>
     */
    public boolean hasOtherContaminants() {
      return otherContaminantsBuilder_ != null || otherContaminants_ != null;
    }
    /**
     * <pre>
     * Place to store other contaminants that may be found in cannabis, including, but not limited to: glass, sand,
     * detergents, etc.
     * </pre>
     *
     * <code>.opencannabis.structs.labtesting.OtherContaminants other_contaminants = 4;</code>
     */
    public io.opencannabis.schema.product.struct.testing.OtherContaminants getOtherContaminants() {
      if (otherContaminantsBuilder_ == null) {
        return otherContaminants_ == null ? io.opencannabis.schema.product.struct.testing.OtherContaminants.getDefaultInstance() : otherContaminants_;
      } else {
        return otherContaminantsBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Place to store other contaminants that may be found in cannabis, including, but not limited to: glass, sand,
     * detergents, etc.
     * </pre>
     *
     * <code>.opencannabis.structs.labtesting.OtherContaminants other_contaminants = 4;</code>
     */
    public Builder setOtherContaminants(io.opencannabis.schema.product.struct.testing.OtherContaminants value) {
      if (otherContaminantsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        otherContaminants_ = value;
        onChanged();
      } else {
        otherContaminantsBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Place to store other contaminants that may be found in cannabis, including, but not limited to: glass, sand,
     * detergents, etc.
     * </pre>
     *
     * <code>.opencannabis.structs.labtesting.OtherContaminants other_contaminants = 4;</code>
     */
    public Builder setOtherContaminants(
        io.opencannabis.schema.product.struct.testing.OtherContaminants.Builder builderForValue) {
      if (otherContaminantsBuilder_ == null) {
        otherContaminants_ = builderForValue.build();
        onChanged();
      } else {
        otherContaminantsBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Place to store other contaminants that may be found in cannabis, including, but not limited to: glass, sand,
     * detergents, etc.
     * </pre>
     *
     * <code>.opencannabis.structs.labtesting.OtherContaminants other_contaminants = 4;</code>
     */
    public Builder mergeOtherContaminants(io.opencannabis.schema.product.struct.testing.OtherContaminants value) {
      if (otherContaminantsBuilder_ == null) {
        if (otherContaminants_ != null) {
          otherContaminants_ =
            io.opencannabis.schema.product.struct.testing.OtherContaminants.newBuilder(otherContaminants_).mergeFrom(value).buildPartial();
        } else {
          otherContaminants_ = value;
        }
        onChanged();
      } else {
        otherContaminantsBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Place to store other contaminants that may be found in cannabis, including, but not limited to: glass, sand,
     * detergents, etc.
     * </pre>
     *
     * <code>.opencannabis.structs.labtesting.OtherContaminants other_contaminants = 4;</code>
     */
    public Builder clearOtherContaminants() {
      if (otherContaminantsBuilder_ == null) {
        otherContaminants_ = null;
        onChanged();
      } else {
        otherContaminants_ = null;
        otherContaminantsBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Place to store other contaminants that may be found in cannabis, including, but not limited to: glass, sand,
     * detergents, etc.
     * </pre>
     *
     * <code>.opencannabis.structs.labtesting.OtherContaminants other_contaminants = 4;</code>
     */
    public io.opencannabis.schema.product.struct.testing.OtherContaminants.Builder getOtherContaminantsBuilder() {
      
      onChanged();
      return getOtherContaminantsFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Place to store other contaminants that may be found in cannabis, including, but not limited to: glass, sand,
     * detergents, etc.
     * </pre>
     *
     * <code>.opencannabis.structs.labtesting.OtherContaminants other_contaminants = 4;</code>
     */
    public io.opencannabis.schema.product.struct.testing.OtherContaminantsOrBuilder getOtherContaminantsOrBuilder() {
      if (otherContaminantsBuilder_ != null) {
        return otherContaminantsBuilder_.getMessageOrBuilder();
      } else {
        return otherContaminants_ == null ?
            io.opencannabis.schema.product.struct.testing.OtherContaminants.getDefaultInstance() : otherContaminants_;
      }
    }
    /**
     * <pre>
     * Place to store other contaminants that may be found in cannabis, including, but not limited to: glass, sand,
     * detergents, etc.
     * </pre>
     *
     * <code>.opencannabis.structs.labtesting.OtherContaminants other_contaminants = 4;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.opencannabis.schema.product.struct.testing.OtherContaminants, io.opencannabis.schema.product.struct.testing.OtherContaminants.Builder, io.opencannabis.schema.product.struct.testing.OtherContaminantsOrBuilder> 
        getOtherContaminantsFieldBuilder() {
      if (otherContaminantsBuilder_ == null) {
        otherContaminantsBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.opencannabis.schema.product.struct.testing.OtherContaminants, io.opencannabis.schema.product.struct.testing.OtherContaminants.Builder, io.opencannabis.schema.product.struct.testing.OtherContaminantsOrBuilder>(
                getOtherContaminants(),
                getParentForChildren(),
                isClean());
        otherContaminants_ = null;
      }
      return otherContaminantsBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:opencannabis.structs.labtesting.Contaminants)
  }

  // @@protoc_insertion_point(class_scope:opencannabis.structs.labtesting.Contaminants)
  private static final io.opencannabis.schema.product.struct.testing.Contaminants DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.opencannabis.schema.product.struct.testing.Contaminants();
  }

  public static io.opencannabis.schema.product.struct.testing.Contaminants getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Contaminants>
      PARSER = new com.google.protobuf.AbstractParser<Contaminants>() {
    @java.lang.Override
    public Contaminants parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new Contaminants(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<Contaminants> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Contaminants> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.opencannabis.schema.product.struct.testing.Contaminants getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

