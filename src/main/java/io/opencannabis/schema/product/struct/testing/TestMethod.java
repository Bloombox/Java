/*
 * Copyright 2018, Bloombox, LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: structs/labtesting/TestResults.proto

package io.opencannabis.schema.product.struct.testing;

/**
 * <pre>
 * Specific test methods used to quantify or qualify certain properties or components of cannabis.
 * </pre>
 *
 * Protobuf enum {@code opencannabis.structs.labtesting.TestMethod}
 */
public enum TestMethod
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * 'Unspecified' test method, indicating that we don't know what method was used to test with, or it was left
   * unspecified. This is the default value.
   * </pre>
   *
   * <code>UNSPECIFIED_METHOD = 0;</code>
   */
  UNSPECIFIED_METHOD(0),
  /**
   * <pre>
   * Gas Chromatography / Mass Spectrometry is used to identify specific compounds found within a sample.
   * </pre>
   *
   * <code>GCMS = 1;</code>
   */
  GCMS(1),
  /**
   * <pre>
   * Liquid Chromatography / Mass Spectrometry is used to identify specific compounds found within a sample.
   * Recommended for the most volatile compounds.
   * </pre>
   *
   * <code>LCMS = 2;</code>
   */
  LCMS(2),
  /**
   * <pre>
   * Classic PCR is a qualitative and semi-quantitative genetic test that identifies the presense or absence of 
   * specific genes.
   * </pre>
   *
   * <code>CLASSIC_PCR = 3;</code>
   */
  CLASSIC_PCR(3),
  /**
   * <pre>
   * Quantitative PCR is a genetic test that quantifies the amount of specific genes within a sample.
   * </pre>
   *
   * <code>qPCR = 4;</code>
   */
  qPCR(4),
  /**
   * <pre>
   * ELISA, or enzyme-linked immunosorbent assay, is an antibody based test that is used to detect and quantify
   * specific substances within the sample.
   * </pre>
   *
   * <code>ELISA = 5;</code>
   */
  ELISA(5),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * 'Unspecified' test method, indicating that we don't know what method was used to test with, or it was left
   * unspecified. This is the default value.
   * </pre>
   *
   * <code>UNSPECIFIED_METHOD = 0;</code>
   */
  public static final int UNSPECIFIED_METHOD_VALUE = 0;
  /**
   * <pre>
   * Gas Chromatography / Mass Spectrometry is used to identify specific compounds found within a sample.
   * </pre>
   *
   * <code>GCMS = 1;</code>
   */
  public static final int GCMS_VALUE = 1;
  /**
   * <pre>
   * Liquid Chromatography / Mass Spectrometry is used to identify specific compounds found within a sample.
   * Recommended for the most volatile compounds.
   * </pre>
   *
   * <code>LCMS = 2;</code>
   */
  public static final int LCMS_VALUE = 2;
  /**
   * <pre>
   * Classic PCR is a qualitative and semi-quantitative genetic test that identifies the presense or absence of 
   * specific genes.
   * </pre>
   *
   * <code>CLASSIC_PCR = 3;</code>
   */
  public static final int CLASSIC_PCR_VALUE = 3;
  /**
   * <pre>
   * Quantitative PCR is a genetic test that quantifies the amount of specific genes within a sample.
   * </pre>
   *
   * <code>qPCR = 4;</code>
   */
  public static final int qPCR_VALUE = 4;
  /**
   * <pre>
   * ELISA, or enzyme-linked immunosorbent assay, is an antibody based test that is used to detect and quantify
   * specific substances within the sample.
   * </pre>
   *
   * <code>ELISA = 5;</code>
   */
  public static final int ELISA_VALUE = 5;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static TestMethod valueOf(int value) {
    return forNumber(value);
  }

  public static TestMethod forNumber(int value) {
    switch (value) {
      case 0: return UNSPECIFIED_METHOD;
      case 1: return GCMS;
      case 2: return LCMS;
      case 3: return CLASSIC_PCR;
      case 4: return qPCR;
      case 5: return ELISA;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<TestMethod>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      TestMethod> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<TestMethod>() {
          public TestMethod findValueByNumber(int number) {
            return TestMethod.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return io.opencannabis.schema.product.struct.testing.LabTesting.getDescriptor().getEnumTypes().get(0);
  }

  private static final TestMethod[] VALUES = values();

  public static TestMethod valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private TestMethod(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:opencannabis.structs.labtesting.TestMethod)
}

