/*
 * Copyright 2018, Bloombox, LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: partner/PartnerDevice.proto

package io.bloombox.schema.partner;

public interface PartnerDeviceOrBuilder extends
    // @@protoc_insertion_point(interface_extends:bloombox.schema.partner.PartnerDevice)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>string uuid = 1;</code>
   */
  java.lang.String getUuid();
  /**
   * <code>string uuid = 1;</code>
   */
  com.google.protobuf.ByteString
      getUuidBytes();

  /**
   * <code>.bloombox.schema.partner.Partner partner = 2;</code>
   */
  boolean hasPartner();
  /**
   * <code>.bloombox.schema.partner.Partner partner = 2;</code>
   */
  io.bloombox.schema.partner.Partner getPartner();
  /**
   * <code>.bloombox.schema.partner.Partner partner = 2;</code>
   */
  io.bloombox.schema.partner.PartnerOrBuilder getPartnerOrBuilder();

  /**
   * <code>.bloombox.schema.partner.PartnerLocation location = 3;</code>
   */
  boolean hasLocation();
  /**
   * <code>.bloombox.schema.partner.PartnerLocation location = 3;</code>
   */
  io.bloombox.schema.partner.PartnerLocation getLocation();
  /**
   * <code>.bloombox.schema.partner.PartnerLocation location = 3;</code>
   */
  io.bloombox.schema.partner.PartnerLocationOrBuilder getLocationOrBuilder();

  /**
   * <code>.bloombox.schema.partner.PartnerDeviceType type = 4;</code>
   */
  int getTypeValue();
  /**
   * <code>.bloombox.schema.partner.PartnerDeviceType type = 4;</code>
   */
  io.bloombox.schema.partner.PartnerDeviceType getType();

  /**
   * <code>.bloombox.schema.partner.PartnerDeviceFlags flags = 5;</code>
   */
  boolean hasFlags();
  /**
   * <code>.bloombox.schema.partner.PartnerDeviceFlags flags = 5;</code>
   */
  io.bloombox.schema.partner.PartnerDeviceFlags getFlags();
  /**
   * <code>.bloombox.schema.partner.PartnerDeviceFlags flags = 5;</code>
   */
  io.bloombox.schema.partner.PartnerDeviceFlagsOrBuilder getFlagsOrBuilder();

  /**
   * <code>.opencannabis.device.Device device = 6;</code>
   */
  boolean hasDevice();
  /**
   * <code>.opencannabis.device.Device device = 6;</code>
   */
  io.opencannabis.schema.device.Device getDevice();
  /**
   * <code>.opencannabis.device.Device device = 6;</code>
   */
  io.opencannabis.schema.device.DeviceOrBuilder getDeviceOrBuilder();

  /**
   * <code>.opencannabis.temporal.Instant seen = 7;</code>
   */
  boolean hasSeen();
  /**
   * <code>.opencannabis.temporal.Instant seen = 7;</code>
   */
  io.opencannabis.schema.temporal.Instant getSeen();
  /**
   * <code>.opencannabis.temporal.Instant seen = 7;</code>
   */
  io.opencannabis.schema.temporal.InstantOrBuilder getSeenOrBuilder();

  /**
   * <code>.opencannabis.temporal.Instant registered = 8;</code>
   */
  boolean hasRegistered();
  /**
   * <code>.opencannabis.temporal.Instant registered = 8;</code>
   */
  io.opencannabis.schema.temporal.Instant getRegistered();
  /**
   * <code>.opencannabis.temporal.Instant registered = 8;</code>
   */
  io.opencannabis.schema.temporal.InstantOrBuilder getRegisteredOrBuilder();
}
