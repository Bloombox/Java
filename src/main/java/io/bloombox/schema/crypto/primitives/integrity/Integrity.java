/*
 * Copyright 2018, Bloombox, LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crypto/primitives/Integrity.proto

package io.bloombox.schema.crypto.primitives.integrity;

public final class Integrity {
  private Integrity() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_crypto_primitives_integrity_Hash_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_crypto_primitives_integrity_Hash_fieldAccessorTable;
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_crypto_primitives_integrity_HashedData_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_crypto_primitives_integrity_HashedData_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n!crypto/primitives/Integrity.proto\022\033cry" +
      "pto.primitives.integrity\"|\n\004Hash\022=\n\talgo" +
      "rithm\030\001 \001(\0162*.crypto.primitives.integrit" +
      "y.HashAlgorithm\022\r\n\003raw\030\002 \001(\014H\000\022\r\n\003hex\030\003 " +
      "\001(\tH\000\022\r\n\003b64\030\004 \001(\tH\000B\010\n\006digest\"K\n\nHashed" +
      "Data\022\014\n\004data\030\001 \001(\014\022/\n\004hash\030\002 \001(\0132!.crypt" +
      "o.primitives.integrity.Hash*R\n\rHashAlgor" +
      "ithm\022\010\n\004SHA1\020\000\022\007\n\003MD5\020\001\022\n\n\006SHA256\020\002\022\n\n\006S" +
      "HA384\020\003\022\n\n\006SHA512\020\004\022\n\n\006MURMUR\020\006B4\n.io.bl" +
      "oombox.schema.crypto.primitives.integrit" +
      "yH\001P\001b\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_crypto_primitives_integrity_Hash_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_crypto_primitives_integrity_Hash_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_crypto_primitives_integrity_Hash_descriptor,
        new java.lang.String[] { "Algorithm", "Raw", "Hex", "B64", "Digest", });
    internal_static_crypto_primitives_integrity_HashedData_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_crypto_primitives_integrity_HashedData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_crypto_primitives_integrity_HashedData_descriptor,
        new java.lang.String[] { "Data", "Hash", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
