/*
 * Copyright 2018, Momentum Ideas, Co. All rights reserved.
 *
 * Source and object computer code contained herein is the private intellectual
 * property of Momentum Ideas Co., a Delaware Corporation. Use of this
 * code in source form requires permission in writing before use or the
 * assembly, distribution, or publishing of derivative works, for commercial
 * purposes or any other purpose, from a duly authorized officer of Momentum
 * Ideas Co.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: media/v1beta1/MediaTask.proto

package io.bloombox.schema.services.media.v1beta1;

public interface MediaTaskOrBuilder extends
    // @@protoc_insertion_point(interface_extends:bloombox.services.media.v1beta1.MediaTask)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * ID for this particular media task.
   * </pre>
   *
   * <code>string uuid = 1;</code>
   */
  java.lang.String getUuid();
  /**
   * <pre>
   * ID for this particular media task.
   * </pre>
   *
   * <code>string uuid = 1;</code>
   */
  com.google.protobuf.ByteString
      getUuidBytes();

  /**
   * <pre>
   * Key for the media item in question.
   * </pre>
   *
   * <code>.opencannabis.media.MediaKey key = 2;</code>
   */
  boolean hasKey();
  /**
   * <pre>
   * Key for the media item in question.
   * </pre>
   *
   * <code>.opencannabis.media.MediaKey key = 2;</code>
   */
  io.opencannabis.schema.media.MediaItemKey.MediaKey getKey();
  /**
   * <pre>
   * Key for the media item in question.
   * </pre>
   *
   * <code>.opencannabis.media.MediaKey key = 2;</code>
   */
  io.opencannabis.schema.media.MediaItemKey.MediaKeyOrBuilder getKeyOrBuilder();

  /**
   * <pre>
   * Metadata for this image item.
   * </pre>
   *
   * <code>.opencannabis.media.MediaItem media = 3;</code>
   */
  boolean hasMedia();
  /**
   * <pre>
   * Metadata for this image item.
   * </pre>
   *
   * <code>.opencannabis.media.MediaItem media = 3;</code>
   */
  io.opencannabis.schema.media.AttachedMedia.MediaItem getMedia();
  /**
   * <pre>
   * Metadata for this image item.
   * </pre>
   *
   * <code>.opencannabis.media.MediaItem media = 3;</code>
   */
  io.opencannabis.schema.media.AttachedMedia.MediaItemOrBuilder getMediaOrBuilder();

  /**
   * <pre>
   * Minify/optimize an image.
   * </pre>
   *
   * <code>.bloombox.services.media.v1beta1.MediaTask.ImageOptimization image_min = 10;</code>
   */
  boolean hasImageMin();
  /**
   * <pre>
   * Minify/optimize an image.
   * </pre>
   *
   * <code>.bloombox.services.media.v1beta1.MediaTask.ImageOptimization image_min = 10;</code>
   */
  io.bloombox.schema.services.media.v1beta1.MediaTask.ImageOptimization getImageMin();
  /**
   * <pre>
   * Minify/optimize an image.
   * </pre>
   *
   * <code>.bloombox.services.media.v1beta1.MediaTask.ImageOptimization image_min = 10;</code>
   */
  io.bloombox.schema.services.media.v1beta1.MediaTask.ImageOptimizationOrBuilder getImageMinOrBuilder();

  /**
   * <pre>
   * Publish an image to specialized serving infrastructure.
   * </pre>
   *
   * <code>bool image_publish = 11;</code>
   */
  boolean getImagePublish();

  public io.bloombox.schema.services.media.v1beta1.MediaTask.TaskCase getTaskCase();
}
