/*
 * Copyright 2019, Momentum Ideas, Co. All rights reserved.
 *
 * Source and object computer code contained herein is the private intellectual
 * property of Momentum Ideas Co., a Delaware Corporation. Use of this
 * code in source form requires permission in writing before use or the
 * assembly, distribution, or publishing of derivative works, for commercial
 * purposes or any other purpose, from a duly authorized officer of Momentum
 * Ideas Co.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: media/v1beta1/MediaService_Beta1.proto

package io.bloombox.schema.services.media.v1beta1;

public interface MediaContentOrBuilder extends
    // @@protoc_insertion_point(interface_extends:bloombox.services.media.v1beta1.MediaContent)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Type specification for the media being uploaded.
   * </pre>
   *
   * <code>.opencannabis.media.MediaType type = 1;</code>
   */
  boolean hasType();
  /**
   * <pre>
   * Type specification for the media being uploaded.
   * </pre>
   *
   * <code>.opencannabis.media.MediaType type = 1;</code>
   */
  io.opencannabis.schema.media.MediaItemType.MediaType getType();
  /**
   * <pre>
   * Type specification for the media being uploaded.
   * </pre>
   *
   * <code>.opencannabis.media.MediaType type = 1;</code>
   */
  io.opencannabis.schema.media.MediaItemType.MediaTypeOrBuilder getTypeOrBuilder();

  /**
   * <pre>
   * Information about the file being uploaded, including the filename and content mime type.
   * </pre>
   *
   * <code>.bloombox.services.media.v1beta1.MediaFile file = 2;</code>
   */
  boolean hasFile();
  /**
   * <pre>
   * Information about the file being uploaded, including the filename and content mime type.
   * </pre>
   *
   * <code>.bloombox.services.media.v1beta1.MediaFile file = 2;</code>
   */
  io.bloombox.schema.services.media.v1beta1.MediaFile getFile();
  /**
   * <pre>
   * Information about the file being uploaded, including the filename and content mime type.
   * </pre>
   *
   * <code>.bloombox.services.media.v1beta1.MediaFile file = 2;</code>
   */
  io.bloombox.schema.services.media.v1beta1.MediaFileOrBuilder getFileOrBuilder();

  /**
   * <pre>
   * Flag indicating the specified/attached content is a raw data blob.
   * </pre>
   *
   * <code>bool blob = 3;</code>
   */
  boolean getBlob();

  /**
   * <pre>
   * Raw data for the media content being uploaded, if applicable.
   * </pre>
   *
   * <code>.opencannabis.content.Content content = 4;</code>
   */
  boolean hasContent();
  /**
   * <pre>
   * Raw data for the media content being uploaded, if applicable.
   * </pre>
   *
   * <code>.opencannabis.content.Content content = 4;</code>
   */
  io.opencannabis.schema.content.GenericContent.Content getContent();
  /**
   * <pre>
   * Raw data for the media content being uploaded, if applicable.
   * </pre>
   *
   * <code>.opencannabis.content.Content content = 4;</code>
   */
  io.opencannabis.schema.content.GenericContent.ContentOrBuilder getContentOrBuilder();

  /**
   * <pre>
   * Name to give the media. Optional, and should be a human-readable label. Not usually based on a filename.
   * </pre>
   *
   * <code>string name = 5;</code>
   */
  java.lang.String getName();
  /**
   * <pre>
   * Name to give the media. Optional, and should be a human-readable label. Not usually based on a filename.
   * </pre>
   *
   * <code>string name = 5;</code>
   */
  com.google.protobuf.ByteString
      getNameBytes();

  public io.bloombox.schema.services.media.v1beta1.MediaContent.SpecCase getSpecCase();
}
