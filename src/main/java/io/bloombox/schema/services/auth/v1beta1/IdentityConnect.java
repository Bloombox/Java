/*
 * Copyright 2018, Momentum Ideas, Co. All rights reserved.
 *
 * Source and object computer code contained herein is the private intellectual
 * property of Momentum Ideas Co., a Delaware Corporation. Use of this
 * code in source form requires permission in writing before use or the
 * assembly, distribution, or publishing of derivative works, for commercial
 * purposes or any other purpose, from a duly authorized officer of Momentum
 * Ideas Co.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth/v1beta1/AuthService_Beta1.proto

package io.bloombox.schema.services.auth.v1beta1;

/**
 * <pre>
 * Specifies an RPC operation to connect a validated and signed user identity with their account. If the user has done
 * this before, there will be an existing consumer-side account - if not, an account is created under the hood, and
 * auto-linked with their identity.
 * </pre>
 *
 * Protobuf type {@code bloombox.services.auth.v1beta1.IdentityConnect}
 */
public  final class IdentityConnect extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:bloombox.services.auth.v1beta1.IdentityConnect)
    IdentityConnectOrBuilder {
private static final long serialVersionUID = 0L;
  // Use IdentityConnect.newBuilder() to construct.
  private IdentityConnect(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private IdentityConnect() {
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private IdentityConnect(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownFieldProto3(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.bloombox.schema.services.auth.v1beta1.AuthServiceBeta1.internal_static_bloombox_services_auth_v1beta1_IdentityConnect_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.bloombox.schema.services.auth.v1beta1.AuthServiceBeta1.internal_static_bloombox_services_auth_v1beta1_IdentityConnect_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.bloombox.schema.services.auth.v1beta1.IdentityConnect.class, io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Builder.class);
  }

  public interface RequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:bloombox.services.auth.v1beta1.IdentityConnect.Request)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Identity token. This value is generated between the user's UID, an authentication nonce acquired from this
     * service, and a timestamp. That pre-image value is then hashed with SHA512 and signed with a private key in the
     * user's device, stored in a secure hardware enclave. The user must unlock the enclave with biometrics in order to
     * perform this signature, so, it represents a cryptographic assertion that binds the user's ID with the private key
     * on their device, and their biometric profile.
     * </pre>
     *
     * <code>string token = 1;</code>
     */
    java.lang.String getToken();
    /**
     * <pre>
     * Identity token. This value is generated between the user's UID, an authentication nonce acquired from this
     * service, and a timestamp. That pre-image value is then hashed with SHA512 and signed with a private key in the
     * user's device, stored in a secure hardware enclave. The user must unlock the enclave with biometrics in order to
     * perform this signature, so, it represents a cryptographic assertion that binds the user's ID with the private key
     * on their device, and their biometric profile.
     * </pre>
     *
     * <code>string token = 1;</code>
     */
    com.google.protobuf.ByteString
        getTokenBytes();

    /**
     * <pre>
     * APNS push token. This value is provided to the device via the Apple Push Notification System (APNS), when it
     * registers for remote notifications, and is used to issue push notifications under the subject application's
     * credentials. This value is only provided when the originating device is running iOS, and the user has authorized
     * push notification access to the subject application.
     * </pre>
     *
     * <code>string apns = 2;</code>
     */
    java.lang.String getApns();
    /**
     * <pre>
     * APNS push token. This value is provided to the device via the Apple Push Notification System (APNS), when it
     * registers for remote notifications, and is used to issue push notifications under the subject application's
     * credentials. This value is only provided when the originating device is running iOS, and the user has authorized
     * push notification access to the subject application.
     * </pre>
     *
     * <code>string apns = 2;</code>
     */
    com.google.protobuf.ByteString
        getApnsBytes();

    /**
     * <pre>
     * FCM push token. This value is provided to the device by Google's systems when it performs registration with
     * Firebase Cloud Messaging, and is used to address the user's specific device for push notifications. On iOS, this
     * only applies when the application is open - FCM then usually proxies to APNS. On Android and web-based platforms,
     * this is the primary push key.
     * </pre>
     *
     * <code>string fcm = 3;</code>
     */
    java.lang.String getFcm();
    /**
     * <pre>
     * FCM push token. This value is provided to the device by Google's systems when it performs registration with
     * Firebase Cloud Messaging, and is used to address the user's specific device for push notifications. On iOS, this
     * only applies when the application is open - FCM then usually proxies to APNS. On Android and web-based platforms,
     * this is the primary push key.
     * </pre>
     *
     * <code>string fcm = 3;</code>
     */
    com.google.protobuf.ByteString
        getFcmBytes();

    /**
     * <pre>
     * Raw content of the user's public key, hex-encoded. The public key must be stored in hardware memory on the user's
     * device, where it is used to sign the token payload, along with a matching private key, which is used to sign the
     * provided token payload when asserting the user's identity. The key provided here is used to verify the resulting
     * digital signature, embedded in the token in the "sig" attribute.
     * </pre>
     *
     * <code>string key = 4;</code>
     */
    java.lang.String getKey();
    /**
     * <pre>
     * Raw content of the user's public key, hex-encoded. The public key must be stored in hardware memory on the user's
     * device, where it is used to sign the token payload, along with a matching private key, which is used to sign the
     * provided token payload when asserting the user's identity. The key provided here is used to verify the resulting
     * digital signature, embedded in the token in the "sig" attribute.
     * </pre>
     *
     * <code>string key = 4;</code>
     */
    com.google.protobuf.ByteString
        getKeyBytes();

    /**
     * <pre>
     * Client application that is making this request. Because this is included in the hashed signature pre-image,
     * embedded in the token and signed by the user's key, it must be provided here for later verification. The public
     * key specified in this request may be persisted for this client application, such that any future requests are
     * expected to be signed with the same key.
     * </pre>
     *
     * <code>string client = 5;</code>
     */
    java.lang.String getClient();
    /**
     * <pre>
     * Client application that is making this request. Because this is included in the hashed signature pre-image,
     * embedded in the token and signed by the user's key, it must be provided here for later verification. The public
     * key specified in this request may be persisted for this client application, such that any future requests are
     * expected to be signed with the same key.
     * </pre>
     *
     * <code>string client = 5;</code>
     */
    com.google.protobuf.ByteString
        getClientBytes();

    /**
     * <pre>
     * Specifies the device fingerprint, which is usually a standard UUID, uppercased. This value is generated on a per-
     * device-per-app basis, and so, it may change as the app is updated on the subject user's device. Early in the app
     * boot sequence, it should generate the fingerprint value and persist it to storage.
     * </pre>
     *
     * <code>string device = 6;</code>
     */
    java.lang.String getDevice();
    /**
     * <pre>
     * Specifies the device fingerprint, which is usually a standard UUID, uppercased. This value is generated on a per-
     * device-per-app basis, and so, it may change as the app is updated on the subject user's device. Early in the app
     * boot sequence, it should generate the fingerprint value and persist it to storage.
     * </pre>
     *
     * <code>string device = 6;</code>
     */
    com.google.protobuf.ByteString
        getDeviceBytes();

    /**
     * <pre>
     * Specifies the nonce value provided to the application by server-side systems, in order to authorize the client
     * device's participation in this authorization routine. Client applications must specify a valid API key in order
     * to request this value, and the API key is tied to the client ID, so both are validated by the presence of this
     * nonce, if it is determined not to have already been used, and matches the token's signature.
     * </pre>
     *
     * <code>string nonce = 7;</code>
     */
    java.lang.String getNonce();
    /**
     * <pre>
     * Specifies the nonce value provided to the application by server-side systems, in order to authorize the client
     * device's participation in this authorization routine. Client applications must specify a valid API key in order
     * to request this value, and the API key is tied to the client ID, so both are validated by the presence of this
     * nonce, if it is determined not to have already been used, and matches the token's signature.
     * </pre>
     *
     * <code>string nonce = 7;</code>
     */
    com.google.protobuf.ByteString
        getNonceBytes();

    /**
     * <pre>
     * Advertising identifier for the subject user. In some circumstances, particularly iOS, the device fingerprint is
     * not a stable identifier for the user. The Ad ID allows the user account in question to be tied to advertising
     * and marketing tools. This is done with the user's consent once they setup their account and bind it to their
     * device, along with their secure-enclave-protected public key.
     * </pre>
     *
     * <code>string adid = 8;</code>
     */
    java.lang.String getAdid();
    /**
     * <pre>
     * Advertising identifier for the subject user. In some circumstances, particularly iOS, the device fingerprint is
     * not a stable identifier for the user. The Ad ID allows the user account in question to be tied to advertising
     * and marketing tools. This is done with the user's consent once they setup their account and bind it to their
     * device, along with their secure-enclave-protected public key.
     * </pre>
     *
     * <code>string adid = 8;</code>
     */
    com.google.protobuf.ByteString
        getAdidBytes();
  }
  /**
   * <pre>
   * Request to link a validated and signed user identity with an account.
   * </pre>
   *
   * Protobuf type {@code bloombox.services.auth.v1beta1.IdentityConnect.Request}
   */
  public  static final class Request extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:bloombox.services.auth.v1beta1.IdentityConnect.Request)
      RequestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Request.newBuilder() to construct.
    private Request(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Request() {
      token_ = "";
      apns_ = "";
      fcm_ = "";
      key_ = "";
      client_ = "";
      device_ = "";
      nonce_ = "";
      adid_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Request(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              token_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              apns_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              fcm_ = s;
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              key_ = s;
              break;
            }
            case 42: {
              java.lang.String s = input.readStringRequireUtf8();

              client_ = s;
              break;
            }
            case 50: {
              java.lang.String s = input.readStringRequireUtf8();

              device_ = s;
              break;
            }
            case 58: {
              java.lang.String s = input.readStringRequireUtf8();

              nonce_ = s;
              break;
            }
            case 66: {
              java.lang.String s = input.readStringRequireUtf8();

              adid_ = s;
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.bloombox.schema.services.auth.v1beta1.AuthServiceBeta1.internal_static_bloombox_services_auth_v1beta1_IdentityConnect_Request_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.bloombox.schema.services.auth.v1beta1.AuthServiceBeta1.internal_static_bloombox_services_auth_v1beta1_IdentityConnect_Request_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Request.class, io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Request.Builder.class);
    }

    public static final int TOKEN_FIELD_NUMBER = 1;
    private volatile java.lang.Object token_;
    /**
     * <pre>
     * Identity token. This value is generated between the user's UID, an authentication nonce acquired from this
     * service, and a timestamp. That pre-image value is then hashed with SHA512 and signed with a private key in the
     * user's device, stored in a secure hardware enclave. The user must unlock the enclave with biometrics in order to
     * perform this signature, so, it represents a cryptographic assertion that binds the user's ID with the private key
     * on their device, and their biometric profile.
     * </pre>
     *
     * <code>string token = 1;</code>
     */
    public java.lang.String getToken() {
      java.lang.Object ref = token_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        token_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Identity token. This value is generated between the user's UID, an authentication nonce acquired from this
     * service, and a timestamp. That pre-image value is then hashed with SHA512 and signed with a private key in the
     * user's device, stored in a secure hardware enclave. The user must unlock the enclave with biometrics in order to
     * perform this signature, so, it represents a cryptographic assertion that binds the user's ID with the private key
     * on their device, and their biometric profile.
     * </pre>
     *
     * <code>string token = 1;</code>
     */
    public com.google.protobuf.ByteString
        getTokenBytes() {
      java.lang.Object ref = token_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        token_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int APNS_FIELD_NUMBER = 2;
    private volatile java.lang.Object apns_;
    /**
     * <pre>
     * APNS push token. This value is provided to the device via the Apple Push Notification System (APNS), when it
     * registers for remote notifications, and is used to issue push notifications under the subject application's
     * credentials. This value is only provided when the originating device is running iOS, and the user has authorized
     * push notification access to the subject application.
     * </pre>
     *
     * <code>string apns = 2;</code>
     */
    public java.lang.String getApns() {
      java.lang.Object ref = apns_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        apns_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * APNS push token. This value is provided to the device via the Apple Push Notification System (APNS), when it
     * registers for remote notifications, and is used to issue push notifications under the subject application's
     * credentials. This value is only provided when the originating device is running iOS, and the user has authorized
     * push notification access to the subject application.
     * </pre>
     *
     * <code>string apns = 2;</code>
     */
    public com.google.protobuf.ByteString
        getApnsBytes() {
      java.lang.Object ref = apns_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        apns_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int FCM_FIELD_NUMBER = 3;
    private volatile java.lang.Object fcm_;
    /**
     * <pre>
     * FCM push token. This value is provided to the device by Google's systems when it performs registration with
     * Firebase Cloud Messaging, and is used to address the user's specific device for push notifications. On iOS, this
     * only applies when the application is open - FCM then usually proxies to APNS. On Android and web-based platforms,
     * this is the primary push key.
     * </pre>
     *
     * <code>string fcm = 3;</code>
     */
    public java.lang.String getFcm() {
      java.lang.Object ref = fcm_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        fcm_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * FCM push token. This value is provided to the device by Google's systems when it performs registration with
     * Firebase Cloud Messaging, and is used to address the user's specific device for push notifications. On iOS, this
     * only applies when the application is open - FCM then usually proxies to APNS. On Android and web-based platforms,
     * this is the primary push key.
     * </pre>
     *
     * <code>string fcm = 3;</code>
     */
    public com.google.protobuf.ByteString
        getFcmBytes() {
      java.lang.Object ref = fcm_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        fcm_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int KEY_FIELD_NUMBER = 4;
    private volatile java.lang.Object key_;
    /**
     * <pre>
     * Raw content of the user's public key, hex-encoded. The public key must be stored in hardware memory on the user's
     * device, where it is used to sign the token payload, along with a matching private key, which is used to sign the
     * provided token payload when asserting the user's identity. The key provided here is used to verify the resulting
     * digital signature, embedded in the token in the "sig" attribute.
     * </pre>
     *
     * <code>string key = 4;</code>
     */
    public java.lang.String getKey() {
      java.lang.Object ref = key_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        key_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Raw content of the user's public key, hex-encoded. The public key must be stored in hardware memory on the user's
     * device, where it is used to sign the token payload, along with a matching private key, which is used to sign the
     * provided token payload when asserting the user's identity. The key provided here is used to verify the resulting
     * digital signature, embedded in the token in the "sig" attribute.
     * </pre>
     *
     * <code>string key = 4;</code>
     */
    public com.google.protobuf.ByteString
        getKeyBytes() {
      java.lang.Object ref = key_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        key_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CLIENT_FIELD_NUMBER = 5;
    private volatile java.lang.Object client_;
    /**
     * <pre>
     * Client application that is making this request. Because this is included in the hashed signature pre-image,
     * embedded in the token and signed by the user's key, it must be provided here for later verification. The public
     * key specified in this request may be persisted for this client application, such that any future requests are
     * expected to be signed with the same key.
     * </pre>
     *
     * <code>string client = 5;</code>
     */
    public java.lang.String getClient() {
      java.lang.Object ref = client_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        client_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Client application that is making this request. Because this is included in the hashed signature pre-image,
     * embedded in the token and signed by the user's key, it must be provided here for later verification. The public
     * key specified in this request may be persisted for this client application, such that any future requests are
     * expected to be signed with the same key.
     * </pre>
     *
     * <code>string client = 5;</code>
     */
    public com.google.protobuf.ByteString
        getClientBytes() {
      java.lang.Object ref = client_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        client_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DEVICE_FIELD_NUMBER = 6;
    private volatile java.lang.Object device_;
    /**
     * <pre>
     * Specifies the device fingerprint, which is usually a standard UUID, uppercased. This value is generated on a per-
     * device-per-app basis, and so, it may change as the app is updated on the subject user's device. Early in the app
     * boot sequence, it should generate the fingerprint value and persist it to storage.
     * </pre>
     *
     * <code>string device = 6;</code>
     */
    public java.lang.String getDevice() {
      java.lang.Object ref = device_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        device_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Specifies the device fingerprint, which is usually a standard UUID, uppercased. This value is generated on a per-
     * device-per-app basis, and so, it may change as the app is updated on the subject user's device. Early in the app
     * boot sequence, it should generate the fingerprint value and persist it to storage.
     * </pre>
     *
     * <code>string device = 6;</code>
     */
    public com.google.protobuf.ByteString
        getDeviceBytes() {
      java.lang.Object ref = device_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        device_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NONCE_FIELD_NUMBER = 7;
    private volatile java.lang.Object nonce_;
    /**
     * <pre>
     * Specifies the nonce value provided to the application by server-side systems, in order to authorize the client
     * device's participation in this authorization routine. Client applications must specify a valid API key in order
     * to request this value, and the API key is tied to the client ID, so both are validated by the presence of this
     * nonce, if it is determined not to have already been used, and matches the token's signature.
     * </pre>
     *
     * <code>string nonce = 7;</code>
     */
    public java.lang.String getNonce() {
      java.lang.Object ref = nonce_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        nonce_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Specifies the nonce value provided to the application by server-side systems, in order to authorize the client
     * device's participation in this authorization routine. Client applications must specify a valid API key in order
     * to request this value, and the API key is tied to the client ID, so both are validated by the presence of this
     * nonce, if it is determined not to have already been used, and matches the token's signature.
     * </pre>
     *
     * <code>string nonce = 7;</code>
     */
    public com.google.protobuf.ByteString
        getNonceBytes() {
      java.lang.Object ref = nonce_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        nonce_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ADID_FIELD_NUMBER = 8;
    private volatile java.lang.Object adid_;
    /**
     * <pre>
     * Advertising identifier for the subject user. In some circumstances, particularly iOS, the device fingerprint is
     * not a stable identifier for the user. The Ad ID allows the user account in question to be tied to advertising
     * and marketing tools. This is done with the user's consent once they setup their account and bind it to their
     * device, along with their secure-enclave-protected public key.
     * </pre>
     *
     * <code>string adid = 8;</code>
     */
    public java.lang.String getAdid() {
      java.lang.Object ref = adid_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        adid_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Advertising identifier for the subject user. In some circumstances, particularly iOS, the device fingerprint is
     * not a stable identifier for the user. The Ad ID allows the user account in question to be tied to advertising
     * and marketing tools. This is done with the user's consent once they setup their account and bind it to their
     * device, along with their secure-enclave-protected public key.
     * </pre>
     *
     * <code>string adid = 8;</code>
     */
    public com.google.protobuf.ByteString
        getAdidBytes() {
      java.lang.Object ref = adid_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        adid_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getTokenBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, token_);
      }
      if (!getApnsBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, apns_);
      }
      if (!getFcmBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, fcm_);
      }
      if (!getKeyBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, key_);
      }
      if (!getClientBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, client_);
      }
      if (!getDeviceBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 6, device_);
      }
      if (!getNonceBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 7, nonce_);
      }
      if (!getAdidBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 8, adid_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getTokenBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, token_);
      }
      if (!getApnsBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, apns_);
      }
      if (!getFcmBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, fcm_);
      }
      if (!getKeyBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, key_);
      }
      if (!getClientBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, client_);
      }
      if (!getDeviceBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, device_);
      }
      if (!getNonceBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, nonce_);
      }
      if (!getAdidBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(8, adid_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Request)) {
        return super.equals(obj);
      }
      io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Request other = (io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Request) obj;

      boolean result = true;
      result = result && getToken()
          .equals(other.getToken());
      result = result && getApns()
          .equals(other.getApns());
      result = result && getFcm()
          .equals(other.getFcm());
      result = result && getKey()
          .equals(other.getKey());
      result = result && getClient()
          .equals(other.getClient());
      result = result && getDevice()
          .equals(other.getDevice());
      result = result && getNonce()
          .equals(other.getNonce());
      result = result && getAdid()
          .equals(other.getAdid());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TOKEN_FIELD_NUMBER;
      hash = (53 * hash) + getToken().hashCode();
      hash = (37 * hash) + APNS_FIELD_NUMBER;
      hash = (53 * hash) + getApns().hashCode();
      hash = (37 * hash) + FCM_FIELD_NUMBER;
      hash = (53 * hash) + getFcm().hashCode();
      hash = (37 * hash) + KEY_FIELD_NUMBER;
      hash = (53 * hash) + getKey().hashCode();
      hash = (37 * hash) + CLIENT_FIELD_NUMBER;
      hash = (53 * hash) + getClient().hashCode();
      hash = (37 * hash) + DEVICE_FIELD_NUMBER;
      hash = (53 * hash) + getDevice().hashCode();
      hash = (37 * hash) + NONCE_FIELD_NUMBER;
      hash = (53 * hash) + getNonce().hashCode();
      hash = (37 * hash) + ADID_FIELD_NUMBER;
      hash = (53 * hash) + getAdid().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Request parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Request parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Request parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Request parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Request parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Request parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Request parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Request parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Request parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Request parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Request parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Request parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Request prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Request to link a validated and signed user identity with an account.
     * </pre>
     *
     * Protobuf type {@code bloombox.services.auth.v1beta1.IdentityConnect.Request}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:bloombox.services.auth.v1beta1.IdentityConnect.Request)
        io.bloombox.schema.services.auth.v1beta1.IdentityConnect.RequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.bloombox.schema.services.auth.v1beta1.AuthServiceBeta1.internal_static_bloombox_services_auth_v1beta1_IdentityConnect_Request_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.bloombox.schema.services.auth.v1beta1.AuthServiceBeta1.internal_static_bloombox_services_auth_v1beta1_IdentityConnect_Request_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Request.class, io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Request.Builder.class);
      }

      // Construct using io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Request.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        token_ = "";

        apns_ = "";

        fcm_ = "";

        key_ = "";

        client_ = "";

        device_ = "";

        nonce_ = "";

        adid_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.bloombox.schema.services.auth.v1beta1.AuthServiceBeta1.internal_static_bloombox_services_auth_v1beta1_IdentityConnect_Request_descriptor;
      }

      @java.lang.Override
      public io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Request getDefaultInstanceForType() {
        return io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Request.getDefaultInstance();
      }

      @java.lang.Override
      public io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Request build() {
        io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Request result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Request buildPartial() {
        io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Request result = new io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Request(this);
        result.token_ = token_;
        result.apns_ = apns_;
        result.fcm_ = fcm_;
        result.key_ = key_;
        result.client_ = client_;
        result.device_ = device_;
        result.nonce_ = nonce_;
        result.adid_ = adid_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Request) {
          return mergeFrom((io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Request)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Request other) {
        if (other == io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Request.getDefaultInstance()) return this;
        if (!other.getToken().isEmpty()) {
          token_ = other.token_;
          onChanged();
        }
        if (!other.getApns().isEmpty()) {
          apns_ = other.apns_;
          onChanged();
        }
        if (!other.getFcm().isEmpty()) {
          fcm_ = other.fcm_;
          onChanged();
        }
        if (!other.getKey().isEmpty()) {
          key_ = other.key_;
          onChanged();
        }
        if (!other.getClient().isEmpty()) {
          client_ = other.client_;
          onChanged();
        }
        if (!other.getDevice().isEmpty()) {
          device_ = other.device_;
          onChanged();
        }
        if (!other.getNonce().isEmpty()) {
          nonce_ = other.nonce_;
          onChanged();
        }
        if (!other.getAdid().isEmpty()) {
          adid_ = other.adid_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Request parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Request) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object token_ = "";
      /**
       * <pre>
       * Identity token. This value is generated between the user's UID, an authentication nonce acquired from this
       * service, and a timestamp. That pre-image value is then hashed with SHA512 and signed with a private key in the
       * user's device, stored in a secure hardware enclave. The user must unlock the enclave with biometrics in order to
       * perform this signature, so, it represents a cryptographic assertion that binds the user's ID with the private key
       * on their device, and their biometric profile.
       * </pre>
       *
       * <code>string token = 1;</code>
       */
      public java.lang.String getToken() {
        java.lang.Object ref = token_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          token_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Identity token. This value is generated between the user's UID, an authentication nonce acquired from this
       * service, and a timestamp. That pre-image value is then hashed with SHA512 and signed with a private key in the
       * user's device, stored in a secure hardware enclave. The user must unlock the enclave with biometrics in order to
       * perform this signature, so, it represents a cryptographic assertion that binds the user's ID with the private key
       * on their device, and their biometric profile.
       * </pre>
       *
       * <code>string token = 1;</code>
       */
      public com.google.protobuf.ByteString
          getTokenBytes() {
        java.lang.Object ref = token_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          token_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Identity token. This value is generated between the user's UID, an authentication nonce acquired from this
       * service, and a timestamp. That pre-image value is then hashed with SHA512 and signed with a private key in the
       * user's device, stored in a secure hardware enclave. The user must unlock the enclave with biometrics in order to
       * perform this signature, so, it represents a cryptographic assertion that binds the user's ID with the private key
       * on their device, and their biometric profile.
       * </pre>
       *
       * <code>string token = 1;</code>
       */
      public Builder setToken(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        token_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Identity token. This value is generated between the user's UID, an authentication nonce acquired from this
       * service, and a timestamp. That pre-image value is then hashed with SHA512 and signed with a private key in the
       * user's device, stored in a secure hardware enclave. The user must unlock the enclave with biometrics in order to
       * perform this signature, so, it represents a cryptographic assertion that binds the user's ID with the private key
       * on their device, and their biometric profile.
       * </pre>
       *
       * <code>string token = 1;</code>
       */
      public Builder clearToken() {
        
        token_ = getDefaultInstance().getToken();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Identity token. This value is generated between the user's UID, an authentication nonce acquired from this
       * service, and a timestamp. That pre-image value is then hashed with SHA512 and signed with a private key in the
       * user's device, stored in a secure hardware enclave. The user must unlock the enclave with biometrics in order to
       * perform this signature, so, it represents a cryptographic assertion that binds the user's ID with the private key
       * on their device, and their biometric profile.
       * </pre>
       *
       * <code>string token = 1;</code>
       */
      public Builder setTokenBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        token_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object apns_ = "";
      /**
       * <pre>
       * APNS push token. This value is provided to the device via the Apple Push Notification System (APNS), when it
       * registers for remote notifications, and is used to issue push notifications under the subject application's
       * credentials. This value is only provided when the originating device is running iOS, and the user has authorized
       * push notification access to the subject application.
       * </pre>
       *
       * <code>string apns = 2;</code>
       */
      public java.lang.String getApns() {
        java.lang.Object ref = apns_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          apns_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * APNS push token. This value is provided to the device via the Apple Push Notification System (APNS), when it
       * registers for remote notifications, and is used to issue push notifications under the subject application's
       * credentials. This value is only provided when the originating device is running iOS, and the user has authorized
       * push notification access to the subject application.
       * </pre>
       *
       * <code>string apns = 2;</code>
       */
      public com.google.protobuf.ByteString
          getApnsBytes() {
        java.lang.Object ref = apns_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          apns_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * APNS push token. This value is provided to the device via the Apple Push Notification System (APNS), when it
       * registers for remote notifications, and is used to issue push notifications under the subject application's
       * credentials. This value is only provided when the originating device is running iOS, and the user has authorized
       * push notification access to the subject application.
       * </pre>
       *
       * <code>string apns = 2;</code>
       */
      public Builder setApns(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        apns_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * APNS push token. This value is provided to the device via the Apple Push Notification System (APNS), when it
       * registers for remote notifications, and is used to issue push notifications under the subject application's
       * credentials. This value is only provided when the originating device is running iOS, and the user has authorized
       * push notification access to the subject application.
       * </pre>
       *
       * <code>string apns = 2;</code>
       */
      public Builder clearApns() {
        
        apns_ = getDefaultInstance().getApns();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * APNS push token. This value is provided to the device via the Apple Push Notification System (APNS), when it
       * registers for remote notifications, and is used to issue push notifications under the subject application's
       * credentials. This value is only provided when the originating device is running iOS, and the user has authorized
       * push notification access to the subject application.
       * </pre>
       *
       * <code>string apns = 2;</code>
       */
      public Builder setApnsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        apns_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object fcm_ = "";
      /**
       * <pre>
       * FCM push token. This value is provided to the device by Google's systems when it performs registration with
       * Firebase Cloud Messaging, and is used to address the user's specific device for push notifications. On iOS, this
       * only applies when the application is open - FCM then usually proxies to APNS. On Android and web-based platforms,
       * this is the primary push key.
       * </pre>
       *
       * <code>string fcm = 3;</code>
       */
      public java.lang.String getFcm() {
        java.lang.Object ref = fcm_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          fcm_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * FCM push token. This value is provided to the device by Google's systems when it performs registration with
       * Firebase Cloud Messaging, and is used to address the user's specific device for push notifications. On iOS, this
       * only applies when the application is open - FCM then usually proxies to APNS. On Android and web-based platforms,
       * this is the primary push key.
       * </pre>
       *
       * <code>string fcm = 3;</code>
       */
      public com.google.protobuf.ByteString
          getFcmBytes() {
        java.lang.Object ref = fcm_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          fcm_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * FCM push token. This value is provided to the device by Google's systems when it performs registration with
       * Firebase Cloud Messaging, and is used to address the user's specific device for push notifications. On iOS, this
       * only applies when the application is open - FCM then usually proxies to APNS. On Android and web-based platforms,
       * this is the primary push key.
       * </pre>
       *
       * <code>string fcm = 3;</code>
       */
      public Builder setFcm(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        fcm_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * FCM push token. This value is provided to the device by Google's systems when it performs registration with
       * Firebase Cloud Messaging, and is used to address the user's specific device for push notifications. On iOS, this
       * only applies when the application is open - FCM then usually proxies to APNS. On Android and web-based platforms,
       * this is the primary push key.
       * </pre>
       *
       * <code>string fcm = 3;</code>
       */
      public Builder clearFcm() {
        
        fcm_ = getDefaultInstance().getFcm();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * FCM push token. This value is provided to the device by Google's systems when it performs registration with
       * Firebase Cloud Messaging, and is used to address the user's specific device for push notifications. On iOS, this
       * only applies when the application is open - FCM then usually proxies to APNS. On Android and web-based platforms,
       * this is the primary push key.
       * </pre>
       *
       * <code>string fcm = 3;</code>
       */
      public Builder setFcmBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        fcm_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object key_ = "";
      /**
       * <pre>
       * Raw content of the user's public key, hex-encoded. The public key must be stored in hardware memory on the user's
       * device, where it is used to sign the token payload, along with a matching private key, which is used to sign the
       * provided token payload when asserting the user's identity. The key provided here is used to verify the resulting
       * digital signature, embedded in the token in the "sig" attribute.
       * </pre>
       *
       * <code>string key = 4;</code>
       */
      public java.lang.String getKey() {
        java.lang.Object ref = key_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          key_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Raw content of the user's public key, hex-encoded. The public key must be stored in hardware memory on the user's
       * device, where it is used to sign the token payload, along with a matching private key, which is used to sign the
       * provided token payload when asserting the user's identity. The key provided here is used to verify the resulting
       * digital signature, embedded in the token in the "sig" attribute.
       * </pre>
       *
       * <code>string key = 4;</code>
       */
      public com.google.protobuf.ByteString
          getKeyBytes() {
        java.lang.Object ref = key_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          key_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Raw content of the user's public key, hex-encoded. The public key must be stored in hardware memory on the user's
       * device, where it is used to sign the token payload, along with a matching private key, which is used to sign the
       * provided token payload when asserting the user's identity. The key provided here is used to verify the resulting
       * digital signature, embedded in the token in the "sig" attribute.
       * </pre>
       *
       * <code>string key = 4;</code>
       */
      public Builder setKey(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        key_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Raw content of the user's public key, hex-encoded. The public key must be stored in hardware memory on the user's
       * device, where it is used to sign the token payload, along with a matching private key, which is used to sign the
       * provided token payload when asserting the user's identity. The key provided here is used to verify the resulting
       * digital signature, embedded in the token in the "sig" attribute.
       * </pre>
       *
       * <code>string key = 4;</code>
       */
      public Builder clearKey() {
        
        key_ = getDefaultInstance().getKey();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Raw content of the user's public key, hex-encoded. The public key must be stored in hardware memory on the user's
       * device, where it is used to sign the token payload, along with a matching private key, which is used to sign the
       * provided token payload when asserting the user's identity. The key provided here is used to verify the resulting
       * digital signature, embedded in the token in the "sig" attribute.
       * </pre>
       *
       * <code>string key = 4;</code>
       */
      public Builder setKeyBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        key_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object client_ = "";
      /**
       * <pre>
       * Client application that is making this request. Because this is included in the hashed signature pre-image,
       * embedded in the token and signed by the user's key, it must be provided here for later verification. The public
       * key specified in this request may be persisted for this client application, such that any future requests are
       * expected to be signed with the same key.
       * </pre>
       *
       * <code>string client = 5;</code>
       */
      public java.lang.String getClient() {
        java.lang.Object ref = client_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          client_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Client application that is making this request. Because this is included in the hashed signature pre-image,
       * embedded in the token and signed by the user's key, it must be provided here for later verification. The public
       * key specified in this request may be persisted for this client application, such that any future requests are
       * expected to be signed with the same key.
       * </pre>
       *
       * <code>string client = 5;</code>
       */
      public com.google.protobuf.ByteString
          getClientBytes() {
        java.lang.Object ref = client_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          client_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Client application that is making this request. Because this is included in the hashed signature pre-image,
       * embedded in the token and signed by the user's key, it must be provided here for later verification. The public
       * key specified in this request may be persisted for this client application, such that any future requests are
       * expected to be signed with the same key.
       * </pre>
       *
       * <code>string client = 5;</code>
       */
      public Builder setClient(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        client_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Client application that is making this request. Because this is included in the hashed signature pre-image,
       * embedded in the token and signed by the user's key, it must be provided here for later verification. The public
       * key specified in this request may be persisted for this client application, such that any future requests are
       * expected to be signed with the same key.
       * </pre>
       *
       * <code>string client = 5;</code>
       */
      public Builder clearClient() {
        
        client_ = getDefaultInstance().getClient();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Client application that is making this request. Because this is included in the hashed signature pre-image,
       * embedded in the token and signed by the user's key, it must be provided here for later verification. The public
       * key specified in this request may be persisted for this client application, such that any future requests are
       * expected to be signed with the same key.
       * </pre>
       *
       * <code>string client = 5;</code>
       */
      public Builder setClientBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        client_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object device_ = "";
      /**
       * <pre>
       * Specifies the device fingerprint, which is usually a standard UUID, uppercased. This value is generated on a per-
       * device-per-app basis, and so, it may change as the app is updated on the subject user's device. Early in the app
       * boot sequence, it should generate the fingerprint value and persist it to storage.
       * </pre>
       *
       * <code>string device = 6;</code>
       */
      public java.lang.String getDevice() {
        java.lang.Object ref = device_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          device_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Specifies the device fingerprint, which is usually a standard UUID, uppercased. This value is generated on a per-
       * device-per-app basis, and so, it may change as the app is updated on the subject user's device. Early in the app
       * boot sequence, it should generate the fingerprint value and persist it to storage.
       * </pre>
       *
       * <code>string device = 6;</code>
       */
      public com.google.protobuf.ByteString
          getDeviceBytes() {
        java.lang.Object ref = device_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          device_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Specifies the device fingerprint, which is usually a standard UUID, uppercased. This value is generated on a per-
       * device-per-app basis, and so, it may change as the app is updated on the subject user's device. Early in the app
       * boot sequence, it should generate the fingerprint value and persist it to storage.
       * </pre>
       *
       * <code>string device = 6;</code>
       */
      public Builder setDevice(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        device_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the device fingerprint, which is usually a standard UUID, uppercased. This value is generated on a per-
       * device-per-app basis, and so, it may change as the app is updated on the subject user's device. Early in the app
       * boot sequence, it should generate the fingerprint value and persist it to storage.
       * </pre>
       *
       * <code>string device = 6;</code>
       */
      public Builder clearDevice() {
        
        device_ = getDefaultInstance().getDevice();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the device fingerprint, which is usually a standard UUID, uppercased. This value is generated on a per-
       * device-per-app basis, and so, it may change as the app is updated on the subject user's device. Early in the app
       * boot sequence, it should generate the fingerprint value and persist it to storage.
       * </pre>
       *
       * <code>string device = 6;</code>
       */
      public Builder setDeviceBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        device_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object nonce_ = "";
      /**
       * <pre>
       * Specifies the nonce value provided to the application by server-side systems, in order to authorize the client
       * device's participation in this authorization routine. Client applications must specify a valid API key in order
       * to request this value, and the API key is tied to the client ID, so both are validated by the presence of this
       * nonce, if it is determined not to have already been used, and matches the token's signature.
       * </pre>
       *
       * <code>string nonce = 7;</code>
       */
      public java.lang.String getNonce() {
        java.lang.Object ref = nonce_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          nonce_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Specifies the nonce value provided to the application by server-side systems, in order to authorize the client
       * device's participation in this authorization routine. Client applications must specify a valid API key in order
       * to request this value, and the API key is tied to the client ID, so both are validated by the presence of this
       * nonce, if it is determined not to have already been used, and matches the token's signature.
       * </pre>
       *
       * <code>string nonce = 7;</code>
       */
      public com.google.protobuf.ByteString
          getNonceBytes() {
        java.lang.Object ref = nonce_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          nonce_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Specifies the nonce value provided to the application by server-side systems, in order to authorize the client
       * device's participation in this authorization routine. Client applications must specify a valid API key in order
       * to request this value, and the API key is tied to the client ID, so both are validated by the presence of this
       * nonce, if it is determined not to have already been used, and matches the token's signature.
       * </pre>
       *
       * <code>string nonce = 7;</code>
       */
      public Builder setNonce(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        nonce_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the nonce value provided to the application by server-side systems, in order to authorize the client
       * device's participation in this authorization routine. Client applications must specify a valid API key in order
       * to request this value, and the API key is tied to the client ID, so both are validated by the presence of this
       * nonce, if it is determined not to have already been used, and matches the token's signature.
       * </pre>
       *
       * <code>string nonce = 7;</code>
       */
      public Builder clearNonce() {
        
        nonce_ = getDefaultInstance().getNonce();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the nonce value provided to the application by server-side systems, in order to authorize the client
       * device's participation in this authorization routine. Client applications must specify a valid API key in order
       * to request this value, and the API key is tied to the client ID, so both are validated by the presence of this
       * nonce, if it is determined not to have already been used, and matches the token's signature.
       * </pre>
       *
       * <code>string nonce = 7;</code>
       */
      public Builder setNonceBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        nonce_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object adid_ = "";
      /**
       * <pre>
       * Advertising identifier for the subject user. In some circumstances, particularly iOS, the device fingerprint is
       * not a stable identifier for the user. The Ad ID allows the user account in question to be tied to advertising
       * and marketing tools. This is done with the user's consent once they setup their account and bind it to their
       * device, along with their secure-enclave-protected public key.
       * </pre>
       *
       * <code>string adid = 8;</code>
       */
      public java.lang.String getAdid() {
        java.lang.Object ref = adid_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          adid_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Advertising identifier for the subject user. In some circumstances, particularly iOS, the device fingerprint is
       * not a stable identifier for the user. The Ad ID allows the user account in question to be tied to advertising
       * and marketing tools. This is done with the user's consent once they setup their account and bind it to their
       * device, along with their secure-enclave-protected public key.
       * </pre>
       *
       * <code>string adid = 8;</code>
       */
      public com.google.protobuf.ByteString
          getAdidBytes() {
        java.lang.Object ref = adid_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          adid_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Advertising identifier for the subject user. In some circumstances, particularly iOS, the device fingerprint is
       * not a stable identifier for the user. The Ad ID allows the user account in question to be tied to advertising
       * and marketing tools. This is done with the user's consent once they setup their account and bind it to their
       * device, along with their secure-enclave-protected public key.
       * </pre>
       *
       * <code>string adid = 8;</code>
       */
      public Builder setAdid(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        adid_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Advertising identifier for the subject user. In some circumstances, particularly iOS, the device fingerprint is
       * not a stable identifier for the user. The Ad ID allows the user account in question to be tied to advertising
       * and marketing tools. This is done with the user's consent once they setup their account and bind it to their
       * device, along with their secure-enclave-protected public key.
       * </pre>
       *
       * <code>string adid = 8;</code>
       */
      public Builder clearAdid() {
        
        adid_ = getDefaultInstance().getAdid();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Advertising identifier for the subject user. In some circumstances, particularly iOS, the device fingerprint is
       * not a stable identifier for the user. The Ad ID allows the user account in question to be tied to advertising
       * and marketing tools. This is done with the user's consent once they setup their account and bind it to their
       * device, along with their secure-enclave-protected public key.
       * </pre>
       *
       * <code>string adid = 8;</code>
       */
      public Builder setAdidBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        adid_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:bloombox.services.auth.v1beta1.IdentityConnect.Request)
    }

    // @@protoc_insertion_point(class_scope:bloombox.services.auth.v1beta1.IdentityConnect.Request)
    private static final io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Request DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Request();
    }

    public static io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Request getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Request>
        PARSER = new com.google.protobuf.AbstractParser<Request>() {
      @java.lang.Override
      public Request parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Request(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Request> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Request> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Request getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:bloombox.services.auth.v1beta1.IdentityConnect.Response)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Resolved key for the subject user. A user key is distinguished from a UID, in that it addresses an actual account
     * and user profile payload, rather than just pointing to an identity that can be linked to a full account. User
     * keys are used for interacting with the API in an identity agnostic manner, post-authorization.
     * </pre>
     *
     * <code>.bloombox.identity.UserKey key = 1;</code>
     */
    boolean hasKey();
    /**
     * <pre>
     * Resolved key for the subject user. A user key is distinguished from a UID, in that it addresses an actual account
     * and user profile payload, rather than just pointing to an identity that can be linked to a full account. User
     * keys are used for interacting with the API in an identity agnostic manner, post-authorization.
     * </pre>
     *
     * <code>.bloombox.identity.UserKey key = 1;</code>
     */
    io.bloombox.schema.identity.AppUserKey.UserKey getKey();
    /**
     * <pre>
     * Resolved key for the subject user. A user key is distinguished from a UID, in that it addresses an actual account
     * and user profile payload, rather than just pointing to an identity that can be linked to a full account. User
     * keys are used for interacting with the API in an identity agnostic manner, post-authorization.
     * </pre>
     *
     * <code>.bloombox.identity.UserKey key = 1;</code>
     */
    io.bloombox.schema.identity.AppUserKey.UserKeyOrBuilder getKeyOrBuilder();

    /**
     * <pre>
     * Authorization token, issued in response to the ID token provided in the request. Issued and signed by the server
     * to indicate applicable top-level user permissions, and implies the user account was authenticated, authorized,
     * and enabled to use the state associated with this token.
     * </pre>
     *
     * <code>.bloombox.security.AuthToken token = 2;</code>
     */
    boolean hasToken();
    /**
     * <pre>
     * Authorization token, issued in response to the ID token provided in the request. Issued and signed by the server
     * to indicate applicable top-level user permissions, and implies the user account was authenticated, authorized,
     * and enabled to use the state associated with this token.
     * </pre>
     *
     * <code>.bloombox.security.AuthToken token = 2;</code>
     */
    io.bloombox.schema.security.AuthToken getToken();
    /**
     * <pre>
     * Authorization token, issued in response to the ID token provided in the request. Issued and signed by the server
     * to indicate applicable top-level user permissions, and implies the user account was authenticated, authorized,
     * and enabled to use the state associated with this token.
     * </pre>
     *
     * <code>.bloombox.security.AuthToken token = 2;</code>
     */
    io.bloombox.schema.security.AuthTokenOrBuilder getTokenOrBuilder();

    /**
     * <pre>
     * Resulting user profile, either generated from the user based on the provided identity information, or returned
     * from an earlier enrollment/authentication process, where it was established and confirmed by the user.
     * </pre>
     *
     * <code>.bloombox.identity.User profile = 3;</code>
     */
    boolean hasProfile();
    /**
     * <pre>
     * Resulting user profile, either generated from the user based on the provided identity information, or returned
     * from an earlier enrollment/authentication process, where it was established and confirmed by the user.
     * </pre>
     *
     * <code>.bloombox.identity.User profile = 3;</code>
     */
    io.bloombox.schema.identity.AppUser.User getProfile();
    /**
     * <pre>
     * Resulting user profile, either generated from the user based on the provided identity information, or returned
     * from an earlier enrollment/authentication process, where it was established and confirmed by the user.
     * </pre>
     *
     * <code>.bloombox.identity.User profile = 3;</code>
     */
    io.bloombox.schema.identity.AppUser.UserOrBuilder getProfileOrBuilder();

    /**
     * <pre>
     * Flag indicating that the user needs to perform setup in order to establish a profile. If `setup` is seen as
     * true, it will trigger the client-side application to enter a signup flow, which must pre-adopt the identity
     * data provided earlier in the flow by the client device.
     * </pre>
     *
     * <code>bool setup = 4;</code>
     */
    boolean getSetup();

    public io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Response.ResultCase getResultCase();
  }
  /**
   * <pre>
   * Response to a request to link a user identity to an account.
   * </pre>
   *
   * Protobuf type {@code bloombox.services.auth.v1beta1.IdentityConnect.Response}
   */
  public  static final class Response extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:bloombox.services.auth.v1beta1.IdentityConnect.Response)
      ResponseOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Response.newBuilder() to construct.
    private Response(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Response() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Response(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              io.bloombox.schema.identity.AppUserKey.UserKey.Builder subBuilder = null;
              if (key_ != null) {
                subBuilder = key_.toBuilder();
              }
              key_ = input.readMessage(io.bloombox.schema.identity.AppUserKey.UserKey.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(key_);
                key_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              io.bloombox.schema.security.AuthToken.Builder subBuilder = null;
              if (token_ != null) {
                subBuilder = token_.toBuilder();
              }
              token_ = input.readMessage(io.bloombox.schema.security.AuthToken.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(token_);
                token_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              io.bloombox.schema.identity.AppUser.User.Builder subBuilder = null;
              if (resultCase_ == 3) {
                subBuilder = ((io.bloombox.schema.identity.AppUser.User) result_).toBuilder();
              }
              result_ =
                  input.readMessage(io.bloombox.schema.identity.AppUser.User.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((io.bloombox.schema.identity.AppUser.User) result_);
                result_ = subBuilder.buildPartial();
              }
              resultCase_ = 3;
              break;
            }
            case 32: {
              resultCase_ = 4;
              result_ = input.readBool();
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.bloombox.schema.services.auth.v1beta1.AuthServiceBeta1.internal_static_bloombox_services_auth_v1beta1_IdentityConnect_Response_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.bloombox.schema.services.auth.v1beta1.AuthServiceBeta1.internal_static_bloombox_services_auth_v1beta1_IdentityConnect_Response_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Response.class, io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Response.Builder.class);
    }

    private int resultCase_ = 0;
    private java.lang.Object result_;
    public enum ResultCase
        implements com.google.protobuf.Internal.EnumLite {
      PROFILE(3),
      SETUP(4),
      RESULT_NOT_SET(0);
      private final int value;
      private ResultCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ResultCase valueOf(int value) {
        return forNumber(value);
      }

      public static ResultCase forNumber(int value) {
        switch (value) {
          case 3: return PROFILE;
          case 4: return SETUP;
          case 0: return RESULT_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ResultCase
    getResultCase() {
      return ResultCase.forNumber(
          resultCase_);
    }

    public static final int KEY_FIELD_NUMBER = 1;
    private io.bloombox.schema.identity.AppUserKey.UserKey key_;
    /**
     * <pre>
     * Resolved key for the subject user. A user key is distinguished from a UID, in that it addresses an actual account
     * and user profile payload, rather than just pointing to an identity that can be linked to a full account. User
     * keys are used for interacting with the API in an identity agnostic manner, post-authorization.
     * </pre>
     *
     * <code>.bloombox.identity.UserKey key = 1;</code>
     */
    public boolean hasKey() {
      return key_ != null;
    }
    /**
     * <pre>
     * Resolved key for the subject user. A user key is distinguished from a UID, in that it addresses an actual account
     * and user profile payload, rather than just pointing to an identity that can be linked to a full account. User
     * keys are used for interacting with the API in an identity agnostic manner, post-authorization.
     * </pre>
     *
     * <code>.bloombox.identity.UserKey key = 1;</code>
     */
    public io.bloombox.schema.identity.AppUserKey.UserKey getKey() {
      return key_ == null ? io.bloombox.schema.identity.AppUserKey.UserKey.getDefaultInstance() : key_;
    }
    /**
     * <pre>
     * Resolved key for the subject user. A user key is distinguished from a UID, in that it addresses an actual account
     * and user profile payload, rather than just pointing to an identity that can be linked to a full account. User
     * keys are used for interacting with the API in an identity agnostic manner, post-authorization.
     * </pre>
     *
     * <code>.bloombox.identity.UserKey key = 1;</code>
     */
    public io.bloombox.schema.identity.AppUserKey.UserKeyOrBuilder getKeyOrBuilder() {
      return getKey();
    }

    public static final int TOKEN_FIELD_NUMBER = 2;
    private io.bloombox.schema.security.AuthToken token_;
    /**
     * <pre>
     * Authorization token, issued in response to the ID token provided in the request. Issued and signed by the server
     * to indicate applicable top-level user permissions, and implies the user account was authenticated, authorized,
     * and enabled to use the state associated with this token.
     * </pre>
     *
     * <code>.bloombox.security.AuthToken token = 2;</code>
     */
    public boolean hasToken() {
      return token_ != null;
    }
    /**
     * <pre>
     * Authorization token, issued in response to the ID token provided in the request. Issued and signed by the server
     * to indicate applicable top-level user permissions, and implies the user account was authenticated, authorized,
     * and enabled to use the state associated with this token.
     * </pre>
     *
     * <code>.bloombox.security.AuthToken token = 2;</code>
     */
    public io.bloombox.schema.security.AuthToken getToken() {
      return token_ == null ? io.bloombox.schema.security.AuthToken.getDefaultInstance() : token_;
    }
    /**
     * <pre>
     * Authorization token, issued in response to the ID token provided in the request. Issued and signed by the server
     * to indicate applicable top-level user permissions, and implies the user account was authenticated, authorized,
     * and enabled to use the state associated with this token.
     * </pre>
     *
     * <code>.bloombox.security.AuthToken token = 2;</code>
     */
    public io.bloombox.schema.security.AuthTokenOrBuilder getTokenOrBuilder() {
      return getToken();
    }

    public static final int PROFILE_FIELD_NUMBER = 3;
    /**
     * <pre>
     * Resulting user profile, either generated from the user based on the provided identity information, or returned
     * from an earlier enrollment/authentication process, where it was established and confirmed by the user.
     * </pre>
     *
     * <code>.bloombox.identity.User profile = 3;</code>
     */
    public boolean hasProfile() {
      return resultCase_ == 3;
    }
    /**
     * <pre>
     * Resulting user profile, either generated from the user based on the provided identity information, or returned
     * from an earlier enrollment/authentication process, where it was established and confirmed by the user.
     * </pre>
     *
     * <code>.bloombox.identity.User profile = 3;</code>
     */
    public io.bloombox.schema.identity.AppUser.User getProfile() {
      if (resultCase_ == 3) {
         return (io.bloombox.schema.identity.AppUser.User) result_;
      }
      return io.bloombox.schema.identity.AppUser.User.getDefaultInstance();
    }
    /**
     * <pre>
     * Resulting user profile, either generated from the user based on the provided identity information, or returned
     * from an earlier enrollment/authentication process, where it was established and confirmed by the user.
     * </pre>
     *
     * <code>.bloombox.identity.User profile = 3;</code>
     */
    public io.bloombox.schema.identity.AppUser.UserOrBuilder getProfileOrBuilder() {
      if (resultCase_ == 3) {
         return (io.bloombox.schema.identity.AppUser.User) result_;
      }
      return io.bloombox.schema.identity.AppUser.User.getDefaultInstance();
    }

    public static final int SETUP_FIELD_NUMBER = 4;
    /**
     * <pre>
     * Flag indicating that the user needs to perform setup in order to establish a profile. If `setup` is seen as
     * true, it will trigger the client-side application to enter a signup flow, which must pre-adopt the identity
     * data provided earlier in the flow by the client device.
     * </pre>
     *
     * <code>bool setup = 4;</code>
     */
    public boolean getSetup() {
      if (resultCase_ == 4) {
        return (java.lang.Boolean) result_;
      }
      return false;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (key_ != null) {
        output.writeMessage(1, getKey());
      }
      if (token_ != null) {
        output.writeMessage(2, getToken());
      }
      if (resultCase_ == 3) {
        output.writeMessage(3, (io.bloombox.schema.identity.AppUser.User) result_);
      }
      if (resultCase_ == 4) {
        output.writeBool(
            4, (boolean)((java.lang.Boolean) result_));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (key_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getKey());
      }
      if (token_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getToken());
      }
      if (resultCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (io.bloombox.schema.identity.AppUser.User) result_);
      }
      if (resultCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(
              4, (boolean)((java.lang.Boolean) result_));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Response)) {
        return super.equals(obj);
      }
      io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Response other = (io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Response) obj;

      boolean result = true;
      result = result && (hasKey() == other.hasKey());
      if (hasKey()) {
        result = result && getKey()
            .equals(other.getKey());
      }
      result = result && (hasToken() == other.hasToken());
      if (hasToken()) {
        result = result && getToken()
            .equals(other.getToken());
      }
      result = result && getResultCase().equals(
          other.getResultCase());
      if (!result) return false;
      switch (resultCase_) {
        case 3:
          result = result && getProfile()
              .equals(other.getProfile());
          break;
        case 4:
          result = result && (getSetup()
              == other.getSetup());
          break;
        case 0:
        default:
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasKey()) {
        hash = (37 * hash) + KEY_FIELD_NUMBER;
        hash = (53 * hash) + getKey().hashCode();
      }
      if (hasToken()) {
        hash = (37 * hash) + TOKEN_FIELD_NUMBER;
        hash = (53 * hash) + getToken().hashCode();
      }
      switch (resultCase_) {
        case 3:
          hash = (37 * hash) + PROFILE_FIELD_NUMBER;
          hash = (53 * hash) + getProfile().hashCode();
          break;
        case 4:
          hash = (37 * hash) + SETUP_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
              getSetup());
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Response parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Response parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Response parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Response parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Response parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Response parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Response parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Response parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Response parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Response parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Response parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Response parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Response prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Response to a request to link a user identity to an account.
     * </pre>
     *
     * Protobuf type {@code bloombox.services.auth.v1beta1.IdentityConnect.Response}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:bloombox.services.auth.v1beta1.IdentityConnect.Response)
        io.bloombox.schema.services.auth.v1beta1.IdentityConnect.ResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.bloombox.schema.services.auth.v1beta1.AuthServiceBeta1.internal_static_bloombox_services_auth_v1beta1_IdentityConnect_Response_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.bloombox.schema.services.auth.v1beta1.AuthServiceBeta1.internal_static_bloombox_services_auth_v1beta1_IdentityConnect_Response_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Response.class, io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Response.Builder.class);
      }

      // Construct using io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Response.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (keyBuilder_ == null) {
          key_ = null;
        } else {
          key_ = null;
          keyBuilder_ = null;
        }
        if (tokenBuilder_ == null) {
          token_ = null;
        } else {
          token_ = null;
          tokenBuilder_ = null;
        }
        resultCase_ = 0;
        result_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.bloombox.schema.services.auth.v1beta1.AuthServiceBeta1.internal_static_bloombox_services_auth_v1beta1_IdentityConnect_Response_descriptor;
      }

      @java.lang.Override
      public io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Response getDefaultInstanceForType() {
        return io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Response.getDefaultInstance();
      }

      @java.lang.Override
      public io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Response build() {
        io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Response result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Response buildPartial() {
        io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Response result = new io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Response(this);
        if (keyBuilder_ == null) {
          result.key_ = key_;
        } else {
          result.key_ = keyBuilder_.build();
        }
        if (tokenBuilder_ == null) {
          result.token_ = token_;
        } else {
          result.token_ = tokenBuilder_.build();
        }
        if (resultCase_ == 3) {
          if (profileBuilder_ == null) {
            result.result_ = result_;
          } else {
            result.result_ = profileBuilder_.build();
          }
        }
        if (resultCase_ == 4) {
          result.result_ = result_;
        }
        result.resultCase_ = resultCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Response) {
          return mergeFrom((io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Response)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Response other) {
        if (other == io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Response.getDefaultInstance()) return this;
        if (other.hasKey()) {
          mergeKey(other.getKey());
        }
        if (other.hasToken()) {
          mergeToken(other.getToken());
        }
        switch (other.getResultCase()) {
          case PROFILE: {
            mergeProfile(other.getProfile());
            break;
          }
          case SETUP: {
            setSetup(other.getSetup());
            break;
          }
          case RESULT_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Response parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Response) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int resultCase_ = 0;
      private java.lang.Object result_;
      public ResultCase
          getResultCase() {
        return ResultCase.forNumber(
            resultCase_);
      }

      public Builder clearResult() {
        resultCase_ = 0;
        result_ = null;
        onChanged();
        return this;
      }


      private io.bloombox.schema.identity.AppUserKey.UserKey key_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.identity.AppUserKey.UserKey, io.bloombox.schema.identity.AppUserKey.UserKey.Builder, io.bloombox.schema.identity.AppUserKey.UserKeyOrBuilder> keyBuilder_;
      /**
       * <pre>
       * Resolved key for the subject user. A user key is distinguished from a UID, in that it addresses an actual account
       * and user profile payload, rather than just pointing to an identity that can be linked to a full account. User
       * keys are used for interacting with the API in an identity agnostic manner, post-authorization.
       * </pre>
       *
       * <code>.bloombox.identity.UserKey key = 1;</code>
       */
      public boolean hasKey() {
        return keyBuilder_ != null || key_ != null;
      }
      /**
       * <pre>
       * Resolved key for the subject user. A user key is distinguished from a UID, in that it addresses an actual account
       * and user profile payload, rather than just pointing to an identity that can be linked to a full account. User
       * keys are used for interacting with the API in an identity agnostic manner, post-authorization.
       * </pre>
       *
       * <code>.bloombox.identity.UserKey key = 1;</code>
       */
      public io.bloombox.schema.identity.AppUserKey.UserKey getKey() {
        if (keyBuilder_ == null) {
          return key_ == null ? io.bloombox.schema.identity.AppUserKey.UserKey.getDefaultInstance() : key_;
        } else {
          return keyBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Resolved key for the subject user. A user key is distinguished from a UID, in that it addresses an actual account
       * and user profile payload, rather than just pointing to an identity that can be linked to a full account. User
       * keys are used for interacting with the API in an identity agnostic manner, post-authorization.
       * </pre>
       *
       * <code>.bloombox.identity.UserKey key = 1;</code>
       */
      public Builder setKey(io.bloombox.schema.identity.AppUserKey.UserKey value) {
        if (keyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          key_ = value;
          onChanged();
        } else {
          keyBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Resolved key for the subject user. A user key is distinguished from a UID, in that it addresses an actual account
       * and user profile payload, rather than just pointing to an identity that can be linked to a full account. User
       * keys are used for interacting with the API in an identity agnostic manner, post-authorization.
       * </pre>
       *
       * <code>.bloombox.identity.UserKey key = 1;</code>
       */
      public Builder setKey(
          io.bloombox.schema.identity.AppUserKey.UserKey.Builder builderForValue) {
        if (keyBuilder_ == null) {
          key_ = builderForValue.build();
          onChanged();
        } else {
          keyBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Resolved key for the subject user. A user key is distinguished from a UID, in that it addresses an actual account
       * and user profile payload, rather than just pointing to an identity that can be linked to a full account. User
       * keys are used for interacting with the API in an identity agnostic manner, post-authorization.
       * </pre>
       *
       * <code>.bloombox.identity.UserKey key = 1;</code>
       */
      public Builder mergeKey(io.bloombox.schema.identity.AppUserKey.UserKey value) {
        if (keyBuilder_ == null) {
          if (key_ != null) {
            key_ =
              io.bloombox.schema.identity.AppUserKey.UserKey.newBuilder(key_).mergeFrom(value).buildPartial();
          } else {
            key_ = value;
          }
          onChanged();
        } else {
          keyBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Resolved key for the subject user. A user key is distinguished from a UID, in that it addresses an actual account
       * and user profile payload, rather than just pointing to an identity that can be linked to a full account. User
       * keys are used for interacting with the API in an identity agnostic manner, post-authorization.
       * </pre>
       *
       * <code>.bloombox.identity.UserKey key = 1;</code>
       */
      public Builder clearKey() {
        if (keyBuilder_ == null) {
          key_ = null;
          onChanged();
        } else {
          key_ = null;
          keyBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Resolved key for the subject user. A user key is distinguished from a UID, in that it addresses an actual account
       * and user profile payload, rather than just pointing to an identity that can be linked to a full account. User
       * keys are used for interacting with the API in an identity agnostic manner, post-authorization.
       * </pre>
       *
       * <code>.bloombox.identity.UserKey key = 1;</code>
       */
      public io.bloombox.schema.identity.AppUserKey.UserKey.Builder getKeyBuilder() {
        
        onChanged();
        return getKeyFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Resolved key for the subject user. A user key is distinguished from a UID, in that it addresses an actual account
       * and user profile payload, rather than just pointing to an identity that can be linked to a full account. User
       * keys are used for interacting with the API in an identity agnostic manner, post-authorization.
       * </pre>
       *
       * <code>.bloombox.identity.UserKey key = 1;</code>
       */
      public io.bloombox.schema.identity.AppUserKey.UserKeyOrBuilder getKeyOrBuilder() {
        if (keyBuilder_ != null) {
          return keyBuilder_.getMessageOrBuilder();
        } else {
          return key_ == null ?
              io.bloombox.schema.identity.AppUserKey.UserKey.getDefaultInstance() : key_;
        }
      }
      /**
       * <pre>
       * Resolved key for the subject user. A user key is distinguished from a UID, in that it addresses an actual account
       * and user profile payload, rather than just pointing to an identity that can be linked to a full account. User
       * keys are used for interacting with the API in an identity agnostic manner, post-authorization.
       * </pre>
       *
       * <code>.bloombox.identity.UserKey key = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.identity.AppUserKey.UserKey, io.bloombox.schema.identity.AppUserKey.UserKey.Builder, io.bloombox.schema.identity.AppUserKey.UserKeyOrBuilder> 
          getKeyFieldBuilder() {
        if (keyBuilder_ == null) {
          keyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.bloombox.schema.identity.AppUserKey.UserKey, io.bloombox.schema.identity.AppUserKey.UserKey.Builder, io.bloombox.schema.identity.AppUserKey.UserKeyOrBuilder>(
                  getKey(),
                  getParentForChildren(),
                  isClean());
          key_ = null;
        }
        return keyBuilder_;
      }

      private io.bloombox.schema.security.AuthToken token_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.security.AuthToken, io.bloombox.schema.security.AuthToken.Builder, io.bloombox.schema.security.AuthTokenOrBuilder> tokenBuilder_;
      /**
       * <pre>
       * Authorization token, issued in response to the ID token provided in the request. Issued and signed by the server
       * to indicate applicable top-level user permissions, and implies the user account was authenticated, authorized,
       * and enabled to use the state associated with this token.
       * </pre>
       *
       * <code>.bloombox.security.AuthToken token = 2;</code>
       */
      public boolean hasToken() {
        return tokenBuilder_ != null || token_ != null;
      }
      /**
       * <pre>
       * Authorization token, issued in response to the ID token provided in the request. Issued and signed by the server
       * to indicate applicable top-level user permissions, and implies the user account was authenticated, authorized,
       * and enabled to use the state associated with this token.
       * </pre>
       *
       * <code>.bloombox.security.AuthToken token = 2;</code>
       */
      public io.bloombox.schema.security.AuthToken getToken() {
        if (tokenBuilder_ == null) {
          return token_ == null ? io.bloombox.schema.security.AuthToken.getDefaultInstance() : token_;
        } else {
          return tokenBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Authorization token, issued in response to the ID token provided in the request. Issued and signed by the server
       * to indicate applicable top-level user permissions, and implies the user account was authenticated, authorized,
       * and enabled to use the state associated with this token.
       * </pre>
       *
       * <code>.bloombox.security.AuthToken token = 2;</code>
       */
      public Builder setToken(io.bloombox.schema.security.AuthToken value) {
        if (tokenBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          token_ = value;
          onChanged();
        } else {
          tokenBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Authorization token, issued in response to the ID token provided in the request. Issued and signed by the server
       * to indicate applicable top-level user permissions, and implies the user account was authenticated, authorized,
       * and enabled to use the state associated with this token.
       * </pre>
       *
       * <code>.bloombox.security.AuthToken token = 2;</code>
       */
      public Builder setToken(
          io.bloombox.schema.security.AuthToken.Builder builderForValue) {
        if (tokenBuilder_ == null) {
          token_ = builderForValue.build();
          onChanged();
        } else {
          tokenBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Authorization token, issued in response to the ID token provided in the request. Issued and signed by the server
       * to indicate applicable top-level user permissions, and implies the user account was authenticated, authorized,
       * and enabled to use the state associated with this token.
       * </pre>
       *
       * <code>.bloombox.security.AuthToken token = 2;</code>
       */
      public Builder mergeToken(io.bloombox.schema.security.AuthToken value) {
        if (tokenBuilder_ == null) {
          if (token_ != null) {
            token_ =
              io.bloombox.schema.security.AuthToken.newBuilder(token_).mergeFrom(value).buildPartial();
          } else {
            token_ = value;
          }
          onChanged();
        } else {
          tokenBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Authorization token, issued in response to the ID token provided in the request. Issued and signed by the server
       * to indicate applicable top-level user permissions, and implies the user account was authenticated, authorized,
       * and enabled to use the state associated with this token.
       * </pre>
       *
       * <code>.bloombox.security.AuthToken token = 2;</code>
       */
      public Builder clearToken() {
        if (tokenBuilder_ == null) {
          token_ = null;
          onChanged();
        } else {
          token_ = null;
          tokenBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Authorization token, issued in response to the ID token provided in the request. Issued and signed by the server
       * to indicate applicable top-level user permissions, and implies the user account was authenticated, authorized,
       * and enabled to use the state associated with this token.
       * </pre>
       *
       * <code>.bloombox.security.AuthToken token = 2;</code>
       */
      public io.bloombox.schema.security.AuthToken.Builder getTokenBuilder() {
        
        onChanged();
        return getTokenFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Authorization token, issued in response to the ID token provided in the request. Issued and signed by the server
       * to indicate applicable top-level user permissions, and implies the user account was authenticated, authorized,
       * and enabled to use the state associated with this token.
       * </pre>
       *
       * <code>.bloombox.security.AuthToken token = 2;</code>
       */
      public io.bloombox.schema.security.AuthTokenOrBuilder getTokenOrBuilder() {
        if (tokenBuilder_ != null) {
          return tokenBuilder_.getMessageOrBuilder();
        } else {
          return token_ == null ?
              io.bloombox.schema.security.AuthToken.getDefaultInstance() : token_;
        }
      }
      /**
       * <pre>
       * Authorization token, issued in response to the ID token provided in the request. Issued and signed by the server
       * to indicate applicable top-level user permissions, and implies the user account was authenticated, authorized,
       * and enabled to use the state associated with this token.
       * </pre>
       *
       * <code>.bloombox.security.AuthToken token = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.security.AuthToken, io.bloombox.schema.security.AuthToken.Builder, io.bloombox.schema.security.AuthTokenOrBuilder> 
          getTokenFieldBuilder() {
        if (tokenBuilder_ == null) {
          tokenBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.bloombox.schema.security.AuthToken, io.bloombox.schema.security.AuthToken.Builder, io.bloombox.schema.security.AuthTokenOrBuilder>(
                  getToken(),
                  getParentForChildren(),
                  isClean());
          token_ = null;
        }
        return tokenBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.identity.AppUser.User, io.bloombox.schema.identity.AppUser.User.Builder, io.bloombox.schema.identity.AppUser.UserOrBuilder> profileBuilder_;
      /**
       * <pre>
       * Resulting user profile, either generated from the user based on the provided identity information, or returned
       * from an earlier enrollment/authentication process, where it was established and confirmed by the user.
       * </pre>
       *
       * <code>.bloombox.identity.User profile = 3;</code>
       */
      public boolean hasProfile() {
        return resultCase_ == 3;
      }
      /**
       * <pre>
       * Resulting user profile, either generated from the user based on the provided identity information, or returned
       * from an earlier enrollment/authentication process, where it was established and confirmed by the user.
       * </pre>
       *
       * <code>.bloombox.identity.User profile = 3;</code>
       */
      public io.bloombox.schema.identity.AppUser.User getProfile() {
        if (profileBuilder_ == null) {
          if (resultCase_ == 3) {
            return (io.bloombox.schema.identity.AppUser.User) result_;
          }
          return io.bloombox.schema.identity.AppUser.User.getDefaultInstance();
        } else {
          if (resultCase_ == 3) {
            return profileBuilder_.getMessage();
          }
          return io.bloombox.schema.identity.AppUser.User.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Resulting user profile, either generated from the user based on the provided identity information, or returned
       * from an earlier enrollment/authentication process, where it was established and confirmed by the user.
       * </pre>
       *
       * <code>.bloombox.identity.User profile = 3;</code>
       */
      public Builder setProfile(io.bloombox.schema.identity.AppUser.User value) {
        if (profileBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          result_ = value;
          onChanged();
        } else {
          profileBuilder_.setMessage(value);
        }
        resultCase_ = 3;
        return this;
      }
      /**
       * <pre>
       * Resulting user profile, either generated from the user based on the provided identity information, or returned
       * from an earlier enrollment/authentication process, where it was established and confirmed by the user.
       * </pre>
       *
       * <code>.bloombox.identity.User profile = 3;</code>
       */
      public Builder setProfile(
          io.bloombox.schema.identity.AppUser.User.Builder builderForValue) {
        if (profileBuilder_ == null) {
          result_ = builderForValue.build();
          onChanged();
        } else {
          profileBuilder_.setMessage(builderForValue.build());
        }
        resultCase_ = 3;
        return this;
      }
      /**
       * <pre>
       * Resulting user profile, either generated from the user based on the provided identity information, or returned
       * from an earlier enrollment/authentication process, where it was established and confirmed by the user.
       * </pre>
       *
       * <code>.bloombox.identity.User profile = 3;</code>
       */
      public Builder mergeProfile(io.bloombox.schema.identity.AppUser.User value) {
        if (profileBuilder_ == null) {
          if (resultCase_ == 3 &&
              result_ != io.bloombox.schema.identity.AppUser.User.getDefaultInstance()) {
            result_ = io.bloombox.schema.identity.AppUser.User.newBuilder((io.bloombox.schema.identity.AppUser.User) result_)
                .mergeFrom(value).buildPartial();
          } else {
            result_ = value;
          }
          onChanged();
        } else {
          if (resultCase_ == 3) {
            profileBuilder_.mergeFrom(value);
          }
          profileBuilder_.setMessage(value);
        }
        resultCase_ = 3;
        return this;
      }
      /**
       * <pre>
       * Resulting user profile, either generated from the user based on the provided identity information, or returned
       * from an earlier enrollment/authentication process, where it was established and confirmed by the user.
       * </pre>
       *
       * <code>.bloombox.identity.User profile = 3;</code>
       */
      public Builder clearProfile() {
        if (profileBuilder_ == null) {
          if (resultCase_ == 3) {
            resultCase_ = 0;
            result_ = null;
            onChanged();
          }
        } else {
          if (resultCase_ == 3) {
            resultCase_ = 0;
            result_ = null;
          }
          profileBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Resulting user profile, either generated from the user based on the provided identity information, or returned
       * from an earlier enrollment/authentication process, where it was established and confirmed by the user.
       * </pre>
       *
       * <code>.bloombox.identity.User profile = 3;</code>
       */
      public io.bloombox.schema.identity.AppUser.User.Builder getProfileBuilder() {
        return getProfileFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Resulting user profile, either generated from the user based on the provided identity information, or returned
       * from an earlier enrollment/authentication process, where it was established and confirmed by the user.
       * </pre>
       *
       * <code>.bloombox.identity.User profile = 3;</code>
       */
      public io.bloombox.schema.identity.AppUser.UserOrBuilder getProfileOrBuilder() {
        if ((resultCase_ == 3) && (profileBuilder_ != null)) {
          return profileBuilder_.getMessageOrBuilder();
        } else {
          if (resultCase_ == 3) {
            return (io.bloombox.schema.identity.AppUser.User) result_;
          }
          return io.bloombox.schema.identity.AppUser.User.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Resulting user profile, either generated from the user based on the provided identity information, or returned
       * from an earlier enrollment/authentication process, where it was established and confirmed by the user.
       * </pre>
       *
       * <code>.bloombox.identity.User profile = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.identity.AppUser.User, io.bloombox.schema.identity.AppUser.User.Builder, io.bloombox.schema.identity.AppUser.UserOrBuilder> 
          getProfileFieldBuilder() {
        if (profileBuilder_ == null) {
          if (!(resultCase_ == 3)) {
            result_ = io.bloombox.schema.identity.AppUser.User.getDefaultInstance();
          }
          profileBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.bloombox.schema.identity.AppUser.User, io.bloombox.schema.identity.AppUser.User.Builder, io.bloombox.schema.identity.AppUser.UserOrBuilder>(
                  (io.bloombox.schema.identity.AppUser.User) result_,
                  getParentForChildren(),
                  isClean());
          result_ = null;
        }
        resultCase_ = 3;
        onChanged();;
        return profileBuilder_;
      }

      /**
       * <pre>
       * Flag indicating that the user needs to perform setup in order to establish a profile. If `setup` is seen as
       * true, it will trigger the client-side application to enter a signup flow, which must pre-adopt the identity
       * data provided earlier in the flow by the client device.
       * </pre>
       *
       * <code>bool setup = 4;</code>
       */
      public boolean getSetup() {
        if (resultCase_ == 4) {
          return (java.lang.Boolean) result_;
        }
        return false;
      }
      /**
       * <pre>
       * Flag indicating that the user needs to perform setup in order to establish a profile. If `setup` is seen as
       * true, it will trigger the client-side application to enter a signup flow, which must pre-adopt the identity
       * data provided earlier in the flow by the client device.
       * </pre>
       *
       * <code>bool setup = 4;</code>
       */
      public Builder setSetup(boolean value) {
        resultCase_ = 4;
        result_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Flag indicating that the user needs to perform setup in order to establish a profile. If `setup` is seen as
       * true, it will trigger the client-side application to enter a signup flow, which must pre-adopt the identity
       * data provided earlier in the flow by the client device.
       * </pre>
       *
       * <code>bool setup = 4;</code>
       */
      public Builder clearSetup() {
        if (resultCase_ == 4) {
          resultCase_ = 0;
          result_ = null;
          onChanged();
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:bloombox.services.auth.v1beta1.IdentityConnect.Response)
    }

    // @@protoc_insertion_point(class_scope:bloombox.services.auth.v1beta1.IdentityConnect.Response)
    private static final io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Response DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Response();
    }

    public static io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Response getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Response>
        PARSER = new com.google.protobuf.AbstractParser<Response>() {
      @java.lang.Override
      public Response parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Response(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Response> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Response> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Response getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.bloombox.schema.services.auth.v1beta1.IdentityConnect)) {
      return super.equals(obj);
    }
    io.bloombox.schema.services.auth.v1beta1.IdentityConnect other = (io.bloombox.schema.services.auth.v1beta1.IdentityConnect) obj;

    boolean result = true;
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.bloombox.schema.services.auth.v1beta1.IdentityConnect parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.bloombox.schema.services.auth.v1beta1.IdentityConnect parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.bloombox.schema.services.auth.v1beta1.IdentityConnect parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.bloombox.schema.services.auth.v1beta1.IdentityConnect parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.bloombox.schema.services.auth.v1beta1.IdentityConnect parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.bloombox.schema.services.auth.v1beta1.IdentityConnect parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.bloombox.schema.services.auth.v1beta1.IdentityConnect parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.bloombox.schema.services.auth.v1beta1.IdentityConnect parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.bloombox.schema.services.auth.v1beta1.IdentityConnect parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.bloombox.schema.services.auth.v1beta1.IdentityConnect parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.bloombox.schema.services.auth.v1beta1.IdentityConnect parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.bloombox.schema.services.auth.v1beta1.IdentityConnect parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.bloombox.schema.services.auth.v1beta1.IdentityConnect prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Specifies an RPC operation to connect a validated and signed user identity with their account. If the user has done
   * this before, there will be an existing consumer-side account - if not, an account is created under the hood, and
   * auto-linked with their identity.
   * </pre>
   *
   * Protobuf type {@code bloombox.services.auth.v1beta1.IdentityConnect}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:bloombox.services.auth.v1beta1.IdentityConnect)
      io.bloombox.schema.services.auth.v1beta1.IdentityConnectOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.bloombox.schema.services.auth.v1beta1.AuthServiceBeta1.internal_static_bloombox_services_auth_v1beta1_IdentityConnect_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.bloombox.schema.services.auth.v1beta1.AuthServiceBeta1.internal_static_bloombox_services_auth_v1beta1_IdentityConnect_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.bloombox.schema.services.auth.v1beta1.IdentityConnect.class, io.bloombox.schema.services.auth.v1beta1.IdentityConnect.Builder.class);
    }

    // Construct using io.bloombox.schema.services.auth.v1beta1.IdentityConnect.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.bloombox.schema.services.auth.v1beta1.AuthServiceBeta1.internal_static_bloombox_services_auth_v1beta1_IdentityConnect_descriptor;
    }

    @java.lang.Override
    public io.bloombox.schema.services.auth.v1beta1.IdentityConnect getDefaultInstanceForType() {
      return io.bloombox.schema.services.auth.v1beta1.IdentityConnect.getDefaultInstance();
    }

    @java.lang.Override
    public io.bloombox.schema.services.auth.v1beta1.IdentityConnect build() {
      io.bloombox.schema.services.auth.v1beta1.IdentityConnect result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.bloombox.schema.services.auth.v1beta1.IdentityConnect buildPartial() {
      io.bloombox.schema.services.auth.v1beta1.IdentityConnect result = new io.bloombox.schema.services.auth.v1beta1.IdentityConnect(this);
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return (Builder) super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.bloombox.schema.services.auth.v1beta1.IdentityConnect) {
        return mergeFrom((io.bloombox.schema.services.auth.v1beta1.IdentityConnect)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.bloombox.schema.services.auth.v1beta1.IdentityConnect other) {
      if (other == io.bloombox.schema.services.auth.v1beta1.IdentityConnect.getDefaultInstance()) return this;
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.bloombox.schema.services.auth.v1beta1.IdentityConnect parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.bloombox.schema.services.auth.v1beta1.IdentityConnect) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFieldsProto3(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:bloombox.services.auth.v1beta1.IdentityConnect)
  }

  // @@protoc_insertion_point(class_scope:bloombox.services.auth.v1beta1.IdentityConnect)
  private static final io.bloombox.schema.services.auth.v1beta1.IdentityConnect DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.bloombox.schema.services.auth.v1beta1.IdentityConnect();
  }

  public static io.bloombox.schema.services.auth.v1beta1.IdentityConnect getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<IdentityConnect>
      PARSER = new com.google.protobuf.AbstractParser<IdentityConnect>() {
    @java.lang.Override
    public IdentityConnect parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new IdentityConnect(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<IdentityConnect> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<IdentityConnect> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.bloombox.schema.services.auth.v1beta1.IdentityConnect getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

