/*
 * Copyright 2018, Bloombox, LLC. All rights reserved.
 *
 * Source and object computer code contained herein is the private intellectual
 * property of Bloombox, a California Limited Liability Corporation. Use of this
 * code in source form requires permission in writing before use or the
 * assembly, distribution, or publishing of derivative works, for commercial
 * purposes or any other purpose, from a duly authorized officer of Momentum
 * Ideas Co.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth/v1beta1/AuthService_Beta1.proto

package io.bloombox.schema.services.auth.v1beta1;

/**
 * <pre>
 * Enumerates known errors that may be thrown by auth operations.
 * </pre>
 *
 * Protobuf enum {@code bloombox.schema.services.auth.v1beta1.AuthError}
 */
public enum AuthError
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   * There was no error.
   * </pre>
   *
   * <code>NO_ERROR = 0;</code>
   */
  NO_ERROR(0),
  /**
   * <pre>
   * Access was denied: the user's account is suspended.
   * </pre>
   *
   * <code>ACCOUNT_SUSPENDED = 1;</code>
   */
  ACCOUNT_SUSPENDED(1),
  /**
   * <pre>
   * Profile could not be located.
   * </pre>
   *
   * <code>PROFILE_NOT_FOUND = 2;</code>
   */
  PROFILE_NOT_FOUND(2),
  /**
   * <pre>
   * The provided user key was found to be invalid.
   * </pre>
   *
   * <code>INVALID_USER_KEY = 3;</code>
   */
  INVALID_USER_KEY(3),
  /**
   * <pre>
   * The provided auth assertion was deemed to be invalid.
   * </pre>
   *
   * <code>INVALID_ASSERTION = 4;</code>
   */
  INVALID_ASSERTION(4),
  /**
   * <pre>
   * The specified authentication type is not currently supported.
   * </pre>
   *
   * <code>UNSUPPORTED_LOGIN_TYPE = 5;</code>
   */
  UNSUPPORTED_LOGIN_TYPE(5),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   * There was no error.
   * </pre>
   *
   * <code>NO_ERROR = 0;</code>
   */
  public static final int NO_ERROR_VALUE = 0;
  /**
   * <pre>
   * Access was denied: the user's account is suspended.
   * </pre>
   *
   * <code>ACCOUNT_SUSPENDED = 1;</code>
   */
  public static final int ACCOUNT_SUSPENDED_VALUE = 1;
  /**
   * <pre>
   * Profile could not be located.
   * </pre>
   *
   * <code>PROFILE_NOT_FOUND = 2;</code>
   */
  public static final int PROFILE_NOT_FOUND_VALUE = 2;
  /**
   * <pre>
   * The provided user key was found to be invalid.
   * </pre>
   *
   * <code>INVALID_USER_KEY = 3;</code>
   */
  public static final int INVALID_USER_KEY_VALUE = 3;
  /**
   * <pre>
   * The provided auth assertion was deemed to be invalid.
   * </pre>
   *
   * <code>INVALID_ASSERTION = 4;</code>
   */
  public static final int INVALID_ASSERTION_VALUE = 4;
  /**
   * <pre>
   * The specified authentication type is not currently supported.
   * </pre>
   *
   * <code>UNSUPPORTED_LOGIN_TYPE = 5;</code>
   */
  public static final int UNSUPPORTED_LOGIN_TYPE_VALUE = 5;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static AuthError valueOf(int value) {
    return forNumber(value);
  }

  public static AuthError forNumber(int value) {
    switch (value) {
      case 0: return NO_ERROR;
      case 1: return ACCOUNT_SUSPENDED;
      case 2: return PROFILE_NOT_FOUND;
      case 3: return INVALID_USER_KEY;
      case 4: return INVALID_ASSERTION;
      case 5: return UNSUPPORTED_LOGIN_TYPE;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<AuthError>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      AuthError> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<AuthError>() {
          public AuthError findValueByNumber(int number) {
            return AuthError.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return io.bloombox.schema.services.auth.v1beta1.AuthServiceBeta1.getDescriptor().getEnumTypes().get(0);
  }

  private static final AuthError[] VALUES = values();

  public static AuthError valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private AuthError(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:bloombox.schema.services.auth.v1beta1.AuthError)
}

