/*
 * Copyright 2019, Momentum Ideas, Co. All rights reserved.
 *
 * Source and object computer code contained herein is the private intellectual
 * property of Momentum Ideas Co., a Delaware Corporation. Use of this
 * code in source form requires permission in writing before use or the
 * assembly, distribution, or publishing of derivative works, for commercial
 * purposes or any other purpose, from a duly authorized officer of Momentum
 * Ideas Co.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: identity/v1beta1/IdentityService_Beta1.proto

package io.bloombox.schema.services.identity.v1beta1;

/**
 * <pre>
 * Specifies information about the owner of an arbitrary asymmetric keypair.
 * </pre>
 *
 * Protobuf type {@code bloombox.services.identity.v1beta1.KeyOwnership}
 */
public  final class KeyOwnership extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:bloombox.services.identity.v1beta1.KeyOwnership)
    KeyOwnershipOrBuilder {
private static final long serialVersionUID = 0L;
  // Use KeyOwnership.newBuilder() to construct.
  private KeyOwnership(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private KeyOwnership() {
    type_ = 0;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private KeyOwnership(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 8: {
            int rawValue = input.readEnum();

            type_ = rawValue;
            break;
          }
          case 82: {
            io.bloombox.schema.partner.PartnerDevices.PartnerDeviceKey.Builder subBuilder = null;
            if (subjectCase_ == 10) {
              subBuilder = ((io.bloombox.schema.partner.PartnerDevices.PartnerDeviceKey) subject_).toBuilder();
            }
            subject_ =
                input.readMessage(io.bloombox.schema.partner.PartnerDevices.PartnerDeviceKey.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.bloombox.schema.partner.PartnerDevices.PartnerDeviceKey) subject_);
              subject_ = subBuilder.buildPartial();
            }
            subjectCase_ = 10;
            break;
          }
          case 90: {
            io.bloombox.schema.identity.AppUserKey.UserKey.Builder subBuilder = null;
            if (subjectCase_ == 11) {
              subBuilder = ((io.bloombox.schema.identity.AppUserKey.UserKey) subject_).toBuilder();
            }
            subject_ =
                input.readMessage(io.bloombox.schema.identity.AppUserKey.UserKey.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.bloombox.schema.identity.AppUserKey.UserKey) subject_);
              subject_ = subBuilder.buildPartial();
            }
            subjectCase_ = 11;
            break;
          }
          case 98: {
            io.bloombox.schema.partner.PartnerMeta.PartnerKey.Builder subBuilder = null;
            if (subjectCase_ == 12) {
              subBuilder = ((io.bloombox.schema.partner.PartnerMeta.PartnerKey) subject_).toBuilder();
            }
            subject_ =
                input.readMessage(io.bloombox.schema.partner.PartnerMeta.PartnerKey.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.bloombox.schema.partner.PartnerMeta.PartnerKey) subject_);
              subject_ = subBuilder.buildPartial();
            }
            subjectCase_ = 12;
            break;
          }
          case 106: {
            io.bloombox.schema.partner.LocationAccountKey.LocationKey.Builder subBuilder = null;
            if (subjectCase_ == 13) {
              subBuilder = ((io.bloombox.schema.partner.LocationAccountKey.LocationKey) subject_).toBuilder();
            }
            subject_ =
                input.readMessage(io.bloombox.schema.partner.LocationAccountKey.LocationKey.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.bloombox.schema.partner.LocationAccountKey.LocationKey) subject_);
              subject_ = subBuilder.buildPartial();
            }
            subjectCase_ = 13;
            break;
          }
          case 114: {
            io.bloombox.schema.ledger.LedgerNode.Node.Builder subBuilder = null;
            if (subjectCase_ == 14) {
              subBuilder = ((io.bloombox.schema.ledger.LedgerNode.Node) subject_).toBuilder();
            }
            subject_ =
                input.readMessage(io.bloombox.schema.ledger.LedgerNode.Node.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.bloombox.schema.ledger.LedgerNode.Node) subject_);
              subject_ = subBuilder.buildPartial();
            }
            subjectCase_ = 14;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.bloombox.schema.services.identity.v1beta1.IdentityServiceBeta1.internal_static_bloombox_services_identity_v1beta1_KeyOwnership_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.bloombox.schema.services.identity.v1beta1.IdentityServiceBeta1.internal_static_bloombox_services_identity_v1beta1_KeyOwnership_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.bloombox.schema.services.identity.v1beta1.KeyOwnership.class, io.bloombox.schema.services.identity.v1beta1.KeyOwnership.Builder.class);
  }

  /**
   * <pre>
   * Enumerates known key owner types.
   * </pre>
   *
   * Protobuf enum {@code bloombox.services.identity.v1beta1.KeyOwnership.OwnerType}
   */
  public enum OwnerType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Specifies asymmetric keypairs that identify devices.
     * </pre>
     *
     * <code>DEVICE = 0;</code>
     */
    DEVICE(0),
    /**
     * <pre>
     * Specifies asymmetric keypairs that identify compute nodes.
     * </pre>
     *
     * <code>NODE = 1;</code>
     */
    NODE(1),
    /**
     * <pre>
     * Specifies asymmetric keypairs that identify services.
     * </pre>
     *
     * <code>SERVICE = 2;</code>
     */
    SERVICE(2),
    /**
     * <pre>
     * Specifies asymmetric keypairs that identify actual persons.
     * </pre>
     *
     * <code>USER = 3;</code>
     */
    USER(3),
    /**
     * <pre>
     * Specifies asymmetric keypairs that identify partner organizations.
     * </pre>
     *
     * <code>PARTNER = 4;</code>
     */
    PARTNER(4),
    /**
     * <pre>
     * Specifies asymmetric keypairs that identify partner locations.
     * </pre>
     *
     * <code>LOCATION = 5;</code>
     */
    LOCATION(5),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Specifies asymmetric keypairs that identify devices.
     * </pre>
     *
     * <code>DEVICE = 0;</code>
     */
    public static final int DEVICE_VALUE = 0;
    /**
     * <pre>
     * Specifies asymmetric keypairs that identify compute nodes.
     * </pre>
     *
     * <code>NODE = 1;</code>
     */
    public static final int NODE_VALUE = 1;
    /**
     * <pre>
     * Specifies asymmetric keypairs that identify services.
     * </pre>
     *
     * <code>SERVICE = 2;</code>
     */
    public static final int SERVICE_VALUE = 2;
    /**
     * <pre>
     * Specifies asymmetric keypairs that identify actual persons.
     * </pre>
     *
     * <code>USER = 3;</code>
     */
    public static final int USER_VALUE = 3;
    /**
     * <pre>
     * Specifies asymmetric keypairs that identify partner organizations.
     * </pre>
     *
     * <code>PARTNER = 4;</code>
     */
    public static final int PARTNER_VALUE = 4;
    /**
     * <pre>
     * Specifies asymmetric keypairs that identify partner locations.
     * </pre>
     *
     * <code>LOCATION = 5;</code>
     */
    public static final int LOCATION_VALUE = 5;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static OwnerType valueOf(int value) {
      return forNumber(value);
    }

    public static OwnerType forNumber(int value) {
      switch (value) {
        case 0: return DEVICE;
        case 1: return NODE;
        case 2: return SERVICE;
        case 3: return USER;
        case 4: return PARTNER;
        case 5: return LOCATION;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<OwnerType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        OwnerType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<OwnerType>() {
            public OwnerType findValueByNumber(int number) {
              return OwnerType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return io.bloombox.schema.services.identity.v1beta1.KeyOwnership.getDescriptor().getEnumTypes().get(0);
    }

    private static final OwnerType[] VALUES = values();

    public static OwnerType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private OwnerType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:bloombox.services.identity.v1beta1.KeyOwnership.OwnerType)
  }

  private int subjectCase_ = 0;
  private java.lang.Object subject_;
  public enum SubjectCase
      implements com.google.protobuf.Internal.EnumLite {
    DEVICE(10),
    USER(11),
    PARTNER(12),
    LOCATION(13),
    NODE(14),
    SUBJECT_NOT_SET(0);
    private final int value;
    private SubjectCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SubjectCase valueOf(int value) {
      return forNumber(value);
    }

    public static SubjectCase forNumber(int value) {
      switch (value) {
        case 10: return DEVICE;
        case 11: return USER;
        case 12: return PARTNER;
        case 13: return LOCATION;
        case 14: return NODE;
        case 0: return SUBJECT_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public SubjectCase
  getSubjectCase() {
    return SubjectCase.forNumber(
        subjectCase_);
  }

  public static final int TYPE_FIELD_NUMBER = 1;
  private int type_;
  /**
   * <pre>
   * Specifies the type of owner that owns this key.
   * </pre>
   *
   * <code>.bloombox.services.identity.v1beta1.KeyOwnership.OwnerType type = 1;</code>
   */
  public int getTypeValue() {
    return type_;
  }
  /**
   * <pre>
   * Specifies the type of owner that owns this key.
   * </pre>
   *
   * <code>.bloombox.services.identity.v1beta1.KeyOwnership.OwnerType type = 1;</code>
   */
  public io.bloombox.schema.services.identity.v1beta1.KeyOwnership.OwnerType getType() {
    @SuppressWarnings("deprecation")
    io.bloombox.schema.services.identity.v1beta1.KeyOwnership.OwnerType result = io.bloombox.schema.services.identity.v1beta1.KeyOwnership.OwnerType.valueOf(type_);
    return result == null ? io.bloombox.schema.services.identity.v1beta1.KeyOwnership.OwnerType.UNRECOGNIZED : result;
  }

  public static final int DEVICE_FIELD_NUMBER = 10;
  /**
   * <pre>
   * Specifies a key for an individual partner co-located device.
   * </pre>
   *
   * <code>.bloombox.partner.PartnerDeviceKey device = 10;</code>
   */
  public boolean hasDevice() {
    return subjectCase_ == 10;
  }
  /**
   * <pre>
   * Specifies a key for an individual partner co-located device.
   * </pre>
   *
   * <code>.bloombox.partner.PartnerDeviceKey device = 10;</code>
   */
  public io.bloombox.schema.partner.PartnerDevices.PartnerDeviceKey getDevice() {
    if (subjectCase_ == 10) {
       return (io.bloombox.schema.partner.PartnerDevices.PartnerDeviceKey) subject_;
    }
    return io.bloombox.schema.partner.PartnerDevices.PartnerDeviceKey.getDefaultInstance();
  }
  /**
   * <pre>
   * Specifies a key for an individual partner co-located device.
   * </pre>
   *
   * <code>.bloombox.partner.PartnerDeviceKey device = 10;</code>
   */
  public io.bloombox.schema.partner.PartnerDevices.PartnerDeviceKeyOrBuilder getDeviceOrBuilder() {
    if (subjectCase_ == 10) {
       return (io.bloombox.schema.partner.PartnerDevices.PartnerDeviceKey) subject_;
    }
    return io.bloombox.schema.partner.PartnerDevices.PartnerDeviceKey.getDefaultInstance();
  }

  public static final int USER_FIELD_NUMBER = 11;
  /**
   * <pre>
   * Specifies a key for a user account.
   * </pre>
   *
   * <code>.bloombox.identity.UserKey user = 11;</code>
   */
  public boolean hasUser() {
    return subjectCase_ == 11;
  }
  /**
   * <pre>
   * Specifies a key for a user account.
   * </pre>
   *
   * <code>.bloombox.identity.UserKey user = 11;</code>
   */
  public io.bloombox.schema.identity.AppUserKey.UserKey getUser() {
    if (subjectCase_ == 11) {
       return (io.bloombox.schema.identity.AppUserKey.UserKey) subject_;
    }
    return io.bloombox.schema.identity.AppUserKey.UserKey.getDefaultInstance();
  }
  /**
   * <pre>
   * Specifies a key for a user account.
   * </pre>
   *
   * <code>.bloombox.identity.UserKey user = 11;</code>
   */
  public io.bloombox.schema.identity.AppUserKey.UserKeyOrBuilder getUserOrBuilder() {
    if (subjectCase_ == 11) {
       return (io.bloombox.schema.identity.AppUserKey.UserKey) subject_;
    }
    return io.bloombox.schema.identity.AppUserKey.UserKey.getDefaultInstance();
  }

  public static final int PARTNER_FIELD_NUMBER = 12;
  /**
   * <pre>
   * Specifies a key for a given partner organization.
   * </pre>
   *
   * <code>.bloombox.partner.PartnerKey partner = 12;</code>
   */
  public boolean hasPartner() {
    return subjectCase_ == 12;
  }
  /**
   * <pre>
   * Specifies a key for a given partner organization.
   * </pre>
   *
   * <code>.bloombox.partner.PartnerKey partner = 12;</code>
   */
  public io.bloombox.schema.partner.PartnerMeta.PartnerKey getPartner() {
    if (subjectCase_ == 12) {
       return (io.bloombox.schema.partner.PartnerMeta.PartnerKey) subject_;
    }
    return io.bloombox.schema.partner.PartnerMeta.PartnerKey.getDefaultInstance();
  }
  /**
   * <pre>
   * Specifies a key for a given partner organization.
   * </pre>
   *
   * <code>.bloombox.partner.PartnerKey partner = 12;</code>
   */
  public io.bloombox.schema.partner.PartnerMeta.PartnerKeyOrBuilder getPartnerOrBuilder() {
    if (subjectCase_ == 12) {
       return (io.bloombox.schema.partner.PartnerMeta.PartnerKey) subject_;
    }
    return io.bloombox.schema.partner.PartnerMeta.PartnerKey.getDefaultInstance();
  }

  public static final int LOCATION_FIELD_NUMBER = 13;
  /**
   * <pre>
   * Specifies a key for a given partner location.
   * </pre>
   *
   * <code>.bloombox.partner.LocationKey location = 13;</code>
   */
  public boolean hasLocation() {
    return subjectCase_ == 13;
  }
  /**
   * <pre>
   * Specifies a key for a given partner location.
   * </pre>
   *
   * <code>.bloombox.partner.LocationKey location = 13;</code>
   */
  public io.bloombox.schema.partner.LocationAccountKey.LocationKey getLocation() {
    if (subjectCase_ == 13) {
       return (io.bloombox.schema.partner.LocationAccountKey.LocationKey) subject_;
    }
    return io.bloombox.schema.partner.LocationAccountKey.LocationKey.getDefaultInstance();
  }
  /**
   * <pre>
   * Specifies a key for a given partner location.
   * </pre>
   *
   * <code>.bloombox.partner.LocationKey location = 13;</code>
   */
  public io.bloombox.schema.partner.LocationAccountKey.LocationKeyOrBuilder getLocationOrBuilder() {
    if (subjectCase_ == 13) {
       return (io.bloombox.schema.partner.LocationAccountKey.LocationKey) subject_;
    }
    return io.bloombox.schema.partner.LocationAccountKey.LocationKey.getDefaultInstance();
  }

  public static final int NODE_FIELD_NUMBER = 14;
  /**
   * <pre>
   * Specifies details about an operating node.
   * </pre>
   *
   * <code>.bloombox.ledger.Node node = 14;</code>
   */
  public boolean hasNode() {
    return subjectCase_ == 14;
  }
  /**
   * <pre>
   * Specifies details about an operating node.
   * </pre>
   *
   * <code>.bloombox.ledger.Node node = 14;</code>
   */
  public io.bloombox.schema.ledger.LedgerNode.Node getNode() {
    if (subjectCase_ == 14) {
       return (io.bloombox.schema.ledger.LedgerNode.Node) subject_;
    }
    return io.bloombox.schema.ledger.LedgerNode.Node.getDefaultInstance();
  }
  /**
   * <pre>
   * Specifies details about an operating node.
   * </pre>
   *
   * <code>.bloombox.ledger.Node node = 14;</code>
   */
  public io.bloombox.schema.ledger.LedgerNode.NodeOrBuilder getNodeOrBuilder() {
    if (subjectCase_ == 14) {
       return (io.bloombox.schema.ledger.LedgerNode.Node) subject_;
    }
    return io.bloombox.schema.ledger.LedgerNode.Node.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (type_ != io.bloombox.schema.services.identity.v1beta1.KeyOwnership.OwnerType.DEVICE.getNumber()) {
      output.writeEnum(1, type_);
    }
    if (subjectCase_ == 10) {
      output.writeMessage(10, (io.bloombox.schema.partner.PartnerDevices.PartnerDeviceKey) subject_);
    }
    if (subjectCase_ == 11) {
      output.writeMessage(11, (io.bloombox.schema.identity.AppUserKey.UserKey) subject_);
    }
    if (subjectCase_ == 12) {
      output.writeMessage(12, (io.bloombox.schema.partner.PartnerMeta.PartnerKey) subject_);
    }
    if (subjectCase_ == 13) {
      output.writeMessage(13, (io.bloombox.schema.partner.LocationAccountKey.LocationKey) subject_);
    }
    if (subjectCase_ == 14) {
      output.writeMessage(14, (io.bloombox.schema.ledger.LedgerNode.Node) subject_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (type_ != io.bloombox.schema.services.identity.v1beta1.KeyOwnership.OwnerType.DEVICE.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, type_);
    }
    if (subjectCase_ == 10) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, (io.bloombox.schema.partner.PartnerDevices.PartnerDeviceKey) subject_);
    }
    if (subjectCase_ == 11) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, (io.bloombox.schema.identity.AppUserKey.UserKey) subject_);
    }
    if (subjectCase_ == 12) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(12, (io.bloombox.schema.partner.PartnerMeta.PartnerKey) subject_);
    }
    if (subjectCase_ == 13) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(13, (io.bloombox.schema.partner.LocationAccountKey.LocationKey) subject_);
    }
    if (subjectCase_ == 14) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(14, (io.bloombox.schema.ledger.LedgerNode.Node) subject_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.bloombox.schema.services.identity.v1beta1.KeyOwnership)) {
      return super.equals(obj);
    }
    io.bloombox.schema.services.identity.v1beta1.KeyOwnership other = (io.bloombox.schema.services.identity.v1beta1.KeyOwnership) obj;

    if (type_ != other.type_) return false;
    if (!getSubjectCase().equals(other.getSubjectCase())) return false;
    switch (subjectCase_) {
      case 10:
        if (!getDevice()
            .equals(other.getDevice())) return false;
        break;
      case 11:
        if (!getUser()
            .equals(other.getUser())) return false;
        break;
      case 12:
        if (!getPartner()
            .equals(other.getPartner())) return false;
        break;
      case 13:
        if (!getLocation()
            .equals(other.getLocation())) return false;
        break;
      case 14:
        if (!getNode()
            .equals(other.getNode())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + TYPE_FIELD_NUMBER;
    hash = (53 * hash) + type_;
    switch (subjectCase_) {
      case 10:
        hash = (37 * hash) + DEVICE_FIELD_NUMBER;
        hash = (53 * hash) + getDevice().hashCode();
        break;
      case 11:
        hash = (37 * hash) + USER_FIELD_NUMBER;
        hash = (53 * hash) + getUser().hashCode();
        break;
      case 12:
        hash = (37 * hash) + PARTNER_FIELD_NUMBER;
        hash = (53 * hash) + getPartner().hashCode();
        break;
      case 13:
        hash = (37 * hash) + LOCATION_FIELD_NUMBER;
        hash = (53 * hash) + getLocation().hashCode();
        break;
      case 14:
        hash = (37 * hash) + NODE_FIELD_NUMBER;
        hash = (53 * hash) + getNode().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.bloombox.schema.services.identity.v1beta1.KeyOwnership parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.bloombox.schema.services.identity.v1beta1.KeyOwnership parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.bloombox.schema.services.identity.v1beta1.KeyOwnership parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.bloombox.schema.services.identity.v1beta1.KeyOwnership parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.bloombox.schema.services.identity.v1beta1.KeyOwnership parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.bloombox.schema.services.identity.v1beta1.KeyOwnership parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.bloombox.schema.services.identity.v1beta1.KeyOwnership parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.bloombox.schema.services.identity.v1beta1.KeyOwnership parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.bloombox.schema.services.identity.v1beta1.KeyOwnership parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.bloombox.schema.services.identity.v1beta1.KeyOwnership parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.bloombox.schema.services.identity.v1beta1.KeyOwnership parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.bloombox.schema.services.identity.v1beta1.KeyOwnership parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.bloombox.schema.services.identity.v1beta1.KeyOwnership prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Specifies information about the owner of an arbitrary asymmetric keypair.
   * </pre>
   *
   * Protobuf type {@code bloombox.services.identity.v1beta1.KeyOwnership}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:bloombox.services.identity.v1beta1.KeyOwnership)
      io.bloombox.schema.services.identity.v1beta1.KeyOwnershipOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.bloombox.schema.services.identity.v1beta1.IdentityServiceBeta1.internal_static_bloombox_services_identity_v1beta1_KeyOwnership_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.bloombox.schema.services.identity.v1beta1.IdentityServiceBeta1.internal_static_bloombox_services_identity_v1beta1_KeyOwnership_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.bloombox.schema.services.identity.v1beta1.KeyOwnership.class, io.bloombox.schema.services.identity.v1beta1.KeyOwnership.Builder.class);
    }

    // Construct using io.bloombox.schema.services.identity.v1beta1.KeyOwnership.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      type_ = 0;

      subjectCase_ = 0;
      subject_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.bloombox.schema.services.identity.v1beta1.IdentityServiceBeta1.internal_static_bloombox_services_identity_v1beta1_KeyOwnership_descriptor;
    }

    @java.lang.Override
    public io.bloombox.schema.services.identity.v1beta1.KeyOwnership getDefaultInstanceForType() {
      return io.bloombox.schema.services.identity.v1beta1.KeyOwnership.getDefaultInstance();
    }

    @java.lang.Override
    public io.bloombox.schema.services.identity.v1beta1.KeyOwnership build() {
      io.bloombox.schema.services.identity.v1beta1.KeyOwnership result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.bloombox.schema.services.identity.v1beta1.KeyOwnership buildPartial() {
      io.bloombox.schema.services.identity.v1beta1.KeyOwnership result = new io.bloombox.schema.services.identity.v1beta1.KeyOwnership(this);
      result.type_ = type_;
      if (subjectCase_ == 10) {
        if (deviceBuilder_ == null) {
          result.subject_ = subject_;
        } else {
          result.subject_ = deviceBuilder_.build();
        }
      }
      if (subjectCase_ == 11) {
        if (userBuilder_ == null) {
          result.subject_ = subject_;
        } else {
          result.subject_ = userBuilder_.build();
        }
      }
      if (subjectCase_ == 12) {
        if (partnerBuilder_ == null) {
          result.subject_ = subject_;
        } else {
          result.subject_ = partnerBuilder_.build();
        }
      }
      if (subjectCase_ == 13) {
        if (locationBuilder_ == null) {
          result.subject_ = subject_;
        } else {
          result.subject_ = locationBuilder_.build();
        }
      }
      if (subjectCase_ == 14) {
        if (nodeBuilder_ == null) {
          result.subject_ = subject_;
        } else {
          result.subject_ = nodeBuilder_.build();
        }
      }
      result.subjectCase_ = subjectCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.bloombox.schema.services.identity.v1beta1.KeyOwnership) {
        return mergeFrom((io.bloombox.schema.services.identity.v1beta1.KeyOwnership)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.bloombox.schema.services.identity.v1beta1.KeyOwnership other) {
      if (other == io.bloombox.schema.services.identity.v1beta1.KeyOwnership.getDefaultInstance()) return this;
      if (other.type_ != 0) {
        setTypeValue(other.getTypeValue());
      }
      switch (other.getSubjectCase()) {
        case DEVICE: {
          mergeDevice(other.getDevice());
          break;
        }
        case USER: {
          mergeUser(other.getUser());
          break;
        }
        case PARTNER: {
          mergePartner(other.getPartner());
          break;
        }
        case LOCATION: {
          mergeLocation(other.getLocation());
          break;
        }
        case NODE: {
          mergeNode(other.getNode());
          break;
        }
        case SUBJECT_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.bloombox.schema.services.identity.v1beta1.KeyOwnership parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.bloombox.schema.services.identity.v1beta1.KeyOwnership) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int subjectCase_ = 0;
    private java.lang.Object subject_;
    public SubjectCase
        getSubjectCase() {
      return SubjectCase.forNumber(
          subjectCase_);
    }

    public Builder clearSubject() {
      subjectCase_ = 0;
      subject_ = null;
      onChanged();
      return this;
    }


    private int type_ = 0;
    /**
     * <pre>
     * Specifies the type of owner that owns this key.
     * </pre>
     *
     * <code>.bloombox.services.identity.v1beta1.KeyOwnership.OwnerType type = 1;</code>
     */
    public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     * Specifies the type of owner that owns this key.
     * </pre>
     *
     * <code>.bloombox.services.identity.v1beta1.KeyOwnership.OwnerType type = 1;</code>
     */
    public Builder setTypeValue(int value) {
      type_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies the type of owner that owns this key.
     * </pre>
     *
     * <code>.bloombox.services.identity.v1beta1.KeyOwnership.OwnerType type = 1;</code>
     */
    public io.bloombox.schema.services.identity.v1beta1.KeyOwnership.OwnerType getType() {
      @SuppressWarnings("deprecation")
      io.bloombox.schema.services.identity.v1beta1.KeyOwnership.OwnerType result = io.bloombox.schema.services.identity.v1beta1.KeyOwnership.OwnerType.valueOf(type_);
      return result == null ? io.bloombox.schema.services.identity.v1beta1.KeyOwnership.OwnerType.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Specifies the type of owner that owns this key.
     * </pre>
     *
     * <code>.bloombox.services.identity.v1beta1.KeyOwnership.OwnerType type = 1;</code>
     */
    public Builder setType(io.bloombox.schema.services.identity.v1beta1.KeyOwnership.OwnerType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      type_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Specifies the type of owner that owns this key.
     * </pre>
     *
     * <code>.bloombox.services.identity.v1beta1.KeyOwnership.OwnerType type = 1;</code>
     */
    public Builder clearType() {
      
      type_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.bloombox.schema.partner.PartnerDevices.PartnerDeviceKey, io.bloombox.schema.partner.PartnerDevices.PartnerDeviceKey.Builder, io.bloombox.schema.partner.PartnerDevices.PartnerDeviceKeyOrBuilder> deviceBuilder_;
    /**
     * <pre>
     * Specifies a key for an individual partner co-located device.
     * </pre>
     *
     * <code>.bloombox.partner.PartnerDeviceKey device = 10;</code>
     */
    public boolean hasDevice() {
      return subjectCase_ == 10;
    }
    /**
     * <pre>
     * Specifies a key for an individual partner co-located device.
     * </pre>
     *
     * <code>.bloombox.partner.PartnerDeviceKey device = 10;</code>
     */
    public io.bloombox.schema.partner.PartnerDevices.PartnerDeviceKey getDevice() {
      if (deviceBuilder_ == null) {
        if (subjectCase_ == 10) {
          return (io.bloombox.schema.partner.PartnerDevices.PartnerDeviceKey) subject_;
        }
        return io.bloombox.schema.partner.PartnerDevices.PartnerDeviceKey.getDefaultInstance();
      } else {
        if (subjectCase_ == 10) {
          return deviceBuilder_.getMessage();
        }
        return io.bloombox.schema.partner.PartnerDevices.PartnerDeviceKey.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Specifies a key for an individual partner co-located device.
     * </pre>
     *
     * <code>.bloombox.partner.PartnerDeviceKey device = 10;</code>
     */
    public Builder setDevice(io.bloombox.schema.partner.PartnerDevices.PartnerDeviceKey value) {
      if (deviceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        subject_ = value;
        onChanged();
      } else {
        deviceBuilder_.setMessage(value);
      }
      subjectCase_ = 10;
      return this;
    }
    /**
     * <pre>
     * Specifies a key for an individual partner co-located device.
     * </pre>
     *
     * <code>.bloombox.partner.PartnerDeviceKey device = 10;</code>
     */
    public Builder setDevice(
        io.bloombox.schema.partner.PartnerDevices.PartnerDeviceKey.Builder builderForValue) {
      if (deviceBuilder_ == null) {
        subject_ = builderForValue.build();
        onChanged();
      } else {
        deviceBuilder_.setMessage(builderForValue.build());
      }
      subjectCase_ = 10;
      return this;
    }
    /**
     * <pre>
     * Specifies a key for an individual partner co-located device.
     * </pre>
     *
     * <code>.bloombox.partner.PartnerDeviceKey device = 10;</code>
     */
    public Builder mergeDevice(io.bloombox.schema.partner.PartnerDevices.PartnerDeviceKey value) {
      if (deviceBuilder_ == null) {
        if (subjectCase_ == 10 &&
            subject_ != io.bloombox.schema.partner.PartnerDevices.PartnerDeviceKey.getDefaultInstance()) {
          subject_ = io.bloombox.schema.partner.PartnerDevices.PartnerDeviceKey.newBuilder((io.bloombox.schema.partner.PartnerDevices.PartnerDeviceKey) subject_)
              .mergeFrom(value).buildPartial();
        } else {
          subject_ = value;
        }
        onChanged();
      } else {
        if (subjectCase_ == 10) {
          deviceBuilder_.mergeFrom(value);
        }
        deviceBuilder_.setMessage(value);
      }
      subjectCase_ = 10;
      return this;
    }
    /**
     * <pre>
     * Specifies a key for an individual partner co-located device.
     * </pre>
     *
     * <code>.bloombox.partner.PartnerDeviceKey device = 10;</code>
     */
    public Builder clearDevice() {
      if (deviceBuilder_ == null) {
        if (subjectCase_ == 10) {
          subjectCase_ = 0;
          subject_ = null;
          onChanged();
        }
      } else {
        if (subjectCase_ == 10) {
          subjectCase_ = 0;
          subject_ = null;
        }
        deviceBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a key for an individual partner co-located device.
     * </pre>
     *
     * <code>.bloombox.partner.PartnerDeviceKey device = 10;</code>
     */
    public io.bloombox.schema.partner.PartnerDevices.PartnerDeviceKey.Builder getDeviceBuilder() {
      return getDeviceFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Specifies a key for an individual partner co-located device.
     * </pre>
     *
     * <code>.bloombox.partner.PartnerDeviceKey device = 10;</code>
     */
    public io.bloombox.schema.partner.PartnerDevices.PartnerDeviceKeyOrBuilder getDeviceOrBuilder() {
      if ((subjectCase_ == 10) && (deviceBuilder_ != null)) {
        return deviceBuilder_.getMessageOrBuilder();
      } else {
        if (subjectCase_ == 10) {
          return (io.bloombox.schema.partner.PartnerDevices.PartnerDeviceKey) subject_;
        }
        return io.bloombox.schema.partner.PartnerDevices.PartnerDeviceKey.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Specifies a key for an individual partner co-located device.
     * </pre>
     *
     * <code>.bloombox.partner.PartnerDeviceKey device = 10;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.bloombox.schema.partner.PartnerDevices.PartnerDeviceKey, io.bloombox.schema.partner.PartnerDevices.PartnerDeviceKey.Builder, io.bloombox.schema.partner.PartnerDevices.PartnerDeviceKeyOrBuilder> 
        getDeviceFieldBuilder() {
      if (deviceBuilder_ == null) {
        if (!(subjectCase_ == 10)) {
          subject_ = io.bloombox.schema.partner.PartnerDevices.PartnerDeviceKey.getDefaultInstance();
        }
        deviceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.bloombox.schema.partner.PartnerDevices.PartnerDeviceKey, io.bloombox.schema.partner.PartnerDevices.PartnerDeviceKey.Builder, io.bloombox.schema.partner.PartnerDevices.PartnerDeviceKeyOrBuilder>(
                (io.bloombox.schema.partner.PartnerDevices.PartnerDeviceKey) subject_,
                getParentForChildren(),
                isClean());
        subject_ = null;
      }
      subjectCase_ = 10;
      onChanged();;
      return deviceBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.bloombox.schema.identity.AppUserKey.UserKey, io.bloombox.schema.identity.AppUserKey.UserKey.Builder, io.bloombox.schema.identity.AppUserKey.UserKeyOrBuilder> userBuilder_;
    /**
     * <pre>
     * Specifies a key for a user account.
     * </pre>
     *
     * <code>.bloombox.identity.UserKey user = 11;</code>
     */
    public boolean hasUser() {
      return subjectCase_ == 11;
    }
    /**
     * <pre>
     * Specifies a key for a user account.
     * </pre>
     *
     * <code>.bloombox.identity.UserKey user = 11;</code>
     */
    public io.bloombox.schema.identity.AppUserKey.UserKey getUser() {
      if (userBuilder_ == null) {
        if (subjectCase_ == 11) {
          return (io.bloombox.schema.identity.AppUserKey.UserKey) subject_;
        }
        return io.bloombox.schema.identity.AppUserKey.UserKey.getDefaultInstance();
      } else {
        if (subjectCase_ == 11) {
          return userBuilder_.getMessage();
        }
        return io.bloombox.schema.identity.AppUserKey.UserKey.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Specifies a key for a user account.
     * </pre>
     *
     * <code>.bloombox.identity.UserKey user = 11;</code>
     */
    public Builder setUser(io.bloombox.schema.identity.AppUserKey.UserKey value) {
      if (userBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        subject_ = value;
        onChanged();
      } else {
        userBuilder_.setMessage(value);
      }
      subjectCase_ = 11;
      return this;
    }
    /**
     * <pre>
     * Specifies a key for a user account.
     * </pre>
     *
     * <code>.bloombox.identity.UserKey user = 11;</code>
     */
    public Builder setUser(
        io.bloombox.schema.identity.AppUserKey.UserKey.Builder builderForValue) {
      if (userBuilder_ == null) {
        subject_ = builderForValue.build();
        onChanged();
      } else {
        userBuilder_.setMessage(builderForValue.build());
      }
      subjectCase_ = 11;
      return this;
    }
    /**
     * <pre>
     * Specifies a key for a user account.
     * </pre>
     *
     * <code>.bloombox.identity.UserKey user = 11;</code>
     */
    public Builder mergeUser(io.bloombox.schema.identity.AppUserKey.UserKey value) {
      if (userBuilder_ == null) {
        if (subjectCase_ == 11 &&
            subject_ != io.bloombox.schema.identity.AppUserKey.UserKey.getDefaultInstance()) {
          subject_ = io.bloombox.schema.identity.AppUserKey.UserKey.newBuilder((io.bloombox.schema.identity.AppUserKey.UserKey) subject_)
              .mergeFrom(value).buildPartial();
        } else {
          subject_ = value;
        }
        onChanged();
      } else {
        if (subjectCase_ == 11) {
          userBuilder_.mergeFrom(value);
        }
        userBuilder_.setMessage(value);
      }
      subjectCase_ = 11;
      return this;
    }
    /**
     * <pre>
     * Specifies a key for a user account.
     * </pre>
     *
     * <code>.bloombox.identity.UserKey user = 11;</code>
     */
    public Builder clearUser() {
      if (userBuilder_ == null) {
        if (subjectCase_ == 11) {
          subjectCase_ = 0;
          subject_ = null;
          onChanged();
        }
      } else {
        if (subjectCase_ == 11) {
          subjectCase_ = 0;
          subject_ = null;
        }
        userBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a key for a user account.
     * </pre>
     *
     * <code>.bloombox.identity.UserKey user = 11;</code>
     */
    public io.bloombox.schema.identity.AppUserKey.UserKey.Builder getUserBuilder() {
      return getUserFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Specifies a key for a user account.
     * </pre>
     *
     * <code>.bloombox.identity.UserKey user = 11;</code>
     */
    public io.bloombox.schema.identity.AppUserKey.UserKeyOrBuilder getUserOrBuilder() {
      if ((subjectCase_ == 11) && (userBuilder_ != null)) {
        return userBuilder_.getMessageOrBuilder();
      } else {
        if (subjectCase_ == 11) {
          return (io.bloombox.schema.identity.AppUserKey.UserKey) subject_;
        }
        return io.bloombox.schema.identity.AppUserKey.UserKey.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Specifies a key for a user account.
     * </pre>
     *
     * <code>.bloombox.identity.UserKey user = 11;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.bloombox.schema.identity.AppUserKey.UserKey, io.bloombox.schema.identity.AppUserKey.UserKey.Builder, io.bloombox.schema.identity.AppUserKey.UserKeyOrBuilder> 
        getUserFieldBuilder() {
      if (userBuilder_ == null) {
        if (!(subjectCase_ == 11)) {
          subject_ = io.bloombox.schema.identity.AppUserKey.UserKey.getDefaultInstance();
        }
        userBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.bloombox.schema.identity.AppUserKey.UserKey, io.bloombox.schema.identity.AppUserKey.UserKey.Builder, io.bloombox.schema.identity.AppUserKey.UserKeyOrBuilder>(
                (io.bloombox.schema.identity.AppUserKey.UserKey) subject_,
                getParentForChildren(),
                isClean());
        subject_ = null;
      }
      subjectCase_ = 11;
      onChanged();;
      return userBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.bloombox.schema.partner.PartnerMeta.PartnerKey, io.bloombox.schema.partner.PartnerMeta.PartnerKey.Builder, io.bloombox.schema.partner.PartnerMeta.PartnerKeyOrBuilder> partnerBuilder_;
    /**
     * <pre>
     * Specifies a key for a given partner organization.
     * </pre>
     *
     * <code>.bloombox.partner.PartnerKey partner = 12;</code>
     */
    public boolean hasPartner() {
      return subjectCase_ == 12;
    }
    /**
     * <pre>
     * Specifies a key for a given partner organization.
     * </pre>
     *
     * <code>.bloombox.partner.PartnerKey partner = 12;</code>
     */
    public io.bloombox.schema.partner.PartnerMeta.PartnerKey getPartner() {
      if (partnerBuilder_ == null) {
        if (subjectCase_ == 12) {
          return (io.bloombox.schema.partner.PartnerMeta.PartnerKey) subject_;
        }
        return io.bloombox.schema.partner.PartnerMeta.PartnerKey.getDefaultInstance();
      } else {
        if (subjectCase_ == 12) {
          return partnerBuilder_.getMessage();
        }
        return io.bloombox.schema.partner.PartnerMeta.PartnerKey.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Specifies a key for a given partner organization.
     * </pre>
     *
     * <code>.bloombox.partner.PartnerKey partner = 12;</code>
     */
    public Builder setPartner(io.bloombox.schema.partner.PartnerMeta.PartnerKey value) {
      if (partnerBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        subject_ = value;
        onChanged();
      } else {
        partnerBuilder_.setMessage(value);
      }
      subjectCase_ = 12;
      return this;
    }
    /**
     * <pre>
     * Specifies a key for a given partner organization.
     * </pre>
     *
     * <code>.bloombox.partner.PartnerKey partner = 12;</code>
     */
    public Builder setPartner(
        io.bloombox.schema.partner.PartnerMeta.PartnerKey.Builder builderForValue) {
      if (partnerBuilder_ == null) {
        subject_ = builderForValue.build();
        onChanged();
      } else {
        partnerBuilder_.setMessage(builderForValue.build());
      }
      subjectCase_ = 12;
      return this;
    }
    /**
     * <pre>
     * Specifies a key for a given partner organization.
     * </pre>
     *
     * <code>.bloombox.partner.PartnerKey partner = 12;</code>
     */
    public Builder mergePartner(io.bloombox.schema.partner.PartnerMeta.PartnerKey value) {
      if (partnerBuilder_ == null) {
        if (subjectCase_ == 12 &&
            subject_ != io.bloombox.schema.partner.PartnerMeta.PartnerKey.getDefaultInstance()) {
          subject_ = io.bloombox.schema.partner.PartnerMeta.PartnerKey.newBuilder((io.bloombox.schema.partner.PartnerMeta.PartnerKey) subject_)
              .mergeFrom(value).buildPartial();
        } else {
          subject_ = value;
        }
        onChanged();
      } else {
        if (subjectCase_ == 12) {
          partnerBuilder_.mergeFrom(value);
        }
        partnerBuilder_.setMessage(value);
      }
      subjectCase_ = 12;
      return this;
    }
    /**
     * <pre>
     * Specifies a key for a given partner organization.
     * </pre>
     *
     * <code>.bloombox.partner.PartnerKey partner = 12;</code>
     */
    public Builder clearPartner() {
      if (partnerBuilder_ == null) {
        if (subjectCase_ == 12) {
          subjectCase_ = 0;
          subject_ = null;
          onChanged();
        }
      } else {
        if (subjectCase_ == 12) {
          subjectCase_ = 0;
          subject_ = null;
        }
        partnerBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a key for a given partner organization.
     * </pre>
     *
     * <code>.bloombox.partner.PartnerKey partner = 12;</code>
     */
    public io.bloombox.schema.partner.PartnerMeta.PartnerKey.Builder getPartnerBuilder() {
      return getPartnerFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Specifies a key for a given partner organization.
     * </pre>
     *
     * <code>.bloombox.partner.PartnerKey partner = 12;</code>
     */
    public io.bloombox.schema.partner.PartnerMeta.PartnerKeyOrBuilder getPartnerOrBuilder() {
      if ((subjectCase_ == 12) && (partnerBuilder_ != null)) {
        return partnerBuilder_.getMessageOrBuilder();
      } else {
        if (subjectCase_ == 12) {
          return (io.bloombox.schema.partner.PartnerMeta.PartnerKey) subject_;
        }
        return io.bloombox.schema.partner.PartnerMeta.PartnerKey.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Specifies a key for a given partner organization.
     * </pre>
     *
     * <code>.bloombox.partner.PartnerKey partner = 12;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.bloombox.schema.partner.PartnerMeta.PartnerKey, io.bloombox.schema.partner.PartnerMeta.PartnerKey.Builder, io.bloombox.schema.partner.PartnerMeta.PartnerKeyOrBuilder> 
        getPartnerFieldBuilder() {
      if (partnerBuilder_ == null) {
        if (!(subjectCase_ == 12)) {
          subject_ = io.bloombox.schema.partner.PartnerMeta.PartnerKey.getDefaultInstance();
        }
        partnerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.bloombox.schema.partner.PartnerMeta.PartnerKey, io.bloombox.schema.partner.PartnerMeta.PartnerKey.Builder, io.bloombox.schema.partner.PartnerMeta.PartnerKeyOrBuilder>(
                (io.bloombox.schema.partner.PartnerMeta.PartnerKey) subject_,
                getParentForChildren(),
                isClean());
        subject_ = null;
      }
      subjectCase_ = 12;
      onChanged();;
      return partnerBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.bloombox.schema.partner.LocationAccountKey.LocationKey, io.bloombox.schema.partner.LocationAccountKey.LocationKey.Builder, io.bloombox.schema.partner.LocationAccountKey.LocationKeyOrBuilder> locationBuilder_;
    /**
     * <pre>
     * Specifies a key for a given partner location.
     * </pre>
     *
     * <code>.bloombox.partner.LocationKey location = 13;</code>
     */
    public boolean hasLocation() {
      return subjectCase_ == 13;
    }
    /**
     * <pre>
     * Specifies a key for a given partner location.
     * </pre>
     *
     * <code>.bloombox.partner.LocationKey location = 13;</code>
     */
    public io.bloombox.schema.partner.LocationAccountKey.LocationKey getLocation() {
      if (locationBuilder_ == null) {
        if (subjectCase_ == 13) {
          return (io.bloombox.schema.partner.LocationAccountKey.LocationKey) subject_;
        }
        return io.bloombox.schema.partner.LocationAccountKey.LocationKey.getDefaultInstance();
      } else {
        if (subjectCase_ == 13) {
          return locationBuilder_.getMessage();
        }
        return io.bloombox.schema.partner.LocationAccountKey.LocationKey.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Specifies a key for a given partner location.
     * </pre>
     *
     * <code>.bloombox.partner.LocationKey location = 13;</code>
     */
    public Builder setLocation(io.bloombox.schema.partner.LocationAccountKey.LocationKey value) {
      if (locationBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        subject_ = value;
        onChanged();
      } else {
        locationBuilder_.setMessage(value);
      }
      subjectCase_ = 13;
      return this;
    }
    /**
     * <pre>
     * Specifies a key for a given partner location.
     * </pre>
     *
     * <code>.bloombox.partner.LocationKey location = 13;</code>
     */
    public Builder setLocation(
        io.bloombox.schema.partner.LocationAccountKey.LocationKey.Builder builderForValue) {
      if (locationBuilder_ == null) {
        subject_ = builderForValue.build();
        onChanged();
      } else {
        locationBuilder_.setMessage(builderForValue.build());
      }
      subjectCase_ = 13;
      return this;
    }
    /**
     * <pre>
     * Specifies a key for a given partner location.
     * </pre>
     *
     * <code>.bloombox.partner.LocationKey location = 13;</code>
     */
    public Builder mergeLocation(io.bloombox.schema.partner.LocationAccountKey.LocationKey value) {
      if (locationBuilder_ == null) {
        if (subjectCase_ == 13 &&
            subject_ != io.bloombox.schema.partner.LocationAccountKey.LocationKey.getDefaultInstance()) {
          subject_ = io.bloombox.schema.partner.LocationAccountKey.LocationKey.newBuilder((io.bloombox.schema.partner.LocationAccountKey.LocationKey) subject_)
              .mergeFrom(value).buildPartial();
        } else {
          subject_ = value;
        }
        onChanged();
      } else {
        if (subjectCase_ == 13) {
          locationBuilder_.mergeFrom(value);
        }
        locationBuilder_.setMessage(value);
      }
      subjectCase_ = 13;
      return this;
    }
    /**
     * <pre>
     * Specifies a key for a given partner location.
     * </pre>
     *
     * <code>.bloombox.partner.LocationKey location = 13;</code>
     */
    public Builder clearLocation() {
      if (locationBuilder_ == null) {
        if (subjectCase_ == 13) {
          subjectCase_ = 0;
          subject_ = null;
          onChanged();
        }
      } else {
        if (subjectCase_ == 13) {
          subjectCase_ = 0;
          subject_ = null;
        }
        locationBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Specifies a key for a given partner location.
     * </pre>
     *
     * <code>.bloombox.partner.LocationKey location = 13;</code>
     */
    public io.bloombox.schema.partner.LocationAccountKey.LocationKey.Builder getLocationBuilder() {
      return getLocationFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Specifies a key for a given partner location.
     * </pre>
     *
     * <code>.bloombox.partner.LocationKey location = 13;</code>
     */
    public io.bloombox.schema.partner.LocationAccountKey.LocationKeyOrBuilder getLocationOrBuilder() {
      if ((subjectCase_ == 13) && (locationBuilder_ != null)) {
        return locationBuilder_.getMessageOrBuilder();
      } else {
        if (subjectCase_ == 13) {
          return (io.bloombox.schema.partner.LocationAccountKey.LocationKey) subject_;
        }
        return io.bloombox.schema.partner.LocationAccountKey.LocationKey.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Specifies a key for a given partner location.
     * </pre>
     *
     * <code>.bloombox.partner.LocationKey location = 13;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.bloombox.schema.partner.LocationAccountKey.LocationKey, io.bloombox.schema.partner.LocationAccountKey.LocationKey.Builder, io.bloombox.schema.partner.LocationAccountKey.LocationKeyOrBuilder> 
        getLocationFieldBuilder() {
      if (locationBuilder_ == null) {
        if (!(subjectCase_ == 13)) {
          subject_ = io.bloombox.schema.partner.LocationAccountKey.LocationKey.getDefaultInstance();
        }
        locationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.bloombox.schema.partner.LocationAccountKey.LocationKey, io.bloombox.schema.partner.LocationAccountKey.LocationKey.Builder, io.bloombox.schema.partner.LocationAccountKey.LocationKeyOrBuilder>(
                (io.bloombox.schema.partner.LocationAccountKey.LocationKey) subject_,
                getParentForChildren(),
                isClean());
        subject_ = null;
      }
      subjectCase_ = 13;
      onChanged();;
      return locationBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.bloombox.schema.ledger.LedgerNode.Node, io.bloombox.schema.ledger.LedgerNode.Node.Builder, io.bloombox.schema.ledger.LedgerNode.NodeOrBuilder> nodeBuilder_;
    /**
     * <pre>
     * Specifies details about an operating node.
     * </pre>
     *
     * <code>.bloombox.ledger.Node node = 14;</code>
     */
    public boolean hasNode() {
      return subjectCase_ == 14;
    }
    /**
     * <pre>
     * Specifies details about an operating node.
     * </pre>
     *
     * <code>.bloombox.ledger.Node node = 14;</code>
     */
    public io.bloombox.schema.ledger.LedgerNode.Node getNode() {
      if (nodeBuilder_ == null) {
        if (subjectCase_ == 14) {
          return (io.bloombox.schema.ledger.LedgerNode.Node) subject_;
        }
        return io.bloombox.schema.ledger.LedgerNode.Node.getDefaultInstance();
      } else {
        if (subjectCase_ == 14) {
          return nodeBuilder_.getMessage();
        }
        return io.bloombox.schema.ledger.LedgerNode.Node.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Specifies details about an operating node.
     * </pre>
     *
     * <code>.bloombox.ledger.Node node = 14;</code>
     */
    public Builder setNode(io.bloombox.schema.ledger.LedgerNode.Node value) {
      if (nodeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        subject_ = value;
        onChanged();
      } else {
        nodeBuilder_.setMessage(value);
      }
      subjectCase_ = 14;
      return this;
    }
    /**
     * <pre>
     * Specifies details about an operating node.
     * </pre>
     *
     * <code>.bloombox.ledger.Node node = 14;</code>
     */
    public Builder setNode(
        io.bloombox.schema.ledger.LedgerNode.Node.Builder builderForValue) {
      if (nodeBuilder_ == null) {
        subject_ = builderForValue.build();
        onChanged();
      } else {
        nodeBuilder_.setMessage(builderForValue.build());
      }
      subjectCase_ = 14;
      return this;
    }
    /**
     * <pre>
     * Specifies details about an operating node.
     * </pre>
     *
     * <code>.bloombox.ledger.Node node = 14;</code>
     */
    public Builder mergeNode(io.bloombox.schema.ledger.LedgerNode.Node value) {
      if (nodeBuilder_ == null) {
        if (subjectCase_ == 14 &&
            subject_ != io.bloombox.schema.ledger.LedgerNode.Node.getDefaultInstance()) {
          subject_ = io.bloombox.schema.ledger.LedgerNode.Node.newBuilder((io.bloombox.schema.ledger.LedgerNode.Node) subject_)
              .mergeFrom(value).buildPartial();
        } else {
          subject_ = value;
        }
        onChanged();
      } else {
        if (subjectCase_ == 14) {
          nodeBuilder_.mergeFrom(value);
        }
        nodeBuilder_.setMessage(value);
      }
      subjectCase_ = 14;
      return this;
    }
    /**
     * <pre>
     * Specifies details about an operating node.
     * </pre>
     *
     * <code>.bloombox.ledger.Node node = 14;</code>
     */
    public Builder clearNode() {
      if (nodeBuilder_ == null) {
        if (subjectCase_ == 14) {
          subjectCase_ = 0;
          subject_ = null;
          onChanged();
        }
      } else {
        if (subjectCase_ == 14) {
          subjectCase_ = 0;
          subject_ = null;
        }
        nodeBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Specifies details about an operating node.
     * </pre>
     *
     * <code>.bloombox.ledger.Node node = 14;</code>
     */
    public io.bloombox.schema.ledger.LedgerNode.Node.Builder getNodeBuilder() {
      return getNodeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Specifies details about an operating node.
     * </pre>
     *
     * <code>.bloombox.ledger.Node node = 14;</code>
     */
    public io.bloombox.schema.ledger.LedgerNode.NodeOrBuilder getNodeOrBuilder() {
      if ((subjectCase_ == 14) && (nodeBuilder_ != null)) {
        return nodeBuilder_.getMessageOrBuilder();
      } else {
        if (subjectCase_ == 14) {
          return (io.bloombox.schema.ledger.LedgerNode.Node) subject_;
        }
        return io.bloombox.schema.ledger.LedgerNode.Node.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Specifies details about an operating node.
     * </pre>
     *
     * <code>.bloombox.ledger.Node node = 14;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.bloombox.schema.ledger.LedgerNode.Node, io.bloombox.schema.ledger.LedgerNode.Node.Builder, io.bloombox.schema.ledger.LedgerNode.NodeOrBuilder> 
        getNodeFieldBuilder() {
      if (nodeBuilder_ == null) {
        if (!(subjectCase_ == 14)) {
          subject_ = io.bloombox.schema.ledger.LedgerNode.Node.getDefaultInstance();
        }
        nodeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.bloombox.schema.ledger.LedgerNode.Node, io.bloombox.schema.ledger.LedgerNode.Node.Builder, io.bloombox.schema.ledger.LedgerNode.NodeOrBuilder>(
                (io.bloombox.schema.ledger.LedgerNode.Node) subject_,
                getParentForChildren(),
                isClean());
        subject_ = null;
      }
      subjectCase_ = 14;
      onChanged();;
      return nodeBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:bloombox.services.identity.v1beta1.KeyOwnership)
  }

  // @@protoc_insertion_point(class_scope:bloombox.services.identity.v1beta1.KeyOwnership)
  private static final io.bloombox.schema.services.identity.v1beta1.KeyOwnership DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.bloombox.schema.services.identity.v1beta1.KeyOwnership();
  }

  public static io.bloombox.schema.services.identity.v1beta1.KeyOwnership getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<KeyOwnership>
      PARSER = new com.google.protobuf.AbstractParser<KeyOwnership>() {
    @java.lang.Override
    public KeyOwnership parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new KeyOwnership(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<KeyOwnership> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<KeyOwnership> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.bloombox.schema.services.identity.v1beta1.KeyOwnership getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

