/*
 * Copyright 2019, Momentum Ideas, Co. All rights reserved.
 *
 * Source and object computer code contained herein is the private intellectual
 * property of Momentum Ideas Co., a Delaware Corporation. Use of this
 * code in source form requires permission in writing before use or the
 * assembly, distribution, or publishing of derivative works, for commercial
 * purposes or any other purpose, from a duly authorized officer of Momentum
 * Ideas Co.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: identity/v1beta1/IdentityService_Beta1.proto

package io.bloombox.schema.services.identity.v1beta1;

public interface KeyOwnershipOrBuilder extends
    // @@protoc_insertion_point(interface_extends:bloombox.services.identity.v1beta1.KeyOwnership)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Specifies the type of owner that owns this key.
   * </pre>
   *
   * <code>.bloombox.services.identity.v1beta1.KeyOwnership.OwnerType type = 1;</code>
   */
  int getTypeValue();
  /**
   * <pre>
   * Specifies the type of owner that owns this key.
   * </pre>
   *
   * <code>.bloombox.services.identity.v1beta1.KeyOwnership.OwnerType type = 1;</code>
   */
  io.bloombox.schema.services.identity.v1beta1.KeyOwnership.OwnerType getType();

  /**
   * <pre>
   * Specifies a key for an individual partner co-located device.
   * </pre>
   *
   * <code>.bloombox.partner.PartnerDeviceKey device = 10;</code>
   */
  boolean hasDevice();
  /**
   * <pre>
   * Specifies a key for an individual partner co-located device.
   * </pre>
   *
   * <code>.bloombox.partner.PartnerDeviceKey device = 10;</code>
   */
  io.bloombox.schema.partner.PartnerDevices.PartnerDeviceKey getDevice();
  /**
   * <pre>
   * Specifies a key for an individual partner co-located device.
   * </pre>
   *
   * <code>.bloombox.partner.PartnerDeviceKey device = 10;</code>
   */
  io.bloombox.schema.partner.PartnerDevices.PartnerDeviceKeyOrBuilder getDeviceOrBuilder();

  /**
   * <pre>
   * Specifies a key for a user account.
   * </pre>
   *
   * <code>.bloombox.identity.UserKey user = 11;</code>
   */
  boolean hasUser();
  /**
   * <pre>
   * Specifies a key for a user account.
   * </pre>
   *
   * <code>.bloombox.identity.UserKey user = 11;</code>
   */
  io.bloombox.schema.identity.AppUserKey.UserKey getUser();
  /**
   * <pre>
   * Specifies a key for a user account.
   * </pre>
   *
   * <code>.bloombox.identity.UserKey user = 11;</code>
   */
  io.bloombox.schema.identity.AppUserKey.UserKeyOrBuilder getUserOrBuilder();

  /**
   * <pre>
   * Specifies a key for a given partner organization.
   * </pre>
   *
   * <code>.bloombox.partner.PartnerKey partner = 12;</code>
   */
  boolean hasPartner();
  /**
   * <pre>
   * Specifies a key for a given partner organization.
   * </pre>
   *
   * <code>.bloombox.partner.PartnerKey partner = 12;</code>
   */
  io.bloombox.schema.partner.PartnerMeta.PartnerKey getPartner();
  /**
   * <pre>
   * Specifies a key for a given partner organization.
   * </pre>
   *
   * <code>.bloombox.partner.PartnerKey partner = 12;</code>
   */
  io.bloombox.schema.partner.PartnerMeta.PartnerKeyOrBuilder getPartnerOrBuilder();

  /**
   * <pre>
   * Specifies a key for a given partner location.
   * </pre>
   *
   * <code>.bloombox.partner.LocationKey location = 13;</code>
   */
  boolean hasLocation();
  /**
   * <pre>
   * Specifies a key for a given partner location.
   * </pre>
   *
   * <code>.bloombox.partner.LocationKey location = 13;</code>
   */
  io.bloombox.schema.partner.LocationAccountKey.LocationKey getLocation();
  /**
   * <pre>
   * Specifies a key for a given partner location.
   * </pre>
   *
   * <code>.bloombox.partner.LocationKey location = 13;</code>
   */
  io.bloombox.schema.partner.LocationAccountKey.LocationKeyOrBuilder getLocationOrBuilder();

  /**
   * <pre>
   * Specifies details about an operating node.
   * </pre>
   *
   * <code>.bloombox.ledger.Node node = 14;</code>
   */
  boolean hasNode();
  /**
   * <pre>
   * Specifies details about an operating node.
   * </pre>
   *
   * <code>.bloombox.ledger.Node node = 14;</code>
   */
  io.bloombox.schema.ledger.LedgerNode.Node getNode();
  /**
   * <pre>
   * Specifies details about an operating node.
   * </pre>
   *
   * <code>.bloombox.ledger.Node node = 14;</code>
   */
  io.bloombox.schema.ledger.LedgerNode.NodeOrBuilder getNodeOrBuilder();

  public io.bloombox.schema.services.identity.v1beta1.KeyOwnership.SubjectCase getSubjectCase();
}
