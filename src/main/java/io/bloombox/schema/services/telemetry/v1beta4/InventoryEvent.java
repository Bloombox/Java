/*
 * Copyright 2019, Momentum Ideas, Co. All rights reserved.
 *
 * Source and object computer code contained herein is the private intellectual
 * property of Momentum Ideas Co., a Delaware Corporation. Use of this
 * code in source form requires permission in writing before use or the
 * assembly, distribution, or publishing of derivative works, for commercial
 * purposes or any other purpose, from a duly authorized officer of Momentum
 * Ideas Co.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: telemetry/v1beta4/TelemetryService_Beta4.proto

package io.bloombox.schema.services.telemetry.v1beta4;

/**
 * <pre>
 * Specifies an event triggered by some inventory condition observed in the physical on-site environment. This may be
 * readings reported by RFID or barcode readers, events from the point-of-sale system, and more.
 * </pre>
 *
 * Protobuf type {@code bloombox.services.telemetry.v1beta4.InventoryEvent}
 */
public  final class InventoryEvent extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:bloombox.services.telemetry.v1beta4.InventoryEvent)
    InventoryEventOrBuilder {
private static final long serialVersionUID = 0L;
  // Use InventoryEvent.newBuilder() to construct.
  private InventoryEvent(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private InventoryEvent() {
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private InventoryEvent(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    if (extensionRegistry == null) {
      throw new java.lang.NullPointerException();
    }
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          case 82: {
            io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter.Builder subBuilder = null;
            if (eventCase_ == 10) {
              subBuilder = ((io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter) event_).toBuilder();
            }
            event_ =
                input.readMessage(io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter) event_);
              event_ = subBuilder.buildPartial();
            }
            eventCase_ = 10;
            break;
          }
          case 90: {
            io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake.Builder subBuilder = null;
            if (eventCase_ == 11) {
              subBuilder = ((io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake) event_).toBuilder();
            }
            event_ =
                input.readMessage(io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake) event_);
              event_ = subBuilder.buildPartial();
            }
            eventCase_ = 11;
            break;
          }
          case 98: {
            io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate.Builder subBuilder = null;
            if (eventCase_ == 12) {
              subBuilder = ((io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate) event_).toBuilder();
            }
            event_ =
                input.readMessage(io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate) event_);
              event_ = subBuilder.buildPartial();
            }
            eventCase_ = 12;
            break;
          }
          case 106: {
            io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer.Builder subBuilder = null;
            if (eventCase_ == 13) {
              subBuilder = ((io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer) event_).toBuilder();
            }
            event_ =
                input.readMessage(io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer) event_);
              event_ = subBuilder.buildPartial();
            }
            eventCase_ = 13;
            break;
          }
          case 114: {
            io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve.Builder subBuilder = null;
            if (eventCase_ == 14) {
              subBuilder = ((io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve) event_).toBuilder();
            }
            event_ =
                input.readMessage(io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve) event_);
              event_ = subBuilder.buildPartial();
            }
            eventCase_ = 14;
            break;
          }
          case 122: {
            io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel.Builder subBuilder = null;
            if (eventCase_ == 15) {
              subBuilder = ((io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel) event_).toBuilder();
            }
            event_ =
                input.readMessage(io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel) event_);
              event_ = subBuilder.buildPartial();
            }
            eventCase_ = 15;
            break;
          }
          case 130: {
            io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume.Builder subBuilder = null;
            if (eventCase_ == 16) {
              subBuilder = ((io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume) event_).toBuilder();
            }
            event_ =
                input.readMessage(io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume.parser(), extensionRegistry);
            if (subBuilder != null) {
              subBuilder.mergeFrom((io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume) event_);
              event_ = subBuilder.buildPartial();
            }
            eventCase_ = 16;
            break;
          }
          default: {
            if (!parseUnknownField(
                input, unknownFields, extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.class, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Builder.class);
  }

  public interface EncounterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:bloombox.services.telemetry.v1beta4.InventoryEvent.Encounter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 1;</code>
     */
    boolean hasEvent();
    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 1;</code>
     */
    io.bloombox.schema.services.telemetry.v1beta4.InventoryContext getEvent();
    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 1;</code>
     */
    io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder getEventOrBuilder();

    /**
     * <pre>
     * Describes the origin of the tag report we are transmitting, including the reader device that produced it, and the
     * partner/location scope assigned to the reader.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.TagReportOrigin origin = 2;</code>
     */
    boolean hasOrigin();
    /**
     * <pre>
     * Describes the origin of the tag report we are transmitting, including the reader device that produced it, and the
     * partner/location scope assigned to the reader.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.TagReportOrigin origin = 2;</code>
     */
    io.opencannabis.schema.inventory.TagReportOrigin getOrigin();
    /**
     * <pre>
     * Describes the origin of the tag report we are transmitting, including the reader device that produced it, and the
     * partner/location scope assigned to the reader.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.TagReportOrigin origin = 2;</code>
     */
    io.opencannabis.schema.inventory.TagReportOriginOrBuilder getOriginOrBuilder();

    /**
     * <pre>
     * Specifies the report of identified RFID tags from a given origin. RFID reports may be batched by an individual
     * device within some configurable interval, which is also transmitted with the payload.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.rfid.TagReport rfid = 3;</code>
     */
    java.util.List<io.opencannabis.schema.inventory.TagReport> 
        getRfidList();
    /**
     * <pre>
     * Specifies the report of identified RFID tags from a given origin. RFID reports may be batched by an individual
     * device within some configurable interval, which is also transmitted with the payload.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.rfid.TagReport rfid = 3;</code>
     */
    io.opencannabis.schema.inventory.TagReport getRfid(int index);
    /**
     * <pre>
     * Specifies the report of identified RFID tags from a given origin. RFID reports may be batched by an individual
     * device within some configurable interval, which is also transmitted with the payload.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.rfid.TagReport rfid = 3;</code>
     */
    int getRfidCount();
    /**
     * <pre>
     * Specifies the report of identified RFID tags from a given origin. RFID reports may be batched by an individual
     * device within some configurable interval, which is also transmitted with the payload.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.rfid.TagReport rfid = 3;</code>
     */
    java.util.List<? extends io.opencannabis.schema.inventory.TagReportOrBuilder> 
        getRfidOrBuilderList();
    /**
     * <pre>
     * Specifies the report of identified RFID tags from a given origin. RFID reports may be batched by an individual
     * device within some configurable interval, which is also transmitted with the payload.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.rfid.TagReport rfid = 3;</code>
     */
    io.opencannabis.schema.inventory.TagReportOrBuilder getRfidOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Describes an encounter with tagged inventory items, from some automated system. Encounters can occur with RFID
   * tags, 2D bar codes, and NFC tags. Any universal inventory key may be referenced via an inventory encounter.
   * </pre>
   *
   * Protobuf type {@code bloombox.services.telemetry.v1beta4.InventoryEvent.Encounter}
   */
  public  static final class Encounter extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:bloombox.services.telemetry.v1beta4.InventoryEvent.Encounter)
      EncounterOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Encounter.newBuilder() to construct.
    private Encounter(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Encounter() {
      rfid_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Encounter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder subBuilder = null;
              if (event_ != null) {
                subBuilder = event_.toBuilder();
              }
              event_ = input.readMessage(io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(event_);
                event_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              io.opencannabis.schema.inventory.TagReportOrigin.Builder subBuilder = null;
              if (origin_ != null) {
                subBuilder = origin_.toBuilder();
              }
              origin_ = input.readMessage(io.opencannabis.schema.inventory.TagReportOrigin.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(origin_);
                origin_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                rfid_ = new java.util.ArrayList<io.opencannabis.schema.inventory.TagReport>();
                mutable_bitField0_ |= 0x00000004;
              }
              rfid_.add(
                  input.readMessage(io.opencannabis.schema.inventory.TagReport.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          rfid_ = java.util.Collections.unmodifiableList(rfid_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_Encounter_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_Encounter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter.class, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter.Builder.class);
    }

    private int bitField0_;
    public static final int EVENT_FIELD_NUMBER = 1;
    private io.bloombox.schema.services.telemetry.v1beta4.InventoryContext event_;
    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 1;</code>
     */
    public boolean hasEvent() {
      return event_ != null;
    }
    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 1;</code>
     */
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryContext getEvent() {
      return event_ == null ? io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.getDefaultInstance() : event_;
    }
    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 1;</code>
     */
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder getEventOrBuilder() {
      return getEvent();
    }

    public static final int ORIGIN_FIELD_NUMBER = 2;
    private io.opencannabis.schema.inventory.TagReportOrigin origin_;
    /**
     * <pre>
     * Describes the origin of the tag report we are transmitting, including the reader device that produced it, and the
     * partner/location scope assigned to the reader.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.TagReportOrigin origin = 2;</code>
     */
    public boolean hasOrigin() {
      return origin_ != null;
    }
    /**
     * <pre>
     * Describes the origin of the tag report we are transmitting, including the reader device that produced it, and the
     * partner/location scope assigned to the reader.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.TagReportOrigin origin = 2;</code>
     */
    public io.opencannabis.schema.inventory.TagReportOrigin getOrigin() {
      return origin_ == null ? io.opencannabis.schema.inventory.TagReportOrigin.getDefaultInstance() : origin_;
    }
    /**
     * <pre>
     * Describes the origin of the tag report we are transmitting, including the reader device that produced it, and the
     * partner/location scope assigned to the reader.
     * </pre>
     *
     * <code>.opencannabis.inventory.rfid.TagReportOrigin origin = 2;</code>
     */
    public io.opencannabis.schema.inventory.TagReportOriginOrBuilder getOriginOrBuilder() {
      return getOrigin();
    }

    public static final int RFID_FIELD_NUMBER = 3;
    private java.util.List<io.opencannabis.schema.inventory.TagReport> rfid_;
    /**
     * <pre>
     * Specifies the report of identified RFID tags from a given origin. RFID reports may be batched by an individual
     * device within some configurable interval, which is also transmitted with the payload.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.rfid.TagReport rfid = 3;</code>
     */
    public java.util.List<io.opencannabis.schema.inventory.TagReport> getRfidList() {
      return rfid_;
    }
    /**
     * <pre>
     * Specifies the report of identified RFID tags from a given origin. RFID reports may be batched by an individual
     * device within some configurable interval, which is also transmitted with the payload.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.rfid.TagReport rfid = 3;</code>
     */
    public java.util.List<? extends io.opencannabis.schema.inventory.TagReportOrBuilder> 
        getRfidOrBuilderList() {
      return rfid_;
    }
    /**
     * <pre>
     * Specifies the report of identified RFID tags from a given origin. RFID reports may be batched by an individual
     * device within some configurable interval, which is also transmitted with the payload.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.rfid.TagReport rfid = 3;</code>
     */
    public int getRfidCount() {
      return rfid_.size();
    }
    /**
     * <pre>
     * Specifies the report of identified RFID tags from a given origin. RFID reports may be batched by an individual
     * device within some configurable interval, which is also transmitted with the payload.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.rfid.TagReport rfid = 3;</code>
     */
    public io.opencannabis.schema.inventory.TagReport getRfid(int index) {
      return rfid_.get(index);
    }
    /**
     * <pre>
     * Specifies the report of identified RFID tags from a given origin. RFID reports may be batched by an individual
     * device within some configurable interval, which is also transmitted with the payload.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.rfid.TagReport rfid = 3;</code>
     */
    public io.opencannabis.schema.inventory.TagReportOrBuilder getRfidOrBuilder(
        int index) {
      return rfid_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (event_ != null) {
        output.writeMessage(1, getEvent());
      }
      if (origin_ != null) {
        output.writeMessage(2, getOrigin());
      }
      for (int i = 0; i < rfid_.size(); i++) {
        output.writeMessage(3, rfid_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (event_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getEvent());
      }
      if (origin_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getOrigin());
      }
      for (int i = 0; i < rfid_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, rfid_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter)) {
        return super.equals(obj);
      }
      io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter other = (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter) obj;

      if (hasEvent() != other.hasEvent()) return false;
      if (hasEvent()) {
        if (!getEvent()
            .equals(other.getEvent())) return false;
      }
      if (hasOrigin() != other.hasOrigin()) return false;
      if (hasOrigin()) {
        if (!getOrigin()
            .equals(other.getOrigin())) return false;
      }
      if (!getRfidList()
          .equals(other.getRfidList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasEvent()) {
        hash = (37 * hash) + EVENT_FIELD_NUMBER;
        hash = (53 * hash) + getEvent().hashCode();
      }
      if (hasOrigin()) {
        hash = (37 * hash) + ORIGIN_FIELD_NUMBER;
        hash = (53 * hash) + getOrigin().hashCode();
      }
      if (getRfidCount() > 0) {
        hash = (37 * hash) + RFID_FIELD_NUMBER;
        hash = (53 * hash) + getRfidList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Describes an encounter with tagged inventory items, from some automated system. Encounters can occur with RFID
     * tags, 2D bar codes, and NFC tags. Any universal inventory key may be referenced via an inventory encounter.
     * </pre>
     *
     * Protobuf type {@code bloombox.services.telemetry.v1beta4.InventoryEvent.Encounter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:bloombox.services.telemetry.v1beta4.InventoryEvent.Encounter)
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.EncounterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_Encounter_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_Encounter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter.class, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter.Builder.class);
      }

      // Construct using io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getRfidFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (eventBuilder_ == null) {
          event_ = null;
        } else {
          event_ = null;
          eventBuilder_ = null;
        }
        if (originBuilder_ == null) {
          origin_ = null;
        } else {
          origin_ = null;
          originBuilder_ = null;
        }
        if (rfidBuilder_ == null) {
          rfid_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          rfidBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_Encounter_descriptor;
      }

      @java.lang.Override
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter getDefaultInstanceForType() {
        return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter.getDefaultInstance();
      }

      @java.lang.Override
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter build() {
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter buildPartial() {
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter result = new io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (eventBuilder_ == null) {
          result.event_ = event_;
        } else {
          result.event_ = eventBuilder_.build();
        }
        if (originBuilder_ == null) {
          result.origin_ = origin_;
        } else {
          result.origin_ = originBuilder_.build();
        }
        if (rfidBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            rfid_ = java.util.Collections.unmodifiableList(rfid_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.rfid_ = rfid_;
        } else {
          result.rfid_ = rfidBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter) {
          return mergeFrom((io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter other) {
        if (other == io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter.getDefaultInstance()) return this;
        if (other.hasEvent()) {
          mergeEvent(other.getEvent());
        }
        if (other.hasOrigin()) {
          mergeOrigin(other.getOrigin());
        }
        if (rfidBuilder_ == null) {
          if (!other.rfid_.isEmpty()) {
            if (rfid_.isEmpty()) {
              rfid_ = other.rfid_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureRfidIsMutable();
              rfid_.addAll(other.rfid_);
            }
            onChanged();
          }
        } else {
          if (!other.rfid_.isEmpty()) {
            if (rfidBuilder_.isEmpty()) {
              rfidBuilder_.dispose();
              rfidBuilder_ = null;
              rfid_ = other.rfid_;
              bitField0_ = (bitField0_ & ~0x00000004);
              rfidBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getRfidFieldBuilder() : null;
            } else {
              rfidBuilder_.addAllMessages(other.rfid_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private io.bloombox.schema.services.telemetry.v1beta4.InventoryContext event_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.services.telemetry.v1beta4.InventoryContext, io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder> eventBuilder_;
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 1;</code>
       */
      public boolean hasEvent() {
        return eventBuilder_ != null || event_ != null;
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 1;</code>
       */
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryContext getEvent() {
        if (eventBuilder_ == null) {
          return event_ == null ? io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.getDefaultInstance() : event_;
        } else {
          return eventBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 1;</code>
       */
      public Builder setEvent(io.bloombox.schema.services.telemetry.v1beta4.InventoryContext value) {
        if (eventBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          event_ = value;
          onChanged();
        } else {
          eventBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 1;</code>
       */
      public Builder setEvent(
          io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder builderForValue) {
        if (eventBuilder_ == null) {
          event_ = builderForValue.build();
          onChanged();
        } else {
          eventBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 1;</code>
       */
      public Builder mergeEvent(io.bloombox.schema.services.telemetry.v1beta4.InventoryContext value) {
        if (eventBuilder_ == null) {
          if (event_ != null) {
            event_ =
              io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.newBuilder(event_).mergeFrom(value).buildPartial();
          } else {
            event_ = value;
          }
          onChanged();
        } else {
          eventBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 1;</code>
       */
      public Builder clearEvent() {
        if (eventBuilder_ == null) {
          event_ = null;
          onChanged();
        } else {
          event_ = null;
          eventBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 1;</code>
       */
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder getEventBuilder() {
        
        onChanged();
        return getEventFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 1;</code>
       */
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder getEventOrBuilder() {
        if (eventBuilder_ != null) {
          return eventBuilder_.getMessageOrBuilder();
        } else {
          return event_ == null ?
              io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.getDefaultInstance() : event_;
        }
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.services.telemetry.v1beta4.InventoryContext, io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder> 
          getEventFieldBuilder() {
        if (eventBuilder_ == null) {
          eventBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.bloombox.schema.services.telemetry.v1beta4.InventoryContext, io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder>(
                  getEvent(),
                  getParentForChildren(),
                  isClean());
          event_ = null;
        }
        return eventBuilder_;
      }

      private io.opencannabis.schema.inventory.TagReportOrigin origin_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.inventory.TagReportOrigin, io.opencannabis.schema.inventory.TagReportOrigin.Builder, io.opencannabis.schema.inventory.TagReportOriginOrBuilder> originBuilder_;
      /**
       * <pre>
       * Describes the origin of the tag report we are transmitting, including the reader device that produced it, and the
       * partner/location scope assigned to the reader.
       * </pre>
       *
       * <code>.opencannabis.inventory.rfid.TagReportOrigin origin = 2;</code>
       */
      public boolean hasOrigin() {
        return originBuilder_ != null || origin_ != null;
      }
      /**
       * <pre>
       * Describes the origin of the tag report we are transmitting, including the reader device that produced it, and the
       * partner/location scope assigned to the reader.
       * </pre>
       *
       * <code>.opencannabis.inventory.rfid.TagReportOrigin origin = 2;</code>
       */
      public io.opencannabis.schema.inventory.TagReportOrigin getOrigin() {
        if (originBuilder_ == null) {
          return origin_ == null ? io.opencannabis.schema.inventory.TagReportOrigin.getDefaultInstance() : origin_;
        } else {
          return originBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Describes the origin of the tag report we are transmitting, including the reader device that produced it, and the
       * partner/location scope assigned to the reader.
       * </pre>
       *
       * <code>.opencannabis.inventory.rfid.TagReportOrigin origin = 2;</code>
       */
      public Builder setOrigin(io.opencannabis.schema.inventory.TagReportOrigin value) {
        if (originBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          origin_ = value;
          onChanged();
        } else {
          originBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Describes the origin of the tag report we are transmitting, including the reader device that produced it, and the
       * partner/location scope assigned to the reader.
       * </pre>
       *
       * <code>.opencannabis.inventory.rfid.TagReportOrigin origin = 2;</code>
       */
      public Builder setOrigin(
          io.opencannabis.schema.inventory.TagReportOrigin.Builder builderForValue) {
        if (originBuilder_ == null) {
          origin_ = builderForValue.build();
          onChanged();
        } else {
          originBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Describes the origin of the tag report we are transmitting, including the reader device that produced it, and the
       * partner/location scope assigned to the reader.
       * </pre>
       *
       * <code>.opencannabis.inventory.rfid.TagReportOrigin origin = 2;</code>
       */
      public Builder mergeOrigin(io.opencannabis.schema.inventory.TagReportOrigin value) {
        if (originBuilder_ == null) {
          if (origin_ != null) {
            origin_ =
              io.opencannabis.schema.inventory.TagReportOrigin.newBuilder(origin_).mergeFrom(value).buildPartial();
          } else {
            origin_ = value;
          }
          onChanged();
        } else {
          originBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Describes the origin of the tag report we are transmitting, including the reader device that produced it, and the
       * partner/location scope assigned to the reader.
       * </pre>
       *
       * <code>.opencannabis.inventory.rfid.TagReportOrigin origin = 2;</code>
       */
      public Builder clearOrigin() {
        if (originBuilder_ == null) {
          origin_ = null;
          onChanged();
        } else {
          origin_ = null;
          originBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Describes the origin of the tag report we are transmitting, including the reader device that produced it, and the
       * partner/location scope assigned to the reader.
       * </pre>
       *
       * <code>.opencannabis.inventory.rfid.TagReportOrigin origin = 2;</code>
       */
      public io.opencannabis.schema.inventory.TagReportOrigin.Builder getOriginBuilder() {
        
        onChanged();
        return getOriginFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Describes the origin of the tag report we are transmitting, including the reader device that produced it, and the
       * partner/location scope assigned to the reader.
       * </pre>
       *
       * <code>.opencannabis.inventory.rfid.TagReportOrigin origin = 2;</code>
       */
      public io.opencannabis.schema.inventory.TagReportOriginOrBuilder getOriginOrBuilder() {
        if (originBuilder_ != null) {
          return originBuilder_.getMessageOrBuilder();
        } else {
          return origin_ == null ?
              io.opencannabis.schema.inventory.TagReportOrigin.getDefaultInstance() : origin_;
        }
      }
      /**
       * <pre>
       * Describes the origin of the tag report we are transmitting, including the reader device that produced it, and the
       * partner/location scope assigned to the reader.
       * </pre>
       *
       * <code>.opencannabis.inventory.rfid.TagReportOrigin origin = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.inventory.TagReportOrigin, io.opencannabis.schema.inventory.TagReportOrigin.Builder, io.opencannabis.schema.inventory.TagReportOriginOrBuilder> 
          getOriginFieldBuilder() {
        if (originBuilder_ == null) {
          originBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.opencannabis.schema.inventory.TagReportOrigin, io.opencannabis.schema.inventory.TagReportOrigin.Builder, io.opencannabis.schema.inventory.TagReportOriginOrBuilder>(
                  getOrigin(),
                  getParentForChildren(),
                  isClean());
          origin_ = null;
        }
        return originBuilder_;
      }

      private java.util.List<io.opencannabis.schema.inventory.TagReport> rfid_ =
        java.util.Collections.emptyList();
      private void ensureRfidIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          rfid_ = new java.util.ArrayList<io.opencannabis.schema.inventory.TagReport>(rfid_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.opencannabis.schema.inventory.TagReport, io.opencannabis.schema.inventory.TagReport.Builder, io.opencannabis.schema.inventory.TagReportOrBuilder> rfidBuilder_;

      /**
       * <pre>
       * Specifies the report of identified RFID tags from a given origin. RFID reports may be batched by an individual
       * device within some configurable interval, which is also transmitted with the payload.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.rfid.TagReport rfid = 3;</code>
       */
      public java.util.List<io.opencannabis.schema.inventory.TagReport> getRfidList() {
        if (rfidBuilder_ == null) {
          return java.util.Collections.unmodifiableList(rfid_);
        } else {
          return rfidBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Specifies the report of identified RFID tags from a given origin. RFID reports may be batched by an individual
       * device within some configurable interval, which is also transmitted with the payload.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.rfid.TagReport rfid = 3;</code>
       */
      public int getRfidCount() {
        if (rfidBuilder_ == null) {
          return rfid_.size();
        } else {
          return rfidBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Specifies the report of identified RFID tags from a given origin. RFID reports may be batched by an individual
       * device within some configurable interval, which is also transmitted with the payload.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.rfid.TagReport rfid = 3;</code>
       */
      public io.opencannabis.schema.inventory.TagReport getRfid(int index) {
        if (rfidBuilder_ == null) {
          return rfid_.get(index);
        } else {
          return rfidBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Specifies the report of identified RFID tags from a given origin. RFID reports may be batched by an individual
       * device within some configurable interval, which is also transmitted with the payload.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.rfid.TagReport rfid = 3;</code>
       */
      public Builder setRfid(
          int index, io.opencannabis.schema.inventory.TagReport value) {
        if (rfidBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRfidIsMutable();
          rfid_.set(index, value);
          onChanged();
        } else {
          rfidBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies the report of identified RFID tags from a given origin. RFID reports may be batched by an individual
       * device within some configurable interval, which is also transmitted with the payload.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.rfid.TagReport rfid = 3;</code>
       */
      public Builder setRfid(
          int index, io.opencannabis.schema.inventory.TagReport.Builder builderForValue) {
        if (rfidBuilder_ == null) {
          ensureRfidIsMutable();
          rfid_.set(index, builderForValue.build());
          onChanged();
        } else {
          rfidBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies the report of identified RFID tags from a given origin. RFID reports may be batched by an individual
       * device within some configurable interval, which is also transmitted with the payload.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.rfid.TagReport rfid = 3;</code>
       */
      public Builder addRfid(io.opencannabis.schema.inventory.TagReport value) {
        if (rfidBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRfidIsMutable();
          rfid_.add(value);
          onChanged();
        } else {
          rfidBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies the report of identified RFID tags from a given origin. RFID reports may be batched by an individual
       * device within some configurable interval, which is also transmitted with the payload.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.rfid.TagReport rfid = 3;</code>
       */
      public Builder addRfid(
          int index, io.opencannabis.schema.inventory.TagReport value) {
        if (rfidBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRfidIsMutable();
          rfid_.add(index, value);
          onChanged();
        } else {
          rfidBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies the report of identified RFID tags from a given origin. RFID reports may be batched by an individual
       * device within some configurable interval, which is also transmitted with the payload.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.rfid.TagReport rfid = 3;</code>
       */
      public Builder addRfid(
          io.opencannabis.schema.inventory.TagReport.Builder builderForValue) {
        if (rfidBuilder_ == null) {
          ensureRfidIsMutable();
          rfid_.add(builderForValue.build());
          onChanged();
        } else {
          rfidBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies the report of identified RFID tags from a given origin. RFID reports may be batched by an individual
       * device within some configurable interval, which is also transmitted with the payload.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.rfid.TagReport rfid = 3;</code>
       */
      public Builder addRfid(
          int index, io.opencannabis.schema.inventory.TagReport.Builder builderForValue) {
        if (rfidBuilder_ == null) {
          ensureRfidIsMutable();
          rfid_.add(index, builderForValue.build());
          onChanged();
        } else {
          rfidBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies the report of identified RFID tags from a given origin. RFID reports may be batched by an individual
       * device within some configurable interval, which is also transmitted with the payload.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.rfid.TagReport rfid = 3;</code>
       */
      public Builder addAllRfid(
          java.lang.Iterable<? extends io.opencannabis.schema.inventory.TagReport> values) {
        if (rfidBuilder_ == null) {
          ensureRfidIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, rfid_);
          onChanged();
        } else {
          rfidBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies the report of identified RFID tags from a given origin. RFID reports may be batched by an individual
       * device within some configurable interval, which is also transmitted with the payload.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.rfid.TagReport rfid = 3;</code>
       */
      public Builder clearRfid() {
        if (rfidBuilder_ == null) {
          rfid_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          rfidBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Specifies the report of identified RFID tags from a given origin. RFID reports may be batched by an individual
       * device within some configurable interval, which is also transmitted with the payload.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.rfid.TagReport rfid = 3;</code>
       */
      public Builder removeRfid(int index) {
        if (rfidBuilder_ == null) {
          ensureRfidIsMutable();
          rfid_.remove(index);
          onChanged();
        } else {
          rfidBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies the report of identified RFID tags from a given origin. RFID reports may be batched by an individual
       * device within some configurable interval, which is also transmitted with the payload.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.rfid.TagReport rfid = 3;</code>
       */
      public io.opencannabis.schema.inventory.TagReport.Builder getRfidBuilder(
          int index) {
        return getRfidFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Specifies the report of identified RFID tags from a given origin. RFID reports may be batched by an individual
       * device within some configurable interval, which is also transmitted with the payload.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.rfid.TagReport rfid = 3;</code>
       */
      public io.opencannabis.schema.inventory.TagReportOrBuilder getRfidOrBuilder(
          int index) {
        if (rfidBuilder_ == null) {
          return rfid_.get(index);  } else {
          return rfidBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Specifies the report of identified RFID tags from a given origin. RFID reports may be batched by an individual
       * device within some configurable interval, which is also transmitted with the payload.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.rfid.TagReport rfid = 3;</code>
       */
      public java.util.List<? extends io.opencannabis.schema.inventory.TagReportOrBuilder> 
           getRfidOrBuilderList() {
        if (rfidBuilder_ != null) {
          return rfidBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(rfid_);
        }
      }
      /**
       * <pre>
       * Specifies the report of identified RFID tags from a given origin. RFID reports may be batched by an individual
       * device within some configurable interval, which is also transmitted with the payload.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.rfid.TagReport rfid = 3;</code>
       */
      public io.opencannabis.schema.inventory.TagReport.Builder addRfidBuilder() {
        return getRfidFieldBuilder().addBuilder(
            io.opencannabis.schema.inventory.TagReport.getDefaultInstance());
      }
      /**
       * <pre>
       * Specifies the report of identified RFID tags from a given origin. RFID reports may be batched by an individual
       * device within some configurable interval, which is also transmitted with the payload.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.rfid.TagReport rfid = 3;</code>
       */
      public io.opencannabis.schema.inventory.TagReport.Builder addRfidBuilder(
          int index) {
        return getRfidFieldBuilder().addBuilder(
            index, io.opencannabis.schema.inventory.TagReport.getDefaultInstance());
      }
      /**
       * <pre>
       * Specifies the report of identified RFID tags from a given origin. RFID reports may be batched by an individual
       * device within some configurable interval, which is also transmitted with the payload.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.rfid.TagReport rfid = 3;</code>
       */
      public java.util.List<io.opencannabis.schema.inventory.TagReport.Builder> 
           getRfidBuilderList() {
        return getRfidFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.opencannabis.schema.inventory.TagReport, io.opencannabis.schema.inventory.TagReport.Builder, io.opencannabis.schema.inventory.TagReportOrBuilder> 
          getRfidFieldBuilder() {
        if (rfidBuilder_ == null) {
          rfidBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.opencannabis.schema.inventory.TagReport, io.opencannabis.schema.inventory.TagReport.Builder, io.opencannabis.schema.inventory.TagReportOrBuilder>(
                  rfid_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          rfid_ = null;
        }
        return rfidBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:bloombox.services.telemetry.v1beta4.InventoryEvent.Encounter)
    }

    // @@protoc_insertion_point(class_scope:bloombox.services.telemetry.v1beta4.InventoryEvent.Encounter)
    private static final io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter();
    }

    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Encounter>
        PARSER = new com.google.protobuf.AbstractParser<Encounter>() {
      @java.lang.Override
      public Encounter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Encounter(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Encounter> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Encounter> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StockIntakeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:bloombox.services.telemetry.v1beta4.InventoryEvent.StockIntake)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * ID for this intake transaction.
     * </pre>
     *
     * <code>string transaction = 1;</code>
     */
    java.lang.String getTransaction();
    /**
     * <pre>
     * ID for this intake transaction.
     * </pre>
     *
     * <code>string transaction = 1;</code>
     */
    com.google.protobuf.ByteString
        getTransactionBytes();

    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
     */
    boolean hasEvent();
    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
     */
    io.bloombox.schema.services.telemetry.v1beta4.InventoryContext getEvent();
    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
     */
    io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder getEventOrBuilder();

    /**
     * <pre>
     * Specification of where this inventory is currently located, down to the exact point in the supply chain.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 3;</code>
     */
    java.util.List<io.opencannabis.schema.inventory.InventoryProduct> 
        getInventoryList();
    /**
     * <pre>
     * Specification of where this inventory is currently located, down to the exact point in the supply chain.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 3;</code>
     */
    io.opencannabis.schema.inventory.InventoryProduct getInventory(int index);
    /**
     * <pre>
     * Specification of where this inventory is currently located, down to the exact point in the supply chain.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 3;</code>
     */
    int getInventoryCount();
    /**
     * <pre>
     * Specification of where this inventory is currently located, down to the exact point in the supply chain.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 3;</code>
     */
    java.util.List<? extends io.opencannabis.schema.inventory.InventoryProductOrBuilder> 
        getInventoryOrBuilderList();
    /**
     * <pre>
     * Specification of where this inventory is currently located, down to the exact point in the supply chain.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 3;</code>
     */
    io.opencannabis.schema.inventory.InventoryProductOrBuilder getInventoryOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Describes a stock intake event, where custody is taken over some package of material, that will be held on-hand for
   * some amount of time. Inventory intake does not imply that a batch of product is fit-for-sale.
   * </pre>
   *
   * Protobuf type {@code bloombox.services.telemetry.v1beta4.InventoryEvent.StockIntake}
   */
  public  static final class StockIntake extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:bloombox.services.telemetry.v1beta4.InventoryEvent.StockIntake)
      StockIntakeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StockIntake.newBuilder() to construct.
    private StockIntake(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StockIntake() {
      transaction_ = "";
      inventory_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private StockIntake(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              transaction_ = s;
              break;
            }
            case 18: {
              io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder subBuilder = null;
              if (event_ != null) {
                subBuilder = event_.toBuilder();
              }
              event_ = input.readMessage(io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(event_);
                event_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                inventory_ = new java.util.ArrayList<io.opencannabis.schema.inventory.InventoryProduct>();
                mutable_bitField0_ |= 0x00000004;
              }
              inventory_.add(
                  input.readMessage(io.opencannabis.schema.inventory.InventoryProduct.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          inventory_ = java.util.Collections.unmodifiableList(inventory_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_StockIntake_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_StockIntake_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake.class, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake.Builder.class);
    }

    private int bitField0_;
    public static final int TRANSACTION_FIELD_NUMBER = 1;
    private volatile java.lang.Object transaction_;
    /**
     * <pre>
     * ID for this intake transaction.
     * </pre>
     *
     * <code>string transaction = 1;</code>
     */
    public java.lang.String getTransaction() {
      java.lang.Object ref = transaction_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        transaction_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * ID for this intake transaction.
     * </pre>
     *
     * <code>string transaction = 1;</code>
     */
    public com.google.protobuf.ByteString
        getTransactionBytes() {
      java.lang.Object ref = transaction_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        transaction_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int EVENT_FIELD_NUMBER = 2;
    private io.bloombox.schema.services.telemetry.v1beta4.InventoryContext event_;
    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
     */
    public boolean hasEvent() {
      return event_ != null;
    }
    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
     */
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryContext getEvent() {
      return event_ == null ? io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.getDefaultInstance() : event_;
    }
    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
     */
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder getEventOrBuilder() {
      return getEvent();
    }

    public static final int INVENTORY_FIELD_NUMBER = 3;
    private java.util.List<io.opencannabis.schema.inventory.InventoryProduct> inventory_;
    /**
     * <pre>
     * Specification of where this inventory is currently located, down to the exact point in the supply chain.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 3;</code>
     */
    public java.util.List<io.opencannabis.schema.inventory.InventoryProduct> getInventoryList() {
      return inventory_;
    }
    /**
     * <pre>
     * Specification of where this inventory is currently located, down to the exact point in the supply chain.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 3;</code>
     */
    public java.util.List<? extends io.opencannabis.schema.inventory.InventoryProductOrBuilder> 
        getInventoryOrBuilderList() {
      return inventory_;
    }
    /**
     * <pre>
     * Specification of where this inventory is currently located, down to the exact point in the supply chain.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 3;</code>
     */
    public int getInventoryCount() {
      return inventory_.size();
    }
    /**
     * <pre>
     * Specification of where this inventory is currently located, down to the exact point in the supply chain.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 3;</code>
     */
    public io.opencannabis.schema.inventory.InventoryProduct getInventory(int index) {
      return inventory_.get(index);
    }
    /**
     * <pre>
     * Specification of where this inventory is currently located, down to the exact point in the supply chain.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 3;</code>
     */
    public io.opencannabis.schema.inventory.InventoryProductOrBuilder getInventoryOrBuilder(
        int index) {
      return inventory_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getTransactionBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, transaction_);
      }
      if (event_ != null) {
        output.writeMessage(2, getEvent());
      }
      for (int i = 0; i < inventory_.size(); i++) {
        output.writeMessage(3, inventory_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getTransactionBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, transaction_);
      }
      if (event_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getEvent());
      }
      for (int i = 0; i < inventory_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, inventory_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake)) {
        return super.equals(obj);
      }
      io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake other = (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake) obj;

      if (!getTransaction()
          .equals(other.getTransaction())) return false;
      if (hasEvent() != other.hasEvent()) return false;
      if (hasEvent()) {
        if (!getEvent()
            .equals(other.getEvent())) return false;
      }
      if (!getInventoryList()
          .equals(other.getInventoryList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TRANSACTION_FIELD_NUMBER;
      hash = (53 * hash) + getTransaction().hashCode();
      if (hasEvent()) {
        hash = (37 * hash) + EVENT_FIELD_NUMBER;
        hash = (53 * hash) + getEvent().hashCode();
      }
      if (getInventoryCount() > 0) {
        hash = (37 * hash) + INVENTORY_FIELD_NUMBER;
        hash = (53 * hash) + getInventoryList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Describes a stock intake event, where custody is taken over some package of material, that will be held on-hand for
     * some amount of time. Inventory intake does not imply that a batch of product is fit-for-sale.
     * </pre>
     *
     * Protobuf type {@code bloombox.services.telemetry.v1beta4.InventoryEvent.StockIntake}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:bloombox.services.telemetry.v1beta4.InventoryEvent.StockIntake)
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntakeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_StockIntake_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_StockIntake_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake.class, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake.Builder.class);
      }

      // Construct using io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getInventoryFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        transaction_ = "";

        if (eventBuilder_ == null) {
          event_ = null;
        } else {
          event_ = null;
          eventBuilder_ = null;
        }
        if (inventoryBuilder_ == null) {
          inventory_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          inventoryBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_StockIntake_descriptor;
      }

      @java.lang.Override
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake getDefaultInstanceForType() {
        return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake.getDefaultInstance();
      }

      @java.lang.Override
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake build() {
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake buildPartial() {
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake result = new io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.transaction_ = transaction_;
        if (eventBuilder_ == null) {
          result.event_ = event_;
        } else {
          result.event_ = eventBuilder_.build();
        }
        if (inventoryBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            inventory_ = java.util.Collections.unmodifiableList(inventory_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.inventory_ = inventory_;
        } else {
          result.inventory_ = inventoryBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake) {
          return mergeFrom((io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake other) {
        if (other == io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake.getDefaultInstance()) return this;
        if (!other.getTransaction().isEmpty()) {
          transaction_ = other.transaction_;
          onChanged();
        }
        if (other.hasEvent()) {
          mergeEvent(other.getEvent());
        }
        if (inventoryBuilder_ == null) {
          if (!other.inventory_.isEmpty()) {
            if (inventory_.isEmpty()) {
              inventory_ = other.inventory_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureInventoryIsMutable();
              inventory_.addAll(other.inventory_);
            }
            onChanged();
          }
        } else {
          if (!other.inventory_.isEmpty()) {
            if (inventoryBuilder_.isEmpty()) {
              inventoryBuilder_.dispose();
              inventoryBuilder_ = null;
              inventory_ = other.inventory_;
              bitField0_ = (bitField0_ & ~0x00000004);
              inventoryBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getInventoryFieldBuilder() : null;
            } else {
              inventoryBuilder_.addAllMessages(other.inventory_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object transaction_ = "";
      /**
       * <pre>
       * ID for this intake transaction.
       * </pre>
       *
       * <code>string transaction = 1;</code>
       */
      public java.lang.String getTransaction() {
        java.lang.Object ref = transaction_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          transaction_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * ID for this intake transaction.
       * </pre>
       *
       * <code>string transaction = 1;</code>
       */
      public com.google.protobuf.ByteString
          getTransactionBytes() {
        java.lang.Object ref = transaction_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          transaction_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * ID for this intake transaction.
       * </pre>
       *
       * <code>string transaction = 1;</code>
       */
      public Builder setTransaction(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        transaction_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ID for this intake transaction.
       * </pre>
       *
       * <code>string transaction = 1;</code>
       */
      public Builder clearTransaction() {
        
        transaction_ = getDefaultInstance().getTransaction();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ID for this intake transaction.
       * </pre>
       *
       * <code>string transaction = 1;</code>
       */
      public Builder setTransactionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        transaction_ = value;
        onChanged();
        return this;
      }

      private io.bloombox.schema.services.telemetry.v1beta4.InventoryContext event_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.services.telemetry.v1beta4.InventoryContext, io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder> eventBuilder_;
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
       */
      public boolean hasEvent() {
        return eventBuilder_ != null || event_ != null;
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
       */
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryContext getEvent() {
        if (eventBuilder_ == null) {
          return event_ == null ? io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.getDefaultInstance() : event_;
        } else {
          return eventBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
       */
      public Builder setEvent(io.bloombox.schema.services.telemetry.v1beta4.InventoryContext value) {
        if (eventBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          event_ = value;
          onChanged();
        } else {
          eventBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
       */
      public Builder setEvent(
          io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder builderForValue) {
        if (eventBuilder_ == null) {
          event_ = builderForValue.build();
          onChanged();
        } else {
          eventBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
       */
      public Builder mergeEvent(io.bloombox.schema.services.telemetry.v1beta4.InventoryContext value) {
        if (eventBuilder_ == null) {
          if (event_ != null) {
            event_ =
              io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.newBuilder(event_).mergeFrom(value).buildPartial();
          } else {
            event_ = value;
          }
          onChanged();
        } else {
          eventBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
       */
      public Builder clearEvent() {
        if (eventBuilder_ == null) {
          event_ = null;
          onChanged();
        } else {
          event_ = null;
          eventBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
       */
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder getEventBuilder() {
        
        onChanged();
        return getEventFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
       */
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder getEventOrBuilder() {
        if (eventBuilder_ != null) {
          return eventBuilder_.getMessageOrBuilder();
        } else {
          return event_ == null ?
              io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.getDefaultInstance() : event_;
        }
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.services.telemetry.v1beta4.InventoryContext, io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder> 
          getEventFieldBuilder() {
        if (eventBuilder_ == null) {
          eventBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.bloombox.schema.services.telemetry.v1beta4.InventoryContext, io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder>(
                  getEvent(),
                  getParentForChildren(),
                  isClean());
          event_ = null;
        }
        return eventBuilder_;
      }

      private java.util.List<io.opencannabis.schema.inventory.InventoryProduct> inventory_ =
        java.util.Collections.emptyList();
      private void ensureInventoryIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          inventory_ = new java.util.ArrayList<io.opencannabis.schema.inventory.InventoryProduct>(inventory_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.opencannabis.schema.inventory.InventoryProduct, io.opencannabis.schema.inventory.InventoryProduct.Builder, io.opencannabis.schema.inventory.InventoryProductOrBuilder> inventoryBuilder_;

      /**
       * <pre>
       * Specification of where this inventory is currently located, down to the exact point in the supply chain.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 3;</code>
       */
      public java.util.List<io.opencannabis.schema.inventory.InventoryProduct> getInventoryList() {
        if (inventoryBuilder_ == null) {
          return java.util.Collections.unmodifiableList(inventory_);
        } else {
          return inventoryBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Specification of where this inventory is currently located, down to the exact point in the supply chain.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 3;</code>
       */
      public int getInventoryCount() {
        if (inventoryBuilder_ == null) {
          return inventory_.size();
        } else {
          return inventoryBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Specification of where this inventory is currently located, down to the exact point in the supply chain.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 3;</code>
       */
      public io.opencannabis.schema.inventory.InventoryProduct getInventory(int index) {
        if (inventoryBuilder_ == null) {
          return inventory_.get(index);
        } else {
          return inventoryBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Specification of where this inventory is currently located, down to the exact point in the supply chain.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 3;</code>
       */
      public Builder setInventory(
          int index, io.opencannabis.schema.inventory.InventoryProduct value) {
        if (inventoryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInventoryIsMutable();
          inventory_.set(index, value);
          onChanged();
        } else {
          inventoryBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Specification of where this inventory is currently located, down to the exact point in the supply chain.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 3;</code>
       */
      public Builder setInventory(
          int index, io.opencannabis.schema.inventory.InventoryProduct.Builder builderForValue) {
        if (inventoryBuilder_ == null) {
          ensureInventoryIsMutable();
          inventory_.set(index, builderForValue.build());
          onChanged();
        } else {
          inventoryBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specification of where this inventory is currently located, down to the exact point in the supply chain.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 3;</code>
       */
      public Builder addInventory(io.opencannabis.schema.inventory.InventoryProduct value) {
        if (inventoryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInventoryIsMutable();
          inventory_.add(value);
          onChanged();
        } else {
          inventoryBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Specification of where this inventory is currently located, down to the exact point in the supply chain.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 3;</code>
       */
      public Builder addInventory(
          int index, io.opencannabis.schema.inventory.InventoryProduct value) {
        if (inventoryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInventoryIsMutable();
          inventory_.add(index, value);
          onChanged();
        } else {
          inventoryBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Specification of where this inventory is currently located, down to the exact point in the supply chain.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 3;</code>
       */
      public Builder addInventory(
          io.opencannabis.schema.inventory.InventoryProduct.Builder builderForValue) {
        if (inventoryBuilder_ == null) {
          ensureInventoryIsMutable();
          inventory_.add(builderForValue.build());
          onChanged();
        } else {
          inventoryBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specification of where this inventory is currently located, down to the exact point in the supply chain.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 3;</code>
       */
      public Builder addInventory(
          int index, io.opencannabis.schema.inventory.InventoryProduct.Builder builderForValue) {
        if (inventoryBuilder_ == null) {
          ensureInventoryIsMutable();
          inventory_.add(index, builderForValue.build());
          onChanged();
        } else {
          inventoryBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specification of where this inventory is currently located, down to the exact point in the supply chain.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 3;</code>
       */
      public Builder addAllInventory(
          java.lang.Iterable<? extends io.opencannabis.schema.inventory.InventoryProduct> values) {
        if (inventoryBuilder_ == null) {
          ensureInventoryIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, inventory_);
          onChanged();
        } else {
          inventoryBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Specification of where this inventory is currently located, down to the exact point in the supply chain.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 3;</code>
       */
      public Builder clearInventory() {
        if (inventoryBuilder_ == null) {
          inventory_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          inventoryBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Specification of where this inventory is currently located, down to the exact point in the supply chain.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 3;</code>
       */
      public Builder removeInventory(int index) {
        if (inventoryBuilder_ == null) {
          ensureInventoryIsMutable();
          inventory_.remove(index);
          onChanged();
        } else {
          inventoryBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Specification of where this inventory is currently located, down to the exact point in the supply chain.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 3;</code>
       */
      public io.opencannabis.schema.inventory.InventoryProduct.Builder getInventoryBuilder(
          int index) {
        return getInventoryFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Specification of where this inventory is currently located, down to the exact point in the supply chain.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 3;</code>
       */
      public io.opencannabis.schema.inventory.InventoryProductOrBuilder getInventoryOrBuilder(
          int index) {
        if (inventoryBuilder_ == null) {
          return inventory_.get(index);  } else {
          return inventoryBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Specification of where this inventory is currently located, down to the exact point in the supply chain.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 3;</code>
       */
      public java.util.List<? extends io.opencannabis.schema.inventory.InventoryProductOrBuilder> 
           getInventoryOrBuilderList() {
        if (inventoryBuilder_ != null) {
          return inventoryBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(inventory_);
        }
      }
      /**
       * <pre>
       * Specification of where this inventory is currently located, down to the exact point in the supply chain.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 3;</code>
       */
      public io.opencannabis.schema.inventory.InventoryProduct.Builder addInventoryBuilder() {
        return getInventoryFieldBuilder().addBuilder(
            io.opencannabis.schema.inventory.InventoryProduct.getDefaultInstance());
      }
      /**
       * <pre>
       * Specification of where this inventory is currently located, down to the exact point in the supply chain.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 3;</code>
       */
      public io.opencannabis.schema.inventory.InventoryProduct.Builder addInventoryBuilder(
          int index) {
        return getInventoryFieldBuilder().addBuilder(
            index, io.opencannabis.schema.inventory.InventoryProduct.getDefaultInstance());
      }
      /**
       * <pre>
       * Specification of where this inventory is currently located, down to the exact point in the supply chain.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 3;</code>
       */
      public java.util.List<io.opencannabis.schema.inventory.InventoryProduct.Builder> 
           getInventoryBuilderList() {
        return getInventoryFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.opencannabis.schema.inventory.InventoryProduct, io.opencannabis.schema.inventory.InventoryProduct.Builder, io.opencannabis.schema.inventory.InventoryProductOrBuilder> 
          getInventoryFieldBuilder() {
        if (inventoryBuilder_ == null) {
          inventoryBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.opencannabis.schema.inventory.InventoryProduct, io.opencannabis.schema.inventory.InventoryProduct.Builder, io.opencannabis.schema.inventory.InventoryProductOrBuilder>(
                  inventory_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          inventory_ = null;
        }
        return inventoryBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:bloombox.services.telemetry.v1beta4.InventoryEvent.StockIntake)
    }

    // @@protoc_insertion_point(class_scope:bloombox.services.telemetry.v1beta4.InventoryEvent.StockIntake)
    private static final io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake();
    }

    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StockIntake>
        PARSER = new com.google.protobuf.AbstractParser<StockIntake>() {
      @java.lang.Override
      public StockIntake parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new StockIntake(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<StockIntake> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StockIntake> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StockUpdateOrBuilder extends
      // @@protoc_insertion_point(interface_extends:bloombox.services.telemetry.v1beta4.InventoryEvent.StockUpdate)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * ID for this update transaction.
     * </pre>
     *
     * <code>string transaction = 1;</code>
     */
    java.lang.String getTransaction();
    /**
     * <pre>
     * ID for this update transaction.
     * </pre>
     *
     * <code>string transaction = 1;</code>
     */
    com.google.protobuf.ByteString
        getTransactionBytes();

    /**
     * <pre>
     * ID for the transaction parent of this stock update.
     * </pre>
     *
     * <code>string parent = 2;</code>
     */
    java.lang.String getParent();
    /**
     * <pre>
     * ID for the transaction parent of this stock update.
     * </pre>
     *
     * <code>string parent = 2;</code>
     */
    com.google.protobuf.ByteString
        getParentBytes();

    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
     */
    boolean hasEvent();
    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
     */
    io.bloombox.schema.services.telemetry.v1beta4.InventoryContext getEvent();
    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
     */
    io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder getEventOrBuilder();

    /**
     * <pre>
     * Specification of where this inventory is currently located, down to the exact point in the supply chain.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 4;</code>
     */
    java.util.List<io.opencannabis.schema.inventory.InventoryProduct> 
        getInventoryList();
    /**
     * <pre>
     * Specification of where this inventory is currently located, down to the exact point in the supply chain.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 4;</code>
     */
    io.opencannabis.schema.inventory.InventoryProduct getInventory(int index);
    /**
     * <pre>
     * Specification of where this inventory is currently located, down to the exact point in the supply chain.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 4;</code>
     */
    int getInventoryCount();
    /**
     * <pre>
     * Specification of where this inventory is currently located, down to the exact point in the supply chain.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 4;</code>
     */
    java.util.List<? extends io.opencannabis.schema.inventory.InventoryProductOrBuilder> 
        getInventoryOrBuilderList();
    /**
     * <pre>
     * Specification of where this inventory is currently located, down to the exact point in the supply chain.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 4;</code>
     */
    io.opencannabis.schema.inventory.InventoryProductOrBuilder getInventoryOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Describes an update-in-place for a given item tracked in inventory. This may occur when an item is moved between
   * locations within the scope of a single retail location - i.e., between rooms, shelves, and so on.
   * </pre>
   *
   * Protobuf type {@code bloombox.services.telemetry.v1beta4.InventoryEvent.StockUpdate}
   */
  public  static final class StockUpdate extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:bloombox.services.telemetry.v1beta4.InventoryEvent.StockUpdate)
      StockUpdateOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StockUpdate.newBuilder() to construct.
    private StockUpdate(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StockUpdate() {
      transaction_ = "";
      parent_ = "";
      inventory_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private StockUpdate(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              transaction_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              parent_ = s;
              break;
            }
            case 26: {
              io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder subBuilder = null;
              if (event_ != null) {
                subBuilder = event_.toBuilder();
              }
              event_ = input.readMessage(io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(event_);
                event_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) != 0)) {
                inventory_ = new java.util.ArrayList<io.opencannabis.schema.inventory.InventoryProduct>();
                mutable_bitField0_ |= 0x00000008;
              }
              inventory_.add(
                  input.readMessage(io.opencannabis.schema.inventory.InventoryProduct.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000008) != 0)) {
          inventory_ = java.util.Collections.unmodifiableList(inventory_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_StockUpdate_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_StockUpdate_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate.class, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate.Builder.class);
    }

    private int bitField0_;
    public static final int TRANSACTION_FIELD_NUMBER = 1;
    private volatile java.lang.Object transaction_;
    /**
     * <pre>
     * ID for this update transaction.
     * </pre>
     *
     * <code>string transaction = 1;</code>
     */
    public java.lang.String getTransaction() {
      java.lang.Object ref = transaction_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        transaction_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * ID for this update transaction.
     * </pre>
     *
     * <code>string transaction = 1;</code>
     */
    public com.google.protobuf.ByteString
        getTransactionBytes() {
      java.lang.Object ref = transaction_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        transaction_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PARENT_FIELD_NUMBER = 2;
    private volatile java.lang.Object parent_;
    /**
     * <pre>
     * ID for the transaction parent of this stock update.
     * </pre>
     *
     * <code>string parent = 2;</code>
     */
    public java.lang.String getParent() {
      java.lang.Object ref = parent_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        parent_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * ID for the transaction parent of this stock update.
     * </pre>
     *
     * <code>string parent = 2;</code>
     */
    public com.google.protobuf.ByteString
        getParentBytes() {
      java.lang.Object ref = parent_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        parent_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int EVENT_FIELD_NUMBER = 3;
    private io.bloombox.schema.services.telemetry.v1beta4.InventoryContext event_;
    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
     */
    public boolean hasEvent() {
      return event_ != null;
    }
    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
     */
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryContext getEvent() {
      return event_ == null ? io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.getDefaultInstance() : event_;
    }
    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
     */
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder getEventOrBuilder() {
      return getEvent();
    }

    public static final int INVENTORY_FIELD_NUMBER = 4;
    private java.util.List<io.opencannabis.schema.inventory.InventoryProduct> inventory_;
    /**
     * <pre>
     * Specification of where this inventory is currently located, down to the exact point in the supply chain.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 4;</code>
     */
    public java.util.List<io.opencannabis.schema.inventory.InventoryProduct> getInventoryList() {
      return inventory_;
    }
    /**
     * <pre>
     * Specification of where this inventory is currently located, down to the exact point in the supply chain.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 4;</code>
     */
    public java.util.List<? extends io.opencannabis.schema.inventory.InventoryProductOrBuilder> 
        getInventoryOrBuilderList() {
      return inventory_;
    }
    /**
     * <pre>
     * Specification of where this inventory is currently located, down to the exact point in the supply chain.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 4;</code>
     */
    public int getInventoryCount() {
      return inventory_.size();
    }
    /**
     * <pre>
     * Specification of where this inventory is currently located, down to the exact point in the supply chain.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 4;</code>
     */
    public io.opencannabis.schema.inventory.InventoryProduct getInventory(int index) {
      return inventory_.get(index);
    }
    /**
     * <pre>
     * Specification of where this inventory is currently located, down to the exact point in the supply chain.
     * </pre>
     *
     * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 4;</code>
     */
    public io.opencannabis.schema.inventory.InventoryProductOrBuilder getInventoryOrBuilder(
        int index) {
      return inventory_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getTransactionBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, transaction_);
      }
      if (!getParentBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, parent_);
      }
      if (event_ != null) {
        output.writeMessage(3, getEvent());
      }
      for (int i = 0; i < inventory_.size(); i++) {
        output.writeMessage(4, inventory_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getTransactionBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, transaction_);
      }
      if (!getParentBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, parent_);
      }
      if (event_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getEvent());
      }
      for (int i = 0; i < inventory_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, inventory_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate)) {
        return super.equals(obj);
      }
      io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate other = (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate) obj;

      if (!getTransaction()
          .equals(other.getTransaction())) return false;
      if (!getParent()
          .equals(other.getParent())) return false;
      if (hasEvent() != other.hasEvent()) return false;
      if (hasEvent()) {
        if (!getEvent()
            .equals(other.getEvent())) return false;
      }
      if (!getInventoryList()
          .equals(other.getInventoryList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TRANSACTION_FIELD_NUMBER;
      hash = (53 * hash) + getTransaction().hashCode();
      hash = (37 * hash) + PARENT_FIELD_NUMBER;
      hash = (53 * hash) + getParent().hashCode();
      if (hasEvent()) {
        hash = (37 * hash) + EVENT_FIELD_NUMBER;
        hash = (53 * hash) + getEvent().hashCode();
      }
      if (getInventoryCount() > 0) {
        hash = (37 * hash) + INVENTORY_FIELD_NUMBER;
        hash = (53 * hash) + getInventoryList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Describes an update-in-place for a given item tracked in inventory. This may occur when an item is moved between
     * locations within the scope of a single retail location - i.e., between rooms, shelves, and so on.
     * </pre>
     *
     * Protobuf type {@code bloombox.services.telemetry.v1beta4.InventoryEvent.StockUpdate}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:bloombox.services.telemetry.v1beta4.InventoryEvent.StockUpdate)
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdateOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_StockUpdate_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_StockUpdate_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate.class, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate.Builder.class);
      }

      // Construct using io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getInventoryFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        transaction_ = "";

        parent_ = "";

        if (eventBuilder_ == null) {
          event_ = null;
        } else {
          event_ = null;
          eventBuilder_ = null;
        }
        if (inventoryBuilder_ == null) {
          inventory_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          inventoryBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_StockUpdate_descriptor;
      }

      @java.lang.Override
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate getDefaultInstanceForType() {
        return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate.getDefaultInstance();
      }

      @java.lang.Override
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate build() {
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate buildPartial() {
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate result = new io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.transaction_ = transaction_;
        result.parent_ = parent_;
        if (eventBuilder_ == null) {
          result.event_ = event_;
        } else {
          result.event_ = eventBuilder_.build();
        }
        if (inventoryBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0)) {
            inventory_ = java.util.Collections.unmodifiableList(inventory_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.inventory_ = inventory_;
        } else {
          result.inventory_ = inventoryBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate) {
          return mergeFrom((io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate other) {
        if (other == io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate.getDefaultInstance()) return this;
        if (!other.getTransaction().isEmpty()) {
          transaction_ = other.transaction_;
          onChanged();
        }
        if (!other.getParent().isEmpty()) {
          parent_ = other.parent_;
          onChanged();
        }
        if (other.hasEvent()) {
          mergeEvent(other.getEvent());
        }
        if (inventoryBuilder_ == null) {
          if (!other.inventory_.isEmpty()) {
            if (inventory_.isEmpty()) {
              inventory_ = other.inventory_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureInventoryIsMutable();
              inventory_.addAll(other.inventory_);
            }
            onChanged();
          }
        } else {
          if (!other.inventory_.isEmpty()) {
            if (inventoryBuilder_.isEmpty()) {
              inventoryBuilder_.dispose();
              inventoryBuilder_ = null;
              inventory_ = other.inventory_;
              bitField0_ = (bitField0_ & ~0x00000008);
              inventoryBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getInventoryFieldBuilder() : null;
            } else {
              inventoryBuilder_.addAllMessages(other.inventory_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object transaction_ = "";
      /**
       * <pre>
       * ID for this update transaction.
       * </pre>
       *
       * <code>string transaction = 1;</code>
       */
      public java.lang.String getTransaction() {
        java.lang.Object ref = transaction_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          transaction_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * ID for this update transaction.
       * </pre>
       *
       * <code>string transaction = 1;</code>
       */
      public com.google.protobuf.ByteString
          getTransactionBytes() {
        java.lang.Object ref = transaction_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          transaction_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * ID for this update transaction.
       * </pre>
       *
       * <code>string transaction = 1;</code>
       */
      public Builder setTransaction(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        transaction_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ID for this update transaction.
       * </pre>
       *
       * <code>string transaction = 1;</code>
       */
      public Builder clearTransaction() {
        
        transaction_ = getDefaultInstance().getTransaction();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ID for this update transaction.
       * </pre>
       *
       * <code>string transaction = 1;</code>
       */
      public Builder setTransactionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        transaction_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object parent_ = "";
      /**
       * <pre>
       * ID for the transaction parent of this stock update.
       * </pre>
       *
       * <code>string parent = 2;</code>
       */
      public java.lang.String getParent() {
        java.lang.Object ref = parent_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          parent_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * ID for the transaction parent of this stock update.
       * </pre>
       *
       * <code>string parent = 2;</code>
       */
      public com.google.protobuf.ByteString
          getParentBytes() {
        java.lang.Object ref = parent_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          parent_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * ID for the transaction parent of this stock update.
       * </pre>
       *
       * <code>string parent = 2;</code>
       */
      public Builder setParent(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        parent_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ID for the transaction parent of this stock update.
       * </pre>
       *
       * <code>string parent = 2;</code>
       */
      public Builder clearParent() {
        
        parent_ = getDefaultInstance().getParent();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ID for the transaction parent of this stock update.
       * </pre>
       *
       * <code>string parent = 2;</code>
       */
      public Builder setParentBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        parent_ = value;
        onChanged();
        return this;
      }

      private io.bloombox.schema.services.telemetry.v1beta4.InventoryContext event_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.services.telemetry.v1beta4.InventoryContext, io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder> eventBuilder_;
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
       */
      public boolean hasEvent() {
        return eventBuilder_ != null || event_ != null;
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
       */
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryContext getEvent() {
        if (eventBuilder_ == null) {
          return event_ == null ? io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.getDefaultInstance() : event_;
        } else {
          return eventBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
       */
      public Builder setEvent(io.bloombox.schema.services.telemetry.v1beta4.InventoryContext value) {
        if (eventBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          event_ = value;
          onChanged();
        } else {
          eventBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
       */
      public Builder setEvent(
          io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder builderForValue) {
        if (eventBuilder_ == null) {
          event_ = builderForValue.build();
          onChanged();
        } else {
          eventBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
       */
      public Builder mergeEvent(io.bloombox.schema.services.telemetry.v1beta4.InventoryContext value) {
        if (eventBuilder_ == null) {
          if (event_ != null) {
            event_ =
              io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.newBuilder(event_).mergeFrom(value).buildPartial();
          } else {
            event_ = value;
          }
          onChanged();
        } else {
          eventBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
       */
      public Builder clearEvent() {
        if (eventBuilder_ == null) {
          event_ = null;
          onChanged();
        } else {
          event_ = null;
          eventBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
       */
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder getEventBuilder() {
        
        onChanged();
        return getEventFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
       */
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder getEventOrBuilder() {
        if (eventBuilder_ != null) {
          return eventBuilder_.getMessageOrBuilder();
        } else {
          return event_ == null ?
              io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.getDefaultInstance() : event_;
        }
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.services.telemetry.v1beta4.InventoryContext, io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder> 
          getEventFieldBuilder() {
        if (eventBuilder_ == null) {
          eventBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.bloombox.schema.services.telemetry.v1beta4.InventoryContext, io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder>(
                  getEvent(),
                  getParentForChildren(),
                  isClean());
          event_ = null;
        }
        return eventBuilder_;
      }

      private java.util.List<io.opencannabis.schema.inventory.InventoryProduct> inventory_ =
        java.util.Collections.emptyList();
      private void ensureInventoryIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          inventory_ = new java.util.ArrayList<io.opencannabis.schema.inventory.InventoryProduct>(inventory_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.opencannabis.schema.inventory.InventoryProduct, io.opencannabis.schema.inventory.InventoryProduct.Builder, io.opencannabis.schema.inventory.InventoryProductOrBuilder> inventoryBuilder_;

      /**
       * <pre>
       * Specification of where this inventory is currently located, down to the exact point in the supply chain.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 4;</code>
       */
      public java.util.List<io.opencannabis.schema.inventory.InventoryProduct> getInventoryList() {
        if (inventoryBuilder_ == null) {
          return java.util.Collections.unmodifiableList(inventory_);
        } else {
          return inventoryBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Specification of where this inventory is currently located, down to the exact point in the supply chain.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 4;</code>
       */
      public int getInventoryCount() {
        if (inventoryBuilder_ == null) {
          return inventory_.size();
        } else {
          return inventoryBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Specification of where this inventory is currently located, down to the exact point in the supply chain.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 4;</code>
       */
      public io.opencannabis.schema.inventory.InventoryProduct getInventory(int index) {
        if (inventoryBuilder_ == null) {
          return inventory_.get(index);
        } else {
          return inventoryBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Specification of where this inventory is currently located, down to the exact point in the supply chain.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 4;</code>
       */
      public Builder setInventory(
          int index, io.opencannabis.schema.inventory.InventoryProduct value) {
        if (inventoryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInventoryIsMutable();
          inventory_.set(index, value);
          onChanged();
        } else {
          inventoryBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Specification of where this inventory is currently located, down to the exact point in the supply chain.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 4;</code>
       */
      public Builder setInventory(
          int index, io.opencannabis.schema.inventory.InventoryProduct.Builder builderForValue) {
        if (inventoryBuilder_ == null) {
          ensureInventoryIsMutable();
          inventory_.set(index, builderForValue.build());
          onChanged();
        } else {
          inventoryBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specification of where this inventory is currently located, down to the exact point in the supply chain.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 4;</code>
       */
      public Builder addInventory(io.opencannabis.schema.inventory.InventoryProduct value) {
        if (inventoryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInventoryIsMutable();
          inventory_.add(value);
          onChanged();
        } else {
          inventoryBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Specification of where this inventory is currently located, down to the exact point in the supply chain.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 4;</code>
       */
      public Builder addInventory(
          int index, io.opencannabis.schema.inventory.InventoryProduct value) {
        if (inventoryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInventoryIsMutable();
          inventory_.add(index, value);
          onChanged();
        } else {
          inventoryBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Specification of where this inventory is currently located, down to the exact point in the supply chain.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 4;</code>
       */
      public Builder addInventory(
          io.opencannabis.schema.inventory.InventoryProduct.Builder builderForValue) {
        if (inventoryBuilder_ == null) {
          ensureInventoryIsMutable();
          inventory_.add(builderForValue.build());
          onChanged();
        } else {
          inventoryBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specification of where this inventory is currently located, down to the exact point in the supply chain.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 4;</code>
       */
      public Builder addInventory(
          int index, io.opencannabis.schema.inventory.InventoryProduct.Builder builderForValue) {
        if (inventoryBuilder_ == null) {
          ensureInventoryIsMutable();
          inventory_.add(index, builderForValue.build());
          onChanged();
        } else {
          inventoryBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specification of where this inventory is currently located, down to the exact point in the supply chain.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 4;</code>
       */
      public Builder addAllInventory(
          java.lang.Iterable<? extends io.opencannabis.schema.inventory.InventoryProduct> values) {
        if (inventoryBuilder_ == null) {
          ensureInventoryIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, inventory_);
          onChanged();
        } else {
          inventoryBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Specification of where this inventory is currently located, down to the exact point in the supply chain.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 4;</code>
       */
      public Builder clearInventory() {
        if (inventoryBuilder_ == null) {
          inventory_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          inventoryBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Specification of where this inventory is currently located, down to the exact point in the supply chain.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 4;</code>
       */
      public Builder removeInventory(int index) {
        if (inventoryBuilder_ == null) {
          ensureInventoryIsMutable();
          inventory_.remove(index);
          onChanged();
        } else {
          inventoryBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Specification of where this inventory is currently located, down to the exact point in the supply chain.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 4;</code>
       */
      public io.opencannabis.schema.inventory.InventoryProduct.Builder getInventoryBuilder(
          int index) {
        return getInventoryFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Specification of where this inventory is currently located, down to the exact point in the supply chain.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 4;</code>
       */
      public io.opencannabis.schema.inventory.InventoryProductOrBuilder getInventoryOrBuilder(
          int index) {
        if (inventoryBuilder_ == null) {
          return inventory_.get(index);  } else {
          return inventoryBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Specification of where this inventory is currently located, down to the exact point in the supply chain.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 4;</code>
       */
      public java.util.List<? extends io.opencannabis.schema.inventory.InventoryProductOrBuilder> 
           getInventoryOrBuilderList() {
        if (inventoryBuilder_ != null) {
          return inventoryBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(inventory_);
        }
      }
      /**
       * <pre>
       * Specification of where this inventory is currently located, down to the exact point in the supply chain.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 4;</code>
       */
      public io.opencannabis.schema.inventory.InventoryProduct.Builder addInventoryBuilder() {
        return getInventoryFieldBuilder().addBuilder(
            io.opencannabis.schema.inventory.InventoryProduct.getDefaultInstance());
      }
      /**
       * <pre>
       * Specification of where this inventory is currently located, down to the exact point in the supply chain.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 4;</code>
       */
      public io.opencannabis.schema.inventory.InventoryProduct.Builder addInventoryBuilder(
          int index) {
        return getInventoryFieldBuilder().addBuilder(
            index, io.opencannabis.schema.inventory.InventoryProduct.getDefaultInstance());
      }
      /**
       * <pre>
       * Specification of where this inventory is currently located, down to the exact point in the supply chain.
       * </pre>
       *
       * <code>repeated .opencannabis.inventory.InventoryProduct inventory = 4;</code>
       */
      public java.util.List<io.opencannabis.schema.inventory.InventoryProduct.Builder> 
           getInventoryBuilderList() {
        return getInventoryFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.opencannabis.schema.inventory.InventoryProduct, io.opencannabis.schema.inventory.InventoryProduct.Builder, io.opencannabis.schema.inventory.InventoryProductOrBuilder> 
          getInventoryFieldBuilder() {
        if (inventoryBuilder_ == null) {
          inventoryBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.opencannabis.schema.inventory.InventoryProduct, io.opencannabis.schema.inventory.InventoryProduct.Builder, io.opencannabis.schema.inventory.InventoryProductOrBuilder>(
                  inventory_,
                  ((bitField0_ & 0x00000008) != 0),
                  getParentForChildren(),
                  isClean());
          inventory_ = null;
        }
        return inventoryBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:bloombox.services.telemetry.v1beta4.InventoryEvent.StockUpdate)
    }

    // @@protoc_insertion_point(class_scope:bloombox.services.telemetry.v1beta4.InventoryEvent.StockUpdate)
    private static final io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate();
    }

    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StockUpdate>
        PARSER = new com.google.protobuf.AbstractParser<StockUpdate>() {
      @java.lang.Override
      public StockUpdate parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new StockUpdate(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<StockUpdate> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StockUpdate> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StockTransferOrBuilder extends
      // @@protoc_insertion_point(interface_extends:bloombox.services.telemetry.v1beta4.InventoryEvent.StockTransfer)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * ID for this transfer transaction.
     * </pre>
     *
     * <code>string transaction = 1;</code>
     */
    java.lang.String getTransaction();
    /**
     * <pre>
     * ID for this transfer transaction.
     * </pre>
     *
     * <code>string transaction = 1;</code>
     */
    com.google.protobuf.ByteString
        getTransactionBytes();

    /**
     * <pre>
     * ID for the transaction parent of this stock transfer.
     * </pre>
     *
     * <code>string parent = 2;</code>
     */
    java.lang.String getParent();
    /**
     * <pre>
     * ID for the transaction parent of this stock transfer.
     * </pre>
     *
     * <code>string parent = 2;</code>
     */
    com.google.protobuf.ByteString
        getParentBytes();

    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
     */
    boolean hasEvent();
    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
     */
    io.bloombox.schema.services.telemetry.v1beta4.InventoryContext getEvent();
    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
     */
    io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder getEventOrBuilder();

    /**
     * <pre>
     * Unique key, identifying the individual inventory item that is subject to transfer.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryKey key = 4;</code>
     */
    boolean hasKey();
    /**
     * <pre>
     * Unique key, identifying the individual inventory item that is subject to transfer.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryKey key = 4;</code>
     */
    io.opencannabis.schema.inventory.InventoryKey getKey();
    /**
     * <pre>
     * Unique key, identifying the individual inventory item that is subject to transfer.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryKey key = 4;</code>
     */
    io.opencannabis.schema.inventory.InventoryKeyOrBuilder getKeyOrBuilder();

    /**
     * <pre>
     * Coordinates for the inventory location where the product is transferring from.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryLocation origin = 5;</code>
     */
    boolean hasOrigin();
    /**
     * <pre>
     * Coordinates for the inventory location where the product is transferring from.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryLocation origin = 5;</code>
     */
    io.opencannabis.schema.inventory.InventoryLocation getOrigin();
    /**
     * <pre>
     * Coordinates for the inventory location where the product is transferring from.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryLocation origin = 5;</code>
     */
    io.opencannabis.schema.inventory.InventoryLocationOrBuilder getOriginOrBuilder();

    /**
     * <pre>
     * Coordinates for the inventory location where the product is transferring to.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryLocation target = 6;</code>
     */
    boolean hasTarget();
    /**
     * <pre>
     * Coordinates for the inventory location where the product is transferring to.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryLocation target = 6;</code>
     */
    io.opencannabis.schema.inventory.InventoryLocation getTarget();
    /**
     * <pre>
     * Coordinates for the inventory location where the product is transferring to.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryLocation target = 6;</code>
     */
    io.opencannabis.schema.inventory.InventoryLocationOrBuilder getTargetOrBuilder();
  }
  /**
   * <pre>
   * Describes a transfer of stock between licensed facilities. In order for inventory movements to qualify as full
   * transfer transactions, they must either move across physical boundaries (between locations subject to licensure) or
   * licensure or custody boundaries (between companies regardless of location).
   * </pre>
   *
   * Protobuf type {@code bloombox.services.telemetry.v1beta4.InventoryEvent.StockTransfer}
   */
  public  static final class StockTransfer extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:bloombox.services.telemetry.v1beta4.InventoryEvent.StockTransfer)
      StockTransferOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StockTransfer.newBuilder() to construct.
    private StockTransfer(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StockTransfer() {
      transaction_ = "";
      parent_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private StockTransfer(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              transaction_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              parent_ = s;
              break;
            }
            case 26: {
              io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder subBuilder = null;
              if (event_ != null) {
                subBuilder = event_.toBuilder();
              }
              event_ = input.readMessage(io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(event_);
                event_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              io.opencannabis.schema.inventory.InventoryKey.Builder subBuilder = null;
              if (key_ != null) {
                subBuilder = key_.toBuilder();
              }
              key_ = input.readMessage(io.opencannabis.schema.inventory.InventoryKey.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(key_);
                key_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              io.opencannabis.schema.inventory.InventoryLocation.Builder subBuilder = null;
              if (origin_ != null) {
                subBuilder = origin_.toBuilder();
              }
              origin_ = input.readMessage(io.opencannabis.schema.inventory.InventoryLocation.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(origin_);
                origin_ = subBuilder.buildPartial();
              }

              break;
            }
            case 50: {
              io.opencannabis.schema.inventory.InventoryLocation.Builder subBuilder = null;
              if (target_ != null) {
                subBuilder = target_.toBuilder();
              }
              target_ = input.readMessage(io.opencannabis.schema.inventory.InventoryLocation.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(target_);
                target_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_StockTransfer_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_StockTransfer_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer.class, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer.Builder.class);
    }

    public static final int TRANSACTION_FIELD_NUMBER = 1;
    private volatile java.lang.Object transaction_;
    /**
     * <pre>
     * ID for this transfer transaction.
     * </pre>
     *
     * <code>string transaction = 1;</code>
     */
    public java.lang.String getTransaction() {
      java.lang.Object ref = transaction_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        transaction_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * ID for this transfer transaction.
     * </pre>
     *
     * <code>string transaction = 1;</code>
     */
    public com.google.protobuf.ByteString
        getTransactionBytes() {
      java.lang.Object ref = transaction_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        transaction_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PARENT_FIELD_NUMBER = 2;
    private volatile java.lang.Object parent_;
    /**
     * <pre>
     * ID for the transaction parent of this stock transfer.
     * </pre>
     *
     * <code>string parent = 2;</code>
     */
    public java.lang.String getParent() {
      java.lang.Object ref = parent_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        parent_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * ID for the transaction parent of this stock transfer.
     * </pre>
     *
     * <code>string parent = 2;</code>
     */
    public com.google.protobuf.ByteString
        getParentBytes() {
      java.lang.Object ref = parent_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        parent_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int EVENT_FIELD_NUMBER = 3;
    private io.bloombox.schema.services.telemetry.v1beta4.InventoryContext event_;
    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
     */
    public boolean hasEvent() {
      return event_ != null;
    }
    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
     */
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryContext getEvent() {
      return event_ == null ? io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.getDefaultInstance() : event_;
    }
    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
     */
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder getEventOrBuilder() {
      return getEvent();
    }

    public static final int KEY_FIELD_NUMBER = 4;
    private io.opencannabis.schema.inventory.InventoryKey key_;
    /**
     * <pre>
     * Unique key, identifying the individual inventory item that is subject to transfer.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryKey key = 4;</code>
     */
    public boolean hasKey() {
      return key_ != null;
    }
    /**
     * <pre>
     * Unique key, identifying the individual inventory item that is subject to transfer.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryKey key = 4;</code>
     */
    public io.opencannabis.schema.inventory.InventoryKey getKey() {
      return key_ == null ? io.opencannabis.schema.inventory.InventoryKey.getDefaultInstance() : key_;
    }
    /**
     * <pre>
     * Unique key, identifying the individual inventory item that is subject to transfer.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryKey key = 4;</code>
     */
    public io.opencannabis.schema.inventory.InventoryKeyOrBuilder getKeyOrBuilder() {
      return getKey();
    }

    public static final int ORIGIN_FIELD_NUMBER = 5;
    private io.opencannabis.schema.inventory.InventoryLocation origin_;
    /**
     * <pre>
     * Coordinates for the inventory location where the product is transferring from.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryLocation origin = 5;</code>
     */
    public boolean hasOrigin() {
      return origin_ != null;
    }
    /**
     * <pre>
     * Coordinates for the inventory location where the product is transferring from.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryLocation origin = 5;</code>
     */
    public io.opencannabis.schema.inventory.InventoryLocation getOrigin() {
      return origin_ == null ? io.opencannabis.schema.inventory.InventoryLocation.getDefaultInstance() : origin_;
    }
    /**
     * <pre>
     * Coordinates for the inventory location where the product is transferring from.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryLocation origin = 5;</code>
     */
    public io.opencannabis.schema.inventory.InventoryLocationOrBuilder getOriginOrBuilder() {
      return getOrigin();
    }

    public static final int TARGET_FIELD_NUMBER = 6;
    private io.opencannabis.schema.inventory.InventoryLocation target_;
    /**
     * <pre>
     * Coordinates for the inventory location where the product is transferring to.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryLocation target = 6;</code>
     */
    public boolean hasTarget() {
      return target_ != null;
    }
    /**
     * <pre>
     * Coordinates for the inventory location where the product is transferring to.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryLocation target = 6;</code>
     */
    public io.opencannabis.schema.inventory.InventoryLocation getTarget() {
      return target_ == null ? io.opencannabis.schema.inventory.InventoryLocation.getDefaultInstance() : target_;
    }
    /**
     * <pre>
     * Coordinates for the inventory location where the product is transferring to.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryLocation target = 6;</code>
     */
    public io.opencannabis.schema.inventory.InventoryLocationOrBuilder getTargetOrBuilder() {
      return getTarget();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getTransactionBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, transaction_);
      }
      if (!getParentBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, parent_);
      }
      if (event_ != null) {
        output.writeMessage(3, getEvent());
      }
      if (key_ != null) {
        output.writeMessage(4, getKey());
      }
      if (origin_ != null) {
        output.writeMessage(5, getOrigin());
      }
      if (target_ != null) {
        output.writeMessage(6, getTarget());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getTransactionBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, transaction_);
      }
      if (!getParentBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, parent_);
      }
      if (event_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getEvent());
      }
      if (key_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getKey());
      }
      if (origin_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getOrigin());
      }
      if (target_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getTarget());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer)) {
        return super.equals(obj);
      }
      io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer other = (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer) obj;

      if (!getTransaction()
          .equals(other.getTransaction())) return false;
      if (!getParent()
          .equals(other.getParent())) return false;
      if (hasEvent() != other.hasEvent()) return false;
      if (hasEvent()) {
        if (!getEvent()
            .equals(other.getEvent())) return false;
      }
      if (hasKey() != other.hasKey()) return false;
      if (hasKey()) {
        if (!getKey()
            .equals(other.getKey())) return false;
      }
      if (hasOrigin() != other.hasOrigin()) return false;
      if (hasOrigin()) {
        if (!getOrigin()
            .equals(other.getOrigin())) return false;
      }
      if (hasTarget() != other.hasTarget()) return false;
      if (hasTarget()) {
        if (!getTarget()
            .equals(other.getTarget())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TRANSACTION_FIELD_NUMBER;
      hash = (53 * hash) + getTransaction().hashCode();
      hash = (37 * hash) + PARENT_FIELD_NUMBER;
      hash = (53 * hash) + getParent().hashCode();
      if (hasEvent()) {
        hash = (37 * hash) + EVENT_FIELD_NUMBER;
        hash = (53 * hash) + getEvent().hashCode();
      }
      if (hasKey()) {
        hash = (37 * hash) + KEY_FIELD_NUMBER;
        hash = (53 * hash) + getKey().hashCode();
      }
      if (hasOrigin()) {
        hash = (37 * hash) + ORIGIN_FIELD_NUMBER;
        hash = (53 * hash) + getOrigin().hashCode();
      }
      if (hasTarget()) {
        hash = (37 * hash) + TARGET_FIELD_NUMBER;
        hash = (53 * hash) + getTarget().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Describes a transfer of stock between licensed facilities. In order for inventory movements to qualify as full
     * transfer transactions, they must either move across physical boundaries (between locations subject to licensure) or
     * licensure or custody boundaries (between companies regardless of location).
     * </pre>
     *
     * Protobuf type {@code bloombox.services.telemetry.v1beta4.InventoryEvent.StockTransfer}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:bloombox.services.telemetry.v1beta4.InventoryEvent.StockTransfer)
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransferOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_StockTransfer_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_StockTransfer_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer.class, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer.Builder.class);
      }

      // Construct using io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        transaction_ = "";

        parent_ = "";

        if (eventBuilder_ == null) {
          event_ = null;
        } else {
          event_ = null;
          eventBuilder_ = null;
        }
        if (keyBuilder_ == null) {
          key_ = null;
        } else {
          key_ = null;
          keyBuilder_ = null;
        }
        if (originBuilder_ == null) {
          origin_ = null;
        } else {
          origin_ = null;
          originBuilder_ = null;
        }
        if (targetBuilder_ == null) {
          target_ = null;
        } else {
          target_ = null;
          targetBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_StockTransfer_descriptor;
      }

      @java.lang.Override
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer getDefaultInstanceForType() {
        return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer.getDefaultInstance();
      }

      @java.lang.Override
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer build() {
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer buildPartial() {
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer result = new io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer(this);
        result.transaction_ = transaction_;
        result.parent_ = parent_;
        if (eventBuilder_ == null) {
          result.event_ = event_;
        } else {
          result.event_ = eventBuilder_.build();
        }
        if (keyBuilder_ == null) {
          result.key_ = key_;
        } else {
          result.key_ = keyBuilder_.build();
        }
        if (originBuilder_ == null) {
          result.origin_ = origin_;
        } else {
          result.origin_ = originBuilder_.build();
        }
        if (targetBuilder_ == null) {
          result.target_ = target_;
        } else {
          result.target_ = targetBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer) {
          return mergeFrom((io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer other) {
        if (other == io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer.getDefaultInstance()) return this;
        if (!other.getTransaction().isEmpty()) {
          transaction_ = other.transaction_;
          onChanged();
        }
        if (!other.getParent().isEmpty()) {
          parent_ = other.parent_;
          onChanged();
        }
        if (other.hasEvent()) {
          mergeEvent(other.getEvent());
        }
        if (other.hasKey()) {
          mergeKey(other.getKey());
        }
        if (other.hasOrigin()) {
          mergeOrigin(other.getOrigin());
        }
        if (other.hasTarget()) {
          mergeTarget(other.getTarget());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object transaction_ = "";
      /**
       * <pre>
       * ID for this transfer transaction.
       * </pre>
       *
       * <code>string transaction = 1;</code>
       */
      public java.lang.String getTransaction() {
        java.lang.Object ref = transaction_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          transaction_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * ID for this transfer transaction.
       * </pre>
       *
       * <code>string transaction = 1;</code>
       */
      public com.google.protobuf.ByteString
          getTransactionBytes() {
        java.lang.Object ref = transaction_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          transaction_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * ID for this transfer transaction.
       * </pre>
       *
       * <code>string transaction = 1;</code>
       */
      public Builder setTransaction(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        transaction_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ID for this transfer transaction.
       * </pre>
       *
       * <code>string transaction = 1;</code>
       */
      public Builder clearTransaction() {
        
        transaction_ = getDefaultInstance().getTransaction();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ID for this transfer transaction.
       * </pre>
       *
       * <code>string transaction = 1;</code>
       */
      public Builder setTransactionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        transaction_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object parent_ = "";
      /**
       * <pre>
       * ID for the transaction parent of this stock transfer.
       * </pre>
       *
       * <code>string parent = 2;</code>
       */
      public java.lang.String getParent() {
        java.lang.Object ref = parent_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          parent_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * ID for the transaction parent of this stock transfer.
       * </pre>
       *
       * <code>string parent = 2;</code>
       */
      public com.google.protobuf.ByteString
          getParentBytes() {
        java.lang.Object ref = parent_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          parent_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * ID for the transaction parent of this stock transfer.
       * </pre>
       *
       * <code>string parent = 2;</code>
       */
      public Builder setParent(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        parent_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ID for the transaction parent of this stock transfer.
       * </pre>
       *
       * <code>string parent = 2;</code>
       */
      public Builder clearParent() {
        
        parent_ = getDefaultInstance().getParent();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ID for the transaction parent of this stock transfer.
       * </pre>
       *
       * <code>string parent = 2;</code>
       */
      public Builder setParentBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        parent_ = value;
        onChanged();
        return this;
      }

      private io.bloombox.schema.services.telemetry.v1beta4.InventoryContext event_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.services.telemetry.v1beta4.InventoryContext, io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder> eventBuilder_;
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
       */
      public boolean hasEvent() {
        return eventBuilder_ != null || event_ != null;
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
       */
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryContext getEvent() {
        if (eventBuilder_ == null) {
          return event_ == null ? io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.getDefaultInstance() : event_;
        } else {
          return eventBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
       */
      public Builder setEvent(io.bloombox.schema.services.telemetry.v1beta4.InventoryContext value) {
        if (eventBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          event_ = value;
          onChanged();
        } else {
          eventBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
       */
      public Builder setEvent(
          io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder builderForValue) {
        if (eventBuilder_ == null) {
          event_ = builderForValue.build();
          onChanged();
        } else {
          eventBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
       */
      public Builder mergeEvent(io.bloombox.schema.services.telemetry.v1beta4.InventoryContext value) {
        if (eventBuilder_ == null) {
          if (event_ != null) {
            event_ =
              io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.newBuilder(event_).mergeFrom(value).buildPartial();
          } else {
            event_ = value;
          }
          onChanged();
        } else {
          eventBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
       */
      public Builder clearEvent() {
        if (eventBuilder_ == null) {
          event_ = null;
          onChanged();
        } else {
          event_ = null;
          eventBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
       */
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder getEventBuilder() {
        
        onChanged();
        return getEventFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
       */
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder getEventOrBuilder() {
        if (eventBuilder_ != null) {
          return eventBuilder_.getMessageOrBuilder();
        } else {
          return event_ == null ?
              io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.getDefaultInstance() : event_;
        }
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.services.telemetry.v1beta4.InventoryContext, io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder> 
          getEventFieldBuilder() {
        if (eventBuilder_ == null) {
          eventBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.bloombox.schema.services.telemetry.v1beta4.InventoryContext, io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder>(
                  getEvent(),
                  getParentForChildren(),
                  isClean());
          event_ = null;
        }
        return eventBuilder_;
      }

      private io.opencannabis.schema.inventory.InventoryKey key_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.inventory.InventoryKey, io.opencannabis.schema.inventory.InventoryKey.Builder, io.opencannabis.schema.inventory.InventoryKeyOrBuilder> keyBuilder_;
      /**
       * <pre>
       * Unique key, identifying the individual inventory item that is subject to transfer.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryKey key = 4;</code>
       */
      public boolean hasKey() {
        return keyBuilder_ != null || key_ != null;
      }
      /**
       * <pre>
       * Unique key, identifying the individual inventory item that is subject to transfer.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryKey key = 4;</code>
       */
      public io.opencannabis.schema.inventory.InventoryKey getKey() {
        if (keyBuilder_ == null) {
          return key_ == null ? io.opencannabis.schema.inventory.InventoryKey.getDefaultInstance() : key_;
        } else {
          return keyBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Unique key, identifying the individual inventory item that is subject to transfer.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryKey key = 4;</code>
       */
      public Builder setKey(io.opencannabis.schema.inventory.InventoryKey value) {
        if (keyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          key_ = value;
          onChanged();
        } else {
          keyBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Unique key, identifying the individual inventory item that is subject to transfer.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryKey key = 4;</code>
       */
      public Builder setKey(
          io.opencannabis.schema.inventory.InventoryKey.Builder builderForValue) {
        if (keyBuilder_ == null) {
          key_ = builderForValue.build();
          onChanged();
        } else {
          keyBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Unique key, identifying the individual inventory item that is subject to transfer.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryKey key = 4;</code>
       */
      public Builder mergeKey(io.opencannabis.schema.inventory.InventoryKey value) {
        if (keyBuilder_ == null) {
          if (key_ != null) {
            key_ =
              io.opencannabis.schema.inventory.InventoryKey.newBuilder(key_).mergeFrom(value).buildPartial();
          } else {
            key_ = value;
          }
          onChanged();
        } else {
          keyBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Unique key, identifying the individual inventory item that is subject to transfer.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryKey key = 4;</code>
       */
      public Builder clearKey() {
        if (keyBuilder_ == null) {
          key_ = null;
          onChanged();
        } else {
          key_ = null;
          keyBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Unique key, identifying the individual inventory item that is subject to transfer.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryKey key = 4;</code>
       */
      public io.opencannabis.schema.inventory.InventoryKey.Builder getKeyBuilder() {
        
        onChanged();
        return getKeyFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Unique key, identifying the individual inventory item that is subject to transfer.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryKey key = 4;</code>
       */
      public io.opencannabis.schema.inventory.InventoryKeyOrBuilder getKeyOrBuilder() {
        if (keyBuilder_ != null) {
          return keyBuilder_.getMessageOrBuilder();
        } else {
          return key_ == null ?
              io.opencannabis.schema.inventory.InventoryKey.getDefaultInstance() : key_;
        }
      }
      /**
       * <pre>
       * Unique key, identifying the individual inventory item that is subject to transfer.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryKey key = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.inventory.InventoryKey, io.opencannabis.schema.inventory.InventoryKey.Builder, io.opencannabis.schema.inventory.InventoryKeyOrBuilder> 
          getKeyFieldBuilder() {
        if (keyBuilder_ == null) {
          keyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.opencannabis.schema.inventory.InventoryKey, io.opencannabis.schema.inventory.InventoryKey.Builder, io.opencannabis.schema.inventory.InventoryKeyOrBuilder>(
                  getKey(),
                  getParentForChildren(),
                  isClean());
          key_ = null;
        }
        return keyBuilder_;
      }

      private io.opencannabis.schema.inventory.InventoryLocation origin_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.inventory.InventoryLocation, io.opencannabis.schema.inventory.InventoryLocation.Builder, io.opencannabis.schema.inventory.InventoryLocationOrBuilder> originBuilder_;
      /**
       * <pre>
       * Coordinates for the inventory location where the product is transferring from.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryLocation origin = 5;</code>
       */
      public boolean hasOrigin() {
        return originBuilder_ != null || origin_ != null;
      }
      /**
       * <pre>
       * Coordinates for the inventory location where the product is transferring from.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryLocation origin = 5;</code>
       */
      public io.opencannabis.schema.inventory.InventoryLocation getOrigin() {
        if (originBuilder_ == null) {
          return origin_ == null ? io.opencannabis.schema.inventory.InventoryLocation.getDefaultInstance() : origin_;
        } else {
          return originBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Coordinates for the inventory location where the product is transferring from.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryLocation origin = 5;</code>
       */
      public Builder setOrigin(io.opencannabis.schema.inventory.InventoryLocation value) {
        if (originBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          origin_ = value;
          onChanged();
        } else {
          originBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Coordinates for the inventory location where the product is transferring from.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryLocation origin = 5;</code>
       */
      public Builder setOrigin(
          io.opencannabis.schema.inventory.InventoryLocation.Builder builderForValue) {
        if (originBuilder_ == null) {
          origin_ = builderForValue.build();
          onChanged();
        } else {
          originBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Coordinates for the inventory location where the product is transferring from.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryLocation origin = 5;</code>
       */
      public Builder mergeOrigin(io.opencannabis.schema.inventory.InventoryLocation value) {
        if (originBuilder_ == null) {
          if (origin_ != null) {
            origin_ =
              io.opencannabis.schema.inventory.InventoryLocation.newBuilder(origin_).mergeFrom(value).buildPartial();
          } else {
            origin_ = value;
          }
          onChanged();
        } else {
          originBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Coordinates for the inventory location where the product is transferring from.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryLocation origin = 5;</code>
       */
      public Builder clearOrigin() {
        if (originBuilder_ == null) {
          origin_ = null;
          onChanged();
        } else {
          origin_ = null;
          originBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Coordinates for the inventory location where the product is transferring from.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryLocation origin = 5;</code>
       */
      public io.opencannabis.schema.inventory.InventoryLocation.Builder getOriginBuilder() {
        
        onChanged();
        return getOriginFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Coordinates for the inventory location where the product is transferring from.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryLocation origin = 5;</code>
       */
      public io.opencannabis.schema.inventory.InventoryLocationOrBuilder getOriginOrBuilder() {
        if (originBuilder_ != null) {
          return originBuilder_.getMessageOrBuilder();
        } else {
          return origin_ == null ?
              io.opencannabis.schema.inventory.InventoryLocation.getDefaultInstance() : origin_;
        }
      }
      /**
       * <pre>
       * Coordinates for the inventory location where the product is transferring from.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryLocation origin = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.inventory.InventoryLocation, io.opencannabis.schema.inventory.InventoryLocation.Builder, io.opencannabis.schema.inventory.InventoryLocationOrBuilder> 
          getOriginFieldBuilder() {
        if (originBuilder_ == null) {
          originBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.opencannabis.schema.inventory.InventoryLocation, io.opencannabis.schema.inventory.InventoryLocation.Builder, io.opencannabis.schema.inventory.InventoryLocationOrBuilder>(
                  getOrigin(),
                  getParentForChildren(),
                  isClean());
          origin_ = null;
        }
        return originBuilder_;
      }

      private io.opencannabis.schema.inventory.InventoryLocation target_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.inventory.InventoryLocation, io.opencannabis.schema.inventory.InventoryLocation.Builder, io.opencannabis.schema.inventory.InventoryLocationOrBuilder> targetBuilder_;
      /**
       * <pre>
       * Coordinates for the inventory location where the product is transferring to.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryLocation target = 6;</code>
       */
      public boolean hasTarget() {
        return targetBuilder_ != null || target_ != null;
      }
      /**
       * <pre>
       * Coordinates for the inventory location where the product is transferring to.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryLocation target = 6;</code>
       */
      public io.opencannabis.schema.inventory.InventoryLocation getTarget() {
        if (targetBuilder_ == null) {
          return target_ == null ? io.opencannabis.schema.inventory.InventoryLocation.getDefaultInstance() : target_;
        } else {
          return targetBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Coordinates for the inventory location where the product is transferring to.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryLocation target = 6;</code>
       */
      public Builder setTarget(io.opencannabis.schema.inventory.InventoryLocation value) {
        if (targetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          target_ = value;
          onChanged();
        } else {
          targetBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Coordinates for the inventory location where the product is transferring to.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryLocation target = 6;</code>
       */
      public Builder setTarget(
          io.opencannabis.schema.inventory.InventoryLocation.Builder builderForValue) {
        if (targetBuilder_ == null) {
          target_ = builderForValue.build();
          onChanged();
        } else {
          targetBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Coordinates for the inventory location where the product is transferring to.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryLocation target = 6;</code>
       */
      public Builder mergeTarget(io.opencannabis.schema.inventory.InventoryLocation value) {
        if (targetBuilder_ == null) {
          if (target_ != null) {
            target_ =
              io.opencannabis.schema.inventory.InventoryLocation.newBuilder(target_).mergeFrom(value).buildPartial();
          } else {
            target_ = value;
          }
          onChanged();
        } else {
          targetBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Coordinates for the inventory location where the product is transferring to.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryLocation target = 6;</code>
       */
      public Builder clearTarget() {
        if (targetBuilder_ == null) {
          target_ = null;
          onChanged();
        } else {
          target_ = null;
          targetBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Coordinates for the inventory location where the product is transferring to.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryLocation target = 6;</code>
       */
      public io.opencannabis.schema.inventory.InventoryLocation.Builder getTargetBuilder() {
        
        onChanged();
        return getTargetFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Coordinates for the inventory location where the product is transferring to.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryLocation target = 6;</code>
       */
      public io.opencannabis.schema.inventory.InventoryLocationOrBuilder getTargetOrBuilder() {
        if (targetBuilder_ != null) {
          return targetBuilder_.getMessageOrBuilder();
        } else {
          return target_ == null ?
              io.opencannabis.schema.inventory.InventoryLocation.getDefaultInstance() : target_;
        }
      }
      /**
       * <pre>
       * Coordinates for the inventory location where the product is transferring to.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryLocation target = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.inventory.InventoryLocation, io.opencannabis.schema.inventory.InventoryLocation.Builder, io.opencannabis.schema.inventory.InventoryLocationOrBuilder> 
          getTargetFieldBuilder() {
        if (targetBuilder_ == null) {
          targetBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.opencannabis.schema.inventory.InventoryLocation, io.opencannabis.schema.inventory.InventoryLocation.Builder, io.opencannabis.schema.inventory.InventoryLocationOrBuilder>(
                  getTarget(),
                  getParentForChildren(),
                  isClean());
          target_ = null;
        }
        return targetBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:bloombox.services.telemetry.v1beta4.InventoryEvent.StockTransfer)
    }

    // @@protoc_insertion_point(class_scope:bloombox.services.telemetry.v1beta4.InventoryEvent.StockTransfer)
    private static final io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer();
    }

    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StockTransfer>
        PARSER = new com.google.protobuf.AbstractParser<StockTransfer>() {
      @java.lang.Override
      public StockTransfer parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new StockTransfer(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<StockTransfer> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StockTransfer> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StockReserveOrBuilder extends
      // @@protoc_insertion_point(interface_extends:bloombox.services.telemetry.v1beta4.InventoryEvent.StockReserve)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * ID for this reservation transaction.
     * </pre>
     *
     * <code>string transaction = 1;</code>
     */
    java.lang.String getTransaction();
    /**
     * <pre>
     * ID for this reservation transaction.
     * </pre>
     *
     * <code>string transaction = 1;</code>
     */
    com.google.protobuf.ByteString
        getTransactionBytes();

    /**
     * <pre>
     * ID for the transaction parent of this stock reservation.
     * </pre>
     *
     * <code>string parent = 2;</code>
     */
    java.lang.String getParent();
    /**
     * <pre>
     * ID for the transaction parent of this stock reservation.
     * </pre>
     *
     * <code>string parent = 2;</code>
     */
    com.google.protobuf.ByteString
        getParentBytes();

    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
     */
    boolean hasEvent();
    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
     */
    io.bloombox.schema.services.telemetry.v1beta4.InventoryContext getEvent();
    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
     */
    io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder getEventOrBuilder();

    /**
     * <pre>
     * Unique key, identifying the individual inventory item that is subject to this reservation.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryKey key = 4;</code>
     */
    boolean hasKey();
    /**
     * <pre>
     * Unique key, identifying the individual inventory item that is subject to this reservation.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryKey key = 4;</code>
     */
    io.opencannabis.schema.inventory.InventoryKey getKey();
    /**
     * <pre>
     * Unique key, identifying the individual inventory item that is subject to this reservation.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryKey key = 4;</code>
     */
    io.opencannabis.schema.inventory.InventoryKeyOrBuilder getKeyOrBuilder();

    /**
     * <pre>
     * Requested duration of the stock reservation, otherwise known as the "lease time." After this amount of time, if
     * the underlying material has not been "consumed" or "transferred," the reservation is considered null and void,
     * and the underlying tracked inventory is free to be interacted with otherwise in the supply chain.
     * </pre>
     *
     * <code>.opencannabis.temporal.Duration lease = 5;</code>
     */
    boolean hasLease();
    /**
     * <pre>
     * Requested duration of the stock reservation, otherwise known as the "lease time." After this amount of time, if
     * the underlying material has not been "consumed" or "transferred," the reservation is considered null and void,
     * and the underlying tracked inventory is free to be interacted with otherwise in the supply chain.
     * </pre>
     *
     * <code>.opencannabis.temporal.Duration lease = 5;</code>
     */
    io.opencannabis.schema.temporal.Duration getLease();
    /**
     * <pre>
     * Requested duration of the stock reservation, otherwise known as the "lease time." After this amount of time, if
     * the underlying material has not been "consumed" or "transferred," the reservation is considered null and void,
     * and the underlying tracked inventory is free to be interacted with otherwise in the supply chain.
     * </pre>
     *
     * <code>.opencannabis.temporal.Duration lease = 5;</code>
     */
    io.opencannabis.schema.temporal.DurationOrBuilder getLeaseOrBuilder();
  }
  /**
   * <pre>
   * Requests a reservation of some piece or amount of tracked inventory. In this case, if the system can fulfill the
   * reservation amount, the stock may be set aside or "reserved" for some portion of time, with the expectation that
   * the stock be untouched or frozen-in-place in the supply chain until it is claimed or the lease time expires.
   * </pre>
   *
   * Protobuf type {@code bloombox.services.telemetry.v1beta4.InventoryEvent.StockReserve}
   */
  public  static final class StockReserve extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:bloombox.services.telemetry.v1beta4.InventoryEvent.StockReserve)
      StockReserveOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StockReserve.newBuilder() to construct.
    private StockReserve(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StockReserve() {
      transaction_ = "";
      parent_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private StockReserve(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              transaction_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              parent_ = s;
              break;
            }
            case 26: {
              io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder subBuilder = null;
              if (event_ != null) {
                subBuilder = event_.toBuilder();
              }
              event_ = input.readMessage(io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(event_);
                event_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              io.opencannabis.schema.inventory.InventoryKey.Builder subBuilder = null;
              if (key_ != null) {
                subBuilder = key_.toBuilder();
              }
              key_ = input.readMessage(io.opencannabis.schema.inventory.InventoryKey.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(key_);
                key_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              io.opencannabis.schema.temporal.Duration.Builder subBuilder = null;
              if (lease_ != null) {
                subBuilder = lease_.toBuilder();
              }
              lease_ = input.readMessage(io.opencannabis.schema.temporal.Duration.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(lease_);
                lease_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_StockReserve_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_StockReserve_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve.class, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve.Builder.class);
    }

    public static final int TRANSACTION_FIELD_NUMBER = 1;
    private volatile java.lang.Object transaction_;
    /**
     * <pre>
     * ID for this reservation transaction.
     * </pre>
     *
     * <code>string transaction = 1;</code>
     */
    public java.lang.String getTransaction() {
      java.lang.Object ref = transaction_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        transaction_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * ID for this reservation transaction.
     * </pre>
     *
     * <code>string transaction = 1;</code>
     */
    public com.google.protobuf.ByteString
        getTransactionBytes() {
      java.lang.Object ref = transaction_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        transaction_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PARENT_FIELD_NUMBER = 2;
    private volatile java.lang.Object parent_;
    /**
     * <pre>
     * ID for the transaction parent of this stock reservation.
     * </pre>
     *
     * <code>string parent = 2;</code>
     */
    public java.lang.String getParent() {
      java.lang.Object ref = parent_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        parent_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * ID for the transaction parent of this stock reservation.
     * </pre>
     *
     * <code>string parent = 2;</code>
     */
    public com.google.protobuf.ByteString
        getParentBytes() {
      java.lang.Object ref = parent_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        parent_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int EVENT_FIELD_NUMBER = 3;
    private io.bloombox.schema.services.telemetry.v1beta4.InventoryContext event_;
    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
     */
    public boolean hasEvent() {
      return event_ != null;
    }
    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
     */
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryContext getEvent() {
      return event_ == null ? io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.getDefaultInstance() : event_;
    }
    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
     */
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder getEventOrBuilder() {
      return getEvent();
    }

    public static final int KEY_FIELD_NUMBER = 4;
    private io.opencannabis.schema.inventory.InventoryKey key_;
    /**
     * <pre>
     * Unique key, identifying the individual inventory item that is subject to this reservation.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryKey key = 4;</code>
     */
    public boolean hasKey() {
      return key_ != null;
    }
    /**
     * <pre>
     * Unique key, identifying the individual inventory item that is subject to this reservation.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryKey key = 4;</code>
     */
    public io.opencannabis.schema.inventory.InventoryKey getKey() {
      return key_ == null ? io.opencannabis.schema.inventory.InventoryKey.getDefaultInstance() : key_;
    }
    /**
     * <pre>
     * Unique key, identifying the individual inventory item that is subject to this reservation.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryKey key = 4;</code>
     */
    public io.opencannabis.schema.inventory.InventoryKeyOrBuilder getKeyOrBuilder() {
      return getKey();
    }

    public static final int LEASE_FIELD_NUMBER = 5;
    private io.opencannabis.schema.temporal.Duration lease_;
    /**
     * <pre>
     * Requested duration of the stock reservation, otherwise known as the "lease time." After this amount of time, if
     * the underlying material has not been "consumed" or "transferred," the reservation is considered null and void,
     * and the underlying tracked inventory is free to be interacted with otherwise in the supply chain.
     * </pre>
     *
     * <code>.opencannabis.temporal.Duration lease = 5;</code>
     */
    public boolean hasLease() {
      return lease_ != null;
    }
    /**
     * <pre>
     * Requested duration of the stock reservation, otherwise known as the "lease time." After this amount of time, if
     * the underlying material has not been "consumed" or "transferred," the reservation is considered null and void,
     * and the underlying tracked inventory is free to be interacted with otherwise in the supply chain.
     * </pre>
     *
     * <code>.opencannabis.temporal.Duration lease = 5;</code>
     */
    public io.opencannabis.schema.temporal.Duration getLease() {
      return lease_ == null ? io.opencannabis.schema.temporal.Duration.getDefaultInstance() : lease_;
    }
    /**
     * <pre>
     * Requested duration of the stock reservation, otherwise known as the "lease time." After this amount of time, if
     * the underlying material has not been "consumed" or "transferred," the reservation is considered null and void,
     * and the underlying tracked inventory is free to be interacted with otherwise in the supply chain.
     * </pre>
     *
     * <code>.opencannabis.temporal.Duration lease = 5;</code>
     */
    public io.opencannabis.schema.temporal.DurationOrBuilder getLeaseOrBuilder() {
      return getLease();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getTransactionBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, transaction_);
      }
      if (!getParentBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, parent_);
      }
      if (event_ != null) {
        output.writeMessage(3, getEvent());
      }
      if (key_ != null) {
        output.writeMessage(4, getKey());
      }
      if (lease_ != null) {
        output.writeMessage(5, getLease());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getTransactionBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, transaction_);
      }
      if (!getParentBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, parent_);
      }
      if (event_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getEvent());
      }
      if (key_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getKey());
      }
      if (lease_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getLease());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve)) {
        return super.equals(obj);
      }
      io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve other = (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve) obj;

      if (!getTransaction()
          .equals(other.getTransaction())) return false;
      if (!getParent()
          .equals(other.getParent())) return false;
      if (hasEvent() != other.hasEvent()) return false;
      if (hasEvent()) {
        if (!getEvent()
            .equals(other.getEvent())) return false;
      }
      if (hasKey() != other.hasKey()) return false;
      if (hasKey()) {
        if (!getKey()
            .equals(other.getKey())) return false;
      }
      if (hasLease() != other.hasLease()) return false;
      if (hasLease()) {
        if (!getLease()
            .equals(other.getLease())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TRANSACTION_FIELD_NUMBER;
      hash = (53 * hash) + getTransaction().hashCode();
      hash = (37 * hash) + PARENT_FIELD_NUMBER;
      hash = (53 * hash) + getParent().hashCode();
      if (hasEvent()) {
        hash = (37 * hash) + EVENT_FIELD_NUMBER;
        hash = (53 * hash) + getEvent().hashCode();
      }
      if (hasKey()) {
        hash = (37 * hash) + KEY_FIELD_NUMBER;
        hash = (53 * hash) + getKey().hashCode();
      }
      if (hasLease()) {
        hash = (37 * hash) + LEASE_FIELD_NUMBER;
        hash = (53 * hash) + getLease().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Requests a reservation of some piece or amount of tracked inventory. In this case, if the system can fulfill the
     * reservation amount, the stock may be set aside or "reserved" for some portion of time, with the expectation that
     * the stock be untouched or frozen-in-place in the supply chain until it is claimed or the lease time expires.
     * </pre>
     *
     * Protobuf type {@code bloombox.services.telemetry.v1beta4.InventoryEvent.StockReserve}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:bloombox.services.telemetry.v1beta4.InventoryEvent.StockReserve)
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserveOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_StockReserve_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_StockReserve_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve.class, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve.Builder.class);
      }

      // Construct using io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        transaction_ = "";

        parent_ = "";

        if (eventBuilder_ == null) {
          event_ = null;
        } else {
          event_ = null;
          eventBuilder_ = null;
        }
        if (keyBuilder_ == null) {
          key_ = null;
        } else {
          key_ = null;
          keyBuilder_ = null;
        }
        if (leaseBuilder_ == null) {
          lease_ = null;
        } else {
          lease_ = null;
          leaseBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_StockReserve_descriptor;
      }

      @java.lang.Override
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve getDefaultInstanceForType() {
        return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve.getDefaultInstance();
      }

      @java.lang.Override
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve build() {
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve buildPartial() {
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve result = new io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve(this);
        result.transaction_ = transaction_;
        result.parent_ = parent_;
        if (eventBuilder_ == null) {
          result.event_ = event_;
        } else {
          result.event_ = eventBuilder_.build();
        }
        if (keyBuilder_ == null) {
          result.key_ = key_;
        } else {
          result.key_ = keyBuilder_.build();
        }
        if (leaseBuilder_ == null) {
          result.lease_ = lease_;
        } else {
          result.lease_ = leaseBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve) {
          return mergeFrom((io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve other) {
        if (other == io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve.getDefaultInstance()) return this;
        if (!other.getTransaction().isEmpty()) {
          transaction_ = other.transaction_;
          onChanged();
        }
        if (!other.getParent().isEmpty()) {
          parent_ = other.parent_;
          onChanged();
        }
        if (other.hasEvent()) {
          mergeEvent(other.getEvent());
        }
        if (other.hasKey()) {
          mergeKey(other.getKey());
        }
        if (other.hasLease()) {
          mergeLease(other.getLease());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object transaction_ = "";
      /**
       * <pre>
       * ID for this reservation transaction.
       * </pre>
       *
       * <code>string transaction = 1;</code>
       */
      public java.lang.String getTransaction() {
        java.lang.Object ref = transaction_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          transaction_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * ID for this reservation transaction.
       * </pre>
       *
       * <code>string transaction = 1;</code>
       */
      public com.google.protobuf.ByteString
          getTransactionBytes() {
        java.lang.Object ref = transaction_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          transaction_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * ID for this reservation transaction.
       * </pre>
       *
       * <code>string transaction = 1;</code>
       */
      public Builder setTransaction(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        transaction_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ID for this reservation transaction.
       * </pre>
       *
       * <code>string transaction = 1;</code>
       */
      public Builder clearTransaction() {
        
        transaction_ = getDefaultInstance().getTransaction();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ID for this reservation transaction.
       * </pre>
       *
       * <code>string transaction = 1;</code>
       */
      public Builder setTransactionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        transaction_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object parent_ = "";
      /**
       * <pre>
       * ID for the transaction parent of this stock reservation.
       * </pre>
       *
       * <code>string parent = 2;</code>
       */
      public java.lang.String getParent() {
        java.lang.Object ref = parent_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          parent_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * ID for the transaction parent of this stock reservation.
       * </pre>
       *
       * <code>string parent = 2;</code>
       */
      public com.google.protobuf.ByteString
          getParentBytes() {
        java.lang.Object ref = parent_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          parent_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * ID for the transaction parent of this stock reservation.
       * </pre>
       *
       * <code>string parent = 2;</code>
       */
      public Builder setParent(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        parent_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ID for the transaction parent of this stock reservation.
       * </pre>
       *
       * <code>string parent = 2;</code>
       */
      public Builder clearParent() {
        
        parent_ = getDefaultInstance().getParent();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ID for the transaction parent of this stock reservation.
       * </pre>
       *
       * <code>string parent = 2;</code>
       */
      public Builder setParentBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        parent_ = value;
        onChanged();
        return this;
      }

      private io.bloombox.schema.services.telemetry.v1beta4.InventoryContext event_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.services.telemetry.v1beta4.InventoryContext, io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder> eventBuilder_;
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
       */
      public boolean hasEvent() {
        return eventBuilder_ != null || event_ != null;
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
       */
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryContext getEvent() {
        if (eventBuilder_ == null) {
          return event_ == null ? io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.getDefaultInstance() : event_;
        } else {
          return eventBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
       */
      public Builder setEvent(io.bloombox.schema.services.telemetry.v1beta4.InventoryContext value) {
        if (eventBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          event_ = value;
          onChanged();
        } else {
          eventBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
       */
      public Builder setEvent(
          io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder builderForValue) {
        if (eventBuilder_ == null) {
          event_ = builderForValue.build();
          onChanged();
        } else {
          eventBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
       */
      public Builder mergeEvent(io.bloombox.schema.services.telemetry.v1beta4.InventoryContext value) {
        if (eventBuilder_ == null) {
          if (event_ != null) {
            event_ =
              io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.newBuilder(event_).mergeFrom(value).buildPartial();
          } else {
            event_ = value;
          }
          onChanged();
        } else {
          eventBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
       */
      public Builder clearEvent() {
        if (eventBuilder_ == null) {
          event_ = null;
          onChanged();
        } else {
          event_ = null;
          eventBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
       */
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder getEventBuilder() {
        
        onChanged();
        return getEventFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
       */
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder getEventOrBuilder() {
        if (eventBuilder_ != null) {
          return eventBuilder_.getMessageOrBuilder();
        } else {
          return event_ == null ?
              io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.getDefaultInstance() : event_;
        }
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.services.telemetry.v1beta4.InventoryContext, io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder> 
          getEventFieldBuilder() {
        if (eventBuilder_ == null) {
          eventBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.bloombox.schema.services.telemetry.v1beta4.InventoryContext, io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder>(
                  getEvent(),
                  getParentForChildren(),
                  isClean());
          event_ = null;
        }
        return eventBuilder_;
      }

      private io.opencannabis.schema.inventory.InventoryKey key_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.inventory.InventoryKey, io.opencannabis.schema.inventory.InventoryKey.Builder, io.opencannabis.schema.inventory.InventoryKeyOrBuilder> keyBuilder_;
      /**
       * <pre>
       * Unique key, identifying the individual inventory item that is subject to this reservation.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryKey key = 4;</code>
       */
      public boolean hasKey() {
        return keyBuilder_ != null || key_ != null;
      }
      /**
       * <pre>
       * Unique key, identifying the individual inventory item that is subject to this reservation.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryKey key = 4;</code>
       */
      public io.opencannabis.schema.inventory.InventoryKey getKey() {
        if (keyBuilder_ == null) {
          return key_ == null ? io.opencannabis.schema.inventory.InventoryKey.getDefaultInstance() : key_;
        } else {
          return keyBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Unique key, identifying the individual inventory item that is subject to this reservation.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryKey key = 4;</code>
       */
      public Builder setKey(io.opencannabis.schema.inventory.InventoryKey value) {
        if (keyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          key_ = value;
          onChanged();
        } else {
          keyBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Unique key, identifying the individual inventory item that is subject to this reservation.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryKey key = 4;</code>
       */
      public Builder setKey(
          io.opencannabis.schema.inventory.InventoryKey.Builder builderForValue) {
        if (keyBuilder_ == null) {
          key_ = builderForValue.build();
          onChanged();
        } else {
          keyBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Unique key, identifying the individual inventory item that is subject to this reservation.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryKey key = 4;</code>
       */
      public Builder mergeKey(io.opencannabis.schema.inventory.InventoryKey value) {
        if (keyBuilder_ == null) {
          if (key_ != null) {
            key_ =
              io.opencannabis.schema.inventory.InventoryKey.newBuilder(key_).mergeFrom(value).buildPartial();
          } else {
            key_ = value;
          }
          onChanged();
        } else {
          keyBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Unique key, identifying the individual inventory item that is subject to this reservation.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryKey key = 4;</code>
       */
      public Builder clearKey() {
        if (keyBuilder_ == null) {
          key_ = null;
          onChanged();
        } else {
          key_ = null;
          keyBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Unique key, identifying the individual inventory item that is subject to this reservation.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryKey key = 4;</code>
       */
      public io.opencannabis.schema.inventory.InventoryKey.Builder getKeyBuilder() {
        
        onChanged();
        return getKeyFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Unique key, identifying the individual inventory item that is subject to this reservation.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryKey key = 4;</code>
       */
      public io.opencannabis.schema.inventory.InventoryKeyOrBuilder getKeyOrBuilder() {
        if (keyBuilder_ != null) {
          return keyBuilder_.getMessageOrBuilder();
        } else {
          return key_ == null ?
              io.opencannabis.schema.inventory.InventoryKey.getDefaultInstance() : key_;
        }
      }
      /**
       * <pre>
       * Unique key, identifying the individual inventory item that is subject to this reservation.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryKey key = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.inventory.InventoryKey, io.opencannabis.schema.inventory.InventoryKey.Builder, io.opencannabis.schema.inventory.InventoryKeyOrBuilder> 
          getKeyFieldBuilder() {
        if (keyBuilder_ == null) {
          keyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.opencannabis.schema.inventory.InventoryKey, io.opencannabis.schema.inventory.InventoryKey.Builder, io.opencannabis.schema.inventory.InventoryKeyOrBuilder>(
                  getKey(),
                  getParentForChildren(),
                  isClean());
          key_ = null;
        }
        return keyBuilder_;
      }

      private io.opencannabis.schema.temporal.Duration lease_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.temporal.Duration, io.opencannabis.schema.temporal.Duration.Builder, io.opencannabis.schema.temporal.DurationOrBuilder> leaseBuilder_;
      /**
       * <pre>
       * Requested duration of the stock reservation, otherwise known as the "lease time." After this amount of time, if
       * the underlying material has not been "consumed" or "transferred," the reservation is considered null and void,
       * and the underlying tracked inventory is free to be interacted with otherwise in the supply chain.
       * </pre>
       *
       * <code>.opencannabis.temporal.Duration lease = 5;</code>
       */
      public boolean hasLease() {
        return leaseBuilder_ != null || lease_ != null;
      }
      /**
       * <pre>
       * Requested duration of the stock reservation, otherwise known as the "lease time." After this amount of time, if
       * the underlying material has not been "consumed" or "transferred," the reservation is considered null and void,
       * and the underlying tracked inventory is free to be interacted with otherwise in the supply chain.
       * </pre>
       *
       * <code>.opencannabis.temporal.Duration lease = 5;</code>
       */
      public io.opencannabis.schema.temporal.Duration getLease() {
        if (leaseBuilder_ == null) {
          return lease_ == null ? io.opencannabis.schema.temporal.Duration.getDefaultInstance() : lease_;
        } else {
          return leaseBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Requested duration of the stock reservation, otherwise known as the "lease time." After this amount of time, if
       * the underlying material has not been "consumed" or "transferred," the reservation is considered null and void,
       * and the underlying tracked inventory is free to be interacted with otherwise in the supply chain.
       * </pre>
       *
       * <code>.opencannabis.temporal.Duration lease = 5;</code>
       */
      public Builder setLease(io.opencannabis.schema.temporal.Duration value) {
        if (leaseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          lease_ = value;
          onChanged();
        } else {
          leaseBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Requested duration of the stock reservation, otherwise known as the "lease time." After this amount of time, if
       * the underlying material has not been "consumed" or "transferred," the reservation is considered null and void,
       * and the underlying tracked inventory is free to be interacted with otherwise in the supply chain.
       * </pre>
       *
       * <code>.opencannabis.temporal.Duration lease = 5;</code>
       */
      public Builder setLease(
          io.opencannabis.schema.temporal.Duration.Builder builderForValue) {
        if (leaseBuilder_ == null) {
          lease_ = builderForValue.build();
          onChanged();
        } else {
          leaseBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Requested duration of the stock reservation, otherwise known as the "lease time." After this amount of time, if
       * the underlying material has not been "consumed" or "transferred," the reservation is considered null and void,
       * and the underlying tracked inventory is free to be interacted with otherwise in the supply chain.
       * </pre>
       *
       * <code>.opencannabis.temporal.Duration lease = 5;</code>
       */
      public Builder mergeLease(io.opencannabis.schema.temporal.Duration value) {
        if (leaseBuilder_ == null) {
          if (lease_ != null) {
            lease_ =
              io.opencannabis.schema.temporal.Duration.newBuilder(lease_).mergeFrom(value).buildPartial();
          } else {
            lease_ = value;
          }
          onChanged();
        } else {
          leaseBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Requested duration of the stock reservation, otherwise known as the "lease time." After this amount of time, if
       * the underlying material has not been "consumed" or "transferred," the reservation is considered null and void,
       * and the underlying tracked inventory is free to be interacted with otherwise in the supply chain.
       * </pre>
       *
       * <code>.opencannabis.temporal.Duration lease = 5;</code>
       */
      public Builder clearLease() {
        if (leaseBuilder_ == null) {
          lease_ = null;
          onChanged();
        } else {
          lease_ = null;
          leaseBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Requested duration of the stock reservation, otherwise known as the "lease time." After this amount of time, if
       * the underlying material has not been "consumed" or "transferred," the reservation is considered null and void,
       * and the underlying tracked inventory is free to be interacted with otherwise in the supply chain.
       * </pre>
       *
       * <code>.opencannabis.temporal.Duration lease = 5;</code>
       */
      public io.opencannabis.schema.temporal.Duration.Builder getLeaseBuilder() {
        
        onChanged();
        return getLeaseFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Requested duration of the stock reservation, otherwise known as the "lease time." After this amount of time, if
       * the underlying material has not been "consumed" or "transferred," the reservation is considered null and void,
       * and the underlying tracked inventory is free to be interacted with otherwise in the supply chain.
       * </pre>
       *
       * <code>.opencannabis.temporal.Duration lease = 5;</code>
       */
      public io.opencannabis.schema.temporal.DurationOrBuilder getLeaseOrBuilder() {
        if (leaseBuilder_ != null) {
          return leaseBuilder_.getMessageOrBuilder();
        } else {
          return lease_ == null ?
              io.opencannabis.schema.temporal.Duration.getDefaultInstance() : lease_;
        }
      }
      /**
       * <pre>
       * Requested duration of the stock reservation, otherwise known as the "lease time." After this amount of time, if
       * the underlying material has not been "consumed" or "transferred," the reservation is considered null and void,
       * and the underlying tracked inventory is free to be interacted with otherwise in the supply chain.
       * </pre>
       *
       * <code>.opencannabis.temporal.Duration lease = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.temporal.Duration, io.opencannabis.schema.temporal.Duration.Builder, io.opencannabis.schema.temporal.DurationOrBuilder> 
          getLeaseFieldBuilder() {
        if (leaseBuilder_ == null) {
          leaseBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.opencannabis.schema.temporal.Duration, io.opencannabis.schema.temporal.Duration.Builder, io.opencannabis.schema.temporal.DurationOrBuilder>(
                  getLease(),
                  getParentForChildren(),
                  isClean());
          lease_ = null;
        }
        return leaseBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:bloombox.services.telemetry.v1beta4.InventoryEvent.StockReserve)
    }

    // @@protoc_insertion_point(class_scope:bloombox.services.telemetry.v1beta4.InventoryEvent.StockReserve)
    private static final io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve();
    }

    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StockReserve>
        PARSER = new com.google.protobuf.AbstractParser<StockReserve>() {
      @java.lang.Override
      public StockReserve parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new StockReserve(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<StockReserve> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StockReserve> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ReservationCancelOrBuilder extends
      // @@protoc_insertion_point(interface_extends:bloombox.services.telemetry.v1beta4.InventoryEvent.ReservationCancel)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * ID for the subject reservation transaction.
     * </pre>
     *
     * <code>string reservation = 1;</code>
     */
    java.lang.String getReservation();
    /**
     * <pre>
     * ID for the subject reservation transaction.
     * </pre>
     *
     * <code>string reservation = 1;</code>
     */
    com.google.protobuf.ByteString
        getReservationBytes();

    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
     */
    boolean hasEvent();
    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
     */
    io.bloombox.schema.services.telemetry.v1beta4.InventoryContext getEvent();
    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
     */
    io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder getEventOrBuilder();

    /**
     * <pre>
     * Unique key, identifying the individual inventory item that is subject to this reservation.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryKey key = 3;</code>
     */
    boolean hasKey();
    /**
     * <pre>
     * Unique key, identifying the individual inventory item that is subject to this reservation.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryKey key = 3;</code>
     */
    io.opencannabis.schema.inventory.InventoryKey getKey();
    /**
     * <pre>
     * Unique key, identifying the individual inventory item that is subject to this reservation.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryKey key = 3;</code>
     */
    io.opencannabis.schema.inventory.InventoryKeyOrBuilder getKeyOrBuilder();
  }
  /**
   * <pre>
   * Cancel an existing reservation of stock or tracked inventory. This releases the inventory to be used or otherwise
   * moved in the supply chain. Cancelling a reservation is not a requisite step for a lease to expire naturally.
   * </pre>
   *
   * Protobuf type {@code bloombox.services.telemetry.v1beta4.InventoryEvent.ReservationCancel}
   */
  public  static final class ReservationCancel extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:bloombox.services.telemetry.v1beta4.InventoryEvent.ReservationCancel)
      ReservationCancelOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ReservationCancel.newBuilder() to construct.
    private ReservationCancel(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ReservationCancel() {
      reservation_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ReservationCancel(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              reservation_ = s;
              break;
            }
            case 18: {
              io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder subBuilder = null;
              if (event_ != null) {
                subBuilder = event_.toBuilder();
              }
              event_ = input.readMessage(io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(event_);
                event_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              io.opencannabis.schema.inventory.InventoryKey.Builder subBuilder = null;
              if (key_ != null) {
                subBuilder = key_.toBuilder();
              }
              key_ = input.readMessage(io.opencannabis.schema.inventory.InventoryKey.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(key_);
                key_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_ReservationCancel_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_ReservationCancel_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel.class, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel.Builder.class);
    }

    public static final int RESERVATION_FIELD_NUMBER = 1;
    private volatile java.lang.Object reservation_;
    /**
     * <pre>
     * ID for the subject reservation transaction.
     * </pre>
     *
     * <code>string reservation = 1;</code>
     */
    public java.lang.String getReservation() {
      java.lang.Object ref = reservation_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        reservation_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * ID for the subject reservation transaction.
     * </pre>
     *
     * <code>string reservation = 1;</code>
     */
    public com.google.protobuf.ByteString
        getReservationBytes() {
      java.lang.Object ref = reservation_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        reservation_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int EVENT_FIELD_NUMBER = 2;
    private io.bloombox.schema.services.telemetry.v1beta4.InventoryContext event_;
    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
     */
    public boolean hasEvent() {
      return event_ != null;
    }
    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
     */
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryContext getEvent() {
      return event_ == null ? io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.getDefaultInstance() : event_;
    }
    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
     */
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder getEventOrBuilder() {
      return getEvent();
    }

    public static final int KEY_FIELD_NUMBER = 3;
    private io.opencannabis.schema.inventory.InventoryKey key_;
    /**
     * <pre>
     * Unique key, identifying the individual inventory item that is subject to this reservation.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryKey key = 3;</code>
     */
    public boolean hasKey() {
      return key_ != null;
    }
    /**
     * <pre>
     * Unique key, identifying the individual inventory item that is subject to this reservation.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryKey key = 3;</code>
     */
    public io.opencannabis.schema.inventory.InventoryKey getKey() {
      return key_ == null ? io.opencannabis.schema.inventory.InventoryKey.getDefaultInstance() : key_;
    }
    /**
     * <pre>
     * Unique key, identifying the individual inventory item that is subject to this reservation.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryKey key = 3;</code>
     */
    public io.opencannabis.schema.inventory.InventoryKeyOrBuilder getKeyOrBuilder() {
      return getKey();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getReservationBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, reservation_);
      }
      if (event_ != null) {
        output.writeMessage(2, getEvent());
      }
      if (key_ != null) {
        output.writeMessage(3, getKey());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getReservationBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, reservation_);
      }
      if (event_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getEvent());
      }
      if (key_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getKey());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel)) {
        return super.equals(obj);
      }
      io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel other = (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel) obj;

      if (!getReservation()
          .equals(other.getReservation())) return false;
      if (hasEvent() != other.hasEvent()) return false;
      if (hasEvent()) {
        if (!getEvent()
            .equals(other.getEvent())) return false;
      }
      if (hasKey() != other.hasKey()) return false;
      if (hasKey()) {
        if (!getKey()
            .equals(other.getKey())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + RESERVATION_FIELD_NUMBER;
      hash = (53 * hash) + getReservation().hashCode();
      if (hasEvent()) {
        hash = (37 * hash) + EVENT_FIELD_NUMBER;
        hash = (53 * hash) + getEvent().hashCode();
      }
      if (hasKey()) {
        hash = (37 * hash) + KEY_FIELD_NUMBER;
        hash = (53 * hash) + getKey().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Cancel an existing reservation of stock or tracked inventory. This releases the inventory to be used or otherwise
     * moved in the supply chain. Cancelling a reservation is not a requisite step for a lease to expire naturally.
     * </pre>
     *
     * Protobuf type {@code bloombox.services.telemetry.v1beta4.InventoryEvent.ReservationCancel}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:bloombox.services.telemetry.v1beta4.InventoryEvent.ReservationCancel)
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancelOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_ReservationCancel_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_ReservationCancel_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel.class, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel.Builder.class);
      }

      // Construct using io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        reservation_ = "";

        if (eventBuilder_ == null) {
          event_ = null;
        } else {
          event_ = null;
          eventBuilder_ = null;
        }
        if (keyBuilder_ == null) {
          key_ = null;
        } else {
          key_ = null;
          keyBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_ReservationCancel_descriptor;
      }

      @java.lang.Override
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel getDefaultInstanceForType() {
        return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel.getDefaultInstance();
      }

      @java.lang.Override
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel build() {
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel buildPartial() {
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel result = new io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel(this);
        result.reservation_ = reservation_;
        if (eventBuilder_ == null) {
          result.event_ = event_;
        } else {
          result.event_ = eventBuilder_.build();
        }
        if (keyBuilder_ == null) {
          result.key_ = key_;
        } else {
          result.key_ = keyBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel) {
          return mergeFrom((io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel other) {
        if (other == io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel.getDefaultInstance()) return this;
        if (!other.getReservation().isEmpty()) {
          reservation_ = other.reservation_;
          onChanged();
        }
        if (other.hasEvent()) {
          mergeEvent(other.getEvent());
        }
        if (other.hasKey()) {
          mergeKey(other.getKey());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object reservation_ = "";
      /**
       * <pre>
       * ID for the subject reservation transaction.
       * </pre>
       *
       * <code>string reservation = 1;</code>
       */
      public java.lang.String getReservation() {
        java.lang.Object ref = reservation_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          reservation_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * ID for the subject reservation transaction.
       * </pre>
       *
       * <code>string reservation = 1;</code>
       */
      public com.google.protobuf.ByteString
          getReservationBytes() {
        java.lang.Object ref = reservation_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          reservation_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * ID for the subject reservation transaction.
       * </pre>
       *
       * <code>string reservation = 1;</code>
       */
      public Builder setReservation(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        reservation_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ID for the subject reservation transaction.
       * </pre>
       *
       * <code>string reservation = 1;</code>
       */
      public Builder clearReservation() {
        
        reservation_ = getDefaultInstance().getReservation();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ID for the subject reservation transaction.
       * </pre>
       *
       * <code>string reservation = 1;</code>
       */
      public Builder setReservationBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        reservation_ = value;
        onChanged();
        return this;
      }

      private io.bloombox.schema.services.telemetry.v1beta4.InventoryContext event_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.services.telemetry.v1beta4.InventoryContext, io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder> eventBuilder_;
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
       */
      public boolean hasEvent() {
        return eventBuilder_ != null || event_ != null;
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
       */
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryContext getEvent() {
        if (eventBuilder_ == null) {
          return event_ == null ? io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.getDefaultInstance() : event_;
        } else {
          return eventBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
       */
      public Builder setEvent(io.bloombox.schema.services.telemetry.v1beta4.InventoryContext value) {
        if (eventBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          event_ = value;
          onChanged();
        } else {
          eventBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
       */
      public Builder setEvent(
          io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder builderForValue) {
        if (eventBuilder_ == null) {
          event_ = builderForValue.build();
          onChanged();
        } else {
          eventBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
       */
      public Builder mergeEvent(io.bloombox.schema.services.telemetry.v1beta4.InventoryContext value) {
        if (eventBuilder_ == null) {
          if (event_ != null) {
            event_ =
              io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.newBuilder(event_).mergeFrom(value).buildPartial();
          } else {
            event_ = value;
          }
          onChanged();
        } else {
          eventBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
       */
      public Builder clearEvent() {
        if (eventBuilder_ == null) {
          event_ = null;
          onChanged();
        } else {
          event_ = null;
          eventBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
       */
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder getEventBuilder() {
        
        onChanged();
        return getEventFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
       */
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder getEventOrBuilder() {
        if (eventBuilder_ != null) {
          return eventBuilder_.getMessageOrBuilder();
        } else {
          return event_ == null ?
              io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.getDefaultInstance() : event_;
        }
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.services.telemetry.v1beta4.InventoryContext, io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder> 
          getEventFieldBuilder() {
        if (eventBuilder_ == null) {
          eventBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.bloombox.schema.services.telemetry.v1beta4.InventoryContext, io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder>(
                  getEvent(),
                  getParentForChildren(),
                  isClean());
          event_ = null;
        }
        return eventBuilder_;
      }

      private io.opencannabis.schema.inventory.InventoryKey key_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.inventory.InventoryKey, io.opencannabis.schema.inventory.InventoryKey.Builder, io.opencannabis.schema.inventory.InventoryKeyOrBuilder> keyBuilder_;
      /**
       * <pre>
       * Unique key, identifying the individual inventory item that is subject to this reservation.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryKey key = 3;</code>
       */
      public boolean hasKey() {
        return keyBuilder_ != null || key_ != null;
      }
      /**
       * <pre>
       * Unique key, identifying the individual inventory item that is subject to this reservation.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryKey key = 3;</code>
       */
      public io.opencannabis.schema.inventory.InventoryKey getKey() {
        if (keyBuilder_ == null) {
          return key_ == null ? io.opencannabis.schema.inventory.InventoryKey.getDefaultInstance() : key_;
        } else {
          return keyBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Unique key, identifying the individual inventory item that is subject to this reservation.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryKey key = 3;</code>
       */
      public Builder setKey(io.opencannabis.schema.inventory.InventoryKey value) {
        if (keyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          key_ = value;
          onChanged();
        } else {
          keyBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Unique key, identifying the individual inventory item that is subject to this reservation.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryKey key = 3;</code>
       */
      public Builder setKey(
          io.opencannabis.schema.inventory.InventoryKey.Builder builderForValue) {
        if (keyBuilder_ == null) {
          key_ = builderForValue.build();
          onChanged();
        } else {
          keyBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Unique key, identifying the individual inventory item that is subject to this reservation.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryKey key = 3;</code>
       */
      public Builder mergeKey(io.opencannabis.schema.inventory.InventoryKey value) {
        if (keyBuilder_ == null) {
          if (key_ != null) {
            key_ =
              io.opencannabis.schema.inventory.InventoryKey.newBuilder(key_).mergeFrom(value).buildPartial();
          } else {
            key_ = value;
          }
          onChanged();
        } else {
          keyBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Unique key, identifying the individual inventory item that is subject to this reservation.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryKey key = 3;</code>
       */
      public Builder clearKey() {
        if (keyBuilder_ == null) {
          key_ = null;
          onChanged();
        } else {
          key_ = null;
          keyBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Unique key, identifying the individual inventory item that is subject to this reservation.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryKey key = 3;</code>
       */
      public io.opencannabis.schema.inventory.InventoryKey.Builder getKeyBuilder() {
        
        onChanged();
        return getKeyFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Unique key, identifying the individual inventory item that is subject to this reservation.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryKey key = 3;</code>
       */
      public io.opencannabis.schema.inventory.InventoryKeyOrBuilder getKeyOrBuilder() {
        if (keyBuilder_ != null) {
          return keyBuilder_.getMessageOrBuilder();
        } else {
          return key_ == null ?
              io.opencannabis.schema.inventory.InventoryKey.getDefaultInstance() : key_;
        }
      }
      /**
       * <pre>
       * Unique key, identifying the individual inventory item that is subject to this reservation.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryKey key = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.inventory.InventoryKey, io.opencannabis.schema.inventory.InventoryKey.Builder, io.opencannabis.schema.inventory.InventoryKeyOrBuilder> 
          getKeyFieldBuilder() {
        if (keyBuilder_ == null) {
          keyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.opencannabis.schema.inventory.InventoryKey, io.opencannabis.schema.inventory.InventoryKey.Builder, io.opencannabis.schema.inventory.InventoryKeyOrBuilder>(
                  getKey(),
                  getParentForChildren(),
                  isClean());
          key_ = null;
        }
        return keyBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:bloombox.services.telemetry.v1beta4.InventoryEvent.ReservationCancel)
    }

    // @@protoc_insertion_point(class_scope:bloombox.services.telemetry.v1beta4.InventoryEvent.ReservationCancel)
    private static final io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel();
    }

    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ReservationCancel>
        PARSER = new com.google.protobuf.AbstractParser<ReservationCancel>() {
      @java.lang.Override
      public ReservationCancel parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ReservationCancel(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ReservationCancel> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ReservationCancel> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StockConsumeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:bloombox.services.telemetry.v1beta4.InventoryEvent.StockConsume)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * ID for the subject consumption transaction.
     * </pre>
     *
     * <code>string transaction = 1;</code>
     */
    java.lang.String getTransaction();
    /**
     * <pre>
     * ID for the subject consumption transaction.
     * </pre>
     *
     * <code>string transaction = 1;</code>
     */
    com.google.protobuf.ByteString
        getTransactionBytes();

    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
     */
    boolean hasEvent();
    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
     */
    io.bloombox.schema.services.telemetry.v1beta4.InventoryContext getEvent();
    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
     */
    io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder getEventOrBuilder();

    /**
     * <pre>
     * Unique key, identifying the individual inventory item that is subject to this reservation.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryKey key = 3;</code>
     */
    boolean hasKey();
    /**
     * <pre>
     * Unique key, identifying the individual inventory item that is subject to this reservation.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryKey key = 3;</code>
     */
    io.opencannabis.schema.inventory.InventoryKey getKey();
    /**
     * <pre>
     * Unique key, identifying the individual inventory item that is subject to this reservation.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryKey key = 3;</code>
     */
    io.opencannabis.schema.inventory.InventoryKeyOrBuilder getKeyOrBuilder();

    /**
     * <pre>
     * Count of remaining units in this tracked inventory item, if applicable.
     * </pre>
     *
     * <code>uint32 remaining_count = 4;</code>
     */
    int getRemainingCount();

    /**
     * <pre>
     * Percentage of remaining material in this tracked inventory item, if applicable.
     * </pre>
     *
     * <code>double remaining_percentage = 5;</code>
     */
    double getRemainingPercentage();

    public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume.RemainingCase getRemainingCase();
  }
  /**
   * <pre>
   * Indicates a consumption event, where stock exits a managed portion of the supply chain. This can include final
   * sales to consumers, or business-to-business wholesale transactions. Consumption events are terminal for the batches
   * or items referenced in tracked inventory.
   * </pre>
   *
   * Protobuf type {@code bloombox.services.telemetry.v1beta4.InventoryEvent.StockConsume}
   */
  public  static final class StockConsume extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:bloombox.services.telemetry.v1beta4.InventoryEvent.StockConsume)
      StockConsumeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StockConsume.newBuilder() to construct.
    private StockConsume(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StockConsume() {
      transaction_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private StockConsume(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              transaction_ = s;
              break;
            }
            case 18: {
              io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder subBuilder = null;
              if (event_ != null) {
                subBuilder = event_.toBuilder();
              }
              event_ = input.readMessage(io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(event_);
                event_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              io.opencannabis.schema.inventory.InventoryKey.Builder subBuilder = null;
              if (key_ != null) {
                subBuilder = key_.toBuilder();
              }
              key_ = input.readMessage(io.opencannabis.schema.inventory.InventoryKey.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(key_);
                key_ = subBuilder.buildPartial();
              }

              break;
            }
            case 32: {
              remainingCase_ = 4;
              remaining_ = input.readUInt32();
              break;
            }
            case 41: {
              remainingCase_ = 5;
              remaining_ = input.readDouble();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_StockConsume_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_StockConsume_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume.class, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume.Builder.class);
    }

    private int remainingCase_ = 0;
    private java.lang.Object remaining_;
    public enum RemainingCase
        implements com.google.protobuf.Internal.EnumLite {
      REMAINING_COUNT(4),
      REMAINING_PERCENTAGE(5),
      REMAINING_NOT_SET(0);
      private final int value;
      private RemainingCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static RemainingCase valueOf(int value) {
        return forNumber(value);
      }

      public static RemainingCase forNumber(int value) {
        switch (value) {
          case 4: return REMAINING_COUNT;
          case 5: return REMAINING_PERCENTAGE;
          case 0: return REMAINING_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public RemainingCase
    getRemainingCase() {
      return RemainingCase.forNumber(
          remainingCase_);
    }

    public static final int TRANSACTION_FIELD_NUMBER = 1;
    private volatile java.lang.Object transaction_;
    /**
     * <pre>
     * ID for the subject consumption transaction.
     * </pre>
     *
     * <code>string transaction = 1;</code>
     */
    public java.lang.String getTransaction() {
      java.lang.Object ref = transaction_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        transaction_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * ID for the subject consumption transaction.
     * </pre>
     *
     * <code>string transaction = 1;</code>
     */
    public com.google.protobuf.ByteString
        getTransactionBytes() {
      java.lang.Object ref = transaction_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        transaction_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int EVENT_FIELD_NUMBER = 2;
    private io.bloombox.schema.services.telemetry.v1beta4.InventoryContext event_;
    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
     */
    public boolean hasEvent() {
      return event_ != null;
    }
    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
     */
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryContext getEvent() {
      return event_ == null ? io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.getDefaultInstance() : event_;
    }
    /**
     * <pre>
     * Describes the inventory event context, including the temporal position of the event (timing), the managed device
     * and partnership scope, and a digital signature, if applicable.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
     */
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder getEventOrBuilder() {
      return getEvent();
    }

    public static final int KEY_FIELD_NUMBER = 3;
    private io.opencannabis.schema.inventory.InventoryKey key_;
    /**
     * <pre>
     * Unique key, identifying the individual inventory item that is subject to this reservation.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryKey key = 3;</code>
     */
    public boolean hasKey() {
      return key_ != null;
    }
    /**
     * <pre>
     * Unique key, identifying the individual inventory item that is subject to this reservation.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryKey key = 3;</code>
     */
    public io.opencannabis.schema.inventory.InventoryKey getKey() {
      return key_ == null ? io.opencannabis.schema.inventory.InventoryKey.getDefaultInstance() : key_;
    }
    /**
     * <pre>
     * Unique key, identifying the individual inventory item that is subject to this reservation.
     * </pre>
     *
     * <code>.opencannabis.inventory.InventoryKey key = 3;</code>
     */
    public io.opencannabis.schema.inventory.InventoryKeyOrBuilder getKeyOrBuilder() {
      return getKey();
    }

    public static final int REMAINING_COUNT_FIELD_NUMBER = 4;
    /**
     * <pre>
     * Count of remaining units in this tracked inventory item, if applicable.
     * </pre>
     *
     * <code>uint32 remaining_count = 4;</code>
     */
    public int getRemainingCount() {
      if (remainingCase_ == 4) {
        return (java.lang.Integer) remaining_;
      }
      return 0;
    }

    public static final int REMAINING_PERCENTAGE_FIELD_NUMBER = 5;
    /**
     * <pre>
     * Percentage of remaining material in this tracked inventory item, if applicable.
     * </pre>
     *
     * <code>double remaining_percentage = 5;</code>
     */
    public double getRemainingPercentage() {
      if (remainingCase_ == 5) {
        return (java.lang.Double) remaining_;
      }
      return 0D;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getTransactionBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, transaction_);
      }
      if (event_ != null) {
        output.writeMessage(2, getEvent());
      }
      if (key_ != null) {
        output.writeMessage(3, getKey());
      }
      if (remainingCase_ == 4) {
        output.writeUInt32(
            4, (int)((java.lang.Integer) remaining_));
      }
      if (remainingCase_ == 5) {
        output.writeDouble(
            5, (double)((java.lang.Double) remaining_));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getTransactionBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, transaction_);
      }
      if (event_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getEvent());
      }
      if (key_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getKey());
      }
      if (remainingCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(
              4, (int)((java.lang.Integer) remaining_));
      }
      if (remainingCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeDoubleSize(
              5, (double)((java.lang.Double) remaining_));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume)) {
        return super.equals(obj);
      }
      io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume other = (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume) obj;

      if (!getTransaction()
          .equals(other.getTransaction())) return false;
      if (hasEvent() != other.hasEvent()) return false;
      if (hasEvent()) {
        if (!getEvent()
            .equals(other.getEvent())) return false;
      }
      if (hasKey() != other.hasKey()) return false;
      if (hasKey()) {
        if (!getKey()
            .equals(other.getKey())) return false;
      }
      if (!getRemainingCase().equals(other.getRemainingCase())) return false;
      switch (remainingCase_) {
        case 4:
          if (getRemainingCount()
              != other.getRemainingCount()) return false;
          break;
        case 5:
          if (java.lang.Double.doubleToLongBits(getRemainingPercentage())
              != java.lang.Double.doubleToLongBits(
                  other.getRemainingPercentage())) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TRANSACTION_FIELD_NUMBER;
      hash = (53 * hash) + getTransaction().hashCode();
      if (hasEvent()) {
        hash = (37 * hash) + EVENT_FIELD_NUMBER;
        hash = (53 * hash) + getEvent().hashCode();
      }
      if (hasKey()) {
        hash = (37 * hash) + KEY_FIELD_NUMBER;
        hash = (53 * hash) + getKey().hashCode();
      }
      switch (remainingCase_) {
        case 4:
          hash = (37 * hash) + REMAINING_COUNT_FIELD_NUMBER;
          hash = (53 * hash) + getRemainingCount();
          break;
        case 5:
          hash = (37 * hash) + REMAINING_PERCENTAGE_FIELD_NUMBER;
          hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
              java.lang.Double.doubleToLongBits(getRemainingPercentage()));
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Indicates a consumption event, where stock exits a managed portion of the supply chain. This can include final
     * sales to consumers, or business-to-business wholesale transactions. Consumption events are terminal for the batches
     * or items referenced in tracked inventory.
     * </pre>
     *
     * Protobuf type {@code bloombox.services.telemetry.v1beta4.InventoryEvent.StockConsume}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:bloombox.services.telemetry.v1beta4.InventoryEvent.StockConsume)
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsumeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_StockConsume_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_StockConsume_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume.class, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume.Builder.class);
      }

      // Construct using io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        transaction_ = "";

        if (eventBuilder_ == null) {
          event_ = null;
        } else {
          event_ = null;
          eventBuilder_ = null;
        }
        if (keyBuilder_ == null) {
          key_ = null;
        } else {
          key_ = null;
          keyBuilder_ = null;
        }
        remainingCase_ = 0;
        remaining_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_StockConsume_descriptor;
      }

      @java.lang.Override
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume getDefaultInstanceForType() {
        return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume.getDefaultInstance();
      }

      @java.lang.Override
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume build() {
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume buildPartial() {
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume result = new io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume(this);
        result.transaction_ = transaction_;
        if (eventBuilder_ == null) {
          result.event_ = event_;
        } else {
          result.event_ = eventBuilder_.build();
        }
        if (keyBuilder_ == null) {
          result.key_ = key_;
        } else {
          result.key_ = keyBuilder_.build();
        }
        if (remainingCase_ == 4) {
          result.remaining_ = remaining_;
        }
        if (remainingCase_ == 5) {
          result.remaining_ = remaining_;
        }
        result.remainingCase_ = remainingCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume) {
          return mergeFrom((io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume other) {
        if (other == io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume.getDefaultInstance()) return this;
        if (!other.getTransaction().isEmpty()) {
          transaction_ = other.transaction_;
          onChanged();
        }
        if (other.hasEvent()) {
          mergeEvent(other.getEvent());
        }
        if (other.hasKey()) {
          mergeKey(other.getKey());
        }
        switch (other.getRemainingCase()) {
          case REMAINING_COUNT: {
            setRemainingCount(other.getRemainingCount());
            break;
          }
          case REMAINING_PERCENTAGE: {
            setRemainingPercentage(other.getRemainingPercentage());
            break;
          }
          case REMAINING_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int remainingCase_ = 0;
      private java.lang.Object remaining_;
      public RemainingCase
          getRemainingCase() {
        return RemainingCase.forNumber(
            remainingCase_);
      }

      public Builder clearRemaining() {
        remainingCase_ = 0;
        remaining_ = null;
        onChanged();
        return this;
      }


      private java.lang.Object transaction_ = "";
      /**
       * <pre>
       * ID for the subject consumption transaction.
       * </pre>
       *
       * <code>string transaction = 1;</code>
       */
      public java.lang.String getTransaction() {
        java.lang.Object ref = transaction_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          transaction_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * ID for the subject consumption transaction.
       * </pre>
       *
       * <code>string transaction = 1;</code>
       */
      public com.google.protobuf.ByteString
          getTransactionBytes() {
        java.lang.Object ref = transaction_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          transaction_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * ID for the subject consumption transaction.
       * </pre>
       *
       * <code>string transaction = 1;</code>
       */
      public Builder setTransaction(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        transaction_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ID for the subject consumption transaction.
       * </pre>
       *
       * <code>string transaction = 1;</code>
       */
      public Builder clearTransaction() {
        
        transaction_ = getDefaultInstance().getTransaction();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ID for the subject consumption transaction.
       * </pre>
       *
       * <code>string transaction = 1;</code>
       */
      public Builder setTransactionBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        transaction_ = value;
        onChanged();
        return this;
      }

      private io.bloombox.schema.services.telemetry.v1beta4.InventoryContext event_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.services.telemetry.v1beta4.InventoryContext, io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder> eventBuilder_;
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
       */
      public boolean hasEvent() {
        return eventBuilder_ != null || event_ != null;
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
       */
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryContext getEvent() {
        if (eventBuilder_ == null) {
          return event_ == null ? io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.getDefaultInstance() : event_;
        } else {
          return eventBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
       */
      public Builder setEvent(io.bloombox.schema.services.telemetry.v1beta4.InventoryContext value) {
        if (eventBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          event_ = value;
          onChanged();
        } else {
          eventBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
       */
      public Builder setEvent(
          io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder builderForValue) {
        if (eventBuilder_ == null) {
          event_ = builderForValue.build();
          onChanged();
        } else {
          eventBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
       */
      public Builder mergeEvent(io.bloombox.schema.services.telemetry.v1beta4.InventoryContext value) {
        if (eventBuilder_ == null) {
          if (event_ != null) {
            event_ =
              io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.newBuilder(event_).mergeFrom(value).buildPartial();
          } else {
            event_ = value;
          }
          onChanged();
        } else {
          eventBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
       */
      public Builder clearEvent() {
        if (eventBuilder_ == null) {
          event_ = null;
          onChanged();
        } else {
          event_ = null;
          eventBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
       */
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder getEventBuilder() {
        
        onChanged();
        return getEventFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
       */
      public io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder getEventOrBuilder() {
        if (eventBuilder_ != null) {
          return eventBuilder_.getMessageOrBuilder();
        } else {
          return event_ == null ?
              io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.getDefaultInstance() : event_;
        }
      }
      /**
       * <pre>
       * Describes the inventory event context, including the temporal position of the event (timing), the managed device
       * and partnership scope, and a digital signature, if applicable.
       * </pre>
       *
       * <code>.bloombox.services.telemetry.v1beta4.InventoryContext event = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.services.telemetry.v1beta4.InventoryContext, io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder> 
          getEventFieldBuilder() {
        if (eventBuilder_ == null) {
          eventBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.bloombox.schema.services.telemetry.v1beta4.InventoryContext, io.bloombox.schema.services.telemetry.v1beta4.InventoryContext.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryContextOrBuilder>(
                  getEvent(),
                  getParentForChildren(),
                  isClean());
          event_ = null;
        }
        return eventBuilder_;
      }

      private io.opencannabis.schema.inventory.InventoryKey key_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.inventory.InventoryKey, io.opencannabis.schema.inventory.InventoryKey.Builder, io.opencannabis.schema.inventory.InventoryKeyOrBuilder> keyBuilder_;
      /**
       * <pre>
       * Unique key, identifying the individual inventory item that is subject to this reservation.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryKey key = 3;</code>
       */
      public boolean hasKey() {
        return keyBuilder_ != null || key_ != null;
      }
      /**
       * <pre>
       * Unique key, identifying the individual inventory item that is subject to this reservation.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryKey key = 3;</code>
       */
      public io.opencannabis.schema.inventory.InventoryKey getKey() {
        if (keyBuilder_ == null) {
          return key_ == null ? io.opencannabis.schema.inventory.InventoryKey.getDefaultInstance() : key_;
        } else {
          return keyBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Unique key, identifying the individual inventory item that is subject to this reservation.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryKey key = 3;</code>
       */
      public Builder setKey(io.opencannabis.schema.inventory.InventoryKey value) {
        if (keyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          key_ = value;
          onChanged();
        } else {
          keyBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Unique key, identifying the individual inventory item that is subject to this reservation.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryKey key = 3;</code>
       */
      public Builder setKey(
          io.opencannabis.schema.inventory.InventoryKey.Builder builderForValue) {
        if (keyBuilder_ == null) {
          key_ = builderForValue.build();
          onChanged();
        } else {
          keyBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Unique key, identifying the individual inventory item that is subject to this reservation.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryKey key = 3;</code>
       */
      public Builder mergeKey(io.opencannabis.schema.inventory.InventoryKey value) {
        if (keyBuilder_ == null) {
          if (key_ != null) {
            key_ =
              io.opencannabis.schema.inventory.InventoryKey.newBuilder(key_).mergeFrom(value).buildPartial();
          } else {
            key_ = value;
          }
          onChanged();
        } else {
          keyBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Unique key, identifying the individual inventory item that is subject to this reservation.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryKey key = 3;</code>
       */
      public Builder clearKey() {
        if (keyBuilder_ == null) {
          key_ = null;
          onChanged();
        } else {
          key_ = null;
          keyBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Unique key, identifying the individual inventory item that is subject to this reservation.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryKey key = 3;</code>
       */
      public io.opencannabis.schema.inventory.InventoryKey.Builder getKeyBuilder() {
        
        onChanged();
        return getKeyFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Unique key, identifying the individual inventory item that is subject to this reservation.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryKey key = 3;</code>
       */
      public io.opencannabis.schema.inventory.InventoryKeyOrBuilder getKeyOrBuilder() {
        if (keyBuilder_ != null) {
          return keyBuilder_.getMessageOrBuilder();
        } else {
          return key_ == null ?
              io.opencannabis.schema.inventory.InventoryKey.getDefaultInstance() : key_;
        }
      }
      /**
       * <pre>
       * Unique key, identifying the individual inventory item that is subject to this reservation.
       * </pre>
       *
       * <code>.opencannabis.inventory.InventoryKey key = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.inventory.InventoryKey, io.opencannabis.schema.inventory.InventoryKey.Builder, io.opencannabis.schema.inventory.InventoryKeyOrBuilder> 
          getKeyFieldBuilder() {
        if (keyBuilder_ == null) {
          keyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.opencannabis.schema.inventory.InventoryKey, io.opencannabis.schema.inventory.InventoryKey.Builder, io.opencannabis.schema.inventory.InventoryKeyOrBuilder>(
                  getKey(),
                  getParentForChildren(),
                  isClean());
          key_ = null;
        }
        return keyBuilder_;
      }

      /**
       * <pre>
       * Count of remaining units in this tracked inventory item, if applicable.
       * </pre>
       *
       * <code>uint32 remaining_count = 4;</code>
       */
      public int getRemainingCount() {
        if (remainingCase_ == 4) {
          return (java.lang.Integer) remaining_;
        }
        return 0;
      }
      /**
       * <pre>
       * Count of remaining units in this tracked inventory item, if applicable.
       * </pre>
       *
       * <code>uint32 remaining_count = 4;</code>
       */
      public Builder setRemainingCount(int value) {
        remainingCase_ = 4;
        remaining_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Count of remaining units in this tracked inventory item, if applicable.
       * </pre>
       *
       * <code>uint32 remaining_count = 4;</code>
       */
      public Builder clearRemainingCount() {
        if (remainingCase_ == 4) {
          remainingCase_ = 0;
          remaining_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <pre>
       * Percentage of remaining material in this tracked inventory item, if applicable.
       * </pre>
       *
       * <code>double remaining_percentage = 5;</code>
       */
      public double getRemainingPercentage() {
        if (remainingCase_ == 5) {
          return (java.lang.Double) remaining_;
        }
        return 0D;
      }
      /**
       * <pre>
       * Percentage of remaining material in this tracked inventory item, if applicable.
       * </pre>
       *
       * <code>double remaining_percentage = 5;</code>
       */
      public Builder setRemainingPercentage(double value) {
        remainingCase_ = 5;
        remaining_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Percentage of remaining material in this tracked inventory item, if applicable.
       * </pre>
       *
       * <code>double remaining_percentage = 5;</code>
       */
      public Builder clearRemainingPercentage() {
        if (remainingCase_ == 5) {
          remainingCase_ = 0;
          remaining_ = null;
          onChanged();
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:bloombox.services.telemetry.v1beta4.InventoryEvent.StockConsume)
    }

    // @@protoc_insertion_point(class_scope:bloombox.services.telemetry.v1beta4.InventoryEvent.StockConsume)
    private static final io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume();
    }

    public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StockConsume>
        PARSER = new com.google.protobuf.AbstractParser<StockConsume>() {
      @java.lang.Override
      public StockConsume parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new StockConsume(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<StockConsume> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StockConsume> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private int eventCase_ = 0;
  private java.lang.Object event_;
  public enum EventCase
      implements com.google.protobuf.Internal.EnumLite {
    ENCOUNTER(10),
    INTAKE(11),
    UPDATE(12),
    TRANSFER(13),
    RESERVATION(14),
    CANCELLATION(15),
    CONSUMPTION(16),
    EVENT_NOT_SET(0);
    private final int value;
    private EventCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static EventCase valueOf(int value) {
      return forNumber(value);
    }

    public static EventCase forNumber(int value) {
      switch (value) {
        case 10: return ENCOUNTER;
        case 11: return INTAKE;
        case 12: return UPDATE;
        case 13: return TRANSFER;
        case 14: return RESERVATION;
        case 15: return CANCELLATION;
        case 16: return CONSUMPTION;
        case 0: return EVENT_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public EventCase
  getEventCase() {
    return EventCase.forNumber(
        eventCase_);
  }

  public static final int ENCOUNTER_FIELD_NUMBER = 10;
  /**
   * <pre>
   * Describes an inventory event where certain tracking material was encountered by a reading check-point of some
   * kind, usually RFID or BCR-based interactions.
   * </pre>
   *
   * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.Encounter encounter = 10;</code>
   */
  public boolean hasEncounter() {
    return eventCase_ == 10;
  }
  /**
   * <pre>
   * Describes an inventory event where certain tracking material was encountered by a reading check-point of some
   * kind, usually RFID or BCR-based interactions.
   * </pre>
   *
   * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.Encounter encounter = 10;</code>
   */
  public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter getEncounter() {
    if (eventCase_ == 10) {
       return (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter) event_;
    }
    return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter.getDefaultInstance();
  }
  /**
   * <pre>
   * Describes an inventory event where certain tracking material was encountered by a reading check-point of some
   * kind, usually RFID or BCR-based interactions.
   * </pre>
   *
   * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.Encounter encounter = 10;</code>
   */
  public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.EncounterOrBuilder getEncounterOrBuilder() {
    if (eventCase_ == 10) {
       return (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter) event_;
    }
    return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter.getDefaultInstance();
  }

  public static final int INTAKE_FIELD_NUMBER = 11;
  /**
   * <pre>
   * Stock intake event, which describes product as it arrives into a managed supply chain context. Once product
   * proceeds from the intake phase, it is managed and tracked.
   * </pre>
   *
   * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockIntake intake = 11;</code>
   */
  public boolean hasIntake() {
    return eventCase_ == 11;
  }
  /**
   * <pre>
   * Stock intake event, which describes product as it arrives into a managed supply chain context. Once product
   * proceeds from the intake phase, it is managed and tracked.
   * </pre>
   *
   * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockIntake intake = 11;</code>
   */
  public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake getIntake() {
    if (eventCase_ == 11) {
       return (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake) event_;
    }
    return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake.getDefaultInstance();
  }
  /**
   * <pre>
   * Stock intake event, which describes product as it arrives into a managed supply chain context. Once product
   * proceeds from the intake phase, it is managed and tracked.
   * </pre>
   *
   * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockIntake intake = 11;</code>
   */
  public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntakeOrBuilder getIntakeOrBuilder() {
    if (eventCase_ == 11) {
       return (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake) event_;
    }
    return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake.getDefaultInstance();
  }

  public static final int UPDATE_FIELD_NUMBER = 12;
  /**
   * <pre>
   * Update-in-place event for a piece of tracked inventory or product. Updates of this nature occur within the same
   * licensure, location, and organizational boundaries.
   * </pre>
   *
   * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockUpdate update = 12;</code>
   */
  public boolean hasUpdate() {
    return eventCase_ == 12;
  }
  /**
   * <pre>
   * Update-in-place event for a piece of tracked inventory or product. Updates of this nature occur within the same
   * licensure, location, and organizational boundaries.
   * </pre>
   *
   * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockUpdate update = 12;</code>
   */
  public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate getUpdate() {
    if (eventCase_ == 12) {
       return (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate) event_;
    }
    return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate.getDefaultInstance();
  }
  /**
   * <pre>
   * Update-in-place event for a piece of tracked inventory or product. Updates of this nature occur within the same
   * licensure, location, and organizational boundaries.
   * </pre>
   *
   * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockUpdate update = 12;</code>
   */
  public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdateOrBuilder getUpdateOrBuilder() {
    if (eventCase_ == 12) {
       return (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate) event_;
    }
    return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate.getDefaultInstance();
  }

  public static final int TRANSFER_FIELD_NUMBER = 13;
  /**
   * <pre>
   * Transfer transaction event, which indicates that product or tracked inventory was transferred across physical,
   * legal (licensure), or organizational boundaries.
   * </pre>
   *
   * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockTransfer transfer = 13;</code>
   */
  public boolean hasTransfer() {
    return eventCase_ == 13;
  }
  /**
   * <pre>
   * Transfer transaction event, which indicates that product or tracked inventory was transferred across physical,
   * legal (licensure), or organizational boundaries.
   * </pre>
   *
   * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockTransfer transfer = 13;</code>
   */
  public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer getTransfer() {
    if (eventCase_ == 13) {
       return (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer) event_;
    }
    return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer.getDefaultInstance();
  }
  /**
   * <pre>
   * Transfer transaction event, which indicates that product or tracked inventory was transferred across physical,
   * legal (licensure), or organizational boundaries.
   * </pre>
   *
   * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockTransfer transfer = 13;</code>
   */
  public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransferOrBuilder getTransferOrBuilder() {
    if (eventCase_ == 13) {
       return (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer) event_;
    }
    return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer.getDefaultInstance();
  }

  public static final int RESERVATION_FIELD_NUMBER = 14;
  /**
   * <pre>
   * Stock reservation event, which indicates that some portion of stock or managed inventory was requested for
   * reservation or lease.
   * </pre>
   *
   * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockReserve reservation = 14;</code>
   */
  public boolean hasReservation() {
    return eventCase_ == 14;
  }
  /**
   * <pre>
   * Stock reservation event, which indicates that some portion of stock or managed inventory was requested for
   * reservation or lease.
   * </pre>
   *
   * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockReserve reservation = 14;</code>
   */
  public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve getReservation() {
    if (eventCase_ == 14) {
       return (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve) event_;
    }
    return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve.getDefaultInstance();
  }
  /**
   * <pre>
   * Stock reservation event, which indicates that some portion of stock or managed inventory was requested for
   * reservation or lease.
   * </pre>
   *
   * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockReserve reservation = 14;</code>
   */
  public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserveOrBuilder getReservationOrBuilder() {
    if (eventCase_ == 14) {
       return (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve) event_;
    }
    return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve.getDefaultInstance();
  }

  public static final int CANCELLATION_FIELD_NUMBER = 15;
  /**
   * <pre>
   * Cancellation event, indicating that a piece of stock or managed inventory reserved via an earlier call to
   * "StockReserve" can now be freed back into the supply chain ecosystem.
   * </pre>
   *
   * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.ReservationCancel cancellation = 15;</code>
   */
  public boolean hasCancellation() {
    return eventCase_ == 15;
  }
  /**
   * <pre>
   * Cancellation event, indicating that a piece of stock or managed inventory reserved via an earlier call to
   * "StockReserve" can now be freed back into the supply chain ecosystem.
   * </pre>
   *
   * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.ReservationCancel cancellation = 15;</code>
   */
  public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel getCancellation() {
    if (eventCase_ == 15) {
       return (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel) event_;
    }
    return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel.getDefaultInstance();
  }
  /**
   * <pre>
   * Cancellation event, indicating that a piece of stock or managed inventory reserved via an earlier call to
   * "StockReserve" can now be freed back into the supply chain ecosystem.
   * </pre>
   *
   * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.ReservationCancel cancellation = 15;</code>
   */
  public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancelOrBuilder getCancellationOrBuilder() {
    if (eventCase_ == 15) {
       return (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel) event_;
    }
    return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel.getDefaultInstance();
  }

  public static final int CONSUMPTION_FIELD_NUMBER = 16;
  /**
   * <pre>
   * Consumption event, indicating that product was terminally destroyed or otherwise permanently left the custody of
   * the managed supply chain environment.
   * </pre>
   *
   * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockConsume consumption = 16;</code>
   */
  public boolean hasConsumption() {
    return eventCase_ == 16;
  }
  /**
   * <pre>
   * Consumption event, indicating that product was terminally destroyed or otherwise permanently left the custody of
   * the managed supply chain environment.
   * </pre>
   *
   * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockConsume consumption = 16;</code>
   */
  public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume getConsumption() {
    if (eventCase_ == 16) {
       return (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume) event_;
    }
    return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume.getDefaultInstance();
  }
  /**
   * <pre>
   * Consumption event, indicating that product was terminally destroyed or otherwise permanently left the custody of
   * the managed supply chain environment.
   * </pre>
   *
   * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockConsume consumption = 16;</code>
   */
  public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsumeOrBuilder getConsumptionOrBuilder() {
    if (eventCase_ == 16) {
       return (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume) event_;
    }
    return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume.getDefaultInstance();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (eventCase_ == 10) {
      output.writeMessage(10, (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter) event_);
    }
    if (eventCase_ == 11) {
      output.writeMessage(11, (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake) event_);
    }
    if (eventCase_ == 12) {
      output.writeMessage(12, (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate) event_);
    }
    if (eventCase_ == 13) {
      output.writeMessage(13, (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer) event_);
    }
    if (eventCase_ == 14) {
      output.writeMessage(14, (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve) event_);
    }
    if (eventCase_ == 15) {
      output.writeMessage(15, (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel) event_);
    }
    if (eventCase_ == 16) {
      output.writeMessage(16, (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume) event_);
    }
    unknownFields.writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (eventCase_ == 10) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter) event_);
    }
    if (eventCase_ == 11) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake) event_);
    }
    if (eventCase_ == 12) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(12, (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate) event_);
    }
    if (eventCase_ == 13) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(13, (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer) event_);
    }
    if (eventCase_ == 14) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(14, (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve) event_);
    }
    if (eventCase_ == 15) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(15, (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel) event_);
    }
    if (eventCase_ == 16) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(16, (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume) event_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent)) {
      return super.equals(obj);
    }
    io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent other = (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent) obj;

    if (!getEventCase().equals(other.getEventCase())) return false;
    switch (eventCase_) {
      case 10:
        if (!getEncounter()
            .equals(other.getEncounter())) return false;
        break;
      case 11:
        if (!getIntake()
            .equals(other.getIntake())) return false;
        break;
      case 12:
        if (!getUpdate()
            .equals(other.getUpdate())) return false;
        break;
      case 13:
        if (!getTransfer()
            .equals(other.getTransfer())) return false;
        break;
      case 14:
        if (!getReservation()
            .equals(other.getReservation())) return false;
        break;
      case 15:
        if (!getCancellation()
            .equals(other.getCancellation())) return false;
        break;
      case 16:
        if (!getConsumption()
            .equals(other.getConsumption())) return false;
        break;
      case 0:
      default:
    }
    if (!unknownFields.equals(other.unknownFields)) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    switch (eventCase_) {
      case 10:
        hash = (37 * hash) + ENCOUNTER_FIELD_NUMBER;
        hash = (53 * hash) + getEncounter().hashCode();
        break;
      case 11:
        hash = (37 * hash) + INTAKE_FIELD_NUMBER;
        hash = (53 * hash) + getIntake().hashCode();
        break;
      case 12:
        hash = (37 * hash) + UPDATE_FIELD_NUMBER;
        hash = (53 * hash) + getUpdate().hashCode();
        break;
      case 13:
        hash = (37 * hash) + TRANSFER_FIELD_NUMBER;
        hash = (53 * hash) + getTransfer().hashCode();
        break;
      case 14:
        hash = (37 * hash) + RESERVATION_FIELD_NUMBER;
        hash = (53 * hash) + getReservation().hashCode();
        break;
      case 15:
        hash = (37 * hash) + CANCELLATION_FIELD_NUMBER;
        hash = (53 * hash) + getCancellation().hashCode();
        break;
      case 16:
        hash = (37 * hash) + CONSUMPTION_FIELD_NUMBER;
        hash = (53 * hash) + getConsumption().hashCode();
        break;
      case 0:
      default:
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Specifies an event triggered by some inventory condition observed in the physical on-site environment. This may be
   * readings reported by RFID or barcode readers, events from the point-of-sale system, and more.
   * </pre>
   *
   * Protobuf type {@code bloombox.services.telemetry.v1beta4.InventoryEvent}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:bloombox.services.telemetry.v1beta4.InventoryEvent)
      io.bloombox.schema.services.telemetry.v1beta4.InventoryEventOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.class, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Builder.class);
    }

    // Construct using io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      eventCase_ = 0;
      event_ = null;
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.bloombox.schema.services.telemetry.v1beta4.TelemetryServiceBeta4.internal_static_bloombox_services_telemetry_v1beta4_InventoryEvent_descriptor;
    }

    @java.lang.Override
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent getDefaultInstanceForType() {
      return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.getDefaultInstance();
    }

    @java.lang.Override
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent build() {
      io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent buildPartial() {
      io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent result = new io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent(this);
      if (eventCase_ == 10) {
        if (encounterBuilder_ == null) {
          result.event_ = event_;
        } else {
          result.event_ = encounterBuilder_.build();
        }
      }
      if (eventCase_ == 11) {
        if (intakeBuilder_ == null) {
          result.event_ = event_;
        } else {
          result.event_ = intakeBuilder_.build();
        }
      }
      if (eventCase_ == 12) {
        if (updateBuilder_ == null) {
          result.event_ = event_;
        } else {
          result.event_ = updateBuilder_.build();
        }
      }
      if (eventCase_ == 13) {
        if (transferBuilder_ == null) {
          result.event_ = event_;
        } else {
          result.event_ = transferBuilder_.build();
        }
      }
      if (eventCase_ == 14) {
        if (reservationBuilder_ == null) {
          result.event_ = event_;
        } else {
          result.event_ = reservationBuilder_.build();
        }
      }
      if (eventCase_ == 15) {
        if (cancellationBuilder_ == null) {
          result.event_ = event_;
        } else {
          result.event_ = cancellationBuilder_.build();
        }
      }
      if (eventCase_ == 16) {
        if (consumptionBuilder_ == null) {
          result.event_ = event_;
        } else {
          result.event_ = consumptionBuilder_.build();
        }
      }
      result.eventCase_ = eventCase_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent) {
        return mergeFrom((io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent other) {
      if (other == io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.getDefaultInstance()) return this;
      switch (other.getEventCase()) {
        case ENCOUNTER: {
          mergeEncounter(other.getEncounter());
          break;
        }
        case INTAKE: {
          mergeIntake(other.getIntake());
          break;
        }
        case UPDATE: {
          mergeUpdate(other.getUpdate());
          break;
        }
        case TRANSFER: {
          mergeTransfer(other.getTransfer());
          break;
        }
        case RESERVATION: {
          mergeReservation(other.getReservation());
          break;
        }
        case CANCELLATION: {
          mergeCancellation(other.getCancellation());
          break;
        }
        case CONSUMPTION: {
          mergeConsumption(other.getConsumption());
          break;
        }
        case EVENT_NOT_SET: {
          break;
        }
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int eventCase_ = 0;
    private java.lang.Object event_;
    public EventCase
        getEventCase() {
      return EventCase.forNumber(
          eventCase_);
    }

    public Builder clearEvent() {
      eventCase_ = 0;
      event_ = null;
      onChanged();
      return this;
    }


    private com.google.protobuf.SingleFieldBuilderV3<
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.EncounterOrBuilder> encounterBuilder_;
    /**
     * <pre>
     * Describes an inventory event where certain tracking material was encountered by a reading check-point of some
     * kind, usually RFID or BCR-based interactions.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.Encounter encounter = 10;</code>
     */
    public boolean hasEncounter() {
      return eventCase_ == 10;
    }
    /**
     * <pre>
     * Describes an inventory event where certain tracking material was encountered by a reading check-point of some
     * kind, usually RFID or BCR-based interactions.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.Encounter encounter = 10;</code>
     */
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter getEncounter() {
      if (encounterBuilder_ == null) {
        if (eventCase_ == 10) {
          return (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter) event_;
        }
        return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter.getDefaultInstance();
      } else {
        if (eventCase_ == 10) {
          return encounterBuilder_.getMessage();
        }
        return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Describes an inventory event where certain tracking material was encountered by a reading check-point of some
     * kind, usually RFID or BCR-based interactions.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.Encounter encounter = 10;</code>
     */
    public Builder setEncounter(io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter value) {
      if (encounterBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        event_ = value;
        onChanged();
      } else {
        encounterBuilder_.setMessage(value);
      }
      eventCase_ = 10;
      return this;
    }
    /**
     * <pre>
     * Describes an inventory event where certain tracking material was encountered by a reading check-point of some
     * kind, usually RFID or BCR-based interactions.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.Encounter encounter = 10;</code>
     */
    public Builder setEncounter(
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter.Builder builderForValue) {
      if (encounterBuilder_ == null) {
        event_ = builderForValue.build();
        onChanged();
      } else {
        encounterBuilder_.setMessage(builderForValue.build());
      }
      eventCase_ = 10;
      return this;
    }
    /**
     * <pre>
     * Describes an inventory event where certain tracking material was encountered by a reading check-point of some
     * kind, usually RFID or BCR-based interactions.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.Encounter encounter = 10;</code>
     */
    public Builder mergeEncounter(io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter value) {
      if (encounterBuilder_ == null) {
        if (eventCase_ == 10 &&
            event_ != io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter.getDefaultInstance()) {
          event_ = io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter.newBuilder((io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter) event_)
              .mergeFrom(value).buildPartial();
        } else {
          event_ = value;
        }
        onChanged();
      } else {
        if (eventCase_ == 10) {
          encounterBuilder_.mergeFrom(value);
        }
        encounterBuilder_.setMessage(value);
      }
      eventCase_ = 10;
      return this;
    }
    /**
     * <pre>
     * Describes an inventory event where certain tracking material was encountered by a reading check-point of some
     * kind, usually RFID or BCR-based interactions.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.Encounter encounter = 10;</code>
     */
    public Builder clearEncounter() {
      if (encounterBuilder_ == null) {
        if (eventCase_ == 10) {
          eventCase_ = 0;
          event_ = null;
          onChanged();
        }
      } else {
        if (eventCase_ == 10) {
          eventCase_ = 0;
          event_ = null;
        }
        encounterBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Describes an inventory event where certain tracking material was encountered by a reading check-point of some
     * kind, usually RFID or BCR-based interactions.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.Encounter encounter = 10;</code>
     */
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter.Builder getEncounterBuilder() {
      return getEncounterFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Describes an inventory event where certain tracking material was encountered by a reading check-point of some
     * kind, usually RFID or BCR-based interactions.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.Encounter encounter = 10;</code>
     */
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.EncounterOrBuilder getEncounterOrBuilder() {
      if ((eventCase_ == 10) && (encounterBuilder_ != null)) {
        return encounterBuilder_.getMessageOrBuilder();
      } else {
        if (eventCase_ == 10) {
          return (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter) event_;
        }
        return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Describes an inventory event where certain tracking material was encountered by a reading check-point of some
     * kind, usually RFID or BCR-based interactions.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.Encounter encounter = 10;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.EncounterOrBuilder> 
        getEncounterFieldBuilder() {
      if (encounterBuilder_ == null) {
        if (!(eventCase_ == 10)) {
          event_ = io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter.getDefaultInstance();
        }
        encounterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.EncounterOrBuilder>(
                (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.Encounter) event_,
                getParentForChildren(),
                isClean());
        event_ = null;
      }
      eventCase_ = 10;
      onChanged();;
      return encounterBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntakeOrBuilder> intakeBuilder_;
    /**
     * <pre>
     * Stock intake event, which describes product as it arrives into a managed supply chain context. Once product
     * proceeds from the intake phase, it is managed and tracked.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockIntake intake = 11;</code>
     */
    public boolean hasIntake() {
      return eventCase_ == 11;
    }
    /**
     * <pre>
     * Stock intake event, which describes product as it arrives into a managed supply chain context. Once product
     * proceeds from the intake phase, it is managed and tracked.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockIntake intake = 11;</code>
     */
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake getIntake() {
      if (intakeBuilder_ == null) {
        if (eventCase_ == 11) {
          return (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake) event_;
        }
        return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake.getDefaultInstance();
      } else {
        if (eventCase_ == 11) {
          return intakeBuilder_.getMessage();
        }
        return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Stock intake event, which describes product as it arrives into a managed supply chain context. Once product
     * proceeds from the intake phase, it is managed and tracked.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockIntake intake = 11;</code>
     */
    public Builder setIntake(io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake value) {
      if (intakeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        event_ = value;
        onChanged();
      } else {
        intakeBuilder_.setMessage(value);
      }
      eventCase_ = 11;
      return this;
    }
    /**
     * <pre>
     * Stock intake event, which describes product as it arrives into a managed supply chain context. Once product
     * proceeds from the intake phase, it is managed and tracked.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockIntake intake = 11;</code>
     */
    public Builder setIntake(
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake.Builder builderForValue) {
      if (intakeBuilder_ == null) {
        event_ = builderForValue.build();
        onChanged();
      } else {
        intakeBuilder_.setMessage(builderForValue.build());
      }
      eventCase_ = 11;
      return this;
    }
    /**
     * <pre>
     * Stock intake event, which describes product as it arrives into a managed supply chain context. Once product
     * proceeds from the intake phase, it is managed and tracked.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockIntake intake = 11;</code>
     */
    public Builder mergeIntake(io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake value) {
      if (intakeBuilder_ == null) {
        if (eventCase_ == 11 &&
            event_ != io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake.getDefaultInstance()) {
          event_ = io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake.newBuilder((io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake) event_)
              .mergeFrom(value).buildPartial();
        } else {
          event_ = value;
        }
        onChanged();
      } else {
        if (eventCase_ == 11) {
          intakeBuilder_.mergeFrom(value);
        }
        intakeBuilder_.setMessage(value);
      }
      eventCase_ = 11;
      return this;
    }
    /**
     * <pre>
     * Stock intake event, which describes product as it arrives into a managed supply chain context. Once product
     * proceeds from the intake phase, it is managed and tracked.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockIntake intake = 11;</code>
     */
    public Builder clearIntake() {
      if (intakeBuilder_ == null) {
        if (eventCase_ == 11) {
          eventCase_ = 0;
          event_ = null;
          onChanged();
        }
      } else {
        if (eventCase_ == 11) {
          eventCase_ = 0;
          event_ = null;
        }
        intakeBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Stock intake event, which describes product as it arrives into a managed supply chain context. Once product
     * proceeds from the intake phase, it is managed and tracked.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockIntake intake = 11;</code>
     */
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake.Builder getIntakeBuilder() {
      return getIntakeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Stock intake event, which describes product as it arrives into a managed supply chain context. Once product
     * proceeds from the intake phase, it is managed and tracked.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockIntake intake = 11;</code>
     */
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntakeOrBuilder getIntakeOrBuilder() {
      if ((eventCase_ == 11) && (intakeBuilder_ != null)) {
        return intakeBuilder_.getMessageOrBuilder();
      } else {
        if (eventCase_ == 11) {
          return (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake) event_;
        }
        return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Stock intake event, which describes product as it arrives into a managed supply chain context. Once product
     * proceeds from the intake phase, it is managed and tracked.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockIntake intake = 11;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntakeOrBuilder> 
        getIntakeFieldBuilder() {
      if (intakeBuilder_ == null) {
        if (!(eventCase_ == 11)) {
          event_ = io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake.getDefaultInstance();
        }
        intakeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntakeOrBuilder>(
                (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockIntake) event_,
                getParentForChildren(),
                isClean());
        event_ = null;
      }
      eventCase_ = 11;
      onChanged();;
      return intakeBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdateOrBuilder> updateBuilder_;
    /**
     * <pre>
     * Update-in-place event for a piece of tracked inventory or product. Updates of this nature occur within the same
     * licensure, location, and organizational boundaries.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockUpdate update = 12;</code>
     */
    public boolean hasUpdate() {
      return eventCase_ == 12;
    }
    /**
     * <pre>
     * Update-in-place event for a piece of tracked inventory or product. Updates of this nature occur within the same
     * licensure, location, and organizational boundaries.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockUpdate update = 12;</code>
     */
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate getUpdate() {
      if (updateBuilder_ == null) {
        if (eventCase_ == 12) {
          return (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate) event_;
        }
        return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate.getDefaultInstance();
      } else {
        if (eventCase_ == 12) {
          return updateBuilder_.getMessage();
        }
        return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Update-in-place event for a piece of tracked inventory or product. Updates of this nature occur within the same
     * licensure, location, and organizational boundaries.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockUpdate update = 12;</code>
     */
    public Builder setUpdate(io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate value) {
      if (updateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        event_ = value;
        onChanged();
      } else {
        updateBuilder_.setMessage(value);
      }
      eventCase_ = 12;
      return this;
    }
    /**
     * <pre>
     * Update-in-place event for a piece of tracked inventory or product. Updates of this nature occur within the same
     * licensure, location, and organizational boundaries.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockUpdate update = 12;</code>
     */
    public Builder setUpdate(
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate.Builder builderForValue) {
      if (updateBuilder_ == null) {
        event_ = builderForValue.build();
        onChanged();
      } else {
        updateBuilder_.setMessage(builderForValue.build());
      }
      eventCase_ = 12;
      return this;
    }
    /**
     * <pre>
     * Update-in-place event for a piece of tracked inventory or product. Updates of this nature occur within the same
     * licensure, location, and organizational boundaries.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockUpdate update = 12;</code>
     */
    public Builder mergeUpdate(io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate value) {
      if (updateBuilder_ == null) {
        if (eventCase_ == 12 &&
            event_ != io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate.getDefaultInstance()) {
          event_ = io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate.newBuilder((io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate) event_)
              .mergeFrom(value).buildPartial();
        } else {
          event_ = value;
        }
        onChanged();
      } else {
        if (eventCase_ == 12) {
          updateBuilder_.mergeFrom(value);
        }
        updateBuilder_.setMessage(value);
      }
      eventCase_ = 12;
      return this;
    }
    /**
     * <pre>
     * Update-in-place event for a piece of tracked inventory or product. Updates of this nature occur within the same
     * licensure, location, and organizational boundaries.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockUpdate update = 12;</code>
     */
    public Builder clearUpdate() {
      if (updateBuilder_ == null) {
        if (eventCase_ == 12) {
          eventCase_ = 0;
          event_ = null;
          onChanged();
        }
      } else {
        if (eventCase_ == 12) {
          eventCase_ = 0;
          event_ = null;
        }
        updateBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Update-in-place event for a piece of tracked inventory or product. Updates of this nature occur within the same
     * licensure, location, and organizational boundaries.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockUpdate update = 12;</code>
     */
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate.Builder getUpdateBuilder() {
      return getUpdateFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Update-in-place event for a piece of tracked inventory or product. Updates of this nature occur within the same
     * licensure, location, and organizational boundaries.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockUpdate update = 12;</code>
     */
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdateOrBuilder getUpdateOrBuilder() {
      if ((eventCase_ == 12) && (updateBuilder_ != null)) {
        return updateBuilder_.getMessageOrBuilder();
      } else {
        if (eventCase_ == 12) {
          return (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate) event_;
        }
        return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Update-in-place event for a piece of tracked inventory or product. Updates of this nature occur within the same
     * licensure, location, and organizational boundaries.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockUpdate update = 12;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdateOrBuilder> 
        getUpdateFieldBuilder() {
      if (updateBuilder_ == null) {
        if (!(eventCase_ == 12)) {
          event_ = io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate.getDefaultInstance();
        }
        updateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdateOrBuilder>(
                (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockUpdate) event_,
                getParentForChildren(),
                isClean());
        event_ = null;
      }
      eventCase_ = 12;
      onChanged();;
      return updateBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransferOrBuilder> transferBuilder_;
    /**
     * <pre>
     * Transfer transaction event, which indicates that product or tracked inventory was transferred across physical,
     * legal (licensure), or organizational boundaries.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockTransfer transfer = 13;</code>
     */
    public boolean hasTransfer() {
      return eventCase_ == 13;
    }
    /**
     * <pre>
     * Transfer transaction event, which indicates that product or tracked inventory was transferred across physical,
     * legal (licensure), or organizational boundaries.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockTransfer transfer = 13;</code>
     */
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer getTransfer() {
      if (transferBuilder_ == null) {
        if (eventCase_ == 13) {
          return (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer) event_;
        }
        return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer.getDefaultInstance();
      } else {
        if (eventCase_ == 13) {
          return transferBuilder_.getMessage();
        }
        return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Transfer transaction event, which indicates that product or tracked inventory was transferred across physical,
     * legal (licensure), or organizational boundaries.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockTransfer transfer = 13;</code>
     */
    public Builder setTransfer(io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer value) {
      if (transferBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        event_ = value;
        onChanged();
      } else {
        transferBuilder_.setMessage(value);
      }
      eventCase_ = 13;
      return this;
    }
    /**
     * <pre>
     * Transfer transaction event, which indicates that product or tracked inventory was transferred across physical,
     * legal (licensure), or organizational boundaries.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockTransfer transfer = 13;</code>
     */
    public Builder setTransfer(
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer.Builder builderForValue) {
      if (transferBuilder_ == null) {
        event_ = builderForValue.build();
        onChanged();
      } else {
        transferBuilder_.setMessage(builderForValue.build());
      }
      eventCase_ = 13;
      return this;
    }
    /**
     * <pre>
     * Transfer transaction event, which indicates that product or tracked inventory was transferred across physical,
     * legal (licensure), or organizational boundaries.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockTransfer transfer = 13;</code>
     */
    public Builder mergeTransfer(io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer value) {
      if (transferBuilder_ == null) {
        if (eventCase_ == 13 &&
            event_ != io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer.getDefaultInstance()) {
          event_ = io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer.newBuilder((io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer) event_)
              .mergeFrom(value).buildPartial();
        } else {
          event_ = value;
        }
        onChanged();
      } else {
        if (eventCase_ == 13) {
          transferBuilder_.mergeFrom(value);
        }
        transferBuilder_.setMessage(value);
      }
      eventCase_ = 13;
      return this;
    }
    /**
     * <pre>
     * Transfer transaction event, which indicates that product or tracked inventory was transferred across physical,
     * legal (licensure), or organizational boundaries.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockTransfer transfer = 13;</code>
     */
    public Builder clearTransfer() {
      if (transferBuilder_ == null) {
        if (eventCase_ == 13) {
          eventCase_ = 0;
          event_ = null;
          onChanged();
        }
      } else {
        if (eventCase_ == 13) {
          eventCase_ = 0;
          event_ = null;
        }
        transferBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Transfer transaction event, which indicates that product or tracked inventory was transferred across physical,
     * legal (licensure), or organizational boundaries.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockTransfer transfer = 13;</code>
     */
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer.Builder getTransferBuilder() {
      return getTransferFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Transfer transaction event, which indicates that product or tracked inventory was transferred across physical,
     * legal (licensure), or organizational boundaries.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockTransfer transfer = 13;</code>
     */
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransferOrBuilder getTransferOrBuilder() {
      if ((eventCase_ == 13) && (transferBuilder_ != null)) {
        return transferBuilder_.getMessageOrBuilder();
      } else {
        if (eventCase_ == 13) {
          return (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer) event_;
        }
        return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Transfer transaction event, which indicates that product or tracked inventory was transferred across physical,
     * legal (licensure), or organizational boundaries.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockTransfer transfer = 13;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransferOrBuilder> 
        getTransferFieldBuilder() {
      if (transferBuilder_ == null) {
        if (!(eventCase_ == 13)) {
          event_ = io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer.getDefaultInstance();
        }
        transferBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransferOrBuilder>(
                (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockTransfer) event_,
                getParentForChildren(),
                isClean());
        event_ = null;
      }
      eventCase_ = 13;
      onChanged();;
      return transferBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserveOrBuilder> reservationBuilder_;
    /**
     * <pre>
     * Stock reservation event, which indicates that some portion of stock or managed inventory was requested for
     * reservation or lease.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockReserve reservation = 14;</code>
     */
    public boolean hasReservation() {
      return eventCase_ == 14;
    }
    /**
     * <pre>
     * Stock reservation event, which indicates that some portion of stock or managed inventory was requested for
     * reservation or lease.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockReserve reservation = 14;</code>
     */
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve getReservation() {
      if (reservationBuilder_ == null) {
        if (eventCase_ == 14) {
          return (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve) event_;
        }
        return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve.getDefaultInstance();
      } else {
        if (eventCase_ == 14) {
          return reservationBuilder_.getMessage();
        }
        return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Stock reservation event, which indicates that some portion of stock or managed inventory was requested for
     * reservation or lease.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockReserve reservation = 14;</code>
     */
    public Builder setReservation(io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve value) {
      if (reservationBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        event_ = value;
        onChanged();
      } else {
        reservationBuilder_.setMessage(value);
      }
      eventCase_ = 14;
      return this;
    }
    /**
     * <pre>
     * Stock reservation event, which indicates that some portion of stock or managed inventory was requested for
     * reservation or lease.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockReserve reservation = 14;</code>
     */
    public Builder setReservation(
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve.Builder builderForValue) {
      if (reservationBuilder_ == null) {
        event_ = builderForValue.build();
        onChanged();
      } else {
        reservationBuilder_.setMessage(builderForValue.build());
      }
      eventCase_ = 14;
      return this;
    }
    /**
     * <pre>
     * Stock reservation event, which indicates that some portion of stock or managed inventory was requested for
     * reservation or lease.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockReserve reservation = 14;</code>
     */
    public Builder mergeReservation(io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve value) {
      if (reservationBuilder_ == null) {
        if (eventCase_ == 14 &&
            event_ != io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve.getDefaultInstance()) {
          event_ = io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve.newBuilder((io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve) event_)
              .mergeFrom(value).buildPartial();
        } else {
          event_ = value;
        }
        onChanged();
      } else {
        if (eventCase_ == 14) {
          reservationBuilder_.mergeFrom(value);
        }
        reservationBuilder_.setMessage(value);
      }
      eventCase_ = 14;
      return this;
    }
    /**
     * <pre>
     * Stock reservation event, which indicates that some portion of stock or managed inventory was requested for
     * reservation or lease.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockReserve reservation = 14;</code>
     */
    public Builder clearReservation() {
      if (reservationBuilder_ == null) {
        if (eventCase_ == 14) {
          eventCase_ = 0;
          event_ = null;
          onChanged();
        }
      } else {
        if (eventCase_ == 14) {
          eventCase_ = 0;
          event_ = null;
        }
        reservationBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Stock reservation event, which indicates that some portion of stock or managed inventory was requested for
     * reservation or lease.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockReserve reservation = 14;</code>
     */
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve.Builder getReservationBuilder() {
      return getReservationFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Stock reservation event, which indicates that some portion of stock or managed inventory was requested for
     * reservation or lease.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockReserve reservation = 14;</code>
     */
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserveOrBuilder getReservationOrBuilder() {
      if ((eventCase_ == 14) && (reservationBuilder_ != null)) {
        return reservationBuilder_.getMessageOrBuilder();
      } else {
        if (eventCase_ == 14) {
          return (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve) event_;
        }
        return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Stock reservation event, which indicates that some portion of stock or managed inventory was requested for
     * reservation or lease.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockReserve reservation = 14;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserveOrBuilder> 
        getReservationFieldBuilder() {
      if (reservationBuilder_ == null) {
        if (!(eventCase_ == 14)) {
          event_ = io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve.getDefaultInstance();
        }
        reservationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserveOrBuilder>(
                (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockReserve) event_,
                getParentForChildren(),
                isClean());
        event_ = null;
      }
      eventCase_ = 14;
      onChanged();;
      return reservationBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancelOrBuilder> cancellationBuilder_;
    /**
     * <pre>
     * Cancellation event, indicating that a piece of stock or managed inventory reserved via an earlier call to
     * "StockReserve" can now be freed back into the supply chain ecosystem.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.ReservationCancel cancellation = 15;</code>
     */
    public boolean hasCancellation() {
      return eventCase_ == 15;
    }
    /**
     * <pre>
     * Cancellation event, indicating that a piece of stock or managed inventory reserved via an earlier call to
     * "StockReserve" can now be freed back into the supply chain ecosystem.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.ReservationCancel cancellation = 15;</code>
     */
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel getCancellation() {
      if (cancellationBuilder_ == null) {
        if (eventCase_ == 15) {
          return (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel) event_;
        }
        return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel.getDefaultInstance();
      } else {
        if (eventCase_ == 15) {
          return cancellationBuilder_.getMessage();
        }
        return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Cancellation event, indicating that a piece of stock or managed inventory reserved via an earlier call to
     * "StockReserve" can now be freed back into the supply chain ecosystem.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.ReservationCancel cancellation = 15;</code>
     */
    public Builder setCancellation(io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel value) {
      if (cancellationBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        event_ = value;
        onChanged();
      } else {
        cancellationBuilder_.setMessage(value);
      }
      eventCase_ = 15;
      return this;
    }
    /**
     * <pre>
     * Cancellation event, indicating that a piece of stock or managed inventory reserved via an earlier call to
     * "StockReserve" can now be freed back into the supply chain ecosystem.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.ReservationCancel cancellation = 15;</code>
     */
    public Builder setCancellation(
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel.Builder builderForValue) {
      if (cancellationBuilder_ == null) {
        event_ = builderForValue.build();
        onChanged();
      } else {
        cancellationBuilder_.setMessage(builderForValue.build());
      }
      eventCase_ = 15;
      return this;
    }
    /**
     * <pre>
     * Cancellation event, indicating that a piece of stock or managed inventory reserved via an earlier call to
     * "StockReserve" can now be freed back into the supply chain ecosystem.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.ReservationCancel cancellation = 15;</code>
     */
    public Builder mergeCancellation(io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel value) {
      if (cancellationBuilder_ == null) {
        if (eventCase_ == 15 &&
            event_ != io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel.getDefaultInstance()) {
          event_ = io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel.newBuilder((io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel) event_)
              .mergeFrom(value).buildPartial();
        } else {
          event_ = value;
        }
        onChanged();
      } else {
        if (eventCase_ == 15) {
          cancellationBuilder_.mergeFrom(value);
        }
        cancellationBuilder_.setMessage(value);
      }
      eventCase_ = 15;
      return this;
    }
    /**
     * <pre>
     * Cancellation event, indicating that a piece of stock or managed inventory reserved via an earlier call to
     * "StockReserve" can now be freed back into the supply chain ecosystem.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.ReservationCancel cancellation = 15;</code>
     */
    public Builder clearCancellation() {
      if (cancellationBuilder_ == null) {
        if (eventCase_ == 15) {
          eventCase_ = 0;
          event_ = null;
          onChanged();
        }
      } else {
        if (eventCase_ == 15) {
          eventCase_ = 0;
          event_ = null;
        }
        cancellationBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Cancellation event, indicating that a piece of stock or managed inventory reserved via an earlier call to
     * "StockReserve" can now be freed back into the supply chain ecosystem.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.ReservationCancel cancellation = 15;</code>
     */
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel.Builder getCancellationBuilder() {
      return getCancellationFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Cancellation event, indicating that a piece of stock or managed inventory reserved via an earlier call to
     * "StockReserve" can now be freed back into the supply chain ecosystem.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.ReservationCancel cancellation = 15;</code>
     */
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancelOrBuilder getCancellationOrBuilder() {
      if ((eventCase_ == 15) && (cancellationBuilder_ != null)) {
        return cancellationBuilder_.getMessageOrBuilder();
      } else {
        if (eventCase_ == 15) {
          return (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel) event_;
        }
        return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Cancellation event, indicating that a piece of stock or managed inventory reserved via an earlier call to
     * "StockReserve" can now be freed back into the supply chain ecosystem.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.ReservationCancel cancellation = 15;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancelOrBuilder> 
        getCancellationFieldBuilder() {
      if (cancellationBuilder_ == null) {
        if (!(eventCase_ == 15)) {
          event_ = io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel.getDefaultInstance();
        }
        cancellationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancelOrBuilder>(
                (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.ReservationCancel) event_,
                getParentForChildren(),
                isClean());
        event_ = null;
      }
      eventCase_ = 15;
      onChanged();;
      return cancellationBuilder_;
    }

    private com.google.protobuf.SingleFieldBuilderV3<
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsumeOrBuilder> consumptionBuilder_;
    /**
     * <pre>
     * Consumption event, indicating that product was terminally destroyed or otherwise permanently left the custody of
     * the managed supply chain environment.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockConsume consumption = 16;</code>
     */
    public boolean hasConsumption() {
      return eventCase_ == 16;
    }
    /**
     * <pre>
     * Consumption event, indicating that product was terminally destroyed or otherwise permanently left the custody of
     * the managed supply chain environment.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockConsume consumption = 16;</code>
     */
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume getConsumption() {
      if (consumptionBuilder_ == null) {
        if (eventCase_ == 16) {
          return (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume) event_;
        }
        return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume.getDefaultInstance();
      } else {
        if (eventCase_ == 16) {
          return consumptionBuilder_.getMessage();
        }
        return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Consumption event, indicating that product was terminally destroyed or otherwise permanently left the custody of
     * the managed supply chain environment.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockConsume consumption = 16;</code>
     */
    public Builder setConsumption(io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume value) {
      if (consumptionBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        event_ = value;
        onChanged();
      } else {
        consumptionBuilder_.setMessage(value);
      }
      eventCase_ = 16;
      return this;
    }
    /**
     * <pre>
     * Consumption event, indicating that product was terminally destroyed or otherwise permanently left the custody of
     * the managed supply chain environment.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockConsume consumption = 16;</code>
     */
    public Builder setConsumption(
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume.Builder builderForValue) {
      if (consumptionBuilder_ == null) {
        event_ = builderForValue.build();
        onChanged();
      } else {
        consumptionBuilder_.setMessage(builderForValue.build());
      }
      eventCase_ = 16;
      return this;
    }
    /**
     * <pre>
     * Consumption event, indicating that product was terminally destroyed or otherwise permanently left the custody of
     * the managed supply chain environment.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockConsume consumption = 16;</code>
     */
    public Builder mergeConsumption(io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume value) {
      if (consumptionBuilder_ == null) {
        if (eventCase_ == 16 &&
            event_ != io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume.getDefaultInstance()) {
          event_ = io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume.newBuilder((io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume) event_)
              .mergeFrom(value).buildPartial();
        } else {
          event_ = value;
        }
        onChanged();
      } else {
        if (eventCase_ == 16) {
          consumptionBuilder_.mergeFrom(value);
        }
        consumptionBuilder_.setMessage(value);
      }
      eventCase_ = 16;
      return this;
    }
    /**
     * <pre>
     * Consumption event, indicating that product was terminally destroyed or otherwise permanently left the custody of
     * the managed supply chain environment.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockConsume consumption = 16;</code>
     */
    public Builder clearConsumption() {
      if (consumptionBuilder_ == null) {
        if (eventCase_ == 16) {
          eventCase_ = 0;
          event_ = null;
          onChanged();
        }
      } else {
        if (eventCase_ == 16) {
          eventCase_ = 0;
          event_ = null;
        }
        consumptionBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Consumption event, indicating that product was terminally destroyed or otherwise permanently left the custody of
     * the managed supply chain environment.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockConsume consumption = 16;</code>
     */
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume.Builder getConsumptionBuilder() {
      return getConsumptionFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Consumption event, indicating that product was terminally destroyed or otherwise permanently left the custody of
     * the managed supply chain environment.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockConsume consumption = 16;</code>
     */
    public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsumeOrBuilder getConsumptionOrBuilder() {
      if ((eventCase_ == 16) && (consumptionBuilder_ != null)) {
        return consumptionBuilder_.getMessageOrBuilder();
      } else {
        if (eventCase_ == 16) {
          return (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume) event_;
        }
        return io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume.getDefaultInstance();
      }
    }
    /**
     * <pre>
     * Consumption event, indicating that product was terminally destroyed or otherwise permanently left the custody of
     * the managed supply chain environment.
     * </pre>
     *
     * <code>.bloombox.services.telemetry.v1beta4.InventoryEvent.StockConsume consumption = 16;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsumeOrBuilder> 
        getConsumptionFieldBuilder() {
      if (consumptionBuilder_ == null) {
        if (!(eventCase_ == 16)) {
          event_ = io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume.getDefaultInstance();
        }
        consumptionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume.Builder, io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsumeOrBuilder>(
                (io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent.StockConsume) event_,
                getParentForChildren(),
                isClean());
        event_ = null;
      }
      eventCase_ = 16;
      onChanged();;
      return consumptionBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:bloombox.services.telemetry.v1beta4.InventoryEvent)
  }

  // @@protoc_insertion_point(class_scope:bloombox.services.telemetry.v1beta4.InventoryEvent)
  private static final io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent();
  }

  public static io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<InventoryEvent>
      PARSER = new com.google.protobuf.AbstractParser<InventoryEvent>() {
    @java.lang.Override
    public InventoryEvent parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return new InventoryEvent(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<InventoryEvent> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<InventoryEvent> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.bloombox.schema.services.telemetry.v1beta4.InventoryEvent getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

