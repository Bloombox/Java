/*
 * Copyright 2019, Momentum Ideas, Co. All rights reserved.
 *
 * Source and object computer code contained herein is the private intellectual
 * property of Momentum Ideas Co., a Delaware Corporation. Use of this
 * code in source form requires permission in writing before use or the
 * assembly, distribution, or publishing of derivative works, for commercial
 * purposes or any other purpose, from a duly authorized officer of Momentum
 * Ideas Co.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: telemetry/v1beta4/TelemetryService_Beta4.proto

package io.bloombox.schema.services.telemetry.v1beta4;

public interface InventoryContextOrBuilder extends
    // @@protoc_insertion_point(interface_extends:bloombox.services.telemetry.v1beta4.InventoryContext)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Timing of this event, or, the position of this event in temporal space.
   * </pre>
   *
   * <code>.bloombox.analytics.EventPosition timing = 1;</code>
   */
  boolean hasTiming();
  /**
   * <pre>
   * Timing of this event, or, the position of this event in temporal space.
   * </pre>
   *
   * <code>.bloombox.analytics.EventPosition timing = 1;</code>
   */
  io.bloombox.schema.telemetry.AnalyticsContext.EventPosition getTiming();
  /**
   * <pre>
   * Timing of this event, or, the position of this event in temporal space.
   * </pre>
   *
   * <code>.bloombox.analytics.EventPosition timing = 1;</code>
   */
  io.bloombox.schema.telemetry.AnalyticsContext.EventPositionOrBuilder getTimingOrBuilder();

  /**
   * <pre>
   * Context of this event, including the scope and reporting node.
   * </pre>
   *
   * <code>.bloombox.analytics.Context context = 2;</code>
   */
  boolean hasContext();
  /**
   * <pre>
   * Context of this event, including the scope and reporting node.
   * </pre>
   *
   * <code>.bloombox.analytics.Context context = 2;</code>
   */
  io.bloombox.schema.telemetry.AnalyticsContext.Context getContext();
  /**
   * <pre>
   * Context of this event, including the scope and reporting node.
   * </pre>
   *
   * <code>.bloombox.analytics.Context context = 2;</code>
   */
  io.bloombox.schema.telemetry.AnalyticsContext.ContextOrBuilder getContextOrBuilder();

  /**
   * <pre>
   * Cryptographic signature from the reporting managed device/node.
   * </pre>
   *
   * <code>.opencannabis.crypto.Signature signature = 3;</code>
   */
  boolean hasSignature();
  /**
   * <pre>
   * Cryptographic signature from the reporting managed device/node.
   * </pre>
   *
   * <code>.opencannabis.crypto.Signature signature = 3;</code>
   */
  io.opencannabis.schema.crypto.Signature getSignature();
  /**
   * <pre>
   * Cryptographic signature from the reporting managed device/node.
   * </pre>
   *
   * <code>.opencannabis.crypto.Signature signature = 3;</code>
   */
  io.opencannabis.schema.crypto.SignatureOrBuilder getSignatureOrBuilder();

  /**
   * <pre>
   * Unique event transmission ID, generated by the client.
   * </pre>
   *
   * <code>string uuid = 4;</code>
   */
  java.lang.String getUuid();
  /**
   * <pre>
   * Unique event transmission ID, generated by the client.
   * </pre>
   *
   * <code>string uuid = 4;</code>
   */
  com.google.protobuf.ByteString
      getUuidBytes();
}
