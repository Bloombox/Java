/*
 * Copyright 2017, Bloombox, LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: identity/ids/UserDoctorRec.proto

package io.bloombox.schema.identity.ids;

public final class UserDoctorRecOuterClass {
  private UserDoctorRecOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_identity_ids_UserDoctorRec_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_identity_ids_UserDoctorRec_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n identity/ids/UserDoctorRec.proto\022\014iden" +
      "tity.ids\032\021geo/USState.proto\032\023person/Pers" +
      "on.proto\032\023temporal/Date.proto\"\272\001\n\rUserDo" +
      "ctorRec\022\n\n\002id\030\001 \001(\t\022\'\n\017expiration_date\030\002" +
      " \001(\0132\016.temporal.Date\022\017\n\007barcode\030\003 \001(\t\022\037\n" +
      "\005state\030\004 \001(\0162\020.geo.usa.USState\022\017\n\007countr" +
      "y\030\005 \001(\t\022\021\n\tdoctor_id\030\006 \001(\t\022\036\n\006doctor\030\007 \001" +
      "(\0132\016.person.PersonB%\n\037io.bloombox.schema" +
      ".identity.idsH\001P\001b\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          io.bloombox.schema.geo.usa.USStateOuterClass.getDescriptor(),
          io.bloombox.schema.person.PersonOuterClass.getDescriptor(),
          io.bloombox.schema.temporal.DateOuterClass.getDescriptor(),
        }, assigner);
    internal_static_identity_ids_UserDoctorRec_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_identity_ids_UserDoctorRec_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_identity_ids_UserDoctorRec_descriptor,
        new java.lang.String[] { "Id", "ExpirationDate", "Barcode", "State", "Country", "DoctorId", "Doctor", });
    io.bloombox.schema.geo.usa.USStateOuterClass.getDescriptor();
    io.bloombox.schema.person.PersonOuterClass.getDescriptor();
    io.bloombox.schema.temporal.DateOuterClass.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
