/*
 * Copyright 2018, Momentum Ideas, Co. All rights reserved.
 *
 * Source and object computer code contained herein is the private intellectual
 * property of Momentum Ideas Co., a Delaware Corporation. Use of this
 * code in source form requires permission in writing before use or the
 * assembly, distribution, or publishing of derivative works, for commercial
 * purposes or any other purpose, from a duly authorized officer of Momentum
 * Ideas Co.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: identity/bioprint/Affinities.proto

package io.bloombox.schema.identity.bioprint;

public final class Affinities {
  private Affinities() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface SentimentResponseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:bloombox.identity.bioprint.SentimentResponse)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Specifies product filters that promote subject products. Items "promoted" in this fashion are arranged or displayed
     * in such a way as to encourage the user to try them, because they might work to achieve their inferred or declared
     * desired cannabis outcomes. Promoted products do not factor in price beyond filters the user has set for themselves,
     * and they do not inherently factor in provider-side commerce/economics-based decision making.
     * </pre>
     *
     * <code>.bloombox.stream.OITDBloomFilter promote = 1;</code>
     */
    boolean hasPromote();
    /**
     * <pre>
     * Specifies product filters that promote subject products. Items "promoted" in this fashion are arranged or displayed
     * in such a way as to encourage the user to try them, because they might work to achieve their inferred or declared
     * desired cannabis outcomes. Promoted products do not factor in price beyond filters the user has set for themselves,
     * and they do not inherently factor in provider-side commerce/economics-based decision making.
     * </pre>
     *
     * <code>.bloombox.stream.OITDBloomFilter promote = 1;</code>
     */
    io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter getPromote();
    /**
     * <pre>
     * Specifies product filters that promote subject products. Items "promoted" in this fashion are arranged or displayed
     * in such a way as to encourage the user to try them, because they might work to achieve their inferred or declared
     * desired cannabis outcomes. Promoted products do not factor in price beyond filters the user has set for themselves,
     * and they do not inherently factor in provider-side commerce/economics-based decision making.
     * </pre>
     *
     * <code>.bloombox.stream.OITDBloomFilter promote = 1;</code>
     */
    io.bloombox.schema.analytics.stream.Filter.OITDBloomFilterOrBuilder getPromoteOrBuilder();

    /**
     * <pre>
     * Specifies product filters that reject subject products. Items "rejected" in this fashion are entirely hidden from
     * view, by default. Users opt-in to this feature to hide products that present harm or may be dangerous for their
     * consumption. Products that land in this category must still be visible on the menu, but hidden behind a prompt that
     * allows the user to explicitly opt-in to seeing them, rather than displaying them normally.
     * </pre>
     *
     * <code>.bloombox.stream.OITDBloomFilter reject = 2;</code>
     */
    boolean hasReject();
    /**
     * <pre>
     * Specifies product filters that reject subject products. Items "rejected" in this fashion are entirely hidden from
     * view, by default. Users opt-in to this feature to hide products that present harm or may be dangerous for their
     * consumption. Products that land in this category must still be visible on the menu, but hidden behind a prompt that
     * allows the user to explicitly opt-in to seeing them, rather than displaying them normally.
     * </pre>
     *
     * <code>.bloombox.stream.OITDBloomFilter reject = 2;</code>
     */
    io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter getReject();
    /**
     * <pre>
     * Specifies product filters that reject subject products. Items "rejected" in this fashion are entirely hidden from
     * view, by default. Users opt-in to this feature to hide products that present harm or may be dangerous for their
     * consumption. Products that land in this category must still be visible on the menu, but hidden behind a prompt that
     * allows the user to explicitly opt-in to seeing them, rather than displaying them normally.
     * </pre>
     *
     * <code>.bloombox.stream.OITDBloomFilter reject = 2;</code>
     */
    io.bloombox.schema.analytics.stream.Filter.OITDBloomFilterOrBuilder getRejectOrBuilder();
  }
  /**
   * <pre>
   * Specifies an individual sentiment response payload, which carries content for a user's experiential response. Stanza
   * payloads are mapped to aspects of consumer use and maintain two response summaries: one for promotion and one for
   * rejection. Promotion of products occurs when a product is deemed to likely "work" for a customer.
   * </pre>
   *
   * Protobuf type {@code bloombox.identity.bioprint.SentimentResponse}
   */
  public  static final class SentimentResponse extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:bloombox.identity.bioprint.SentimentResponse)
      SentimentResponseOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SentimentResponse.newBuilder() to construct.
    private SentimentResponse(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SentimentResponse() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SentimentResponse(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.Builder subBuilder = null;
              if (promote_ != null) {
                subBuilder = promote_.toBuilder();
              }
              promote_ = input.readMessage(io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(promote_);
                promote_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.Builder subBuilder = null;
              if (reject_ != null) {
                subBuilder = reject_.toBuilder();
              }
              reject_ = input.readMessage(io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(reject_);
                reject_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.bloombox.schema.identity.bioprint.Affinities.internal_static_bloombox_identity_bioprint_SentimentResponse_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.bloombox.schema.identity.bioprint.Affinities.internal_static_bloombox_identity_bioprint_SentimentResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse.class, io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse.Builder.class);
    }

    public static final int PROMOTE_FIELD_NUMBER = 1;
    private io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter promote_;
    /**
     * <pre>
     * Specifies product filters that promote subject products. Items "promoted" in this fashion are arranged or displayed
     * in such a way as to encourage the user to try them, because they might work to achieve their inferred or declared
     * desired cannabis outcomes. Promoted products do not factor in price beyond filters the user has set for themselves,
     * and they do not inherently factor in provider-side commerce/economics-based decision making.
     * </pre>
     *
     * <code>.bloombox.stream.OITDBloomFilter promote = 1;</code>
     */
    public boolean hasPromote() {
      return promote_ != null;
    }
    /**
     * <pre>
     * Specifies product filters that promote subject products. Items "promoted" in this fashion are arranged or displayed
     * in such a way as to encourage the user to try them, because they might work to achieve their inferred or declared
     * desired cannabis outcomes. Promoted products do not factor in price beyond filters the user has set for themselves,
     * and they do not inherently factor in provider-side commerce/economics-based decision making.
     * </pre>
     *
     * <code>.bloombox.stream.OITDBloomFilter promote = 1;</code>
     */
    public io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter getPromote() {
      return promote_ == null ? io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.getDefaultInstance() : promote_;
    }
    /**
     * <pre>
     * Specifies product filters that promote subject products. Items "promoted" in this fashion are arranged or displayed
     * in such a way as to encourage the user to try them, because they might work to achieve their inferred or declared
     * desired cannabis outcomes. Promoted products do not factor in price beyond filters the user has set for themselves,
     * and they do not inherently factor in provider-side commerce/economics-based decision making.
     * </pre>
     *
     * <code>.bloombox.stream.OITDBloomFilter promote = 1;</code>
     */
    public io.bloombox.schema.analytics.stream.Filter.OITDBloomFilterOrBuilder getPromoteOrBuilder() {
      return getPromote();
    }

    public static final int REJECT_FIELD_NUMBER = 2;
    private io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter reject_;
    /**
     * <pre>
     * Specifies product filters that reject subject products. Items "rejected" in this fashion are entirely hidden from
     * view, by default. Users opt-in to this feature to hide products that present harm or may be dangerous for their
     * consumption. Products that land in this category must still be visible on the menu, but hidden behind a prompt that
     * allows the user to explicitly opt-in to seeing them, rather than displaying them normally.
     * </pre>
     *
     * <code>.bloombox.stream.OITDBloomFilter reject = 2;</code>
     */
    public boolean hasReject() {
      return reject_ != null;
    }
    /**
     * <pre>
     * Specifies product filters that reject subject products. Items "rejected" in this fashion are entirely hidden from
     * view, by default. Users opt-in to this feature to hide products that present harm or may be dangerous for their
     * consumption. Products that land in this category must still be visible on the menu, but hidden behind a prompt that
     * allows the user to explicitly opt-in to seeing them, rather than displaying them normally.
     * </pre>
     *
     * <code>.bloombox.stream.OITDBloomFilter reject = 2;</code>
     */
    public io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter getReject() {
      return reject_ == null ? io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.getDefaultInstance() : reject_;
    }
    /**
     * <pre>
     * Specifies product filters that reject subject products. Items "rejected" in this fashion are entirely hidden from
     * view, by default. Users opt-in to this feature to hide products that present harm or may be dangerous for their
     * consumption. Products that land in this category must still be visible on the menu, but hidden behind a prompt that
     * allows the user to explicitly opt-in to seeing them, rather than displaying them normally.
     * </pre>
     *
     * <code>.bloombox.stream.OITDBloomFilter reject = 2;</code>
     */
    public io.bloombox.schema.analytics.stream.Filter.OITDBloomFilterOrBuilder getRejectOrBuilder() {
      return getReject();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (promote_ != null) {
        output.writeMessage(1, getPromote());
      }
      if (reject_ != null) {
        output.writeMessage(2, getReject());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (promote_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getPromote());
      }
      if (reject_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getReject());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse)) {
        return super.equals(obj);
      }
      io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse other = (io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse) obj;

      boolean result = true;
      result = result && (hasPromote() == other.hasPromote());
      if (hasPromote()) {
        result = result && getPromote()
            .equals(other.getPromote());
      }
      result = result && (hasReject() == other.hasReject());
      if (hasReject()) {
        result = result && getReject()
            .equals(other.getReject());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasPromote()) {
        hash = (37 * hash) + PROMOTE_FIELD_NUMBER;
        hash = (53 * hash) + getPromote().hashCode();
      }
      if (hasReject()) {
        hash = (37 * hash) + REJECT_FIELD_NUMBER;
        hash = (53 * hash) + getReject().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Specifies an individual sentiment response payload, which carries content for a user's experiential response. Stanza
     * payloads are mapped to aspects of consumer use and maintain two response summaries: one for promotion and one for
     * rejection. Promotion of products occurs when a product is deemed to likely "work" for a customer.
     * </pre>
     *
     * Protobuf type {@code bloombox.identity.bioprint.SentimentResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:bloombox.identity.bioprint.SentimentResponse)
        io.bloombox.schema.identity.bioprint.Affinities.SentimentResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.bloombox.schema.identity.bioprint.Affinities.internal_static_bloombox_identity_bioprint_SentimentResponse_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.bloombox.schema.identity.bioprint.Affinities.internal_static_bloombox_identity_bioprint_SentimentResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse.class, io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse.Builder.class);
      }

      // Construct using io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (promoteBuilder_ == null) {
          promote_ = null;
        } else {
          promote_ = null;
          promoteBuilder_ = null;
        }
        if (rejectBuilder_ == null) {
          reject_ = null;
        } else {
          reject_ = null;
          rejectBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.bloombox.schema.identity.bioprint.Affinities.internal_static_bloombox_identity_bioprint_SentimentResponse_descriptor;
      }

      @java.lang.Override
      public io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse getDefaultInstanceForType() {
        return io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse.getDefaultInstance();
      }

      @java.lang.Override
      public io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse build() {
        io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse buildPartial() {
        io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse result = new io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse(this);
        if (promoteBuilder_ == null) {
          result.promote_ = promote_;
        } else {
          result.promote_ = promoteBuilder_.build();
        }
        if (rejectBuilder_ == null) {
          result.reject_ = reject_;
        } else {
          result.reject_ = rejectBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse) {
          return mergeFrom((io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse other) {
        if (other == io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse.getDefaultInstance()) return this;
        if (other.hasPromote()) {
          mergePromote(other.getPromote());
        }
        if (other.hasReject()) {
          mergeReject(other.getReject());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter promote_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter, io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.Builder, io.bloombox.schema.analytics.stream.Filter.OITDBloomFilterOrBuilder> promoteBuilder_;
      /**
       * <pre>
       * Specifies product filters that promote subject products. Items "promoted" in this fashion are arranged or displayed
       * in such a way as to encourage the user to try them, because they might work to achieve their inferred or declared
       * desired cannabis outcomes. Promoted products do not factor in price beyond filters the user has set for themselves,
       * and they do not inherently factor in provider-side commerce/economics-based decision making.
       * </pre>
       *
       * <code>.bloombox.stream.OITDBloomFilter promote = 1;</code>
       */
      public boolean hasPromote() {
        return promoteBuilder_ != null || promote_ != null;
      }
      /**
       * <pre>
       * Specifies product filters that promote subject products. Items "promoted" in this fashion are arranged or displayed
       * in such a way as to encourage the user to try them, because they might work to achieve their inferred or declared
       * desired cannabis outcomes. Promoted products do not factor in price beyond filters the user has set for themselves,
       * and they do not inherently factor in provider-side commerce/economics-based decision making.
       * </pre>
       *
       * <code>.bloombox.stream.OITDBloomFilter promote = 1;</code>
       */
      public io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter getPromote() {
        if (promoteBuilder_ == null) {
          return promote_ == null ? io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.getDefaultInstance() : promote_;
        } else {
          return promoteBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Specifies product filters that promote subject products. Items "promoted" in this fashion are arranged or displayed
       * in such a way as to encourage the user to try them, because they might work to achieve their inferred or declared
       * desired cannabis outcomes. Promoted products do not factor in price beyond filters the user has set for themselves,
       * and they do not inherently factor in provider-side commerce/economics-based decision making.
       * </pre>
       *
       * <code>.bloombox.stream.OITDBloomFilter promote = 1;</code>
       */
      public Builder setPromote(io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter value) {
        if (promoteBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          promote_ = value;
          onChanged();
        } else {
          promoteBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Specifies product filters that promote subject products. Items "promoted" in this fashion are arranged or displayed
       * in such a way as to encourage the user to try them, because they might work to achieve their inferred or declared
       * desired cannabis outcomes. Promoted products do not factor in price beyond filters the user has set for themselves,
       * and they do not inherently factor in provider-side commerce/economics-based decision making.
       * </pre>
       *
       * <code>.bloombox.stream.OITDBloomFilter promote = 1;</code>
       */
      public Builder setPromote(
          io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.Builder builderForValue) {
        if (promoteBuilder_ == null) {
          promote_ = builderForValue.build();
          onChanged();
        } else {
          promoteBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Specifies product filters that promote subject products. Items "promoted" in this fashion are arranged or displayed
       * in such a way as to encourage the user to try them, because they might work to achieve their inferred or declared
       * desired cannabis outcomes. Promoted products do not factor in price beyond filters the user has set for themselves,
       * and they do not inherently factor in provider-side commerce/economics-based decision making.
       * </pre>
       *
       * <code>.bloombox.stream.OITDBloomFilter promote = 1;</code>
       */
      public Builder mergePromote(io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter value) {
        if (promoteBuilder_ == null) {
          if (promote_ != null) {
            promote_ =
              io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.newBuilder(promote_).mergeFrom(value).buildPartial();
          } else {
            promote_ = value;
          }
          onChanged();
        } else {
          promoteBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Specifies product filters that promote subject products. Items "promoted" in this fashion are arranged or displayed
       * in such a way as to encourage the user to try them, because they might work to achieve their inferred or declared
       * desired cannabis outcomes. Promoted products do not factor in price beyond filters the user has set for themselves,
       * and they do not inherently factor in provider-side commerce/economics-based decision making.
       * </pre>
       *
       * <code>.bloombox.stream.OITDBloomFilter promote = 1;</code>
       */
      public Builder clearPromote() {
        if (promoteBuilder_ == null) {
          promote_ = null;
          onChanged();
        } else {
          promote_ = null;
          promoteBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Specifies product filters that promote subject products. Items "promoted" in this fashion are arranged or displayed
       * in such a way as to encourage the user to try them, because they might work to achieve their inferred or declared
       * desired cannabis outcomes. Promoted products do not factor in price beyond filters the user has set for themselves,
       * and they do not inherently factor in provider-side commerce/economics-based decision making.
       * </pre>
       *
       * <code>.bloombox.stream.OITDBloomFilter promote = 1;</code>
       */
      public io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.Builder getPromoteBuilder() {
        
        onChanged();
        return getPromoteFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Specifies product filters that promote subject products. Items "promoted" in this fashion are arranged or displayed
       * in such a way as to encourage the user to try them, because they might work to achieve their inferred or declared
       * desired cannabis outcomes. Promoted products do not factor in price beyond filters the user has set for themselves,
       * and they do not inherently factor in provider-side commerce/economics-based decision making.
       * </pre>
       *
       * <code>.bloombox.stream.OITDBloomFilter promote = 1;</code>
       */
      public io.bloombox.schema.analytics.stream.Filter.OITDBloomFilterOrBuilder getPromoteOrBuilder() {
        if (promoteBuilder_ != null) {
          return promoteBuilder_.getMessageOrBuilder();
        } else {
          return promote_ == null ?
              io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.getDefaultInstance() : promote_;
        }
      }
      /**
       * <pre>
       * Specifies product filters that promote subject products. Items "promoted" in this fashion are arranged or displayed
       * in such a way as to encourage the user to try them, because they might work to achieve their inferred or declared
       * desired cannabis outcomes. Promoted products do not factor in price beyond filters the user has set for themselves,
       * and they do not inherently factor in provider-side commerce/economics-based decision making.
       * </pre>
       *
       * <code>.bloombox.stream.OITDBloomFilter promote = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter, io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.Builder, io.bloombox.schema.analytics.stream.Filter.OITDBloomFilterOrBuilder> 
          getPromoteFieldBuilder() {
        if (promoteBuilder_ == null) {
          promoteBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter, io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.Builder, io.bloombox.schema.analytics.stream.Filter.OITDBloomFilterOrBuilder>(
                  getPromote(),
                  getParentForChildren(),
                  isClean());
          promote_ = null;
        }
        return promoteBuilder_;
      }

      private io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter reject_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter, io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.Builder, io.bloombox.schema.analytics.stream.Filter.OITDBloomFilterOrBuilder> rejectBuilder_;
      /**
       * <pre>
       * Specifies product filters that reject subject products. Items "rejected" in this fashion are entirely hidden from
       * view, by default. Users opt-in to this feature to hide products that present harm or may be dangerous for their
       * consumption. Products that land in this category must still be visible on the menu, but hidden behind a prompt that
       * allows the user to explicitly opt-in to seeing them, rather than displaying them normally.
       * </pre>
       *
       * <code>.bloombox.stream.OITDBloomFilter reject = 2;</code>
       */
      public boolean hasReject() {
        return rejectBuilder_ != null || reject_ != null;
      }
      /**
       * <pre>
       * Specifies product filters that reject subject products. Items "rejected" in this fashion are entirely hidden from
       * view, by default. Users opt-in to this feature to hide products that present harm or may be dangerous for their
       * consumption. Products that land in this category must still be visible on the menu, but hidden behind a prompt that
       * allows the user to explicitly opt-in to seeing them, rather than displaying them normally.
       * </pre>
       *
       * <code>.bloombox.stream.OITDBloomFilter reject = 2;</code>
       */
      public io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter getReject() {
        if (rejectBuilder_ == null) {
          return reject_ == null ? io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.getDefaultInstance() : reject_;
        } else {
          return rejectBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Specifies product filters that reject subject products. Items "rejected" in this fashion are entirely hidden from
       * view, by default. Users opt-in to this feature to hide products that present harm or may be dangerous for their
       * consumption. Products that land in this category must still be visible on the menu, but hidden behind a prompt that
       * allows the user to explicitly opt-in to seeing them, rather than displaying them normally.
       * </pre>
       *
       * <code>.bloombox.stream.OITDBloomFilter reject = 2;</code>
       */
      public Builder setReject(io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter value) {
        if (rejectBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          reject_ = value;
          onChanged();
        } else {
          rejectBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Specifies product filters that reject subject products. Items "rejected" in this fashion are entirely hidden from
       * view, by default. Users opt-in to this feature to hide products that present harm or may be dangerous for their
       * consumption. Products that land in this category must still be visible on the menu, but hidden behind a prompt that
       * allows the user to explicitly opt-in to seeing them, rather than displaying them normally.
       * </pre>
       *
       * <code>.bloombox.stream.OITDBloomFilter reject = 2;</code>
       */
      public Builder setReject(
          io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.Builder builderForValue) {
        if (rejectBuilder_ == null) {
          reject_ = builderForValue.build();
          onChanged();
        } else {
          rejectBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Specifies product filters that reject subject products. Items "rejected" in this fashion are entirely hidden from
       * view, by default. Users opt-in to this feature to hide products that present harm or may be dangerous for their
       * consumption. Products that land in this category must still be visible on the menu, but hidden behind a prompt that
       * allows the user to explicitly opt-in to seeing them, rather than displaying them normally.
       * </pre>
       *
       * <code>.bloombox.stream.OITDBloomFilter reject = 2;</code>
       */
      public Builder mergeReject(io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter value) {
        if (rejectBuilder_ == null) {
          if (reject_ != null) {
            reject_ =
              io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.newBuilder(reject_).mergeFrom(value).buildPartial();
          } else {
            reject_ = value;
          }
          onChanged();
        } else {
          rejectBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Specifies product filters that reject subject products. Items "rejected" in this fashion are entirely hidden from
       * view, by default. Users opt-in to this feature to hide products that present harm or may be dangerous for their
       * consumption. Products that land in this category must still be visible on the menu, but hidden behind a prompt that
       * allows the user to explicitly opt-in to seeing them, rather than displaying them normally.
       * </pre>
       *
       * <code>.bloombox.stream.OITDBloomFilter reject = 2;</code>
       */
      public Builder clearReject() {
        if (rejectBuilder_ == null) {
          reject_ = null;
          onChanged();
        } else {
          reject_ = null;
          rejectBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Specifies product filters that reject subject products. Items "rejected" in this fashion are entirely hidden from
       * view, by default. Users opt-in to this feature to hide products that present harm or may be dangerous for their
       * consumption. Products that land in this category must still be visible on the menu, but hidden behind a prompt that
       * allows the user to explicitly opt-in to seeing them, rather than displaying them normally.
       * </pre>
       *
       * <code>.bloombox.stream.OITDBloomFilter reject = 2;</code>
       */
      public io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.Builder getRejectBuilder() {
        
        onChanged();
        return getRejectFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Specifies product filters that reject subject products. Items "rejected" in this fashion are entirely hidden from
       * view, by default. Users opt-in to this feature to hide products that present harm or may be dangerous for their
       * consumption. Products that land in this category must still be visible on the menu, but hidden behind a prompt that
       * allows the user to explicitly opt-in to seeing them, rather than displaying them normally.
       * </pre>
       *
       * <code>.bloombox.stream.OITDBloomFilter reject = 2;</code>
       */
      public io.bloombox.schema.analytics.stream.Filter.OITDBloomFilterOrBuilder getRejectOrBuilder() {
        if (rejectBuilder_ != null) {
          return rejectBuilder_.getMessageOrBuilder();
        } else {
          return reject_ == null ?
              io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.getDefaultInstance() : reject_;
        }
      }
      /**
       * <pre>
       * Specifies product filters that reject subject products. Items "rejected" in this fashion are entirely hidden from
       * view, by default. Users opt-in to this feature to hide products that present harm or may be dangerous for their
       * consumption. Products that land in this category must still be visible on the menu, but hidden behind a prompt that
       * allows the user to explicitly opt-in to seeing them, rather than displaying them normally.
       * </pre>
       *
       * <code>.bloombox.stream.OITDBloomFilter reject = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter, io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.Builder, io.bloombox.schema.analytics.stream.Filter.OITDBloomFilterOrBuilder> 
          getRejectFieldBuilder() {
        if (rejectBuilder_ == null) {
          rejectBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter, io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.Builder, io.bloombox.schema.analytics.stream.Filter.OITDBloomFilterOrBuilder>(
                  getReject(),
                  getParentForChildren(),
                  isClean());
          reject_ = null;
        }
        return rejectBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:bloombox.identity.bioprint.SentimentResponse)
    }

    // @@protoc_insertion_point(class_scope:bloombox.identity.bioprint.SentimentResponse)
    private static final io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse();
    }

    public static io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SentimentResponse>
        PARSER = new com.google.protobuf.AbstractParser<SentimentResponse>() {
      @java.lang.Override
      public SentimentResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SentimentResponse(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SentimentResponse> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SentimentResponse> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface AffinityOrBuilder extends
      // @@protoc_insertion_point(interface_extends:bloombox.identity.bioprint.Affinity)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Specifies the affinity content attached to this aspect/affinity scope mapping. The stanza includes metrics for
     * promotion or rejection of products based on composition.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.SentimentResponse affinity = 1;</code>
     */
    java.util.List<io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse> 
        getAffinityList();
    /**
     * <pre>
     * Specifies the affinity content attached to this aspect/affinity scope mapping. The stanza includes metrics for
     * promotion or rejection of products based on composition.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.SentimentResponse affinity = 1;</code>
     */
    io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse getAffinity(int index);
    /**
     * <pre>
     * Specifies the affinity content attached to this aspect/affinity scope mapping. The stanza includes metrics for
     * promotion or rejection of products based on composition.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.SentimentResponse affinity = 1;</code>
     */
    int getAffinityCount();
    /**
     * <pre>
     * Specifies the affinity content attached to this aspect/affinity scope mapping. The stanza includes metrics for
     * promotion or rejection of products based on composition.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.SentimentResponse affinity = 1;</code>
     */
    java.util.List<? extends io.bloombox.schema.identity.bioprint.Affinities.SentimentResponseOrBuilder> 
        getAffinityOrBuilderList();
    /**
     * <pre>
     * Specifies the affinity content attached to this aspect/affinity scope mapping. The stanza includes metrics for
     * promotion or rejection of products based on composition.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.SentimentResponse affinity = 1;</code>
     */
    io.bloombox.schema.identity.bioprint.Affinities.SentimentResponseOrBuilder getAffinityOrBuilder(
        int index);

    /**
     * <pre>
     * Indicates the relative significance of this affinity value, when weighing it against other metrics. Significance
     * can be gathered from different signals, and so, each is summed here by signal type when calculating the weight
     * value to apply during Bioprint interrogation at the point-of-purchase.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.MetricSignificance significance = 2;</code>
     */
    java.util.List<io.bloombox.schema.identity.bioprint.Weights.MetricSignificance> 
        getSignificanceList();
    /**
     * <pre>
     * Indicates the relative significance of this affinity value, when weighing it against other metrics. Significance
     * can be gathered from different signals, and so, each is summed here by signal type when calculating the weight
     * value to apply during Bioprint interrogation at the point-of-purchase.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.MetricSignificance significance = 2;</code>
     */
    io.bloombox.schema.identity.bioprint.Weights.MetricSignificance getSignificance(int index);
    /**
     * <pre>
     * Indicates the relative significance of this affinity value, when weighing it against other metrics. Significance
     * can be gathered from different signals, and so, each is summed here by signal type when calculating the weight
     * value to apply during Bioprint interrogation at the point-of-purchase.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.MetricSignificance significance = 2;</code>
     */
    int getSignificanceCount();
    /**
     * <pre>
     * Indicates the relative significance of this affinity value, when weighing it against other metrics. Significance
     * can be gathered from different signals, and so, each is summed here by signal type when calculating the weight
     * value to apply during Bioprint interrogation at the point-of-purchase.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.MetricSignificance significance = 2;</code>
     */
    java.util.List<? extends io.bloombox.schema.identity.bioprint.Weights.MetricSignificanceOrBuilder> 
        getSignificanceOrBuilderList();
    /**
     * <pre>
     * Indicates the relative significance of this affinity value, when weighing it against other metrics. Significance
     * can be gathered from different signals, and so, each is summed here by signal type when calculating the weight
     * value to apply during Bioprint interrogation at the point-of-purchase.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.MetricSignificance significance = 2;</code>
     */
    io.bloombox.schema.identity.bioprint.Weights.MetricSignificanceOrBuilder getSignificanceOrBuilder(
        int index);

    /**
     * <pre>
     * Specifies an individual aspect-of-use, for which this affinity mapping applies.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.Aspect aspect = 10;</code>
     */
    boolean hasAspect();
    /**
     * <pre>
     * Specifies an individual aspect-of-use, for which this affinity mapping applies.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.Aspect aspect = 10;</code>
     */
    io.bloombox.schema.identity.bioprint.Aspects.Aspect getAspect();
    /**
     * <pre>
     * Specifies an individual aspect-of-use, for which this affinity mapping applies.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.Aspect aspect = 10;</code>
     */
    io.bloombox.schema.identity.bioprint.Aspects.AspectOrBuilder getAspectOrBuilder();

    /**
     * <pre>
     * Specifies an aspect-of-use aggregate group, for which this affinity mapping applies.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.AspectGroup group = 11;</code>
     */
    boolean hasGroup();
    /**
     * <pre>
     * Specifies an aspect-of-use aggregate group, for which this affinity mapping applies.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.AspectGroup group = 11;</code>
     */
    io.bloombox.schema.identity.bioprint.Aspects.AspectGroup getGroup();
    /**
     * <pre>
     * Specifies an aspect-of-use aggregate group, for which this affinity mapping applies.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.AspectGroup group = 11;</code>
     */
    io.bloombox.schema.identity.bioprint.Aspects.AspectGroupOrBuilder getGroupOrBuilder();

    public io.bloombox.schema.identity.bioprint.Affinities.Affinity.ScopeCase getScopeCase();
  }
  /**
   * <pre>
   * Describes a mapping between an aspect of cannabis use, and a user's affinity rating, both for promotion and rejection
   * of products based on the composure fo those products.
   * </pre>
   *
   * Protobuf type {@code bloombox.identity.bioprint.Affinity}
   */
  public  static final class Affinity extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:bloombox.identity.bioprint.Affinity)
      AffinityOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Affinity.newBuilder() to construct.
    private Affinity(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Affinity() {
      affinity_ = java.util.Collections.emptyList();
      significance_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Affinity(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                affinity_ = new java.util.ArrayList<io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse>();
                mutable_bitField0_ |= 0x00000001;
              }
              affinity_.add(
                  input.readMessage(io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse.parser(), extensionRegistry));
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                significance_ = new java.util.ArrayList<io.bloombox.schema.identity.bioprint.Weights.MetricSignificance>();
                mutable_bitField0_ |= 0x00000002;
              }
              significance_.add(
                  input.readMessage(io.bloombox.schema.identity.bioprint.Weights.MetricSignificance.parser(), extensionRegistry));
              break;
            }
            case 82: {
              io.bloombox.schema.identity.bioprint.Aspects.Aspect.Builder subBuilder = null;
              if (scopeCase_ == 10) {
                subBuilder = ((io.bloombox.schema.identity.bioprint.Aspects.Aspect) scope_).toBuilder();
              }
              scope_ =
                  input.readMessage(io.bloombox.schema.identity.bioprint.Aspects.Aspect.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((io.bloombox.schema.identity.bioprint.Aspects.Aspect) scope_);
                scope_ = subBuilder.buildPartial();
              }
              scopeCase_ = 10;
              break;
            }
            case 90: {
              io.bloombox.schema.identity.bioprint.Aspects.AspectGroup.Builder subBuilder = null;
              if (scopeCase_ == 11) {
                subBuilder = ((io.bloombox.schema.identity.bioprint.Aspects.AspectGroup) scope_).toBuilder();
              }
              scope_ =
                  input.readMessage(io.bloombox.schema.identity.bioprint.Aspects.AspectGroup.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((io.bloombox.schema.identity.bioprint.Aspects.AspectGroup) scope_);
                scope_ = subBuilder.buildPartial();
              }
              scopeCase_ = 11;
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          affinity_ = java.util.Collections.unmodifiableList(affinity_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          significance_ = java.util.Collections.unmodifiableList(significance_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.bloombox.schema.identity.bioprint.Affinities.internal_static_bloombox_identity_bioprint_Affinity_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.bloombox.schema.identity.bioprint.Affinities.internal_static_bloombox_identity_bioprint_Affinity_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.bloombox.schema.identity.bioprint.Affinities.Affinity.class, io.bloombox.schema.identity.bioprint.Affinities.Affinity.Builder.class);
    }

    private int bitField0_;
    private int scopeCase_ = 0;
    private java.lang.Object scope_;
    public enum ScopeCase
        implements com.google.protobuf.Internal.EnumLite {
      ASPECT(10),
      GROUP(11),
      SCOPE_NOT_SET(0);
      private final int value;
      private ScopeCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ScopeCase valueOf(int value) {
        return forNumber(value);
      }

      public static ScopeCase forNumber(int value) {
        switch (value) {
          case 10: return ASPECT;
          case 11: return GROUP;
          case 0: return SCOPE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ScopeCase
    getScopeCase() {
      return ScopeCase.forNumber(
          scopeCase_);
    }

    public static final int AFFINITY_FIELD_NUMBER = 1;
    private java.util.List<io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse> affinity_;
    /**
     * <pre>
     * Specifies the affinity content attached to this aspect/affinity scope mapping. The stanza includes metrics for
     * promotion or rejection of products based on composition.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.SentimentResponse affinity = 1;</code>
     */
    public java.util.List<io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse> getAffinityList() {
      return affinity_;
    }
    /**
     * <pre>
     * Specifies the affinity content attached to this aspect/affinity scope mapping. The stanza includes metrics for
     * promotion or rejection of products based on composition.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.SentimentResponse affinity = 1;</code>
     */
    public java.util.List<? extends io.bloombox.schema.identity.bioprint.Affinities.SentimentResponseOrBuilder> 
        getAffinityOrBuilderList() {
      return affinity_;
    }
    /**
     * <pre>
     * Specifies the affinity content attached to this aspect/affinity scope mapping. The stanza includes metrics for
     * promotion or rejection of products based on composition.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.SentimentResponse affinity = 1;</code>
     */
    public int getAffinityCount() {
      return affinity_.size();
    }
    /**
     * <pre>
     * Specifies the affinity content attached to this aspect/affinity scope mapping. The stanza includes metrics for
     * promotion or rejection of products based on composition.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.SentimentResponse affinity = 1;</code>
     */
    public io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse getAffinity(int index) {
      return affinity_.get(index);
    }
    /**
     * <pre>
     * Specifies the affinity content attached to this aspect/affinity scope mapping. The stanza includes metrics for
     * promotion or rejection of products based on composition.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.SentimentResponse affinity = 1;</code>
     */
    public io.bloombox.schema.identity.bioprint.Affinities.SentimentResponseOrBuilder getAffinityOrBuilder(
        int index) {
      return affinity_.get(index);
    }

    public static final int SIGNIFICANCE_FIELD_NUMBER = 2;
    private java.util.List<io.bloombox.schema.identity.bioprint.Weights.MetricSignificance> significance_;
    /**
     * <pre>
     * Indicates the relative significance of this affinity value, when weighing it against other metrics. Significance
     * can be gathered from different signals, and so, each is summed here by signal type when calculating the weight
     * value to apply during Bioprint interrogation at the point-of-purchase.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.MetricSignificance significance = 2;</code>
     */
    public java.util.List<io.bloombox.schema.identity.bioprint.Weights.MetricSignificance> getSignificanceList() {
      return significance_;
    }
    /**
     * <pre>
     * Indicates the relative significance of this affinity value, when weighing it against other metrics. Significance
     * can be gathered from different signals, and so, each is summed here by signal type when calculating the weight
     * value to apply during Bioprint interrogation at the point-of-purchase.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.MetricSignificance significance = 2;</code>
     */
    public java.util.List<? extends io.bloombox.schema.identity.bioprint.Weights.MetricSignificanceOrBuilder> 
        getSignificanceOrBuilderList() {
      return significance_;
    }
    /**
     * <pre>
     * Indicates the relative significance of this affinity value, when weighing it against other metrics. Significance
     * can be gathered from different signals, and so, each is summed here by signal type when calculating the weight
     * value to apply during Bioprint interrogation at the point-of-purchase.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.MetricSignificance significance = 2;</code>
     */
    public int getSignificanceCount() {
      return significance_.size();
    }
    /**
     * <pre>
     * Indicates the relative significance of this affinity value, when weighing it against other metrics. Significance
     * can be gathered from different signals, and so, each is summed here by signal type when calculating the weight
     * value to apply during Bioprint interrogation at the point-of-purchase.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.MetricSignificance significance = 2;</code>
     */
    public io.bloombox.schema.identity.bioprint.Weights.MetricSignificance getSignificance(int index) {
      return significance_.get(index);
    }
    /**
     * <pre>
     * Indicates the relative significance of this affinity value, when weighing it against other metrics. Significance
     * can be gathered from different signals, and so, each is summed here by signal type when calculating the weight
     * value to apply during Bioprint interrogation at the point-of-purchase.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.MetricSignificance significance = 2;</code>
     */
    public io.bloombox.schema.identity.bioprint.Weights.MetricSignificanceOrBuilder getSignificanceOrBuilder(
        int index) {
      return significance_.get(index);
    }

    public static final int ASPECT_FIELD_NUMBER = 10;
    /**
     * <pre>
     * Specifies an individual aspect-of-use, for which this affinity mapping applies.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.Aspect aspect = 10;</code>
     */
    public boolean hasAspect() {
      return scopeCase_ == 10;
    }
    /**
     * <pre>
     * Specifies an individual aspect-of-use, for which this affinity mapping applies.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.Aspect aspect = 10;</code>
     */
    public io.bloombox.schema.identity.bioprint.Aspects.Aspect getAspect() {
      if (scopeCase_ == 10) {
         return (io.bloombox.schema.identity.bioprint.Aspects.Aspect) scope_;
      }
      return io.bloombox.schema.identity.bioprint.Aspects.Aspect.getDefaultInstance();
    }
    /**
     * <pre>
     * Specifies an individual aspect-of-use, for which this affinity mapping applies.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.Aspect aspect = 10;</code>
     */
    public io.bloombox.schema.identity.bioprint.Aspects.AspectOrBuilder getAspectOrBuilder() {
      if (scopeCase_ == 10) {
         return (io.bloombox.schema.identity.bioprint.Aspects.Aspect) scope_;
      }
      return io.bloombox.schema.identity.bioprint.Aspects.Aspect.getDefaultInstance();
    }

    public static final int GROUP_FIELD_NUMBER = 11;
    /**
     * <pre>
     * Specifies an aspect-of-use aggregate group, for which this affinity mapping applies.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.AspectGroup group = 11;</code>
     */
    public boolean hasGroup() {
      return scopeCase_ == 11;
    }
    /**
     * <pre>
     * Specifies an aspect-of-use aggregate group, for which this affinity mapping applies.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.AspectGroup group = 11;</code>
     */
    public io.bloombox.schema.identity.bioprint.Aspects.AspectGroup getGroup() {
      if (scopeCase_ == 11) {
         return (io.bloombox.schema.identity.bioprint.Aspects.AspectGroup) scope_;
      }
      return io.bloombox.schema.identity.bioprint.Aspects.AspectGroup.getDefaultInstance();
    }
    /**
     * <pre>
     * Specifies an aspect-of-use aggregate group, for which this affinity mapping applies.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.AspectGroup group = 11;</code>
     */
    public io.bloombox.schema.identity.bioprint.Aspects.AspectGroupOrBuilder getGroupOrBuilder() {
      if (scopeCase_ == 11) {
         return (io.bloombox.schema.identity.bioprint.Aspects.AspectGroup) scope_;
      }
      return io.bloombox.schema.identity.bioprint.Aspects.AspectGroup.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < affinity_.size(); i++) {
        output.writeMessage(1, affinity_.get(i));
      }
      for (int i = 0; i < significance_.size(); i++) {
        output.writeMessage(2, significance_.get(i));
      }
      if (scopeCase_ == 10) {
        output.writeMessage(10, (io.bloombox.schema.identity.bioprint.Aspects.Aspect) scope_);
      }
      if (scopeCase_ == 11) {
        output.writeMessage(11, (io.bloombox.schema.identity.bioprint.Aspects.AspectGroup) scope_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < affinity_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, affinity_.get(i));
      }
      for (int i = 0; i < significance_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, significance_.get(i));
      }
      if (scopeCase_ == 10) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, (io.bloombox.schema.identity.bioprint.Aspects.Aspect) scope_);
      }
      if (scopeCase_ == 11) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, (io.bloombox.schema.identity.bioprint.Aspects.AspectGroup) scope_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.bloombox.schema.identity.bioprint.Affinities.Affinity)) {
        return super.equals(obj);
      }
      io.bloombox.schema.identity.bioprint.Affinities.Affinity other = (io.bloombox.schema.identity.bioprint.Affinities.Affinity) obj;

      boolean result = true;
      result = result && getAffinityList()
          .equals(other.getAffinityList());
      result = result && getSignificanceList()
          .equals(other.getSignificanceList());
      result = result && getScopeCase().equals(
          other.getScopeCase());
      if (!result) return false;
      switch (scopeCase_) {
        case 10:
          result = result && getAspect()
              .equals(other.getAspect());
          break;
        case 11:
          result = result && getGroup()
              .equals(other.getGroup());
          break;
        case 0:
        default:
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getAffinityCount() > 0) {
        hash = (37 * hash) + AFFINITY_FIELD_NUMBER;
        hash = (53 * hash) + getAffinityList().hashCode();
      }
      if (getSignificanceCount() > 0) {
        hash = (37 * hash) + SIGNIFICANCE_FIELD_NUMBER;
        hash = (53 * hash) + getSignificanceList().hashCode();
      }
      switch (scopeCase_) {
        case 10:
          hash = (37 * hash) + ASPECT_FIELD_NUMBER;
          hash = (53 * hash) + getAspect().hashCode();
          break;
        case 11:
          hash = (37 * hash) + GROUP_FIELD_NUMBER;
          hash = (53 * hash) + getGroup().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.bloombox.schema.identity.bioprint.Affinities.Affinity parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.identity.bioprint.Affinities.Affinity parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.Affinities.Affinity parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.identity.bioprint.Affinities.Affinity parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.Affinities.Affinity parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.identity.bioprint.Affinities.Affinity parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.Affinities.Affinity parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.identity.bioprint.Affinities.Affinity parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.Affinities.Affinity parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.identity.bioprint.Affinities.Affinity parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.Affinities.Affinity parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.identity.bioprint.Affinities.Affinity parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.bloombox.schema.identity.bioprint.Affinities.Affinity prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Describes a mapping between an aspect of cannabis use, and a user's affinity rating, both for promotion and rejection
     * of products based on the composure fo those products.
     * </pre>
     *
     * Protobuf type {@code bloombox.identity.bioprint.Affinity}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:bloombox.identity.bioprint.Affinity)
        io.bloombox.schema.identity.bioprint.Affinities.AffinityOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.bloombox.schema.identity.bioprint.Affinities.internal_static_bloombox_identity_bioprint_Affinity_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.bloombox.schema.identity.bioprint.Affinities.internal_static_bloombox_identity_bioprint_Affinity_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.bloombox.schema.identity.bioprint.Affinities.Affinity.class, io.bloombox.schema.identity.bioprint.Affinities.Affinity.Builder.class);
      }

      // Construct using io.bloombox.schema.identity.bioprint.Affinities.Affinity.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getAffinityFieldBuilder();
          getSignificanceFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (affinityBuilder_ == null) {
          affinity_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          affinityBuilder_.clear();
        }
        if (significanceBuilder_ == null) {
          significance_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          significanceBuilder_.clear();
        }
        scopeCase_ = 0;
        scope_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.bloombox.schema.identity.bioprint.Affinities.internal_static_bloombox_identity_bioprint_Affinity_descriptor;
      }

      @java.lang.Override
      public io.bloombox.schema.identity.bioprint.Affinities.Affinity getDefaultInstanceForType() {
        return io.bloombox.schema.identity.bioprint.Affinities.Affinity.getDefaultInstance();
      }

      @java.lang.Override
      public io.bloombox.schema.identity.bioprint.Affinities.Affinity build() {
        io.bloombox.schema.identity.bioprint.Affinities.Affinity result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.bloombox.schema.identity.bioprint.Affinities.Affinity buildPartial() {
        io.bloombox.schema.identity.bioprint.Affinities.Affinity result = new io.bloombox.schema.identity.bioprint.Affinities.Affinity(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (affinityBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            affinity_ = java.util.Collections.unmodifiableList(affinity_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.affinity_ = affinity_;
        } else {
          result.affinity_ = affinityBuilder_.build();
        }
        if (significanceBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            significance_ = java.util.Collections.unmodifiableList(significance_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.significance_ = significance_;
        } else {
          result.significance_ = significanceBuilder_.build();
        }
        if (scopeCase_ == 10) {
          if (aspectBuilder_ == null) {
            result.scope_ = scope_;
          } else {
            result.scope_ = aspectBuilder_.build();
          }
        }
        if (scopeCase_ == 11) {
          if (groupBuilder_ == null) {
            result.scope_ = scope_;
          } else {
            result.scope_ = groupBuilder_.build();
          }
        }
        result.bitField0_ = to_bitField0_;
        result.scopeCase_ = scopeCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.bloombox.schema.identity.bioprint.Affinities.Affinity) {
          return mergeFrom((io.bloombox.schema.identity.bioprint.Affinities.Affinity)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.bloombox.schema.identity.bioprint.Affinities.Affinity other) {
        if (other == io.bloombox.schema.identity.bioprint.Affinities.Affinity.getDefaultInstance()) return this;
        if (affinityBuilder_ == null) {
          if (!other.affinity_.isEmpty()) {
            if (affinity_.isEmpty()) {
              affinity_ = other.affinity_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureAffinityIsMutable();
              affinity_.addAll(other.affinity_);
            }
            onChanged();
          }
        } else {
          if (!other.affinity_.isEmpty()) {
            if (affinityBuilder_.isEmpty()) {
              affinityBuilder_.dispose();
              affinityBuilder_ = null;
              affinity_ = other.affinity_;
              bitField0_ = (bitField0_ & ~0x00000001);
              affinityBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getAffinityFieldBuilder() : null;
            } else {
              affinityBuilder_.addAllMessages(other.affinity_);
            }
          }
        }
        if (significanceBuilder_ == null) {
          if (!other.significance_.isEmpty()) {
            if (significance_.isEmpty()) {
              significance_ = other.significance_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureSignificanceIsMutable();
              significance_.addAll(other.significance_);
            }
            onChanged();
          }
        } else {
          if (!other.significance_.isEmpty()) {
            if (significanceBuilder_.isEmpty()) {
              significanceBuilder_.dispose();
              significanceBuilder_ = null;
              significance_ = other.significance_;
              bitField0_ = (bitField0_ & ~0x00000002);
              significanceBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getSignificanceFieldBuilder() : null;
            } else {
              significanceBuilder_.addAllMessages(other.significance_);
            }
          }
        }
        switch (other.getScopeCase()) {
          case ASPECT: {
            mergeAspect(other.getAspect());
            break;
          }
          case GROUP: {
            mergeGroup(other.getGroup());
            break;
          }
          case SCOPE_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.bloombox.schema.identity.bioprint.Affinities.Affinity parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.bloombox.schema.identity.bioprint.Affinities.Affinity) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int scopeCase_ = 0;
      private java.lang.Object scope_;
      public ScopeCase
          getScopeCase() {
        return ScopeCase.forNumber(
            scopeCase_);
      }

      public Builder clearScope() {
        scopeCase_ = 0;
        scope_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private java.util.List<io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse> affinity_ =
        java.util.Collections.emptyList();
      private void ensureAffinityIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          affinity_ = new java.util.ArrayList<io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse>(affinity_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse, io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse.Builder, io.bloombox.schema.identity.bioprint.Affinities.SentimentResponseOrBuilder> affinityBuilder_;

      /**
       * <pre>
       * Specifies the affinity content attached to this aspect/affinity scope mapping. The stanza includes metrics for
       * promotion or rejection of products based on composition.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.SentimentResponse affinity = 1;</code>
       */
      public java.util.List<io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse> getAffinityList() {
        if (affinityBuilder_ == null) {
          return java.util.Collections.unmodifiableList(affinity_);
        } else {
          return affinityBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Specifies the affinity content attached to this aspect/affinity scope mapping. The stanza includes metrics for
       * promotion or rejection of products based on composition.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.SentimentResponse affinity = 1;</code>
       */
      public int getAffinityCount() {
        if (affinityBuilder_ == null) {
          return affinity_.size();
        } else {
          return affinityBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Specifies the affinity content attached to this aspect/affinity scope mapping. The stanza includes metrics for
       * promotion or rejection of products based on composition.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.SentimentResponse affinity = 1;</code>
       */
      public io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse getAffinity(int index) {
        if (affinityBuilder_ == null) {
          return affinity_.get(index);
        } else {
          return affinityBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Specifies the affinity content attached to this aspect/affinity scope mapping. The stanza includes metrics for
       * promotion or rejection of products based on composition.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.SentimentResponse affinity = 1;</code>
       */
      public Builder setAffinity(
          int index, io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse value) {
        if (affinityBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAffinityIsMutable();
          affinity_.set(index, value);
          onChanged();
        } else {
          affinityBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies the affinity content attached to this aspect/affinity scope mapping. The stanza includes metrics for
       * promotion or rejection of products based on composition.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.SentimentResponse affinity = 1;</code>
       */
      public Builder setAffinity(
          int index, io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse.Builder builderForValue) {
        if (affinityBuilder_ == null) {
          ensureAffinityIsMutable();
          affinity_.set(index, builderForValue.build());
          onChanged();
        } else {
          affinityBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies the affinity content attached to this aspect/affinity scope mapping. The stanza includes metrics for
       * promotion or rejection of products based on composition.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.SentimentResponse affinity = 1;</code>
       */
      public Builder addAffinity(io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse value) {
        if (affinityBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAffinityIsMutable();
          affinity_.add(value);
          onChanged();
        } else {
          affinityBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies the affinity content attached to this aspect/affinity scope mapping. The stanza includes metrics for
       * promotion or rejection of products based on composition.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.SentimentResponse affinity = 1;</code>
       */
      public Builder addAffinity(
          int index, io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse value) {
        if (affinityBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAffinityIsMutable();
          affinity_.add(index, value);
          onChanged();
        } else {
          affinityBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies the affinity content attached to this aspect/affinity scope mapping. The stanza includes metrics for
       * promotion or rejection of products based on composition.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.SentimentResponse affinity = 1;</code>
       */
      public Builder addAffinity(
          io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse.Builder builderForValue) {
        if (affinityBuilder_ == null) {
          ensureAffinityIsMutable();
          affinity_.add(builderForValue.build());
          onChanged();
        } else {
          affinityBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies the affinity content attached to this aspect/affinity scope mapping. The stanza includes metrics for
       * promotion or rejection of products based on composition.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.SentimentResponse affinity = 1;</code>
       */
      public Builder addAffinity(
          int index, io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse.Builder builderForValue) {
        if (affinityBuilder_ == null) {
          ensureAffinityIsMutable();
          affinity_.add(index, builderForValue.build());
          onChanged();
        } else {
          affinityBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies the affinity content attached to this aspect/affinity scope mapping. The stanza includes metrics for
       * promotion or rejection of products based on composition.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.SentimentResponse affinity = 1;</code>
       */
      public Builder addAllAffinity(
          java.lang.Iterable<? extends io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse> values) {
        if (affinityBuilder_ == null) {
          ensureAffinityIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, affinity_);
          onChanged();
        } else {
          affinityBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies the affinity content attached to this aspect/affinity scope mapping. The stanza includes metrics for
       * promotion or rejection of products based on composition.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.SentimentResponse affinity = 1;</code>
       */
      public Builder clearAffinity() {
        if (affinityBuilder_ == null) {
          affinity_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          affinityBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Specifies the affinity content attached to this aspect/affinity scope mapping. The stanza includes metrics for
       * promotion or rejection of products based on composition.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.SentimentResponse affinity = 1;</code>
       */
      public Builder removeAffinity(int index) {
        if (affinityBuilder_ == null) {
          ensureAffinityIsMutable();
          affinity_.remove(index);
          onChanged();
        } else {
          affinityBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies the affinity content attached to this aspect/affinity scope mapping. The stanza includes metrics for
       * promotion or rejection of products based on composition.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.SentimentResponse affinity = 1;</code>
       */
      public io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse.Builder getAffinityBuilder(
          int index) {
        return getAffinityFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Specifies the affinity content attached to this aspect/affinity scope mapping. The stanza includes metrics for
       * promotion or rejection of products based on composition.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.SentimentResponse affinity = 1;</code>
       */
      public io.bloombox.schema.identity.bioprint.Affinities.SentimentResponseOrBuilder getAffinityOrBuilder(
          int index) {
        if (affinityBuilder_ == null) {
          return affinity_.get(index);  } else {
          return affinityBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Specifies the affinity content attached to this aspect/affinity scope mapping. The stanza includes metrics for
       * promotion or rejection of products based on composition.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.SentimentResponse affinity = 1;</code>
       */
      public java.util.List<? extends io.bloombox.schema.identity.bioprint.Affinities.SentimentResponseOrBuilder> 
           getAffinityOrBuilderList() {
        if (affinityBuilder_ != null) {
          return affinityBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(affinity_);
        }
      }
      /**
       * <pre>
       * Specifies the affinity content attached to this aspect/affinity scope mapping. The stanza includes metrics for
       * promotion or rejection of products based on composition.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.SentimentResponse affinity = 1;</code>
       */
      public io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse.Builder addAffinityBuilder() {
        return getAffinityFieldBuilder().addBuilder(
            io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse.getDefaultInstance());
      }
      /**
       * <pre>
       * Specifies the affinity content attached to this aspect/affinity scope mapping. The stanza includes metrics for
       * promotion or rejection of products based on composition.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.SentimentResponse affinity = 1;</code>
       */
      public io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse.Builder addAffinityBuilder(
          int index) {
        return getAffinityFieldBuilder().addBuilder(
            index, io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse.getDefaultInstance());
      }
      /**
       * <pre>
       * Specifies the affinity content attached to this aspect/affinity scope mapping. The stanza includes metrics for
       * promotion or rejection of products based on composition.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.SentimentResponse affinity = 1;</code>
       */
      public java.util.List<io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse.Builder> 
           getAffinityBuilderList() {
        return getAffinityFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse, io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse.Builder, io.bloombox.schema.identity.bioprint.Affinities.SentimentResponseOrBuilder> 
          getAffinityFieldBuilder() {
        if (affinityBuilder_ == null) {
          affinityBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse, io.bloombox.schema.identity.bioprint.Affinities.SentimentResponse.Builder, io.bloombox.schema.identity.bioprint.Affinities.SentimentResponseOrBuilder>(
                  affinity_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          affinity_ = null;
        }
        return affinityBuilder_;
      }

      private java.util.List<io.bloombox.schema.identity.bioprint.Weights.MetricSignificance> significance_ =
        java.util.Collections.emptyList();
      private void ensureSignificanceIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          significance_ = new java.util.ArrayList<io.bloombox.schema.identity.bioprint.Weights.MetricSignificance>(significance_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.bloombox.schema.identity.bioprint.Weights.MetricSignificance, io.bloombox.schema.identity.bioprint.Weights.MetricSignificance.Builder, io.bloombox.schema.identity.bioprint.Weights.MetricSignificanceOrBuilder> significanceBuilder_;

      /**
       * <pre>
       * Indicates the relative significance of this affinity value, when weighing it against other metrics. Significance
       * can be gathered from different signals, and so, each is summed here by signal type when calculating the weight
       * value to apply during Bioprint interrogation at the point-of-purchase.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.MetricSignificance significance = 2;</code>
       */
      public java.util.List<io.bloombox.schema.identity.bioprint.Weights.MetricSignificance> getSignificanceList() {
        if (significanceBuilder_ == null) {
          return java.util.Collections.unmodifiableList(significance_);
        } else {
          return significanceBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Indicates the relative significance of this affinity value, when weighing it against other metrics. Significance
       * can be gathered from different signals, and so, each is summed here by signal type when calculating the weight
       * value to apply during Bioprint interrogation at the point-of-purchase.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.MetricSignificance significance = 2;</code>
       */
      public int getSignificanceCount() {
        if (significanceBuilder_ == null) {
          return significance_.size();
        } else {
          return significanceBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Indicates the relative significance of this affinity value, when weighing it against other metrics. Significance
       * can be gathered from different signals, and so, each is summed here by signal type when calculating the weight
       * value to apply during Bioprint interrogation at the point-of-purchase.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.MetricSignificance significance = 2;</code>
       */
      public io.bloombox.schema.identity.bioprint.Weights.MetricSignificance getSignificance(int index) {
        if (significanceBuilder_ == null) {
          return significance_.get(index);
        } else {
          return significanceBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Indicates the relative significance of this affinity value, when weighing it against other metrics. Significance
       * can be gathered from different signals, and so, each is summed here by signal type when calculating the weight
       * value to apply during Bioprint interrogation at the point-of-purchase.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.MetricSignificance significance = 2;</code>
       */
      public Builder setSignificance(
          int index, io.bloombox.schema.identity.bioprint.Weights.MetricSignificance value) {
        if (significanceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSignificanceIsMutable();
          significance_.set(index, value);
          onChanged();
        } else {
          significanceBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Indicates the relative significance of this affinity value, when weighing it against other metrics. Significance
       * can be gathered from different signals, and so, each is summed here by signal type when calculating the weight
       * value to apply during Bioprint interrogation at the point-of-purchase.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.MetricSignificance significance = 2;</code>
       */
      public Builder setSignificance(
          int index, io.bloombox.schema.identity.bioprint.Weights.MetricSignificance.Builder builderForValue) {
        if (significanceBuilder_ == null) {
          ensureSignificanceIsMutable();
          significance_.set(index, builderForValue.build());
          onChanged();
        } else {
          significanceBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Indicates the relative significance of this affinity value, when weighing it against other metrics. Significance
       * can be gathered from different signals, and so, each is summed here by signal type when calculating the weight
       * value to apply during Bioprint interrogation at the point-of-purchase.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.MetricSignificance significance = 2;</code>
       */
      public Builder addSignificance(io.bloombox.schema.identity.bioprint.Weights.MetricSignificance value) {
        if (significanceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSignificanceIsMutable();
          significance_.add(value);
          onChanged();
        } else {
          significanceBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Indicates the relative significance of this affinity value, when weighing it against other metrics. Significance
       * can be gathered from different signals, and so, each is summed here by signal type when calculating the weight
       * value to apply during Bioprint interrogation at the point-of-purchase.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.MetricSignificance significance = 2;</code>
       */
      public Builder addSignificance(
          int index, io.bloombox.schema.identity.bioprint.Weights.MetricSignificance value) {
        if (significanceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureSignificanceIsMutable();
          significance_.add(index, value);
          onChanged();
        } else {
          significanceBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Indicates the relative significance of this affinity value, when weighing it against other metrics. Significance
       * can be gathered from different signals, and so, each is summed here by signal type when calculating the weight
       * value to apply during Bioprint interrogation at the point-of-purchase.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.MetricSignificance significance = 2;</code>
       */
      public Builder addSignificance(
          io.bloombox.schema.identity.bioprint.Weights.MetricSignificance.Builder builderForValue) {
        if (significanceBuilder_ == null) {
          ensureSignificanceIsMutable();
          significance_.add(builderForValue.build());
          onChanged();
        } else {
          significanceBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Indicates the relative significance of this affinity value, when weighing it against other metrics. Significance
       * can be gathered from different signals, and so, each is summed here by signal type when calculating the weight
       * value to apply during Bioprint interrogation at the point-of-purchase.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.MetricSignificance significance = 2;</code>
       */
      public Builder addSignificance(
          int index, io.bloombox.schema.identity.bioprint.Weights.MetricSignificance.Builder builderForValue) {
        if (significanceBuilder_ == null) {
          ensureSignificanceIsMutable();
          significance_.add(index, builderForValue.build());
          onChanged();
        } else {
          significanceBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Indicates the relative significance of this affinity value, when weighing it against other metrics. Significance
       * can be gathered from different signals, and so, each is summed here by signal type when calculating the weight
       * value to apply during Bioprint interrogation at the point-of-purchase.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.MetricSignificance significance = 2;</code>
       */
      public Builder addAllSignificance(
          java.lang.Iterable<? extends io.bloombox.schema.identity.bioprint.Weights.MetricSignificance> values) {
        if (significanceBuilder_ == null) {
          ensureSignificanceIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, significance_);
          onChanged();
        } else {
          significanceBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Indicates the relative significance of this affinity value, when weighing it against other metrics. Significance
       * can be gathered from different signals, and so, each is summed here by signal type when calculating the weight
       * value to apply during Bioprint interrogation at the point-of-purchase.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.MetricSignificance significance = 2;</code>
       */
      public Builder clearSignificance() {
        if (significanceBuilder_ == null) {
          significance_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          significanceBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Indicates the relative significance of this affinity value, when weighing it against other metrics. Significance
       * can be gathered from different signals, and so, each is summed here by signal type when calculating the weight
       * value to apply during Bioprint interrogation at the point-of-purchase.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.MetricSignificance significance = 2;</code>
       */
      public Builder removeSignificance(int index) {
        if (significanceBuilder_ == null) {
          ensureSignificanceIsMutable();
          significance_.remove(index);
          onChanged();
        } else {
          significanceBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Indicates the relative significance of this affinity value, when weighing it against other metrics. Significance
       * can be gathered from different signals, and so, each is summed here by signal type when calculating the weight
       * value to apply during Bioprint interrogation at the point-of-purchase.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.MetricSignificance significance = 2;</code>
       */
      public io.bloombox.schema.identity.bioprint.Weights.MetricSignificance.Builder getSignificanceBuilder(
          int index) {
        return getSignificanceFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Indicates the relative significance of this affinity value, when weighing it against other metrics. Significance
       * can be gathered from different signals, and so, each is summed here by signal type when calculating the weight
       * value to apply during Bioprint interrogation at the point-of-purchase.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.MetricSignificance significance = 2;</code>
       */
      public io.bloombox.schema.identity.bioprint.Weights.MetricSignificanceOrBuilder getSignificanceOrBuilder(
          int index) {
        if (significanceBuilder_ == null) {
          return significance_.get(index);  } else {
          return significanceBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Indicates the relative significance of this affinity value, when weighing it against other metrics. Significance
       * can be gathered from different signals, and so, each is summed here by signal type when calculating the weight
       * value to apply during Bioprint interrogation at the point-of-purchase.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.MetricSignificance significance = 2;</code>
       */
      public java.util.List<? extends io.bloombox.schema.identity.bioprint.Weights.MetricSignificanceOrBuilder> 
           getSignificanceOrBuilderList() {
        if (significanceBuilder_ != null) {
          return significanceBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(significance_);
        }
      }
      /**
       * <pre>
       * Indicates the relative significance of this affinity value, when weighing it against other metrics. Significance
       * can be gathered from different signals, and so, each is summed here by signal type when calculating the weight
       * value to apply during Bioprint interrogation at the point-of-purchase.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.MetricSignificance significance = 2;</code>
       */
      public io.bloombox.schema.identity.bioprint.Weights.MetricSignificance.Builder addSignificanceBuilder() {
        return getSignificanceFieldBuilder().addBuilder(
            io.bloombox.schema.identity.bioprint.Weights.MetricSignificance.getDefaultInstance());
      }
      /**
       * <pre>
       * Indicates the relative significance of this affinity value, when weighing it against other metrics. Significance
       * can be gathered from different signals, and so, each is summed here by signal type when calculating the weight
       * value to apply during Bioprint interrogation at the point-of-purchase.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.MetricSignificance significance = 2;</code>
       */
      public io.bloombox.schema.identity.bioprint.Weights.MetricSignificance.Builder addSignificanceBuilder(
          int index) {
        return getSignificanceFieldBuilder().addBuilder(
            index, io.bloombox.schema.identity.bioprint.Weights.MetricSignificance.getDefaultInstance());
      }
      /**
       * <pre>
       * Indicates the relative significance of this affinity value, when weighing it against other metrics. Significance
       * can be gathered from different signals, and so, each is summed here by signal type when calculating the weight
       * value to apply during Bioprint interrogation at the point-of-purchase.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.MetricSignificance significance = 2;</code>
       */
      public java.util.List<io.bloombox.schema.identity.bioprint.Weights.MetricSignificance.Builder> 
           getSignificanceBuilderList() {
        return getSignificanceFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.bloombox.schema.identity.bioprint.Weights.MetricSignificance, io.bloombox.schema.identity.bioprint.Weights.MetricSignificance.Builder, io.bloombox.schema.identity.bioprint.Weights.MetricSignificanceOrBuilder> 
          getSignificanceFieldBuilder() {
        if (significanceBuilder_ == null) {
          significanceBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.bloombox.schema.identity.bioprint.Weights.MetricSignificance, io.bloombox.schema.identity.bioprint.Weights.MetricSignificance.Builder, io.bloombox.schema.identity.bioprint.Weights.MetricSignificanceOrBuilder>(
                  significance_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          significance_ = null;
        }
        return significanceBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.identity.bioprint.Aspects.Aspect, io.bloombox.schema.identity.bioprint.Aspects.Aspect.Builder, io.bloombox.schema.identity.bioprint.Aspects.AspectOrBuilder> aspectBuilder_;
      /**
       * <pre>
       * Specifies an individual aspect-of-use, for which this affinity mapping applies.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.Aspect aspect = 10;</code>
       */
      public boolean hasAspect() {
        return scopeCase_ == 10;
      }
      /**
       * <pre>
       * Specifies an individual aspect-of-use, for which this affinity mapping applies.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.Aspect aspect = 10;</code>
       */
      public io.bloombox.schema.identity.bioprint.Aspects.Aspect getAspect() {
        if (aspectBuilder_ == null) {
          if (scopeCase_ == 10) {
            return (io.bloombox.schema.identity.bioprint.Aspects.Aspect) scope_;
          }
          return io.bloombox.schema.identity.bioprint.Aspects.Aspect.getDefaultInstance();
        } else {
          if (scopeCase_ == 10) {
            return aspectBuilder_.getMessage();
          }
          return io.bloombox.schema.identity.bioprint.Aspects.Aspect.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Specifies an individual aspect-of-use, for which this affinity mapping applies.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.Aspect aspect = 10;</code>
       */
      public Builder setAspect(io.bloombox.schema.identity.bioprint.Aspects.Aspect value) {
        if (aspectBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          scope_ = value;
          onChanged();
        } else {
          aspectBuilder_.setMessage(value);
        }
        scopeCase_ = 10;
        return this;
      }
      /**
       * <pre>
       * Specifies an individual aspect-of-use, for which this affinity mapping applies.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.Aspect aspect = 10;</code>
       */
      public Builder setAspect(
          io.bloombox.schema.identity.bioprint.Aspects.Aspect.Builder builderForValue) {
        if (aspectBuilder_ == null) {
          scope_ = builderForValue.build();
          onChanged();
        } else {
          aspectBuilder_.setMessage(builderForValue.build());
        }
        scopeCase_ = 10;
        return this;
      }
      /**
       * <pre>
       * Specifies an individual aspect-of-use, for which this affinity mapping applies.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.Aspect aspect = 10;</code>
       */
      public Builder mergeAspect(io.bloombox.schema.identity.bioprint.Aspects.Aspect value) {
        if (aspectBuilder_ == null) {
          if (scopeCase_ == 10 &&
              scope_ != io.bloombox.schema.identity.bioprint.Aspects.Aspect.getDefaultInstance()) {
            scope_ = io.bloombox.schema.identity.bioprint.Aspects.Aspect.newBuilder((io.bloombox.schema.identity.bioprint.Aspects.Aspect) scope_)
                .mergeFrom(value).buildPartial();
          } else {
            scope_ = value;
          }
          onChanged();
        } else {
          if (scopeCase_ == 10) {
            aspectBuilder_.mergeFrom(value);
          }
          aspectBuilder_.setMessage(value);
        }
        scopeCase_ = 10;
        return this;
      }
      /**
       * <pre>
       * Specifies an individual aspect-of-use, for which this affinity mapping applies.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.Aspect aspect = 10;</code>
       */
      public Builder clearAspect() {
        if (aspectBuilder_ == null) {
          if (scopeCase_ == 10) {
            scopeCase_ = 0;
            scope_ = null;
            onChanged();
          }
        } else {
          if (scopeCase_ == 10) {
            scopeCase_ = 0;
            scope_ = null;
          }
          aspectBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Specifies an individual aspect-of-use, for which this affinity mapping applies.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.Aspect aspect = 10;</code>
       */
      public io.bloombox.schema.identity.bioprint.Aspects.Aspect.Builder getAspectBuilder() {
        return getAspectFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Specifies an individual aspect-of-use, for which this affinity mapping applies.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.Aspect aspect = 10;</code>
       */
      public io.bloombox.schema.identity.bioprint.Aspects.AspectOrBuilder getAspectOrBuilder() {
        if ((scopeCase_ == 10) && (aspectBuilder_ != null)) {
          return aspectBuilder_.getMessageOrBuilder();
        } else {
          if (scopeCase_ == 10) {
            return (io.bloombox.schema.identity.bioprint.Aspects.Aspect) scope_;
          }
          return io.bloombox.schema.identity.bioprint.Aspects.Aspect.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Specifies an individual aspect-of-use, for which this affinity mapping applies.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.Aspect aspect = 10;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.identity.bioprint.Aspects.Aspect, io.bloombox.schema.identity.bioprint.Aspects.Aspect.Builder, io.bloombox.schema.identity.bioprint.Aspects.AspectOrBuilder> 
          getAspectFieldBuilder() {
        if (aspectBuilder_ == null) {
          if (!(scopeCase_ == 10)) {
            scope_ = io.bloombox.schema.identity.bioprint.Aspects.Aspect.getDefaultInstance();
          }
          aspectBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.bloombox.schema.identity.bioprint.Aspects.Aspect, io.bloombox.schema.identity.bioprint.Aspects.Aspect.Builder, io.bloombox.schema.identity.bioprint.Aspects.AspectOrBuilder>(
                  (io.bloombox.schema.identity.bioprint.Aspects.Aspect) scope_,
                  getParentForChildren(),
                  isClean());
          scope_ = null;
        }
        scopeCase_ = 10;
        onChanged();;
        return aspectBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.identity.bioprint.Aspects.AspectGroup, io.bloombox.schema.identity.bioprint.Aspects.AspectGroup.Builder, io.bloombox.schema.identity.bioprint.Aspects.AspectGroupOrBuilder> groupBuilder_;
      /**
       * <pre>
       * Specifies an aspect-of-use aggregate group, for which this affinity mapping applies.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.AspectGroup group = 11;</code>
       */
      public boolean hasGroup() {
        return scopeCase_ == 11;
      }
      /**
       * <pre>
       * Specifies an aspect-of-use aggregate group, for which this affinity mapping applies.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.AspectGroup group = 11;</code>
       */
      public io.bloombox.schema.identity.bioprint.Aspects.AspectGroup getGroup() {
        if (groupBuilder_ == null) {
          if (scopeCase_ == 11) {
            return (io.bloombox.schema.identity.bioprint.Aspects.AspectGroup) scope_;
          }
          return io.bloombox.schema.identity.bioprint.Aspects.AspectGroup.getDefaultInstance();
        } else {
          if (scopeCase_ == 11) {
            return groupBuilder_.getMessage();
          }
          return io.bloombox.schema.identity.bioprint.Aspects.AspectGroup.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Specifies an aspect-of-use aggregate group, for which this affinity mapping applies.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.AspectGroup group = 11;</code>
       */
      public Builder setGroup(io.bloombox.schema.identity.bioprint.Aspects.AspectGroup value) {
        if (groupBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          scope_ = value;
          onChanged();
        } else {
          groupBuilder_.setMessage(value);
        }
        scopeCase_ = 11;
        return this;
      }
      /**
       * <pre>
       * Specifies an aspect-of-use aggregate group, for which this affinity mapping applies.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.AspectGroup group = 11;</code>
       */
      public Builder setGroup(
          io.bloombox.schema.identity.bioprint.Aspects.AspectGroup.Builder builderForValue) {
        if (groupBuilder_ == null) {
          scope_ = builderForValue.build();
          onChanged();
        } else {
          groupBuilder_.setMessage(builderForValue.build());
        }
        scopeCase_ = 11;
        return this;
      }
      /**
       * <pre>
       * Specifies an aspect-of-use aggregate group, for which this affinity mapping applies.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.AspectGroup group = 11;</code>
       */
      public Builder mergeGroup(io.bloombox.schema.identity.bioprint.Aspects.AspectGroup value) {
        if (groupBuilder_ == null) {
          if (scopeCase_ == 11 &&
              scope_ != io.bloombox.schema.identity.bioprint.Aspects.AspectGroup.getDefaultInstance()) {
            scope_ = io.bloombox.schema.identity.bioprint.Aspects.AspectGroup.newBuilder((io.bloombox.schema.identity.bioprint.Aspects.AspectGroup) scope_)
                .mergeFrom(value).buildPartial();
          } else {
            scope_ = value;
          }
          onChanged();
        } else {
          if (scopeCase_ == 11) {
            groupBuilder_.mergeFrom(value);
          }
          groupBuilder_.setMessage(value);
        }
        scopeCase_ = 11;
        return this;
      }
      /**
       * <pre>
       * Specifies an aspect-of-use aggregate group, for which this affinity mapping applies.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.AspectGroup group = 11;</code>
       */
      public Builder clearGroup() {
        if (groupBuilder_ == null) {
          if (scopeCase_ == 11) {
            scopeCase_ = 0;
            scope_ = null;
            onChanged();
          }
        } else {
          if (scopeCase_ == 11) {
            scopeCase_ = 0;
            scope_ = null;
          }
          groupBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Specifies an aspect-of-use aggregate group, for which this affinity mapping applies.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.AspectGroup group = 11;</code>
       */
      public io.bloombox.schema.identity.bioprint.Aspects.AspectGroup.Builder getGroupBuilder() {
        return getGroupFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Specifies an aspect-of-use aggregate group, for which this affinity mapping applies.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.AspectGroup group = 11;</code>
       */
      public io.bloombox.schema.identity.bioprint.Aspects.AspectGroupOrBuilder getGroupOrBuilder() {
        if ((scopeCase_ == 11) && (groupBuilder_ != null)) {
          return groupBuilder_.getMessageOrBuilder();
        } else {
          if (scopeCase_ == 11) {
            return (io.bloombox.schema.identity.bioprint.Aspects.AspectGroup) scope_;
          }
          return io.bloombox.schema.identity.bioprint.Aspects.AspectGroup.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Specifies an aspect-of-use aggregate group, for which this affinity mapping applies.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.AspectGroup group = 11;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.identity.bioprint.Aspects.AspectGroup, io.bloombox.schema.identity.bioprint.Aspects.AspectGroup.Builder, io.bloombox.schema.identity.bioprint.Aspects.AspectGroupOrBuilder> 
          getGroupFieldBuilder() {
        if (groupBuilder_ == null) {
          if (!(scopeCase_ == 11)) {
            scope_ = io.bloombox.schema.identity.bioprint.Aspects.AspectGroup.getDefaultInstance();
          }
          groupBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.bloombox.schema.identity.bioprint.Aspects.AspectGroup, io.bloombox.schema.identity.bioprint.Aspects.AspectGroup.Builder, io.bloombox.schema.identity.bioprint.Aspects.AspectGroupOrBuilder>(
                  (io.bloombox.schema.identity.bioprint.Aspects.AspectGroup) scope_,
                  getParentForChildren(),
                  isClean());
          scope_ = null;
        }
        scopeCase_ = 11;
        onChanged();;
        return groupBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:bloombox.identity.bioprint.Affinity)
    }

    // @@protoc_insertion_point(class_scope:bloombox.identity.bioprint.Affinity)
    private static final io.bloombox.schema.identity.bioprint.Affinities.Affinity DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.bloombox.schema.identity.bioprint.Affinities.Affinity();
    }

    public static io.bloombox.schema.identity.bioprint.Affinities.Affinity getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Affinity>
        PARSER = new com.google.protobuf.AbstractParser<Affinity>() {
      @java.lang.Override
      public Affinity parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Affinity(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Affinity> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Affinity> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.bloombox.schema.identity.bioprint.Affinities.Affinity getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_bloombox_identity_bioprint_SentimentResponse_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_bloombox_identity_bioprint_SentimentResponse_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_bloombox_identity_bioprint_Affinity_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_bloombox_identity_bioprint_Affinity_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\"identity/bioprint/Affinities.proto\022\032bl" +
      "oombox.identity.bioprint\032\035analytics/stre" +
      "am/Filter.proto\032\037identity/bioprint/Aspec" +
      "ts.proto\032\037identity/bioprint/Weights.prot" +
      "o\"x\n\021SentimentResponse\0221\n\007promote\030\001 \001(\0132" +
      " .bloombox.stream.OITDBloomFilter\0220\n\006rej" +
      "ect\030\002 \001(\0132 .bloombox.stream.OITDBloomFil" +
      "ter\"\212\002\n\010Affinity\022?\n\010affinity\030\001 \003(\0132-.blo" +
      "ombox.identity.bioprint.SentimentRespons" +
      "e\022D\n\014significance\030\002 \003(\0132..bloombox.ident" +
      "ity.bioprint.MetricSignificance\0224\n\006aspec" +
      "t\030\n \001(\0132\".bloombox.identity.bioprint.Asp" +
      "ectH\000\0228\n\005group\030\013 \001(\0132\'.bloombox.identity" +
      ".bioprint.AspectGroupH\000B\007\n\005scopeB<\n$io.b" +
      "loombox.schema.identity.bioprintB\nAffini" +
      "tiesH\001P\000\242\002\003BBSb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          io.bloombox.schema.analytics.stream.Filter.getDescriptor(),
          io.bloombox.schema.identity.bioprint.Aspects.getDescriptor(),
          io.bloombox.schema.identity.bioprint.Weights.getDescriptor(),
        }, assigner);
    internal_static_bloombox_identity_bioprint_SentimentResponse_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_bloombox_identity_bioprint_SentimentResponse_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_bloombox_identity_bioprint_SentimentResponse_descriptor,
        new java.lang.String[] { "Promote", "Reject", });
    internal_static_bloombox_identity_bioprint_Affinity_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_bloombox_identity_bioprint_Affinity_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_bloombox_identity_bioprint_Affinity_descriptor,
        new java.lang.String[] { "Affinity", "Significance", "Aspect", "Group", "Scope", });
    io.bloombox.schema.analytics.stream.Filter.getDescriptor();
    io.bloombox.schema.identity.bioprint.Aspects.getDescriptor();
    io.bloombox.schema.identity.bioprint.Weights.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
