/*
 * Copyright 2019, Momentum Ideas, Co. All rights reserved.
 *
 * Source and object computer code contained herein is the private intellectual
 * property of Momentum Ideas Co., a Delaware Corporation. Use of this
 * code in source form requires permission in writing before use or the
 * assembly, distribution, or publishing of derivative works, for commercial
 * purposes or any other purpose, from a duly authorized officer of Momentum
 * Ideas Co.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: identity/bioprint/Bioprint.proto

package io.bloombox.schema.identity.bioprint;

public final class BioprintOuterClass {
  private BioprintOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface MasterKeyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:bloombox.identity.bioprint.MasterKey)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Name for the key, which is generally set from the device name that owns the key.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <pre>
     * Name for the key, which is generally set from the device name that owns the key.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * The key sequence number, which refers to the generation for this key (considering key rotation).
     * </pre>
     *
     * <code>uint32 sequence = 2;</code>
     */
    int getSequence();

    /**
     * <pre>
     * Whether this key is considered active or revoked. If not present or false, the key is considered active (assuming
     * it has not been superseded).
     * </pre>
     *
     * <code>bool disabled = 3;</code>
     */
    boolean getDisabled();

    /**
     * <pre>
     * Whether this key is considered primary or superseded. Superseded keys have been rotated for other keys, and can be
     * safely deleted from the subject profile.
     * </pre>
     *
     * <code>bool superseded = 4;</code>
     */
    boolean getSuperseded();

    /**
     * <pre>
     * Symmetric key material, including the raw bytes of the underlying secret key.
     * </pre>
     *
     * <code>.opencannabis.crypto.SymmetricKey key = 5;</code>
     */
    boolean hasKey();
    /**
     * <pre>
     * Symmetric key material, including the raw bytes of the underlying secret key.
     * </pre>
     *
     * <code>.opencannabis.crypto.SymmetricKey key = 5;</code>
     */
    io.opencannabis.schema.crypto.primitives.SymmetricKey getKey();
    /**
     * <pre>
     * Symmetric key material, including the raw bytes of the underlying secret key.
     * </pre>
     *
     * <code>.opencannabis.crypto.SymmetricKey key = 5;</code>
     */
    io.opencannabis.schema.crypto.primitives.SymmetricKeyOrBuilder getKeyOrBuilder();

    /**
     * <pre>
     * Timestamp specifying the time this key was last-used.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant used = 6;</code>
     */
    boolean hasUsed();
    /**
     * <pre>
     * Timestamp specifying the time this key was last-used.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant used = 6;</code>
     */
    io.opencannabis.schema.temporal.TemporalInstant.Instant getUsed();
    /**
     * <pre>
     * Timestamp specifying the time this key was last-used.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant used = 6;</code>
     */
    io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getUsedOrBuilder();

    /**
     * <pre>
     * Timestamp specifying the time this key was first generated.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant generated = 7;</code>
     */
    boolean hasGenerated();
    /**
     * <pre>
     * Timestamp specifying the time this key was first generated.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant generated = 7;</code>
     */
    io.opencannabis.schema.temporal.TemporalInstant.Instant getGenerated();
    /**
     * <pre>
     * Timestamp specifying the time this key was first generated.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant generated = 7;</code>
     */
    io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getGeneratedOrBuilder();

    /**
     * <pre>
     * Timestamp specifying the time this key was revoked.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant revoked = 8;</code>
     */
    boolean hasRevoked();
    /**
     * <pre>
     * Timestamp specifying the time this key was revoked.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant revoked = 8;</code>
     */
    io.opencannabis.schema.temporal.TemporalInstant.Instant getRevoked();
    /**
     * <pre>
     * Timestamp specifying the time this key was revoked.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant revoked = 8;</code>
     */
    io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getRevokedOrBuilder();
  }
  /**
   * <pre>
   * Specifies a master symmetric key, referred to in the spec as the *Profile Access Key*. This key acts as the main
   * access method for the user's local device to load and read/mutate the underlying Bioprint data. It never leaves the
   * user's device.
   * </pre>
   *
   * Protobuf type {@code bloombox.identity.bioprint.MasterKey}
   */
  public  static final class MasterKey extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:bloombox.identity.bioprint.MasterKey)
      MasterKeyOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use MasterKey.newBuilder() to construct.
    private MasterKey(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private MasterKey() {
      name_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private MasterKey(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 16: {

              sequence_ = input.readUInt32();
              break;
            }
            case 24: {

              disabled_ = input.readBool();
              break;
            }
            case 32: {

              superseded_ = input.readBool();
              break;
            }
            case 42: {
              io.opencannabis.schema.crypto.primitives.SymmetricKey.Builder subBuilder = null;
              if (key_ != null) {
                subBuilder = key_.toBuilder();
              }
              key_ = input.readMessage(io.opencannabis.schema.crypto.primitives.SymmetricKey.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(key_);
                key_ = subBuilder.buildPartial();
              }

              break;
            }
            case 50: {
              io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder subBuilder = null;
              if (used_ != null) {
                subBuilder = used_.toBuilder();
              }
              used_ = input.readMessage(io.opencannabis.schema.temporal.TemporalInstant.Instant.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(used_);
                used_ = subBuilder.buildPartial();
              }

              break;
            }
            case 58: {
              io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder subBuilder = null;
              if (generated_ != null) {
                subBuilder = generated_.toBuilder();
              }
              generated_ = input.readMessage(io.opencannabis.schema.temporal.TemporalInstant.Instant.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(generated_);
                generated_ = subBuilder.buildPartial();
              }

              break;
            }
            case 66: {
              io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder subBuilder = null;
              if (revoked_ != null) {
                subBuilder = revoked_.toBuilder();
              }
              revoked_ = input.readMessage(io.opencannabis.schema.temporal.TemporalInstant.Instant.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(revoked_);
                revoked_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_MasterKey_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_MasterKey_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey.class, io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey.Builder.class);
    }

    public static final int NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * Name for the key, which is generally set from the device name that owns the key.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Name for the key, which is generally set from the device name that owns the key.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SEQUENCE_FIELD_NUMBER = 2;
    private int sequence_;
    /**
     * <pre>
     * The key sequence number, which refers to the generation for this key (considering key rotation).
     * </pre>
     *
     * <code>uint32 sequence = 2;</code>
     */
    public int getSequence() {
      return sequence_;
    }

    public static final int DISABLED_FIELD_NUMBER = 3;
    private boolean disabled_;
    /**
     * <pre>
     * Whether this key is considered active or revoked. If not present or false, the key is considered active (assuming
     * it has not been superseded).
     * </pre>
     *
     * <code>bool disabled = 3;</code>
     */
    public boolean getDisabled() {
      return disabled_;
    }

    public static final int SUPERSEDED_FIELD_NUMBER = 4;
    private boolean superseded_;
    /**
     * <pre>
     * Whether this key is considered primary or superseded. Superseded keys have been rotated for other keys, and can be
     * safely deleted from the subject profile.
     * </pre>
     *
     * <code>bool superseded = 4;</code>
     */
    public boolean getSuperseded() {
      return superseded_;
    }

    public static final int KEY_FIELD_NUMBER = 5;
    private io.opencannabis.schema.crypto.primitives.SymmetricKey key_;
    /**
     * <pre>
     * Symmetric key material, including the raw bytes of the underlying secret key.
     * </pre>
     *
     * <code>.opencannabis.crypto.SymmetricKey key = 5;</code>
     */
    public boolean hasKey() {
      return key_ != null;
    }
    /**
     * <pre>
     * Symmetric key material, including the raw bytes of the underlying secret key.
     * </pre>
     *
     * <code>.opencannabis.crypto.SymmetricKey key = 5;</code>
     */
    public io.opencannabis.schema.crypto.primitives.SymmetricKey getKey() {
      return key_ == null ? io.opencannabis.schema.crypto.primitives.SymmetricKey.getDefaultInstance() : key_;
    }
    /**
     * <pre>
     * Symmetric key material, including the raw bytes of the underlying secret key.
     * </pre>
     *
     * <code>.opencannabis.crypto.SymmetricKey key = 5;</code>
     */
    public io.opencannabis.schema.crypto.primitives.SymmetricKeyOrBuilder getKeyOrBuilder() {
      return getKey();
    }

    public static final int USED_FIELD_NUMBER = 6;
    private io.opencannabis.schema.temporal.TemporalInstant.Instant used_;
    /**
     * <pre>
     * Timestamp specifying the time this key was last-used.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant used = 6;</code>
     */
    public boolean hasUsed() {
      return used_ != null;
    }
    /**
     * <pre>
     * Timestamp specifying the time this key was last-used.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant used = 6;</code>
     */
    public io.opencannabis.schema.temporal.TemporalInstant.Instant getUsed() {
      return used_ == null ? io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : used_;
    }
    /**
     * <pre>
     * Timestamp specifying the time this key was last-used.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant used = 6;</code>
     */
    public io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getUsedOrBuilder() {
      return getUsed();
    }

    public static final int GENERATED_FIELD_NUMBER = 7;
    private io.opencannabis.schema.temporal.TemporalInstant.Instant generated_;
    /**
     * <pre>
     * Timestamp specifying the time this key was first generated.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant generated = 7;</code>
     */
    public boolean hasGenerated() {
      return generated_ != null;
    }
    /**
     * <pre>
     * Timestamp specifying the time this key was first generated.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant generated = 7;</code>
     */
    public io.opencannabis.schema.temporal.TemporalInstant.Instant getGenerated() {
      return generated_ == null ? io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : generated_;
    }
    /**
     * <pre>
     * Timestamp specifying the time this key was first generated.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant generated = 7;</code>
     */
    public io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getGeneratedOrBuilder() {
      return getGenerated();
    }

    public static final int REVOKED_FIELD_NUMBER = 8;
    private io.opencannabis.schema.temporal.TemporalInstant.Instant revoked_;
    /**
     * <pre>
     * Timestamp specifying the time this key was revoked.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant revoked = 8;</code>
     */
    public boolean hasRevoked() {
      return revoked_ != null;
    }
    /**
     * <pre>
     * Timestamp specifying the time this key was revoked.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant revoked = 8;</code>
     */
    public io.opencannabis.schema.temporal.TemporalInstant.Instant getRevoked() {
      return revoked_ == null ? io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : revoked_;
    }
    /**
     * <pre>
     * Timestamp specifying the time this key was revoked.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant revoked = 8;</code>
     */
    public io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getRevokedOrBuilder() {
      return getRevoked();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      if (sequence_ != 0) {
        output.writeUInt32(2, sequence_);
      }
      if (disabled_ != false) {
        output.writeBool(3, disabled_);
      }
      if (superseded_ != false) {
        output.writeBool(4, superseded_);
      }
      if (key_ != null) {
        output.writeMessage(5, getKey());
      }
      if (used_ != null) {
        output.writeMessage(6, getUsed());
      }
      if (generated_ != null) {
        output.writeMessage(7, getGenerated());
      }
      if (revoked_ != null) {
        output.writeMessage(8, getRevoked());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      if (sequence_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, sequence_);
      }
      if (disabled_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, disabled_);
      }
      if (superseded_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, superseded_);
      }
      if (key_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getKey());
      }
      if (used_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getUsed());
      }
      if (generated_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getGenerated());
      }
      if (revoked_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getRevoked());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey)) {
        return super.equals(obj);
      }
      io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey other = (io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey) obj;

      if (!getName()
          .equals(other.getName())) return false;
      if (getSequence()
          != other.getSequence()) return false;
      if (getDisabled()
          != other.getDisabled()) return false;
      if (getSuperseded()
          != other.getSuperseded()) return false;
      if (hasKey() != other.hasKey()) return false;
      if (hasKey()) {
        if (!getKey()
            .equals(other.getKey())) return false;
      }
      if (hasUsed() != other.hasUsed()) return false;
      if (hasUsed()) {
        if (!getUsed()
            .equals(other.getUsed())) return false;
      }
      if (hasGenerated() != other.hasGenerated()) return false;
      if (hasGenerated()) {
        if (!getGenerated()
            .equals(other.getGenerated())) return false;
      }
      if (hasRevoked() != other.hasRevoked()) return false;
      if (hasRevoked()) {
        if (!getRevoked()
            .equals(other.getRevoked())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (37 * hash) + SEQUENCE_FIELD_NUMBER;
      hash = (53 * hash) + getSequence();
      hash = (37 * hash) + DISABLED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getDisabled());
      hash = (37 * hash) + SUPERSEDED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getSuperseded());
      if (hasKey()) {
        hash = (37 * hash) + KEY_FIELD_NUMBER;
        hash = (53 * hash) + getKey().hashCode();
      }
      if (hasUsed()) {
        hash = (37 * hash) + USED_FIELD_NUMBER;
        hash = (53 * hash) + getUsed().hashCode();
      }
      if (hasGenerated()) {
        hash = (37 * hash) + GENERATED_FIELD_NUMBER;
        hash = (53 * hash) + getGenerated().hashCode();
      }
      if (hasRevoked()) {
        hash = (37 * hash) + REVOKED_FIELD_NUMBER;
        hash = (53 * hash) + getRevoked().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Specifies a master symmetric key, referred to in the spec as the *Profile Access Key*. This key acts as the main
     * access method for the user's local device to load and read/mutate the underlying Bioprint data. It never leaves the
     * user's device.
     * </pre>
     *
     * Protobuf type {@code bloombox.identity.bioprint.MasterKey}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:bloombox.identity.bioprint.MasterKey)
        io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKeyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_MasterKey_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_MasterKey_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey.class, io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey.Builder.class);
      }

      // Construct using io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        name_ = "";

        sequence_ = 0;

        disabled_ = false;

        superseded_ = false;

        if (keyBuilder_ == null) {
          key_ = null;
        } else {
          key_ = null;
          keyBuilder_ = null;
        }
        if (usedBuilder_ == null) {
          used_ = null;
        } else {
          used_ = null;
          usedBuilder_ = null;
        }
        if (generatedBuilder_ == null) {
          generated_ = null;
        } else {
          generated_ = null;
          generatedBuilder_ = null;
        }
        if (revokedBuilder_ == null) {
          revoked_ = null;
        } else {
          revoked_ = null;
          revokedBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_MasterKey_descriptor;
      }

      @java.lang.Override
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey getDefaultInstanceForType() {
        return io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey.getDefaultInstance();
      }

      @java.lang.Override
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey build() {
        io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey buildPartial() {
        io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey result = new io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey(this);
        result.name_ = name_;
        result.sequence_ = sequence_;
        result.disabled_ = disabled_;
        result.superseded_ = superseded_;
        if (keyBuilder_ == null) {
          result.key_ = key_;
        } else {
          result.key_ = keyBuilder_.build();
        }
        if (usedBuilder_ == null) {
          result.used_ = used_;
        } else {
          result.used_ = usedBuilder_.build();
        }
        if (generatedBuilder_ == null) {
          result.generated_ = generated_;
        } else {
          result.generated_ = generatedBuilder_.build();
        }
        if (revokedBuilder_ == null) {
          result.revoked_ = revoked_;
        } else {
          result.revoked_ = revokedBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey) {
          return mergeFrom((io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey other) {
        if (other == io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey.getDefaultInstance()) return this;
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (other.getSequence() != 0) {
          setSequence(other.getSequence());
        }
        if (other.getDisabled() != false) {
          setDisabled(other.getDisabled());
        }
        if (other.getSuperseded() != false) {
          setSuperseded(other.getSuperseded());
        }
        if (other.hasKey()) {
          mergeKey(other.getKey());
        }
        if (other.hasUsed()) {
          mergeUsed(other.getUsed());
        }
        if (other.hasGenerated()) {
          mergeGenerated(other.getGenerated());
        }
        if (other.hasRevoked()) {
          mergeRevoked(other.getRevoked());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * Name for the key, which is generally set from the device name that owns the key.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Name for the key, which is generally set from the device name that owns the key.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Name for the key, which is generally set from the device name that owns the key.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name for the key, which is generally set from the device name that owns the key.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name for the key, which is generally set from the device name that owns the key.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private int sequence_ ;
      /**
       * <pre>
       * The key sequence number, which refers to the generation for this key (considering key rotation).
       * </pre>
       *
       * <code>uint32 sequence = 2;</code>
       */
      public int getSequence() {
        return sequence_;
      }
      /**
       * <pre>
       * The key sequence number, which refers to the generation for this key (considering key rotation).
       * </pre>
       *
       * <code>uint32 sequence = 2;</code>
       */
      public Builder setSequence(int value) {
        
        sequence_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The key sequence number, which refers to the generation for this key (considering key rotation).
       * </pre>
       *
       * <code>uint32 sequence = 2;</code>
       */
      public Builder clearSequence() {
        
        sequence_ = 0;
        onChanged();
        return this;
      }

      private boolean disabled_ ;
      /**
       * <pre>
       * Whether this key is considered active or revoked. If not present or false, the key is considered active (assuming
       * it has not been superseded).
       * </pre>
       *
       * <code>bool disabled = 3;</code>
       */
      public boolean getDisabled() {
        return disabled_;
      }
      /**
       * <pre>
       * Whether this key is considered active or revoked. If not present or false, the key is considered active (assuming
       * it has not been superseded).
       * </pre>
       *
       * <code>bool disabled = 3;</code>
       */
      public Builder setDisabled(boolean value) {
        
        disabled_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Whether this key is considered active or revoked. If not present or false, the key is considered active (assuming
       * it has not been superseded).
       * </pre>
       *
       * <code>bool disabled = 3;</code>
       */
      public Builder clearDisabled() {
        
        disabled_ = false;
        onChanged();
        return this;
      }

      private boolean superseded_ ;
      /**
       * <pre>
       * Whether this key is considered primary or superseded. Superseded keys have been rotated for other keys, and can be
       * safely deleted from the subject profile.
       * </pre>
       *
       * <code>bool superseded = 4;</code>
       */
      public boolean getSuperseded() {
        return superseded_;
      }
      /**
       * <pre>
       * Whether this key is considered primary or superseded. Superseded keys have been rotated for other keys, and can be
       * safely deleted from the subject profile.
       * </pre>
       *
       * <code>bool superseded = 4;</code>
       */
      public Builder setSuperseded(boolean value) {
        
        superseded_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Whether this key is considered primary or superseded. Superseded keys have been rotated for other keys, and can be
       * safely deleted from the subject profile.
       * </pre>
       *
       * <code>bool superseded = 4;</code>
       */
      public Builder clearSuperseded() {
        
        superseded_ = false;
        onChanged();
        return this;
      }

      private io.opencannabis.schema.crypto.primitives.SymmetricKey key_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.crypto.primitives.SymmetricKey, io.opencannabis.schema.crypto.primitives.SymmetricKey.Builder, io.opencannabis.schema.crypto.primitives.SymmetricKeyOrBuilder> keyBuilder_;
      /**
       * <pre>
       * Symmetric key material, including the raw bytes of the underlying secret key.
       * </pre>
       *
       * <code>.opencannabis.crypto.SymmetricKey key = 5;</code>
       */
      public boolean hasKey() {
        return keyBuilder_ != null || key_ != null;
      }
      /**
       * <pre>
       * Symmetric key material, including the raw bytes of the underlying secret key.
       * </pre>
       *
       * <code>.opencannabis.crypto.SymmetricKey key = 5;</code>
       */
      public io.opencannabis.schema.crypto.primitives.SymmetricKey getKey() {
        if (keyBuilder_ == null) {
          return key_ == null ? io.opencannabis.schema.crypto.primitives.SymmetricKey.getDefaultInstance() : key_;
        } else {
          return keyBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Symmetric key material, including the raw bytes of the underlying secret key.
       * </pre>
       *
       * <code>.opencannabis.crypto.SymmetricKey key = 5;</code>
       */
      public Builder setKey(io.opencannabis.schema.crypto.primitives.SymmetricKey value) {
        if (keyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          key_ = value;
          onChanged();
        } else {
          keyBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Symmetric key material, including the raw bytes of the underlying secret key.
       * </pre>
       *
       * <code>.opencannabis.crypto.SymmetricKey key = 5;</code>
       */
      public Builder setKey(
          io.opencannabis.schema.crypto.primitives.SymmetricKey.Builder builderForValue) {
        if (keyBuilder_ == null) {
          key_ = builderForValue.build();
          onChanged();
        } else {
          keyBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Symmetric key material, including the raw bytes of the underlying secret key.
       * </pre>
       *
       * <code>.opencannabis.crypto.SymmetricKey key = 5;</code>
       */
      public Builder mergeKey(io.opencannabis.schema.crypto.primitives.SymmetricKey value) {
        if (keyBuilder_ == null) {
          if (key_ != null) {
            key_ =
              io.opencannabis.schema.crypto.primitives.SymmetricKey.newBuilder(key_).mergeFrom(value).buildPartial();
          } else {
            key_ = value;
          }
          onChanged();
        } else {
          keyBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Symmetric key material, including the raw bytes of the underlying secret key.
       * </pre>
       *
       * <code>.opencannabis.crypto.SymmetricKey key = 5;</code>
       */
      public Builder clearKey() {
        if (keyBuilder_ == null) {
          key_ = null;
          onChanged();
        } else {
          key_ = null;
          keyBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Symmetric key material, including the raw bytes of the underlying secret key.
       * </pre>
       *
       * <code>.opencannabis.crypto.SymmetricKey key = 5;</code>
       */
      public io.opencannabis.schema.crypto.primitives.SymmetricKey.Builder getKeyBuilder() {
        
        onChanged();
        return getKeyFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Symmetric key material, including the raw bytes of the underlying secret key.
       * </pre>
       *
       * <code>.opencannabis.crypto.SymmetricKey key = 5;</code>
       */
      public io.opencannabis.schema.crypto.primitives.SymmetricKeyOrBuilder getKeyOrBuilder() {
        if (keyBuilder_ != null) {
          return keyBuilder_.getMessageOrBuilder();
        } else {
          return key_ == null ?
              io.opencannabis.schema.crypto.primitives.SymmetricKey.getDefaultInstance() : key_;
        }
      }
      /**
       * <pre>
       * Symmetric key material, including the raw bytes of the underlying secret key.
       * </pre>
       *
       * <code>.opencannabis.crypto.SymmetricKey key = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.crypto.primitives.SymmetricKey, io.opencannabis.schema.crypto.primitives.SymmetricKey.Builder, io.opencannabis.schema.crypto.primitives.SymmetricKeyOrBuilder> 
          getKeyFieldBuilder() {
        if (keyBuilder_ == null) {
          keyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.opencannabis.schema.crypto.primitives.SymmetricKey, io.opencannabis.schema.crypto.primitives.SymmetricKey.Builder, io.opencannabis.schema.crypto.primitives.SymmetricKeyOrBuilder>(
                  getKey(),
                  getParentForChildren(),
                  isClean());
          key_ = null;
        }
        return keyBuilder_;
      }

      private io.opencannabis.schema.temporal.TemporalInstant.Instant used_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder> usedBuilder_;
      /**
       * <pre>
       * Timestamp specifying the time this key was last-used.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant used = 6;</code>
       */
      public boolean hasUsed() {
        return usedBuilder_ != null || used_ != null;
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was last-used.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant used = 6;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.Instant getUsed() {
        if (usedBuilder_ == null) {
          return used_ == null ? io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : used_;
        } else {
          return usedBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was last-used.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant used = 6;</code>
       */
      public Builder setUsed(io.opencannabis.schema.temporal.TemporalInstant.Instant value) {
        if (usedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          used_ = value;
          onChanged();
        } else {
          usedBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was last-used.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant used = 6;</code>
       */
      public Builder setUsed(
          io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder builderForValue) {
        if (usedBuilder_ == null) {
          used_ = builderForValue.build();
          onChanged();
        } else {
          usedBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was last-used.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant used = 6;</code>
       */
      public Builder mergeUsed(io.opencannabis.schema.temporal.TemporalInstant.Instant value) {
        if (usedBuilder_ == null) {
          if (used_ != null) {
            used_ =
              io.opencannabis.schema.temporal.TemporalInstant.Instant.newBuilder(used_).mergeFrom(value).buildPartial();
          } else {
            used_ = value;
          }
          onChanged();
        } else {
          usedBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was last-used.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant used = 6;</code>
       */
      public Builder clearUsed() {
        if (usedBuilder_ == null) {
          used_ = null;
          onChanged();
        } else {
          used_ = null;
          usedBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was last-used.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant used = 6;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder getUsedBuilder() {
        
        onChanged();
        return getUsedFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was last-used.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant used = 6;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getUsedOrBuilder() {
        if (usedBuilder_ != null) {
          return usedBuilder_.getMessageOrBuilder();
        } else {
          return used_ == null ?
              io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : used_;
        }
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was last-used.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant used = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder> 
          getUsedFieldBuilder() {
        if (usedBuilder_ == null) {
          usedBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder>(
                  getUsed(),
                  getParentForChildren(),
                  isClean());
          used_ = null;
        }
        return usedBuilder_;
      }

      private io.opencannabis.schema.temporal.TemporalInstant.Instant generated_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder> generatedBuilder_;
      /**
       * <pre>
       * Timestamp specifying the time this key was first generated.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant generated = 7;</code>
       */
      public boolean hasGenerated() {
        return generatedBuilder_ != null || generated_ != null;
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was first generated.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant generated = 7;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.Instant getGenerated() {
        if (generatedBuilder_ == null) {
          return generated_ == null ? io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : generated_;
        } else {
          return generatedBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was first generated.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant generated = 7;</code>
       */
      public Builder setGenerated(io.opencannabis.schema.temporal.TemporalInstant.Instant value) {
        if (generatedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          generated_ = value;
          onChanged();
        } else {
          generatedBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was first generated.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant generated = 7;</code>
       */
      public Builder setGenerated(
          io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder builderForValue) {
        if (generatedBuilder_ == null) {
          generated_ = builderForValue.build();
          onChanged();
        } else {
          generatedBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was first generated.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant generated = 7;</code>
       */
      public Builder mergeGenerated(io.opencannabis.schema.temporal.TemporalInstant.Instant value) {
        if (generatedBuilder_ == null) {
          if (generated_ != null) {
            generated_ =
              io.opencannabis.schema.temporal.TemporalInstant.Instant.newBuilder(generated_).mergeFrom(value).buildPartial();
          } else {
            generated_ = value;
          }
          onChanged();
        } else {
          generatedBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was first generated.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant generated = 7;</code>
       */
      public Builder clearGenerated() {
        if (generatedBuilder_ == null) {
          generated_ = null;
          onChanged();
        } else {
          generated_ = null;
          generatedBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was first generated.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant generated = 7;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder getGeneratedBuilder() {
        
        onChanged();
        return getGeneratedFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was first generated.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant generated = 7;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getGeneratedOrBuilder() {
        if (generatedBuilder_ != null) {
          return generatedBuilder_.getMessageOrBuilder();
        } else {
          return generated_ == null ?
              io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : generated_;
        }
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was first generated.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant generated = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder> 
          getGeneratedFieldBuilder() {
        if (generatedBuilder_ == null) {
          generatedBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder>(
                  getGenerated(),
                  getParentForChildren(),
                  isClean());
          generated_ = null;
        }
        return generatedBuilder_;
      }

      private io.opencannabis.schema.temporal.TemporalInstant.Instant revoked_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder> revokedBuilder_;
      /**
       * <pre>
       * Timestamp specifying the time this key was revoked.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant revoked = 8;</code>
       */
      public boolean hasRevoked() {
        return revokedBuilder_ != null || revoked_ != null;
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was revoked.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant revoked = 8;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.Instant getRevoked() {
        if (revokedBuilder_ == null) {
          return revoked_ == null ? io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : revoked_;
        } else {
          return revokedBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was revoked.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant revoked = 8;</code>
       */
      public Builder setRevoked(io.opencannabis.schema.temporal.TemporalInstant.Instant value) {
        if (revokedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          revoked_ = value;
          onChanged();
        } else {
          revokedBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was revoked.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant revoked = 8;</code>
       */
      public Builder setRevoked(
          io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder builderForValue) {
        if (revokedBuilder_ == null) {
          revoked_ = builderForValue.build();
          onChanged();
        } else {
          revokedBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was revoked.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant revoked = 8;</code>
       */
      public Builder mergeRevoked(io.opencannabis.schema.temporal.TemporalInstant.Instant value) {
        if (revokedBuilder_ == null) {
          if (revoked_ != null) {
            revoked_ =
              io.opencannabis.schema.temporal.TemporalInstant.Instant.newBuilder(revoked_).mergeFrom(value).buildPartial();
          } else {
            revoked_ = value;
          }
          onChanged();
        } else {
          revokedBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was revoked.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant revoked = 8;</code>
       */
      public Builder clearRevoked() {
        if (revokedBuilder_ == null) {
          revoked_ = null;
          onChanged();
        } else {
          revoked_ = null;
          revokedBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was revoked.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant revoked = 8;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder getRevokedBuilder() {
        
        onChanged();
        return getRevokedFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was revoked.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant revoked = 8;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getRevokedOrBuilder() {
        if (revokedBuilder_ != null) {
          return revokedBuilder_.getMessageOrBuilder();
        } else {
          return revoked_ == null ?
              io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : revoked_;
        }
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was revoked.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant revoked = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder> 
          getRevokedFieldBuilder() {
        if (revokedBuilder_ == null) {
          revokedBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder>(
                  getRevoked(),
                  getParentForChildren(),
                  isClean());
          revoked_ = null;
        }
        return revokedBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:bloombox.identity.bioprint.MasterKey)
    }

    // @@protoc_insertion_point(class_scope:bloombox.identity.bioprint.MasterKey)
    private static final io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey();
    }

    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MasterKey>
        PARSER = new com.google.protobuf.AbstractParser<MasterKey>() {
      @java.lang.Override
      public MasterKey parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MasterKey(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MasterKey> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MasterKey> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface RestorationKeyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:bloombox.identity.bioprint.RestorationKey)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Name for the key, which is generally set from the export name or service.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    java.lang.String getName();
    /**
     * <pre>
     * Name for the key, which is generally set from the export name or service.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * Whether this key should be considered revoked or not. If not present or false, the key is considered active.
     * </pre>
     *
     * <code>bool disabled = 2;</code>
     */
    boolean getDisabled();

    /**
     * <pre>
     * Symmetric key material, including the raw bytes of the underlying secret key.
     * </pre>
     *
     * <code>.opencannabis.crypto.SymmetricKey key = 3;</code>
     */
    boolean hasKey();
    /**
     * <pre>
     * Symmetric key material, including the raw bytes of the underlying secret key.
     * </pre>
     *
     * <code>.opencannabis.crypto.SymmetricKey key = 3;</code>
     */
    io.opencannabis.schema.crypto.primitives.SymmetricKey getKey();
    /**
     * <pre>
     * Symmetric key material, including the raw bytes of the underlying secret key.
     * </pre>
     *
     * <code>.opencannabis.crypto.SymmetricKey key = 3;</code>
     */
    io.opencannabis.schema.crypto.primitives.SymmetricKeyOrBuilder getKeyOrBuilder();

    /**
     * <pre>
     * Timestamp specifying the time this key was last-used.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant generated = 4;</code>
     */
    boolean hasGenerated();
    /**
     * <pre>
     * Timestamp specifying the time this key was last-used.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant generated = 4;</code>
     */
    io.opencannabis.schema.temporal.TemporalInstant.Instant getGenerated();
    /**
     * <pre>
     * Timestamp specifying the time this key was last-used.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant generated = 4;</code>
     */
    io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getGeneratedOrBuilder();

    /**
     * <pre>
     * Timestamp specifying the time this key was revoked.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant revoked = 5;</code>
     */
    boolean hasRevoked();
    /**
     * <pre>
     * Timestamp specifying the time this key was revoked.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant revoked = 5;</code>
     */
    io.opencannabis.schema.temporal.TemporalInstant.Instant getRevoked();
    /**
     * <pre>
     * Timestamp specifying the time this key was revoked.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant revoked = 5;</code>
     */
    io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getRevokedOrBuilder();
  }
  /**
   * <pre>
   * Specifies a restoration symmetric key, referred to in the spec as the *Backup Access Key*. This key acts as a one-off
   * safeguard to restore a backup version of the user's *Bioprint*. It is generated on-demand for each export/backup of
   * that includes the private portion of the user's *Bioprint*. Because their use depends on an online service, they are
   * revocable by the user in cases of service or backup compromise.
   * </pre>
   *
   * Protobuf type {@code bloombox.identity.bioprint.RestorationKey}
   */
  public  static final class RestorationKey extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:bloombox.identity.bioprint.RestorationKey)
      RestorationKeyOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RestorationKey.newBuilder() to construct.
    private RestorationKey(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RestorationKey() {
      name_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private RestorationKey(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 16: {

              disabled_ = input.readBool();
              break;
            }
            case 26: {
              io.opencannabis.schema.crypto.primitives.SymmetricKey.Builder subBuilder = null;
              if (key_ != null) {
                subBuilder = key_.toBuilder();
              }
              key_ = input.readMessage(io.opencannabis.schema.crypto.primitives.SymmetricKey.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(key_);
                key_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder subBuilder = null;
              if (generated_ != null) {
                subBuilder = generated_.toBuilder();
              }
              generated_ = input.readMessage(io.opencannabis.schema.temporal.TemporalInstant.Instant.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(generated_);
                generated_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder subBuilder = null;
              if (revoked_ != null) {
                subBuilder = revoked_.toBuilder();
              }
              revoked_ = input.readMessage(io.opencannabis.schema.temporal.TemporalInstant.Instant.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(revoked_);
                revoked_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_RestorationKey_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_RestorationKey_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey.class, io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey.Builder.class);
    }

    public static final int NAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * Name for the key, which is generally set from the export name or service.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Name for the key, which is generally set from the export name or service.
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DISABLED_FIELD_NUMBER = 2;
    private boolean disabled_;
    /**
     * <pre>
     * Whether this key should be considered revoked or not. If not present or false, the key is considered active.
     * </pre>
     *
     * <code>bool disabled = 2;</code>
     */
    public boolean getDisabled() {
      return disabled_;
    }

    public static final int KEY_FIELD_NUMBER = 3;
    private io.opencannabis.schema.crypto.primitives.SymmetricKey key_;
    /**
     * <pre>
     * Symmetric key material, including the raw bytes of the underlying secret key.
     * </pre>
     *
     * <code>.opencannabis.crypto.SymmetricKey key = 3;</code>
     */
    public boolean hasKey() {
      return key_ != null;
    }
    /**
     * <pre>
     * Symmetric key material, including the raw bytes of the underlying secret key.
     * </pre>
     *
     * <code>.opencannabis.crypto.SymmetricKey key = 3;</code>
     */
    public io.opencannabis.schema.crypto.primitives.SymmetricKey getKey() {
      return key_ == null ? io.opencannabis.schema.crypto.primitives.SymmetricKey.getDefaultInstance() : key_;
    }
    /**
     * <pre>
     * Symmetric key material, including the raw bytes of the underlying secret key.
     * </pre>
     *
     * <code>.opencannabis.crypto.SymmetricKey key = 3;</code>
     */
    public io.opencannabis.schema.crypto.primitives.SymmetricKeyOrBuilder getKeyOrBuilder() {
      return getKey();
    }

    public static final int GENERATED_FIELD_NUMBER = 4;
    private io.opencannabis.schema.temporal.TemporalInstant.Instant generated_;
    /**
     * <pre>
     * Timestamp specifying the time this key was last-used.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant generated = 4;</code>
     */
    public boolean hasGenerated() {
      return generated_ != null;
    }
    /**
     * <pre>
     * Timestamp specifying the time this key was last-used.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant generated = 4;</code>
     */
    public io.opencannabis.schema.temporal.TemporalInstant.Instant getGenerated() {
      return generated_ == null ? io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : generated_;
    }
    /**
     * <pre>
     * Timestamp specifying the time this key was last-used.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant generated = 4;</code>
     */
    public io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getGeneratedOrBuilder() {
      return getGenerated();
    }

    public static final int REVOKED_FIELD_NUMBER = 5;
    private io.opencannabis.schema.temporal.TemporalInstant.Instant revoked_;
    /**
     * <pre>
     * Timestamp specifying the time this key was revoked.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant revoked = 5;</code>
     */
    public boolean hasRevoked() {
      return revoked_ != null;
    }
    /**
     * <pre>
     * Timestamp specifying the time this key was revoked.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant revoked = 5;</code>
     */
    public io.opencannabis.schema.temporal.TemporalInstant.Instant getRevoked() {
      return revoked_ == null ? io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : revoked_;
    }
    /**
     * <pre>
     * Timestamp specifying the time this key was revoked.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant revoked = 5;</code>
     */
    public io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getRevokedOrBuilder() {
      return getRevoked();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, name_);
      }
      if (disabled_ != false) {
        output.writeBool(2, disabled_);
      }
      if (key_ != null) {
        output.writeMessage(3, getKey());
      }
      if (generated_ != null) {
        output.writeMessage(4, getGenerated());
      }
      if (revoked_ != null) {
        output.writeMessage(5, getRevoked());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, name_);
      }
      if (disabled_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, disabled_);
      }
      if (key_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getKey());
      }
      if (generated_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getGenerated());
      }
      if (revoked_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getRevoked());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey)) {
        return super.equals(obj);
      }
      io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey other = (io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey) obj;

      if (!getName()
          .equals(other.getName())) return false;
      if (getDisabled()
          != other.getDisabled()) return false;
      if (hasKey() != other.hasKey()) return false;
      if (hasKey()) {
        if (!getKey()
            .equals(other.getKey())) return false;
      }
      if (hasGenerated() != other.hasGenerated()) return false;
      if (hasGenerated()) {
        if (!getGenerated()
            .equals(other.getGenerated())) return false;
      }
      if (hasRevoked() != other.hasRevoked()) return false;
      if (hasRevoked()) {
        if (!getRevoked()
            .equals(other.getRevoked())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (37 * hash) + DISABLED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getDisabled());
      if (hasKey()) {
        hash = (37 * hash) + KEY_FIELD_NUMBER;
        hash = (53 * hash) + getKey().hashCode();
      }
      if (hasGenerated()) {
        hash = (37 * hash) + GENERATED_FIELD_NUMBER;
        hash = (53 * hash) + getGenerated().hashCode();
      }
      if (hasRevoked()) {
        hash = (37 * hash) + REVOKED_FIELD_NUMBER;
        hash = (53 * hash) + getRevoked().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Specifies a restoration symmetric key, referred to in the spec as the *Backup Access Key*. This key acts as a one-off
     * safeguard to restore a backup version of the user's *Bioprint*. It is generated on-demand for each export/backup of
     * that includes the private portion of the user's *Bioprint*. Because their use depends on an online service, they are
     * revocable by the user in cases of service or backup compromise.
     * </pre>
     *
     * Protobuf type {@code bloombox.identity.bioprint.RestorationKey}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:bloombox.identity.bioprint.RestorationKey)
        io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKeyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_RestorationKey_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_RestorationKey_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey.class, io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey.Builder.class);
      }

      // Construct using io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        name_ = "";

        disabled_ = false;

        if (keyBuilder_ == null) {
          key_ = null;
        } else {
          key_ = null;
          keyBuilder_ = null;
        }
        if (generatedBuilder_ == null) {
          generated_ = null;
        } else {
          generated_ = null;
          generatedBuilder_ = null;
        }
        if (revokedBuilder_ == null) {
          revoked_ = null;
        } else {
          revoked_ = null;
          revokedBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_RestorationKey_descriptor;
      }

      @java.lang.Override
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey getDefaultInstanceForType() {
        return io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey.getDefaultInstance();
      }

      @java.lang.Override
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey build() {
        io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey buildPartial() {
        io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey result = new io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey(this);
        result.name_ = name_;
        result.disabled_ = disabled_;
        if (keyBuilder_ == null) {
          result.key_ = key_;
        } else {
          result.key_ = keyBuilder_.build();
        }
        if (generatedBuilder_ == null) {
          result.generated_ = generated_;
        } else {
          result.generated_ = generatedBuilder_.build();
        }
        if (revokedBuilder_ == null) {
          result.revoked_ = revoked_;
        } else {
          result.revoked_ = revokedBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey) {
          return mergeFrom((io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey other) {
        if (other == io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey.getDefaultInstance()) return this;
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (other.getDisabled() != false) {
          setDisabled(other.getDisabled());
        }
        if (other.hasKey()) {
          mergeKey(other.getKey());
        }
        if (other.hasGenerated()) {
          mergeGenerated(other.getGenerated());
        }
        if (other.hasRevoked()) {
          mergeRevoked(other.getRevoked());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * Name for the key, which is generally set from the export name or service.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Name for the key, which is generally set from the export name or service.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Name for the key, which is generally set from the export name or service.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name for the key, which is generally set from the export name or service.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name for the key, which is generally set from the export name or service.
       * </pre>
       *
       * <code>string name = 1;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private boolean disabled_ ;
      /**
       * <pre>
       * Whether this key should be considered revoked or not. If not present or false, the key is considered active.
       * </pre>
       *
       * <code>bool disabled = 2;</code>
       */
      public boolean getDisabled() {
        return disabled_;
      }
      /**
       * <pre>
       * Whether this key should be considered revoked or not. If not present or false, the key is considered active.
       * </pre>
       *
       * <code>bool disabled = 2;</code>
       */
      public Builder setDisabled(boolean value) {
        
        disabled_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Whether this key should be considered revoked or not. If not present or false, the key is considered active.
       * </pre>
       *
       * <code>bool disabled = 2;</code>
       */
      public Builder clearDisabled() {
        
        disabled_ = false;
        onChanged();
        return this;
      }

      private io.opencannabis.schema.crypto.primitives.SymmetricKey key_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.crypto.primitives.SymmetricKey, io.opencannabis.schema.crypto.primitives.SymmetricKey.Builder, io.opencannabis.schema.crypto.primitives.SymmetricKeyOrBuilder> keyBuilder_;
      /**
       * <pre>
       * Symmetric key material, including the raw bytes of the underlying secret key.
       * </pre>
       *
       * <code>.opencannabis.crypto.SymmetricKey key = 3;</code>
       */
      public boolean hasKey() {
        return keyBuilder_ != null || key_ != null;
      }
      /**
       * <pre>
       * Symmetric key material, including the raw bytes of the underlying secret key.
       * </pre>
       *
       * <code>.opencannabis.crypto.SymmetricKey key = 3;</code>
       */
      public io.opencannabis.schema.crypto.primitives.SymmetricKey getKey() {
        if (keyBuilder_ == null) {
          return key_ == null ? io.opencannabis.schema.crypto.primitives.SymmetricKey.getDefaultInstance() : key_;
        } else {
          return keyBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Symmetric key material, including the raw bytes of the underlying secret key.
       * </pre>
       *
       * <code>.opencannabis.crypto.SymmetricKey key = 3;</code>
       */
      public Builder setKey(io.opencannabis.schema.crypto.primitives.SymmetricKey value) {
        if (keyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          key_ = value;
          onChanged();
        } else {
          keyBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Symmetric key material, including the raw bytes of the underlying secret key.
       * </pre>
       *
       * <code>.opencannabis.crypto.SymmetricKey key = 3;</code>
       */
      public Builder setKey(
          io.opencannabis.schema.crypto.primitives.SymmetricKey.Builder builderForValue) {
        if (keyBuilder_ == null) {
          key_ = builderForValue.build();
          onChanged();
        } else {
          keyBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Symmetric key material, including the raw bytes of the underlying secret key.
       * </pre>
       *
       * <code>.opencannabis.crypto.SymmetricKey key = 3;</code>
       */
      public Builder mergeKey(io.opencannabis.schema.crypto.primitives.SymmetricKey value) {
        if (keyBuilder_ == null) {
          if (key_ != null) {
            key_ =
              io.opencannabis.schema.crypto.primitives.SymmetricKey.newBuilder(key_).mergeFrom(value).buildPartial();
          } else {
            key_ = value;
          }
          onChanged();
        } else {
          keyBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Symmetric key material, including the raw bytes of the underlying secret key.
       * </pre>
       *
       * <code>.opencannabis.crypto.SymmetricKey key = 3;</code>
       */
      public Builder clearKey() {
        if (keyBuilder_ == null) {
          key_ = null;
          onChanged();
        } else {
          key_ = null;
          keyBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Symmetric key material, including the raw bytes of the underlying secret key.
       * </pre>
       *
       * <code>.opencannabis.crypto.SymmetricKey key = 3;</code>
       */
      public io.opencannabis.schema.crypto.primitives.SymmetricKey.Builder getKeyBuilder() {
        
        onChanged();
        return getKeyFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Symmetric key material, including the raw bytes of the underlying secret key.
       * </pre>
       *
       * <code>.opencannabis.crypto.SymmetricKey key = 3;</code>
       */
      public io.opencannabis.schema.crypto.primitives.SymmetricKeyOrBuilder getKeyOrBuilder() {
        if (keyBuilder_ != null) {
          return keyBuilder_.getMessageOrBuilder();
        } else {
          return key_ == null ?
              io.opencannabis.schema.crypto.primitives.SymmetricKey.getDefaultInstance() : key_;
        }
      }
      /**
       * <pre>
       * Symmetric key material, including the raw bytes of the underlying secret key.
       * </pre>
       *
       * <code>.opencannabis.crypto.SymmetricKey key = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.crypto.primitives.SymmetricKey, io.opencannabis.schema.crypto.primitives.SymmetricKey.Builder, io.opencannabis.schema.crypto.primitives.SymmetricKeyOrBuilder> 
          getKeyFieldBuilder() {
        if (keyBuilder_ == null) {
          keyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.opencannabis.schema.crypto.primitives.SymmetricKey, io.opencannabis.schema.crypto.primitives.SymmetricKey.Builder, io.opencannabis.schema.crypto.primitives.SymmetricKeyOrBuilder>(
                  getKey(),
                  getParentForChildren(),
                  isClean());
          key_ = null;
        }
        return keyBuilder_;
      }

      private io.opencannabis.schema.temporal.TemporalInstant.Instant generated_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder> generatedBuilder_;
      /**
       * <pre>
       * Timestamp specifying the time this key was last-used.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant generated = 4;</code>
       */
      public boolean hasGenerated() {
        return generatedBuilder_ != null || generated_ != null;
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was last-used.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant generated = 4;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.Instant getGenerated() {
        if (generatedBuilder_ == null) {
          return generated_ == null ? io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : generated_;
        } else {
          return generatedBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was last-used.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant generated = 4;</code>
       */
      public Builder setGenerated(io.opencannabis.schema.temporal.TemporalInstant.Instant value) {
        if (generatedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          generated_ = value;
          onChanged();
        } else {
          generatedBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was last-used.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant generated = 4;</code>
       */
      public Builder setGenerated(
          io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder builderForValue) {
        if (generatedBuilder_ == null) {
          generated_ = builderForValue.build();
          onChanged();
        } else {
          generatedBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was last-used.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant generated = 4;</code>
       */
      public Builder mergeGenerated(io.opencannabis.schema.temporal.TemporalInstant.Instant value) {
        if (generatedBuilder_ == null) {
          if (generated_ != null) {
            generated_ =
              io.opencannabis.schema.temporal.TemporalInstant.Instant.newBuilder(generated_).mergeFrom(value).buildPartial();
          } else {
            generated_ = value;
          }
          onChanged();
        } else {
          generatedBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was last-used.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant generated = 4;</code>
       */
      public Builder clearGenerated() {
        if (generatedBuilder_ == null) {
          generated_ = null;
          onChanged();
        } else {
          generated_ = null;
          generatedBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was last-used.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant generated = 4;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder getGeneratedBuilder() {
        
        onChanged();
        return getGeneratedFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was last-used.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant generated = 4;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getGeneratedOrBuilder() {
        if (generatedBuilder_ != null) {
          return generatedBuilder_.getMessageOrBuilder();
        } else {
          return generated_ == null ?
              io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : generated_;
        }
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was last-used.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant generated = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder> 
          getGeneratedFieldBuilder() {
        if (generatedBuilder_ == null) {
          generatedBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder>(
                  getGenerated(),
                  getParentForChildren(),
                  isClean());
          generated_ = null;
        }
        return generatedBuilder_;
      }

      private io.opencannabis.schema.temporal.TemporalInstant.Instant revoked_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder> revokedBuilder_;
      /**
       * <pre>
       * Timestamp specifying the time this key was revoked.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant revoked = 5;</code>
       */
      public boolean hasRevoked() {
        return revokedBuilder_ != null || revoked_ != null;
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was revoked.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant revoked = 5;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.Instant getRevoked() {
        if (revokedBuilder_ == null) {
          return revoked_ == null ? io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : revoked_;
        } else {
          return revokedBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was revoked.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant revoked = 5;</code>
       */
      public Builder setRevoked(io.opencannabis.schema.temporal.TemporalInstant.Instant value) {
        if (revokedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          revoked_ = value;
          onChanged();
        } else {
          revokedBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was revoked.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant revoked = 5;</code>
       */
      public Builder setRevoked(
          io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder builderForValue) {
        if (revokedBuilder_ == null) {
          revoked_ = builderForValue.build();
          onChanged();
        } else {
          revokedBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was revoked.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant revoked = 5;</code>
       */
      public Builder mergeRevoked(io.opencannabis.schema.temporal.TemporalInstant.Instant value) {
        if (revokedBuilder_ == null) {
          if (revoked_ != null) {
            revoked_ =
              io.opencannabis.schema.temporal.TemporalInstant.Instant.newBuilder(revoked_).mergeFrom(value).buildPartial();
          } else {
            revoked_ = value;
          }
          onChanged();
        } else {
          revokedBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was revoked.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant revoked = 5;</code>
       */
      public Builder clearRevoked() {
        if (revokedBuilder_ == null) {
          revoked_ = null;
          onChanged();
        } else {
          revoked_ = null;
          revokedBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was revoked.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant revoked = 5;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder getRevokedBuilder() {
        
        onChanged();
        return getRevokedFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was revoked.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant revoked = 5;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getRevokedOrBuilder() {
        if (revokedBuilder_ != null) {
          return revokedBuilder_.getMessageOrBuilder();
        } else {
          return revoked_ == null ?
              io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : revoked_;
        }
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was revoked.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant revoked = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder> 
          getRevokedFieldBuilder() {
        if (revokedBuilder_ == null) {
          revokedBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder>(
                  getRevoked(),
                  getParentForChildren(),
                  isClean());
          revoked_ = null;
        }
        return revokedBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:bloombox.identity.bioprint.RestorationKey)
    }

    // @@protoc_insertion_point(class_scope:bloombox.identity.bioprint.RestorationKey)
    private static final io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey();
    }

    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<RestorationKey>
        PARSER = new com.google.protobuf.AbstractParser<RestorationKey>() {
      @java.lang.Override
      public RestorationKey parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RestorationKey(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<RestorationKey> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RestorationKey> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StubKeyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:bloombox.identity.bioprint.StubKey)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Ephemeral ID provisioned for this Bioprint payload.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
     */
    boolean hasId();
    /**
     * <pre>
     * Ephemeral ID provisioned for this Bioprint payload.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
     */
    io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID getId();
    /**
     * <pre>
     * Ephemeral ID provisioned for this Bioprint payload.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
     */
    io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintIDOrBuilder getIdOrBuilder();

    /**
     * <pre>
     * Name for the key, which is generally set from the provider name.
     * </pre>
     *
     * <code>string name = 2;</code>
     */
    java.lang.String getName();
    /**
     * <pre>
     * Name for the key, which is generally set from the provider name.
     * </pre>
     *
     * <code>string name = 2;</code>
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * Whether this key should be considered revoked or not. If not present or false, the key is considered active.
     * </pre>
     *
     * <code>bool disabled = 3;</code>
     */
    boolean getDisabled();

    /**
     * <pre>
     * Symmetric key material, including the raw bytes of the underlying secret key.
     * </pre>
     *
     * <code>.opencannabis.crypto.SymmetricKey key = 4;</code>
     */
    boolean hasKey();
    /**
     * <pre>
     * Symmetric key material, including the raw bytes of the underlying secret key.
     * </pre>
     *
     * <code>.opencannabis.crypto.SymmetricKey key = 4;</code>
     */
    io.opencannabis.schema.crypto.primitives.SymmetricKey getKey();
    /**
     * <pre>
     * Symmetric key material, including the raw bytes of the underlying secret key.
     * </pre>
     *
     * <code>.opencannabis.crypto.SymmetricKey key = 4;</code>
     */
    io.opencannabis.schema.crypto.primitives.SymmetricKeyOrBuilder getKeyOrBuilder();

    /**
     * <pre>
     * Timestamp specifying the time this key was last-used.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant generated = 5;</code>
     */
    boolean hasGenerated();
    /**
     * <pre>
     * Timestamp specifying the time this key was last-used.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant generated = 5;</code>
     */
    io.opencannabis.schema.temporal.TemporalInstant.Instant getGenerated();
    /**
     * <pre>
     * Timestamp specifying the time this key was last-used.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant generated = 5;</code>
     */
    io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getGeneratedOrBuilder();

    /**
     * <pre>
     * Timestamp specifying the time this key was revoked.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant revoked = 6;</code>
     */
    boolean hasRevoked();
    /**
     * <pre>
     * Timestamp specifying the time this key was revoked.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant revoked = 6;</code>
     */
    io.opencannabis.schema.temporal.TemporalInstant.Instant getRevoked();
    /**
     * <pre>
     * Timestamp specifying the time this key was revoked.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant revoked = 6;</code>
     */
    io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getRevokedOrBuilder();
  }
  /**
   * <pre>
   * Specifies an ephemeral symmetric key, generated for the purposes of sharing a *Bioprint* with a specific, authorized
   * partner organization. These keys are generated on-demand and on a per-partner basis. Because the use of stub keys
   * depends on a signed payload from an online service, they are revocable by the user. Only the public portion of the
   * *Bioprint* is shared, and can be decrypted, by a stub key.
   * </pre>
   *
   * Protobuf type {@code bloombox.identity.bioprint.StubKey}
   */
  public  static final class StubKey extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:bloombox.identity.bioprint.StubKey)
      StubKeyOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StubKey.newBuilder() to construct.
    private StubKey(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StubKey() {
      name_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private StubKey(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.Builder subBuilder = null;
              if (id_ != null) {
                subBuilder = id_.toBuilder();
              }
              id_ = input.readMessage(io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(id_);
                id_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 24: {

              disabled_ = input.readBool();
              break;
            }
            case 34: {
              io.opencannabis.schema.crypto.primitives.SymmetricKey.Builder subBuilder = null;
              if (key_ != null) {
                subBuilder = key_.toBuilder();
              }
              key_ = input.readMessage(io.opencannabis.schema.crypto.primitives.SymmetricKey.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(key_);
                key_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder subBuilder = null;
              if (generated_ != null) {
                subBuilder = generated_.toBuilder();
              }
              generated_ = input.readMessage(io.opencannabis.schema.temporal.TemporalInstant.Instant.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(generated_);
                generated_ = subBuilder.buildPartial();
              }

              break;
            }
            case 50: {
              io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder subBuilder = null;
              if (revoked_ != null) {
                subBuilder = revoked_.toBuilder();
              }
              revoked_ = input.readMessage(io.opencannabis.schema.temporal.TemporalInstant.Instant.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(revoked_);
                revoked_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_StubKey_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_StubKey_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.bloombox.schema.identity.bioprint.BioprintOuterClass.StubKey.class, io.bloombox.schema.identity.bioprint.BioprintOuterClass.StubKey.Builder.class);
    }

    public static final int ID_FIELD_NUMBER = 1;
    private io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID id_;
    /**
     * <pre>
     * Ephemeral ID provisioned for this Bioprint payload.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
     */
    public boolean hasId() {
      return id_ != null;
    }
    /**
     * <pre>
     * Ephemeral ID provisioned for this Bioprint payload.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
     */
    public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID getId() {
      return id_ == null ? io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.getDefaultInstance() : id_;
    }
    /**
     * <pre>
     * Ephemeral ID provisioned for this Bioprint payload.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
     */
    public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintIDOrBuilder getIdOrBuilder() {
      return getId();
    }

    public static final int NAME_FIELD_NUMBER = 2;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * Name for the key, which is generally set from the provider name.
     * </pre>
     *
     * <code>string name = 2;</code>
     */
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Name for the key, which is generally set from the provider name.
     * </pre>
     *
     * <code>string name = 2;</code>
     */
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DISABLED_FIELD_NUMBER = 3;
    private boolean disabled_;
    /**
     * <pre>
     * Whether this key should be considered revoked or not. If not present or false, the key is considered active.
     * </pre>
     *
     * <code>bool disabled = 3;</code>
     */
    public boolean getDisabled() {
      return disabled_;
    }

    public static final int KEY_FIELD_NUMBER = 4;
    private io.opencannabis.schema.crypto.primitives.SymmetricKey key_;
    /**
     * <pre>
     * Symmetric key material, including the raw bytes of the underlying secret key.
     * </pre>
     *
     * <code>.opencannabis.crypto.SymmetricKey key = 4;</code>
     */
    public boolean hasKey() {
      return key_ != null;
    }
    /**
     * <pre>
     * Symmetric key material, including the raw bytes of the underlying secret key.
     * </pre>
     *
     * <code>.opencannabis.crypto.SymmetricKey key = 4;</code>
     */
    public io.opencannabis.schema.crypto.primitives.SymmetricKey getKey() {
      return key_ == null ? io.opencannabis.schema.crypto.primitives.SymmetricKey.getDefaultInstance() : key_;
    }
    /**
     * <pre>
     * Symmetric key material, including the raw bytes of the underlying secret key.
     * </pre>
     *
     * <code>.opencannabis.crypto.SymmetricKey key = 4;</code>
     */
    public io.opencannabis.schema.crypto.primitives.SymmetricKeyOrBuilder getKeyOrBuilder() {
      return getKey();
    }

    public static final int GENERATED_FIELD_NUMBER = 5;
    private io.opencannabis.schema.temporal.TemporalInstant.Instant generated_;
    /**
     * <pre>
     * Timestamp specifying the time this key was last-used.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant generated = 5;</code>
     */
    public boolean hasGenerated() {
      return generated_ != null;
    }
    /**
     * <pre>
     * Timestamp specifying the time this key was last-used.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant generated = 5;</code>
     */
    public io.opencannabis.schema.temporal.TemporalInstant.Instant getGenerated() {
      return generated_ == null ? io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : generated_;
    }
    /**
     * <pre>
     * Timestamp specifying the time this key was last-used.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant generated = 5;</code>
     */
    public io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getGeneratedOrBuilder() {
      return getGenerated();
    }

    public static final int REVOKED_FIELD_NUMBER = 6;
    private io.opencannabis.schema.temporal.TemporalInstant.Instant revoked_;
    /**
     * <pre>
     * Timestamp specifying the time this key was revoked.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant revoked = 6;</code>
     */
    public boolean hasRevoked() {
      return revoked_ != null;
    }
    /**
     * <pre>
     * Timestamp specifying the time this key was revoked.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant revoked = 6;</code>
     */
    public io.opencannabis.schema.temporal.TemporalInstant.Instant getRevoked() {
      return revoked_ == null ? io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : revoked_;
    }
    /**
     * <pre>
     * Timestamp specifying the time this key was revoked.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant revoked = 6;</code>
     */
    public io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getRevokedOrBuilder() {
      return getRevoked();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (id_ != null) {
        output.writeMessage(1, getId());
      }
      if (!getNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, name_);
      }
      if (disabled_ != false) {
        output.writeBool(3, disabled_);
      }
      if (key_ != null) {
        output.writeMessage(4, getKey());
      }
      if (generated_ != null) {
        output.writeMessage(5, getGenerated());
      }
      if (revoked_ != null) {
        output.writeMessage(6, getRevoked());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (id_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getId());
      }
      if (!getNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, name_);
      }
      if (disabled_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, disabled_);
      }
      if (key_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getKey());
      }
      if (generated_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getGenerated());
      }
      if (revoked_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getRevoked());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.bloombox.schema.identity.bioprint.BioprintOuterClass.StubKey)) {
        return super.equals(obj);
      }
      io.bloombox.schema.identity.bioprint.BioprintOuterClass.StubKey other = (io.bloombox.schema.identity.bioprint.BioprintOuterClass.StubKey) obj;

      if (hasId() != other.hasId()) return false;
      if (hasId()) {
        if (!getId()
            .equals(other.getId())) return false;
      }
      if (!getName()
          .equals(other.getName())) return false;
      if (getDisabled()
          != other.getDisabled()) return false;
      if (hasKey() != other.hasKey()) return false;
      if (hasKey()) {
        if (!getKey()
            .equals(other.getKey())) return false;
      }
      if (hasGenerated() != other.hasGenerated()) return false;
      if (hasGenerated()) {
        if (!getGenerated()
            .equals(other.getGenerated())) return false;
      }
      if (hasRevoked() != other.hasRevoked()) return false;
      if (hasRevoked()) {
        if (!getRevoked()
            .equals(other.getRevoked())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasId()) {
        hash = (37 * hash) + ID_FIELD_NUMBER;
        hash = (53 * hash) + getId().hashCode();
      }
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (37 * hash) + DISABLED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getDisabled());
      if (hasKey()) {
        hash = (37 * hash) + KEY_FIELD_NUMBER;
        hash = (53 * hash) + getKey().hashCode();
      }
      if (hasGenerated()) {
        hash = (37 * hash) + GENERATED_FIELD_NUMBER;
        hash = (53 * hash) + getGenerated().hashCode();
      }
      if (hasRevoked()) {
        hash = (37 * hash) + REVOKED_FIELD_NUMBER;
        hash = (53 * hash) + getRevoked().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.StubKey parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.StubKey parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.StubKey parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.StubKey parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.StubKey parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.StubKey parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.StubKey parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.StubKey parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.StubKey parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.StubKey parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.StubKey parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.StubKey parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.bloombox.schema.identity.bioprint.BioprintOuterClass.StubKey prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Specifies an ephemeral symmetric key, generated for the purposes of sharing a *Bioprint* with a specific, authorized
     * partner organization. These keys are generated on-demand and on a per-partner basis. Because the use of stub keys
     * depends on a signed payload from an online service, they are revocable by the user. Only the public portion of the
     * *Bioprint* is shared, and can be decrypted, by a stub key.
     * </pre>
     *
     * Protobuf type {@code bloombox.identity.bioprint.StubKey}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:bloombox.identity.bioprint.StubKey)
        io.bloombox.schema.identity.bioprint.BioprintOuterClass.StubKeyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_StubKey_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_StubKey_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.bloombox.schema.identity.bioprint.BioprintOuterClass.StubKey.class, io.bloombox.schema.identity.bioprint.BioprintOuterClass.StubKey.Builder.class);
      }

      // Construct using io.bloombox.schema.identity.bioprint.BioprintOuterClass.StubKey.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (idBuilder_ == null) {
          id_ = null;
        } else {
          id_ = null;
          idBuilder_ = null;
        }
        name_ = "";

        disabled_ = false;

        if (keyBuilder_ == null) {
          key_ = null;
        } else {
          key_ = null;
          keyBuilder_ = null;
        }
        if (generatedBuilder_ == null) {
          generated_ = null;
        } else {
          generated_ = null;
          generatedBuilder_ = null;
        }
        if (revokedBuilder_ == null) {
          revoked_ = null;
        } else {
          revoked_ = null;
          revokedBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_StubKey_descriptor;
      }

      @java.lang.Override
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.StubKey getDefaultInstanceForType() {
        return io.bloombox.schema.identity.bioprint.BioprintOuterClass.StubKey.getDefaultInstance();
      }

      @java.lang.Override
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.StubKey build() {
        io.bloombox.schema.identity.bioprint.BioprintOuterClass.StubKey result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.StubKey buildPartial() {
        io.bloombox.schema.identity.bioprint.BioprintOuterClass.StubKey result = new io.bloombox.schema.identity.bioprint.BioprintOuterClass.StubKey(this);
        if (idBuilder_ == null) {
          result.id_ = id_;
        } else {
          result.id_ = idBuilder_.build();
        }
        result.name_ = name_;
        result.disabled_ = disabled_;
        if (keyBuilder_ == null) {
          result.key_ = key_;
        } else {
          result.key_ = keyBuilder_.build();
        }
        if (generatedBuilder_ == null) {
          result.generated_ = generated_;
        } else {
          result.generated_ = generatedBuilder_.build();
        }
        if (revokedBuilder_ == null) {
          result.revoked_ = revoked_;
        } else {
          result.revoked_ = revokedBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.bloombox.schema.identity.bioprint.BioprintOuterClass.StubKey) {
          return mergeFrom((io.bloombox.schema.identity.bioprint.BioprintOuterClass.StubKey)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.bloombox.schema.identity.bioprint.BioprintOuterClass.StubKey other) {
        if (other == io.bloombox.schema.identity.bioprint.BioprintOuterClass.StubKey.getDefaultInstance()) return this;
        if (other.hasId()) {
          mergeId(other.getId());
        }
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (other.getDisabled() != false) {
          setDisabled(other.getDisabled());
        }
        if (other.hasKey()) {
          mergeKey(other.getKey());
        }
        if (other.hasGenerated()) {
          mergeGenerated(other.getGenerated());
        }
        if (other.hasRevoked()) {
          mergeRevoked(other.getRevoked());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.bloombox.schema.identity.bioprint.BioprintOuterClass.StubKey parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.bloombox.schema.identity.bioprint.BioprintOuterClass.StubKey) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID id_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.Builder, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintIDOrBuilder> idBuilder_;
      /**
       * <pre>
       * Ephemeral ID provisioned for this Bioprint payload.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
       */
      public boolean hasId() {
        return idBuilder_ != null || id_ != null;
      }
      /**
       * <pre>
       * Ephemeral ID provisioned for this Bioprint payload.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
       */
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID getId() {
        if (idBuilder_ == null) {
          return id_ == null ? io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.getDefaultInstance() : id_;
        } else {
          return idBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Ephemeral ID provisioned for this Bioprint payload.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
       */
      public Builder setId(io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID value) {
        if (idBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          id_ = value;
          onChanged();
        } else {
          idBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Ephemeral ID provisioned for this Bioprint payload.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
       */
      public Builder setId(
          io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.Builder builderForValue) {
        if (idBuilder_ == null) {
          id_ = builderForValue.build();
          onChanged();
        } else {
          idBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Ephemeral ID provisioned for this Bioprint payload.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
       */
      public Builder mergeId(io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID value) {
        if (idBuilder_ == null) {
          if (id_ != null) {
            id_ =
              io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.newBuilder(id_).mergeFrom(value).buildPartial();
          } else {
            id_ = value;
          }
          onChanged();
        } else {
          idBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Ephemeral ID provisioned for this Bioprint payload.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
       */
      public Builder clearId() {
        if (idBuilder_ == null) {
          id_ = null;
          onChanged();
        } else {
          id_ = null;
          idBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Ephemeral ID provisioned for this Bioprint payload.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
       */
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.Builder getIdBuilder() {
        
        onChanged();
        return getIdFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Ephemeral ID provisioned for this Bioprint payload.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
       */
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintIDOrBuilder getIdOrBuilder() {
        if (idBuilder_ != null) {
          return idBuilder_.getMessageOrBuilder();
        } else {
          return id_ == null ?
              io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.getDefaultInstance() : id_;
        }
      }
      /**
       * <pre>
       * Ephemeral ID provisioned for this Bioprint payload.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.Builder, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintIDOrBuilder> 
          getIdFieldBuilder() {
        if (idBuilder_ == null) {
          idBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.Builder, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintIDOrBuilder>(
                  getId(),
                  getParentForChildren(),
                  isClean());
          id_ = null;
        }
        return idBuilder_;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * Name for the key, which is generally set from the provider name.
       * </pre>
       *
       * <code>string name = 2;</code>
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Name for the key, which is generally set from the provider name.
       * </pre>
       *
       * <code>string name = 2;</code>
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Name for the key, which is generally set from the provider name.
       * </pre>
       *
       * <code>string name = 2;</code>
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name for the key, which is generally set from the provider name.
       * </pre>
       *
       * <code>string name = 2;</code>
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Name for the key, which is generally set from the provider name.
       * </pre>
       *
       * <code>string name = 2;</code>
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private boolean disabled_ ;
      /**
       * <pre>
       * Whether this key should be considered revoked or not. If not present or false, the key is considered active.
       * </pre>
       *
       * <code>bool disabled = 3;</code>
       */
      public boolean getDisabled() {
        return disabled_;
      }
      /**
       * <pre>
       * Whether this key should be considered revoked or not. If not present or false, the key is considered active.
       * </pre>
       *
       * <code>bool disabled = 3;</code>
       */
      public Builder setDisabled(boolean value) {
        
        disabled_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Whether this key should be considered revoked or not. If not present or false, the key is considered active.
       * </pre>
       *
       * <code>bool disabled = 3;</code>
       */
      public Builder clearDisabled() {
        
        disabled_ = false;
        onChanged();
        return this;
      }

      private io.opencannabis.schema.crypto.primitives.SymmetricKey key_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.crypto.primitives.SymmetricKey, io.opencannabis.schema.crypto.primitives.SymmetricKey.Builder, io.opencannabis.schema.crypto.primitives.SymmetricKeyOrBuilder> keyBuilder_;
      /**
       * <pre>
       * Symmetric key material, including the raw bytes of the underlying secret key.
       * </pre>
       *
       * <code>.opencannabis.crypto.SymmetricKey key = 4;</code>
       */
      public boolean hasKey() {
        return keyBuilder_ != null || key_ != null;
      }
      /**
       * <pre>
       * Symmetric key material, including the raw bytes of the underlying secret key.
       * </pre>
       *
       * <code>.opencannabis.crypto.SymmetricKey key = 4;</code>
       */
      public io.opencannabis.schema.crypto.primitives.SymmetricKey getKey() {
        if (keyBuilder_ == null) {
          return key_ == null ? io.opencannabis.schema.crypto.primitives.SymmetricKey.getDefaultInstance() : key_;
        } else {
          return keyBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Symmetric key material, including the raw bytes of the underlying secret key.
       * </pre>
       *
       * <code>.opencannabis.crypto.SymmetricKey key = 4;</code>
       */
      public Builder setKey(io.opencannabis.schema.crypto.primitives.SymmetricKey value) {
        if (keyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          key_ = value;
          onChanged();
        } else {
          keyBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Symmetric key material, including the raw bytes of the underlying secret key.
       * </pre>
       *
       * <code>.opencannabis.crypto.SymmetricKey key = 4;</code>
       */
      public Builder setKey(
          io.opencannabis.schema.crypto.primitives.SymmetricKey.Builder builderForValue) {
        if (keyBuilder_ == null) {
          key_ = builderForValue.build();
          onChanged();
        } else {
          keyBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Symmetric key material, including the raw bytes of the underlying secret key.
       * </pre>
       *
       * <code>.opencannabis.crypto.SymmetricKey key = 4;</code>
       */
      public Builder mergeKey(io.opencannabis.schema.crypto.primitives.SymmetricKey value) {
        if (keyBuilder_ == null) {
          if (key_ != null) {
            key_ =
              io.opencannabis.schema.crypto.primitives.SymmetricKey.newBuilder(key_).mergeFrom(value).buildPartial();
          } else {
            key_ = value;
          }
          onChanged();
        } else {
          keyBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Symmetric key material, including the raw bytes of the underlying secret key.
       * </pre>
       *
       * <code>.opencannabis.crypto.SymmetricKey key = 4;</code>
       */
      public Builder clearKey() {
        if (keyBuilder_ == null) {
          key_ = null;
          onChanged();
        } else {
          key_ = null;
          keyBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Symmetric key material, including the raw bytes of the underlying secret key.
       * </pre>
       *
       * <code>.opencannabis.crypto.SymmetricKey key = 4;</code>
       */
      public io.opencannabis.schema.crypto.primitives.SymmetricKey.Builder getKeyBuilder() {
        
        onChanged();
        return getKeyFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Symmetric key material, including the raw bytes of the underlying secret key.
       * </pre>
       *
       * <code>.opencannabis.crypto.SymmetricKey key = 4;</code>
       */
      public io.opencannabis.schema.crypto.primitives.SymmetricKeyOrBuilder getKeyOrBuilder() {
        if (keyBuilder_ != null) {
          return keyBuilder_.getMessageOrBuilder();
        } else {
          return key_ == null ?
              io.opencannabis.schema.crypto.primitives.SymmetricKey.getDefaultInstance() : key_;
        }
      }
      /**
       * <pre>
       * Symmetric key material, including the raw bytes of the underlying secret key.
       * </pre>
       *
       * <code>.opencannabis.crypto.SymmetricKey key = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.crypto.primitives.SymmetricKey, io.opencannabis.schema.crypto.primitives.SymmetricKey.Builder, io.opencannabis.schema.crypto.primitives.SymmetricKeyOrBuilder> 
          getKeyFieldBuilder() {
        if (keyBuilder_ == null) {
          keyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.opencannabis.schema.crypto.primitives.SymmetricKey, io.opencannabis.schema.crypto.primitives.SymmetricKey.Builder, io.opencannabis.schema.crypto.primitives.SymmetricKeyOrBuilder>(
                  getKey(),
                  getParentForChildren(),
                  isClean());
          key_ = null;
        }
        return keyBuilder_;
      }

      private io.opencannabis.schema.temporal.TemporalInstant.Instant generated_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder> generatedBuilder_;
      /**
       * <pre>
       * Timestamp specifying the time this key was last-used.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant generated = 5;</code>
       */
      public boolean hasGenerated() {
        return generatedBuilder_ != null || generated_ != null;
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was last-used.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant generated = 5;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.Instant getGenerated() {
        if (generatedBuilder_ == null) {
          return generated_ == null ? io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : generated_;
        } else {
          return generatedBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was last-used.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant generated = 5;</code>
       */
      public Builder setGenerated(io.opencannabis.schema.temporal.TemporalInstant.Instant value) {
        if (generatedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          generated_ = value;
          onChanged();
        } else {
          generatedBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was last-used.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant generated = 5;</code>
       */
      public Builder setGenerated(
          io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder builderForValue) {
        if (generatedBuilder_ == null) {
          generated_ = builderForValue.build();
          onChanged();
        } else {
          generatedBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was last-used.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant generated = 5;</code>
       */
      public Builder mergeGenerated(io.opencannabis.schema.temporal.TemporalInstant.Instant value) {
        if (generatedBuilder_ == null) {
          if (generated_ != null) {
            generated_ =
              io.opencannabis.schema.temporal.TemporalInstant.Instant.newBuilder(generated_).mergeFrom(value).buildPartial();
          } else {
            generated_ = value;
          }
          onChanged();
        } else {
          generatedBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was last-used.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant generated = 5;</code>
       */
      public Builder clearGenerated() {
        if (generatedBuilder_ == null) {
          generated_ = null;
          onChanged();
        } else {
          generated_ = null;
          generatedBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was last-used.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant generated = 5;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder getGeneratedBuilder() {
        
        onChanged();
        return getGeneratedFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was last-used.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant generated = 5;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getGeneratedOrBuilder() {
        if (generatedBuilder_ != null) {
          return generatedBuilder_.getMessageOrBuilder();
        } else {
          return generated_ == null ?
              io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : generated_;
        }
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was last-used.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant generated = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder> 
          getGeneratedFieldBuilder() {
        if (generatedBuilder_ == null) {
          generatedBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder>(
                  getGenerated(),
                  getParentForChildren(),
                  isClean());
          generated_ = null;
        }
        return generatedBuilder_;
      }

      private io.opencannabis.schema.temporal.TemporalInstant.Instant revoked_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder> revokedBuilder_;
      /**
       * <pre>
       * Timestamp specifying the time this key was revoked.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant revoked = 6;</code>
       */
      public boolean hasRevoked() {
        return revokedBuilder_ != null || revoked_ != null;
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was revoked.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant revoked = 6;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.Instant getRevoked() {
        if (revokedBuilder_ == null) {
          return revoked_ == null ? io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : revoked_;
        } else {
          return revokedBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was revoked.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant revoked = 6;</code>
       */
      public Builder setRevoked(io.opencannabis.schema.temporal.TemporalInstant.Instant value) {
        if (revokedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          revoked_ = value;
          onChanged();
        } else {
          revokedBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was revoked.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant revoked = 6;</code>
       */
      public Builder setRevoked(
          io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder builderForValue) {
        if (revokedBuilder_ == null) {
          revoked_ = builderForValue.build();
          onChanged();
        } else {
          revokedBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was revoked.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant revoked = 6;</code>
       */
      public Builder mergeRevoked(io.opencannabis.schema.temporal.TemporalInstant.Instant value) {
        if (revokedBuilder_ == null) {
          if (revoked_ != null) {
            revoked_ =
              io.opencannabis.schema.temporal.TemporalInstant.Instant.newBuilder(revoked_).mergeFrom(value).buildPartial();
          } else {
            revoked_ = value;
          }
          onChanged();
        } else {
          revokedBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was revoked.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant revoked = 6;</code>
       */
      public Builder clearRevoked() {
        if (revokedBuilder_ == null) {
          revoked_ = null;
          onChanged();
        } else {
          revoked_ = null;
          revokedBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was revoked.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant revoked = 6;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder getRevokedBuilder() {
        
        onChanged();
        return getRevokedFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was revoked.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant revoked = 6;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getRevokedOrBuilder() {
        if (revokedBuilder_ != null) {
          return revokedBuilder_.getMessageOrBuilder();
        } else {
          return revoked_ == null ?
              io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : revoked_;
        }
      }
      /**
       * <pre>
       * Timestamp specifying the time this key was revoked.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant revoked = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder> 
          getRevokedFieldBuilder() {
        if (revokedBuilder_ == null) {
          revokedBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder>(
                  getRevoked(),
                  getParentForChildren(),
                  isClean());
          revoked_ = null;
        }
        return revokedBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:bloombox.identity.bioprint.StubKey)
    }

    // @@protoc_insertion_point(class_scope:bloombox.identity.bioprint.StubKey)
    private static final io.bloombox.schema.identity.bioprint.BioprintOuterClass.StubKey DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.bloombox.schema.identity.bioprint.BioprintOuterClass.StubKey();
    }

    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.StubKey getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StubKey>
        PARSER = new com.google.protobuf.AbstractParser<StubKey>() {
      @java.lang.Override
      public StubKey parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new StubKey(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<StubKey> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StubKey> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.bloombox.schema.identity.bioprint.BioprintOuterClass.StubKey getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BioprintTokenOrBuilder extends
      // @@protoc_insertion_point(interface_extends:bloombox.identity.bioprint.BioprintToken)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Encoded token payload. Standard JSON Web Token.
     * </pre>
     *
     * <code>.bloombox.security.AuthToken token = 1;</code>
     */
    boolean hasToken();
    /**
     * <pre>
     * Encoded token payload. Standard JSON Web Token.
     * </pre>
     *
     * <code>.bloombox.security.AuthToken token = 1;</code>
     */
    io.bloombox.schema.security.AuthToken getToken();
    /**
     * <pre>
     * Encoded token payload. Standard JSON Web Token.
     * </pre>
     *
     * <code>.bloombox.security.AuthToken token = 1;</code>
     */
    io.bloombox.schema.security.AuthTokenOrBuilder getTokenOrBuilder();

    /**
     * <pre>
     * Fingerprint for the underlying used to sign the enclosed token.
     * </pre>
     *
     * <code>.opencannabis.crypto.Hash fingerprint = 2;</code>
     */
    boolean hasFingerprint();
    /**
     * <pre>
     * Fingerprint for the underlying used to sign the enclosed token.
     * </pre>
     *
     * <code>.opencannabis.crypto.Hash fingerprint = 2;</code>
     */
    io.opencannabis.schema.crypto.primitives.integrity.Hash getFingerprint();
    /**
     * <pre>
     * Fingerprint for the underlying used to sign the enclosed token.
     * </pre>
     *
     * <code>.opencannabis.crypto.Hash fingerprint = 2;</code>
     */
    io.opencannabis.schema.crypto.primitives.integrity.HashOrBuilder getFingerprintOrBuilder();

    /**
     * <pre>
     * Issuance timestamp for the enclosed token.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant issued = 3;</code>
     */
    boolean hasIssued();
    /**
     * <pre>
     * Issuance timestamp for the enclosed token.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant issued = 3;</code>
     */
    io.opencannabis.schema.temporal.TemporalInstant.Instant getIssued();
    /**
     * <pre>
     * Issuance timestamp for the enclosed token.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant issued = 3;</code>
     */
    io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getIssuedOrBuilder();
  }
  /**
   * <pre>
   * Specifies a JSON Web Token (JWT) issued during the process of updating a *Bioprint*, to form an attestation of user
   * identity provenance and control. Tokens are issued by the user's own device and signed with their key.
   * </pre>
   *
   * Protobuf type {@code bloombox.identity.bioprint.BioprintToken}
   */
  public  static final class BioprintToken extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:bloombox.identity.bioprint.BioprintToken)
      BioprintTokenOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use BioprintToken.newBuilder() to construct.
    private BioprintToken(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private BioprintToken() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private BioprintToken(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              io.bloombox.schema.security.AuthToken.Builder subBuilder = null;
              if (token_ != null) {
                subBuilder = token_.toBuilder();
              }
              token_ = input.readMessage(io.bloombox.schema.security.AuthToken.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(token_);
                token_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              io.opencannabis.schema.crypto.primitives.integrity.Hash.Builder subBuilder = null;
              if (fingerprint_ != null) {
                subBuilder = fingerprint_.toBuilder();
              }
              fingerprint_ = input.readMessage(io.opencannabis.schema.crypto.primitives.integrity.Hash.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(fingerprint_);
                fingerprint_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder subBuilder = null;
              if (issued_ != null) {
                subBuilder = issued_.toBuilder();
              }
              issued_ = input.readMessage(io.opencannabis.schema.temporal.TemporalInstant.Instant.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(issued_);
                issued_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_BioprintToken_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_BioprintToken_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintToken.class, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintToken.Builder.class);
    }

    public static final int TOKEN_FIELD_NUMBER = 1;
    private io.bloombox.schema.security.AuthToken token_;
    /**
     * <pre>
     * Encoded token payload. Standard JSON Web Token.
     * </pre>
     *
     * <code>.bloombox.security.AuthToken token = 1;</code>
     */
    public boolean hasToken() {
      return token_ != null;
    }
    /**
     * <pre>
     * Encoded token payload. Standard JSON Web Token.
     * </pre>
     *
     * <code>.bloombox.security.AuthToken token = 1;</code>
     */
    public io.bloombox.schema.security.AuthToken getToken() {
      return token_ == null ? io.bloombox.schema.security.AuthToken.getDefaultInstance() : token_;
    }
    /**
     * <pre>
     * Encoded token payload. Standard JSON Web Token.
     * </pre>
     *
     * <code>.bloombox.security.AuthToken token = 1;</code>
     */
    public io.bloombox.schema.security.AuthTokenOrBuilder getTokenOrBuilder() {
      return getToken();
    }

    public static final int FINGERPRINT_FIELD_NUMBER = 2;
    private io.opencannabis.schema.crypto.primitives.integrity.Hash fingerprint_;
    /**
     * <pre>
     * Fingerprint for the underlying used to sign the enclosed token.
     * </pre>
     *
     * <code>.opencannabis.crypto.Hash fingerprint = 2;</code>
     */
    public boolean hasFingerprint() {
      return fingerprint_ != null;
    }
    /**
     * <pre>
     * Fingerprint for the underlying used to sign the enclosed token.
     * </pre>
     *
     * <code>.opencannabis.crypto.Hash fingerprint = 2;</code>
     */
    public io.opencannabis.schema.crypto.primitives.integrity.Hash getFingerprint() {
      return fingerprint_ == null ? io.opencannabis.schema.crypto.primitives.integrity.Hash.getDefaultInstance() : fingerprint_;
    }
    /**
     * <pre>
     * Fingerprint for the underlying used to sign the enclosed token.
     * </pre>
     *
     * <code>.opencannabis.crypto.Hash fingerprint = 2;</code>
     */
    public io.opencannabis.schema.crypto.primitives.integrity.HashOrBuilder getFingerprintOrBuilder() {
      return getFingerprint();
    }

    public static final int ISSUED_FIELD_NUMBER = 3;
    private io.opencannabis.schema.temporal.TemporalInstant.Instant issued_;
    /**
     * <pre>
     * Issuance timestamp for the enclosed token.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant issued = 3;</code>
     */
    public boolean hasIssued() {
      return issued_ != null;
    }
    /**
     * <pre>
     * Issuance timestamp for the enclosed token.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant issued = 3;</code>
     */
    public io.opencannabis.schema.temporal.TemporalInstant.Instant getIssued() {
      return issued_ == null ? io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : issued_;
    }
    /**
     * <pre>
     * Issuance timestamp for the enclosed token.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant issued = 3;</code>
     */
    public io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getIssuedOrBuilder() {
      return getIssued();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (token_ != null) {
        output.writeMessage(1, getToken());
      }
      if (fingerprint_ != null) {
        output.writeMessage(2, getFingerprint());
      }
      if (issued_ != null) {
        output.writeMessage(3, getIssued());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (token_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getToken());
      }
      if (fingerprint_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getFingerprint());
      }
      if (issued_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getIssued());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintToken)) {
        return super.equals(obj);
      }
      io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintToken other = (io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintToken) obj;

      if (hasToken() != other.hasToken()) return false;
      if (hasToken()) {
        if (!getToken()
            .equals(other.getToken())) return false;
      }
      if (hasFingerprint() != other.hasFingerprint()) return false;
      if (hasFingerprint()) {
        if (!getFingerprint()
            .equals(other.getFingerprint())) return false;
      }
      if (hasIssued() != other.hasIssued()) return false;
      if (hasIssued()) {
        if (!getIssued()
            .equals(other.getIssued())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasToken()) {
        hash = (37 * hash) + TOKEN_FIELD_NUMBER;
        hash = (53 * hash) + getToken().hashCode();
      }
      if (hasFingerprint()) {
        hash = (37 * hash) + FINGERPRINT_FIELD_NUMBER;
        hash = (53 * hash) + getFingerprint().hashCode();
      }
      if (hasIssued()) {
        hash = (37 * hash) + ISSUED_FIELD_NUMBER;
        hash = (53 * hash) + getIssued().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintToken parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintToken parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintToken parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintToken parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintToken parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintToken parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintToken parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintToken parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintToken parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintToken parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintToken parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintToken parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintToken prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Specifies a JSON Web Token (JWT) issued during the process of updating a *Bioprint*, to form an attestation of user
     * identity provenance and control. Tokens are issued by the user's own device and signed with their key.
     * </pre>
     *
     * Protobuf type {@code bloombox.identity.bioprint.BioprintToken}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:bloombox.identity.bioprint.BioprintToken)
        io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintTokenOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_BioprintToken_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_BioprintToken_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintToken.class, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintToken.Builder.class);
      }

      // Construct using io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintToken.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (tokenBuilder_ == null) {
          token_ = null;
        } else {
          token_ = null;
          tokenBuilder_ = null;
        }
        if (fingerprintBuilder_ == null) {
          fingerprint_ = null;
        } else {
          fingerprint_ = null;
          fingerprintBuilder_ = null;
        }
        if (issuedBuilder_ == null) {
          issued_ = null;
        } else {
          issued_ = null;
          issuedBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_BioprintToken_descriptor;
      }

      @java.lang.Override
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintToken getDefaultInstanceForType() {
        return io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintToken.getDefaultInstance();
      }

      @java.lang.Override
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintToken build() {
        io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintToken result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintToken buildPartial() {
        io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintToken result = new io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintToken(this);
        if (tokenBuilder_ == null) {
          result.token_ = token_;
        } else {
          result.token_ = tokenBuilder_.build();
        }
        if (fingerprintBuilder_ == null) {
          result.fingerprint_ = fingerprint_;
        } else {
          result.fingerprint_ = fingerprintBuilder_.build();
        }
        if (issuedBuilder_ == null) {
          result.issued_ = issued_;
        } else {
          result.issued_ = issuedBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintToken) {
          return mergeFrom((io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintToken)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintToken other) {
        if (other == io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintToken.getDefaultInstance()) return this;
        if (other.hasToken()) {
          mergeToken(other.getToken());
        }
        if (other.hasFingerprint()) {
          mergeFingerprint(other.getFingerprint());
        }
        if (other.hasIssued()) {
          mergeIssued(other.getIssued());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintToken parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintToken) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private io.bloombox.schema.security.AuthToken token_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.security.AuthToken, io.bloombox.schema.security.AuthToken.Builder, io.bloombox.schema.security.AuthTokenOrBuilder> tokenBuilder_;
      /**
       * <pre>
       * Encoded token payload. Standard JSON Web Token.
       * </pre>
       *
       * <code>.bloombox.security.AuthToken token = 1;</code>
       */
      public boolean hasToken() {
        return tokenBuilder_ != null || token_ != null;
      }
      /**
       * <pre>
       * Encoded token payload. Standard JSON Web Token.
       * </pre>
       *
       * <code>.bloombox.security.AuthToken token = 1;</code>
       */
      public io.bloombox.schema.security.AuthToken getToken() {
        if (tokenBuilder_ == null) {
          return token_ == null ? io.bloombox.schema.security.AuthToken.getDefaultInstance() : token_;
        } else {
          return tokenBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Encoded token payload. Standard JSON Web Token.
       * </pre>
       *
       * <code>.bloombox.security.AuthToken token = 1;</code>
       */
      public Builder setToken(io.bloombox.schema.security.AuthToken value) {
        if (tokenBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          token_ = value;
          onChanged();
        } else {
          tokenBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Encoded token payload. Standard JSON Web Token.
       * </pre>
       *
       * <code>.bloombox.security.AuthToken token = 1;</code>
       */
      public Builder setToken(
          io.bloombox.schema.security.AuthToken.Builder builderForValue) {
        if (tokenBuilder_ == null) {
          token_ = builderForValue.build();
          onChanged();
        } else {
          tokenBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Encoded token payload. Standard JSON Web Token.
       * </pre>
       *
       * <code>.bloombox.security.AuthToken token = 1;</code>
       */
      public Builder mergeToken(io.bloombox.schema.security.AuthToken value) {
        if (tokenBuilder_ == null) {
          if (token_ != null) {
            token_ =
              io.bloombox.schema.security.AuthToken.newBuilder(token_).mergeFrom(value).buildPartial();
          } else {
            token_ = value;
          }
          onChanged();
        } else {
          tokenBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Encoded token payload. Standard JSON Web Token.
       * </pre>
       *
       * <code>.bloombox.security.AuthToken token = 1;</code>
       */
      public Builder clearToken() {
        if (tokenBuilder_ == null) {
          token_ = null;
          onChanged();
        } else {
          token_ = null;
          tokenBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Encoded token payload. Standard JSON Web Token.
       * </pre>
       *
       * <code>.bloombox.security.AuthToken token = 1;</code>
       */
      public io.bloombox.schema.security.AuthToken.Builder getTokenBuilder() {
        
        onChanged();
        return getTokenFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Encoded token payload. Standard JSON Web Token.
       * </pre>
       *
       * <code>.bloombox.security.AuthToken token = 1;</code>
       */
      public io.bloombox.schema.security.AuthTokenOrBuilder getTokenOrBuilder() {
        if (tokenBuilder_ != null) {
          return tokenBuilder_.getMessageOrBuilder();
        } else {
          return token_ == null ?
              io.bloombox.schema.security.AuthToken.getDefaultInstance() : token_;
        }
      }
      /**
       * <pre>
       * Encoded token payload. Standard JSON Web Token.
       * </pre>
       *
       * <code>.bloombox.security.AuthToken token = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.security.AuthToken, io.bloombox.schema.security.AuthToken.Builder, io.bloombox.schema.security.AuthTokenOrBuilder> 
          getTokenFieldBuilder() {
        if (tokenBuilder_ == null) {
          tokenBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.bloombox.schema.security.AuthToken, io.bloombox.schema.security.AuthToken.Builder, io.bloombox.schema.security.AuthTokenOrBuilder>(
                  getToken(),
                  getParentForChildren(),
                  isClean());
          token_ = null;
        }
        return tokenBuilder_;
      }

      private io.opencannabis.schema.crypto.primitives.integrity.Hash fingerprint_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.crypto.primitives.integrity.Hash, io.opencannabis.schema.crypto.primitives.integrity.Hash.Builder, io.opencannabis.schema.crypto.primitives.integrity.HashOrBuilder> fingerprintBuilder_;
      /**
       * <pre>
       * Fingerprint for the underlying used to sign the enclosed token.
       * </pre>
       *
       * <code>.opencannabis.crypto.Hash fingerprint = 2;</code>
       */
      public boolean hasFingerprint() {
        return fingerprintBuilder_ != null || fingerprint_ != null;
      }
      /**
       * <pre>
       * Fingerprint for the underlying used to sign the enclosed token.
       * </pre>
       *
       * <code>.opencannabis.crypto.Hash fingerprint = 2;</code>
       */
      public io.opencannabis.schema.crypto.primitives.integrity.Hash getFingerprint() {
        if (fingerprintBuilder_ == null) {
          return fingerprint_ == null ? io.opencannabis.schema.crypto.primitives.integrity.Hash.getDefaultInstance() : fingerprint_;
        } else {
          return fingerprintBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Fingerprint for the underlying used to sign the enclosed token.
       * </pre>
       *
       * <code>.opencannabis.crypto.Hash fingerprint = 2;</code>
       */
      public Builder setFingerprint(io.opencannabis.schema.crypto.primitives.integrity.Hash value) {
        if (fingerprintBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          fingerprint_ = value;
          onChanged();
        } else {
          fingerprintBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Fingerprint for the underlying used to sign the enclosed token.
       * </pre>
       *
       * <code>.opencannabis.crypto.Hash fingerprint = 2;</code>
       */
      public Builder setFingerprint(
          io.opencannabis.schema.crypto.primitives.integrity.Hash.Builder builderForValue) {
        if (fingerprintBuilder_ == null) {
          fingerprint_ = builderForValue.build();
          onChanged();
        } else {
          fingerprintBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Fingerprint for the underlying used to sign the enclosed token.
       * </pre>
       *
       * <code>.opencannabis.crypto.Hash fingerprint = 2;</code>
       */
      public Builder mergeFingerprint(io.opencannabis.schema.crypto.primitives.integrity.Hash value) {
        if (fingerprintBuilder_ == null) {
          if (fingerprint_ != null) {
            fingerprint_ =
              io.opencannabis.schema.crypto.primitives.integrity.Hash.newBuilder(fingerprint_).mergeFrom(value).buildPartial();
          } else {
            fingerprint_ = value;
          }
          onChanged();
        } else {
          fingerprintBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Fingerprint for the underlying used to sign the enclosed token.
       * </pre>
       *
       * <code>.opencannabis.crypto.Hash fingerprint = 2;</code>
       */
      public Builder clearFingerprint() {
        if (fingerprintBuilder_ == null) {
          fingerprint_ = null;
          onChanged();
        } else {
          fingerprint_ = null;
          fingerprintBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Fingerprint for the underlying used to sign the enclosed token.
       * </pre>
       *
       * <code>.opencannabis.crypto.Hash fingerprint = 2;</code>
       */
      public io.opencannabis.schema.crypto.primitives.integrity.Hash.Builder getFingerprintBuilder() {
        
        onChanged();
        return getFingerprintFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Fingerprint for the underlying used to sign the enclosed token.
       * </pre>
       *
       * <code>.opencannabis.crypto.Hash fingerprint = 2;</code>
       */
      public io.opencannabis.schema.crypto.primitives.integrity.HashOrBuilder getFingerprintOrBuilder() {
        if (fingerprintBuilder_ != null) {
          return fingerprintBuilder_.getMessageOrBuilder();
        } else {
          return fingerprint_ == null ?
              io.opencannabis.schema.crypto.primitives.integrity.Hash.getDefaultInstance() : fingerprint_;
        }
      }
      /**
       * <pre>
       * Fingerprint for the underlying used to sign the enclosed token.
       * </pre>
       *
       * <code>.opencannabis.crypto.Hash fingerprint = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.crypto.primitives.integrity.Hash, io.opencannabis.schema.crypto.primitives.integrity.Hash.Builder, io.opencannabis.schema.crypto.primitives.integrity.HashOrBuilder> 
          getFingerprintFieldBuilder() {
        if (fingerprintBuilder_ == null) {
          fingerprintBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.opencannabis.schema.crypto.primitives.integrity.Hash, io.opencannabis.schema.crypto.primitives.integrity.Hash.Builder, io.opencannabis.schema.crypto.primitives.integrity.HashOrBuilder>(
                  getFingerprint(),
                  getParentForChildren(),
                  isClean());
          fingerprint_ = null;
        }
        return fingerprintBuilder_;
      }

      private io.opencannabis.schema.temporal.TemporalInstant.Instant issued_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder> issuedBuilder_;
      /**
       * <pre>
       * Issuance timestamp for the enclosed token.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant issued = 3;</code>
       */
      public boolean hasIssued() {
        return issuedBuilder_ != null || issued_ != null;
      }
      /**
       * <pre>
       * Issuance timestamp for the enclosed token.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant issued = 3;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.Instant getIssued() {
        if (issuedBuilder_ == null) {
          return issued_ == null ? io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : issued_;
        } else {
          return issuedBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Issuance timestamp for the enclosed token.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant issued = 3;</code>
       */
      public Builder setIssued(io.opencannabis.schema.temporal.TemporalInstant.Instant value) {
        if (issuedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          issued_ = value;
          onChanged();
        } else {
          issuedBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Issuance timestamp for the enclosed token.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant issued = 3;</code>
       */
      public Builder setIssued(
          io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder builderForValue) {
        if (issuedBuilder_ == null) {
          issued_ = builderForValue.build();
          onChanged();
        } else {
          issuedBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Issuance timestamp for the enclosed token.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant issued = 3;</code>
       */
      public Builder mergeIssued(io.opencannabis.schema.temporal.TemporalInstant.Instant value) {
        if (issuedBuilder_ == null) {
          if (issued_ != null) {
            issued_ =
              io.opencannabis.schema.temporal.TemporalInstant.Instant.newBuilder(issued_).mergeFrom(value).buildPartial();
          } else {
            issued_ = value;
          }
          onChanged();
        } else {
          issuedBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Issuance timestamp for the enclosed token.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant issued = 3;</code>
       */
      public Builder clearIssued() {
        if (issuedBuilder_ == null) {
          issued_ = null;
          onChanged();
        } else {
          issued_ = null;
          issuedBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Issuance timestamp for the enclosed token.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant issued = 3;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder getIssuedBuilder() {
        
        onChanged();
        return getIssuedFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Issuance timestamp for the enclosed token.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant issued = 3;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getIssuedOrBuilder() {
        if (issuedBuilder_ != null) {
          return issuedBuilder_.getMessageOrBuilder();
        } else {
          return issued_ == null ?
              io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : issued_;
        }
      }
      /**
       * <pre>
       * Issuance timestamp for the enclosed token.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant issued = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder> 
          getIssuedFieldBuilder() {
        if (issuedBuilder_ == null) {
          issuedBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder>(
                  getIssued(),
                  getParentForChildren(),
                  isClean());
          issued_ = null;
        }
        return issuedBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:bloombox.identity.bioprint.BioprintToken)
    }

    // @@protoc_insertion_point(class_scope:bloombox.identity.bioprint.BioprintToken)
    private static final io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintToken DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintToken();
    }

    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintToken getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BioprintToken>
        PARSER = new com.google.protobuf.AbstractParser<BioprintToken>() {
      @java.lang.Override
      public BioprintToken parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BioprintToken(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<BioprintToken> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BioprintToken> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintToken getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BioprintIDOrBuilder extends
      // @@protoc_insertion_point(interface_extends:bloombox.identity.bioprint.BioprintID)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Device ID that originated the Bioprint addressed by this identifier.
     * </pre>
     *
     * <code>string origin = 1;</code>
     */
    java.lang.String getOrigin();
    /**
     * <pre>
     * Device ID that originated the Bioprint addressed by this identifier.
     * </pre>
     *
     * <code>string origin = 1;</code>
     */
    com.google.protobuf.ByteString
        getOriginBytes();

    /**
     * <pre>
     * Parent ID that created this Bioprint ID. When a Bioprint is updated with a provider, a new ID is generated. When
     * this is the case, the old one is included here, and within the hash.
     * </pre>
     *
     * <code>string ancestor = 2;</code>
     */
    java.lang.String getAncestor();
    /**
     * <pre>
     * Parent ID that created this Bioprint ID. When a Bioprint is updated with a provider, a new ID is generated. When
     * this is the case, the old one is included here, and within the hash.
     * </pre>
     *
     * <code>string ancestor = 2;</code>
     */
    com.google.protobuf.ByteString
        getAncestorBytes();

    /**
     * <pre>
     * Timestamp indicating the moment of issuance for this Bioprint ID.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant issued = 3;</code>
     */
    boolean hasIssued();
    /**
     * <pre>
     * Timestamp indicating the moment of issuance for this Bioprint ID.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant issued = 3;</code>
     */
    io.opencannabis.schema.temporal.TemporalInstant.Instant getIssued();
    /**
     * <pre>
     * Timestamp indicating the moment of issuance for this Bioprint ID.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant issued = 3;</code>
     */
    io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getIssuedOrBuilder();

    /**
     * <pre>
     * Signature from the user's key, authorizing this Bioprint ID to be allocated and potentially shared.
     * </pre>
     *
     * <code>.opencannabis.crypto.Signature signature = 4;</code>
     */
    boolean hasSignature();
    /**
     * <pre>
     * Signature from the user's key, authorizing this Bioprint ID to be allocated and potentially shared.
     * </pre>
     *
     * <code>.opencannabis.crypto.Signature signature = 4;</code>
     */
    io.opencannabis.schema.crypto.Signature getSignature();
    /**
     * <pre>
     * Signature from the user's key, authorizing this Bioprint ID to be allocated and potentially shared.
     * </pre>
     *
     * <code>.opencannabis.crypto.Signature signature = 4;</code>
     */
    io.opencannabis.schema.crypto.SignatureOrBuilder getSignatureOrBuilder();

    /**
     * <pre>
     * Specifies the partner for which this ID was allocated, if applicable. The root Bioprint ID specifies no provider
     * partner or ancestor value.
     * </pre>
     *
     * <code>.bloombox.partner.PartnerKey partner = 5;</code>
     */
    boolean hasPartner();
    /**
     * <pre>
     * Specifies the partner for which this ID was allocated, if applicable. The root Bioprint ID specifies no provider
     * partner or ancestor value.
     * </pre>
     *
     * <code>.bloombox.partner.PartnerKey partner = 5;</code>
     */
    io.bloombox.schema.partner.PartnerMeta.PartnerKey getPartner();
    /**
     * <pre>
     * Specifies the partner for which this ID was allocated, if applicable. The root Bioprint ID specifies no provider
     * partner or ancestor value.
     * </pre>
     *
     * <code>.bloombox.partner.PartnerKey partner = 5;</code>
     */
    io.bloombox.schema.partner.PartnerMeta.PartnerKeyOrBuilder getPartnerOrBuilder();
  }
  /**
   * <pre>
   * Specifies a payload that addresses an individual *Bioprint* payload. A Bioprint ID is allocated each time a Bioprint
   * is shared with a given provider (snapshotting that *Bioprint* in time for that moment), and created originally as an
   * anchor in the payload's history. It is composed from a hash algorithm defined in the *Bioprint Architecture* spec.
   * </pre>
   *
   * Protobuf type {@code bloombox.identity.bioprint.BioprintID}
   */
  public  static final class BioprintID extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:bloombox.identity.bioprint.BioprintID)
      BioprintIDOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use BioprintID.newBuilder() to construct.
    private BioprintID(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private BioprintID() {
      origin_ = "";
      ancestor_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private BioprintID(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              origin_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              ancestor_ = s;
              break;
            }
            case 26: {
              io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder subBuilder = null;
              if (issued_ != null) {
                subBuilder = issued_.toBuilder();
              }
              issued_ = input.readMessage(io.opencannabis.schema.temporal.TemporalInstant.Instant.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(issued_);
                issued_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              io.opencannabis.schema.crypto.Signature.Builder subBuilder = null;
              if (signature_ != null) {
                subBuilder = signature_.toBuilder();
              }
              signature_ = input.readMessage(io.opencannabis.schema.crypto.Signature.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(signature_);
                signature_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              io.bloombox.schema.partner.PartnerMeta.PartnerKey.Builder subBuilder = null;
              if (partner_ != null) {
                subBuilder = partner_.toBuilder();
              }
              partner_ = input.readMessage(io.bloombox.schema.partner.PartnerMeta.PartnerKey.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(partner_);
                partner_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_BioprintID_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_BioprintID_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.class, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.Builder.class);
    }

    public static final int ORIGIN_FIELD_NUMBER = 1;
    private volatile java.lang.Object origin_;
    /**
     * <pre>
     * Device ID that originated the Bioprint addressed by this identifier.
     * </pre>
     *
     * <code>string origin = 1;</code>
     */
    public java.lang.String getOrigin() {
      java.lang.Object ref = origin_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        origin_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Device ID that originated the Bioprint addressed by this identifier.
     * </pre>
     *
     * <code>string origin = 1;</code>
     */
    public com.google.protobuf.ByteString
        getOriginBytes() {
      java.lang.Object ref = origin_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        origin_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ANCESTOR_FIELD_NUMBER = 2;
    private volatile java.lang.Object ancestor_;
    /**
     * <pre>
     * Parent ID that created this Bioprint ID. When a Bioprint is updated with a provider, a new ID is generated. When
     * this is the case, the old one is included here, and within the hash.
     * </pre>
     *
     * <code>string ancestor = 2;</code>
     */
    public java.lang.String getAncestor() {
      java.lang.Object ref = ancestor_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        ancestor_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Parent ID that created this Bioprint ID. When a Bioprint is updated with a provider, a new ID is generated. When
     * this is the case, the old one is included here, and within the hash.
     * </pre>
     *
     * <code>string ancestor = 2;</code>
     */
    public com.google.protobuf.ByteString
        getAncestorBytes() {
      java.lang.Object ref = ancestor_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        ancestor_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ISSUED_FIELD_NUMBER = 3;
    private io.opencannabis.schema.temporal.TemporalInstant.Instant issued_;
    /**
     * <pre>
     * Timestamp indicating the moment of issuance for this Bioprint ID.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant issued = 3;</code>
     */
    public boolean hasIssued() {
      return issued_ != null;
    }
    /**
     * <pre>
     * Timestamp indicating the moment of issuance for this Bioprint ID.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant issued = 3;</code>
     */
    public io.opencannabis.schema.temporal.TemporalInstant.Instant getIssued() {
      return issued_ == null ? io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : issued_;
    }
    /**
     * <pre>
     * Timestamp indicating the moment of issuance for this Bioprint ID.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant issued = 3;</code>
     */
    public io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getIssuedOrBuilder() {
      return getIssued();
    }

    public static final int SIGNATURE_FIELD_NUMBER = 4;
    private io.opencannabis.schema.crypto.Signature signature_;
    /**
     * <pre>
     * Signature from the user's key, authorizing this Bioprint ID to be allocated and potentially shared.
     * </pre>
     *
     * <code>.opencannabis.crypto.Signature signature = 4;</code>
     */
    public boolean hasSignature() {
      return signature_ != null;
    }
    /**
     * <pre>
     * Signature from the user's key, authorizing this Bioprint ID to be allocated and potentially shared.
     * </pre>
     *
     * <code>.opencannabis.crypto.Signature signature = 4;</code>
     */
    public io.opencannabis.schema.crypto.Signature getSignature() {
      return signature_ == null ? io.opencannabis.schema.crypto.Signature.getDefaultInstance() : signature_;
    }
    /**
     * <pre>
     * Signature from the user's key, authorizing this Bioprint ID to be allocated and potentially shared.
     * </pre>
     *
     * <code>.opencannabis.crypto.Signature signature = 4;</code>
     */
    public io.opencannabis.schema.crypto.SignatureOrBuilder getSignatureOrBuilder() {
      return getSignature();
    }

    public static final int PARTNER_FIELD_NUMBER = 5;
    private io.bloombox.schema.partner.PartnerMeta.PartnerKey partner_;
    /**
     * <pre>
     * Specifies the partner for which this ID was allocated, if applicable. The root Bioprint ID specifies no provider
     * partner or ancestor value.
     * </pre>
     *
     * <code>.bloombox.partner.PartnerKey partner = 5;</code>
     */
    public boolean hasPartner() {
      return partner_ != null;
    }
    /**
     * <pre>
     * Specifies the partner for which this ID was allocated, if applicable. The root Bioprint ID specifies no provider
     * partner or ancestor value.
     * </pre>
     *
     * <code>.bloombox.partner.PartnerKey partner = 5;</code>
     */
    public io.bloombox.schema.partner.PartnerMeta.PartnerKey getPartner() {
      return partner_ == null ? io.bloombox.schema.partner.PartnerMeta.PartnerKey.getDefaultInstance() : partner_;
    }
    /**
     * <pre>
     * Specifies the partner for which this ID was allocated, if applicable. The root Bioprint ID specifies no provider
     * partner or ancestor value.
     * </pre>
     *
     * <code>.bloombox.partner.PartnerKey partner = 5;</code>
     */
    public io.bloombox.schema.partner.PartnerMeta.PartnerKeyOrBuilder getPartnerOrBuilder() {
      return getPartner();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getOriginBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, origin_);
      }
      if (!getAncestorBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, ancestor_);
      }
      if (issued_ != null) {
        output.writeMessage(3, getIssued());
      }
      if (signature_ != null) {
        output.writeMessage(4, getSignature());
      }
      if (partner_ != null) {
        output.writeMessage(5, getPartner());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getOriginBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, origin_);
      }
      if (!getAncestorBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, ancestor_);
      }
      if (issued_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getIssued());
      }
      if (signature_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getSignature());
      }
      if (partner_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getPartner());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID)) {
        return super.equals(obj);
      }
      io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID other = (io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID) obj;

      if (!getOrigin()
          .equals(other.getOrigin())) return false;
      if (!getAncestor()
          .equals(other.getAncestor())) return false;
      if (hasIssued() != other.hasIssued()) return false;
      if (hasIssued()) {
        if (!getIssued()
            .equals(other.getIssued())) return false;
      }
      if (hasSignature() != other.hasSignature()) return false;
      if (hasSignature()) {
        if (!getSignature()
            .equals(other.getSignature())) return false;
      }
      if (hasPartner() != other.hasPartner()) return false;
      if (hasPartner()) {
        if (!getPartner()
            .equals(other.getPartner())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ORIGIN_FIELD_NUMBER;
      hash = (53 * hash) + getOrigin().hashCode();
      hash = (37 * hash) + ANCESTOR_FIELD_NUMBER;
      hash = (53 * hash) + getAncestor().hashCode();
      if (hasIssued()) {
        hash = (37 * hash) + ISSUED_FIELD_NUMBER;
        hash = (53 * hash) + getIssued().hashCode();
      }
      if (hasSignature()) {
        hash = (37 * hash) + SIGNATURE_FIELD_NUMBER;
        hash = (53 * hash) + getSignature().hashCode();
      }
      if (hasPartner()) {
        hash = (37 * hash) + PARTNER_FIELD_NUMBER;
        hash = (53 * hash) + getPartner().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Specifies a payload that addresses an individual *Bioprint* payload. A Bioprint ID is allocated each time a Bioprint
     * is shared with a given provider (snapshotting that *Bioprint* in time for that moment), and created originally as an
     * anchor in the payload's history. It is composed from a hash algorithm defined in the *Bioprint Architecture* spec.
     * </pre>
     *
     * Protobuf type {@code bloombox.identity.bioprint.BioprintID}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:bloombox.identity.bioprint.BioprintID)
        io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintIDOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_BioprintID_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_BioprintID_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.class, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.Builder.class);
      }

      // Construct using io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        origin_ = "";

        ancestor_ = "";

        if (issuedBuilder_ == null) {
          issued_ = null;
        } else {
          issued_ = null;
          issuedBuilder_ = null;
        }
        if (signatureBuilder_ == null) {
          signature_ = null;
        } else {
          signature_ = null;
          signatureBuilder_ = null;
        }
        if (partnerBuilder_ == null) {
          partner_ = null;
        } else {
          partner_ = null;
          partnerBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_BioprintID_descriptor;
      }

      @java.lang.Override
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID getDefaultInstanceForType() {
        return io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.getDefaultInstance();
      }

      @java.lang.Override
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID build() {
        io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID buildPartial() {
        io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID result = new io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID(this);
        result.origin_ = origin_;
        result.ancestor_ = ancestor_;
        if (issuedBuilder_ == null) {
          result.issued_ = issued_;
        } else {
          result.issued_ = issuedBuilder_.build();
        }
        if (signatureBuilder_ == null) {
          result.signature_ = signature_;
        } else {
          result.signature_ = signatureBuilder_.build();
        }
        if (partnerBuilder_ == null) {
          result.partner_ = partner_;
        } else {
          result.partner_ = partnerBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID) {
          return mergeFrom((io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID other) {
        if (other == io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.getDefaultInstance()) return this;
        if (!other.getOrigin().isEmpty()) {
          origin_ = other.origin_;
          onChanged();
        }
        if (!other.getAncestor().isEmpty()) {
          ancestor_ = other.ancestor_;
          onChanged();
        }
        if (other.hasIssued()) {
          mergeIssued(other.getIssued());
        }
        if (other.hasSignature()) {
          mergeSignature(other.getSignature());
        }
        if (other.hasPartner()) {
          mergePartner(other.getPartner());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object origin_ = "";
      /**
       * <pre>
       * Device ID that originated the Bioprint addressed by this identifier.
       * </pre>
       *
       * <code>string origin = 1;</code>
       */
      public java.lang.String getOrigin() {
        java.lang.Object ref = origin_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          origin_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Device ID that originated the Bioprint addressed by this identifier.
       * </pre>
       *
       * <code>string origin = 1;</code>
       */
      public com.google.protobuf.ByteString
          getOriginBytes() {
        java.lang.Object ref = origin_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          origin_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Device ID that originated the Bioprint addressed by this identifier.
       * </pre>
       *
       * <code>string origin = 1;</code>
       */
      public Builder setOrigin(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        origin_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Device ID that originated the Bioprint addressed by this identifier.
       * </pre>
       *
       * <code>string origin = 1;</code>
       */
      public Builder clearOrigin() {
        
        origin_ = getDefaultInstance().getOrigin();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Device ID that originated the Bioprint addressed by this identifier.
       * </pre>
       *
       * <code>string origin = 1;</code>
       */
      public Builder setOriginBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        origin_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object ancestor_ = "";
      /**
       * <pre>
       * Parent ID that created this Bioprint ID. When a Bioprint is updated with a provider, a new ID is generated. When
       * this is the case, the old one is included here, and within the hash.
       * </pre>
       *
       * <code>string ancestor = 2;</code>
       */
      public java.lang.String getAncestor() {
        java.lang.Object ref = ancestor_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          ancestor_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Parent ID that created this Bioprint ID. When a Bioprint is updated with a provider, a new ID is generated. When
       * this is the case, the old one is included here, and within the hash.
       * </pre>
       *
       * <code>string ancestor = 2;</code>
       */
      public com.google.protobuf.ByteString
          getAncestorBytes() {
        java.lang.Object ref = ancestor_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          ancestor_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Parent ID that created this Bioprint ID. When a Bioprint is updated with a provider, a new ID is generated. When
       * this is the case, the old one is included here, and within the hash.
       * </pre>
       *
       * <code>string ancestor = 2;</code>
       */
      public Builder setAncestor(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        ancestor_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Parent ID that created this Bioprint ID. When a Bioprint is updated with a provider, a new ID is generated. When
       * this is the case, the old one is included here, and within the hash.
       * </pre>
       *
       * <code>string ancestor = 2;</code>
       */
      public Builder clearAncestor() {
        
        ancestor_ = getDefaultInstance().getAncestor();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Parent ID that created this Bioprint ID. When a Bioprint is updated with a provider, a new ID is generated. When
       * this is the case, the old one is included here, and within the hash.
       * </pre>
       *
       * <code>string ancestor = 2;</code>
       */
      public Builder setAncestorBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        ancestor_ = value;
        onChanged();
        return this;
      }

      private io.opencannabis.schema.temporal.TemporalInstant.Instant issued_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder> issuedBuilder_;
      /**
       * <pre>
       * Timestamp indicating the moment of issuance for this Bioprint ID.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant issued = 3;</code>
       */
      public boolean hasIssued() {
        return issuedBuilder_ != null || issued_ != null;
      }
      /**
       * <pre>
       * Timestamp indicating the moment of issuance for this Bioprint ID.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant issued = 3;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.Instant getIssued() {
        if (issuedBuilder_ == null) {
          return issued_ == null ? io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : issued_;
        } else {
          return issuedBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Timestamp indicating the moment of issuance for this Bioprint ID.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant issued = 3;</code>
       */
      public Builder setIssued(io.opencannabis.schema.temporal.TemporalInstant.Instant value) {
        if (issuedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          issued_ = value;
          onChanged();
        } else {
          issuedBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp indicating the moment of issuance for this Bioprint ID.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant issued = 3;</code>
       */
      public Builder setIssued(
          io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder builderForValue) {
        if (issuedBuilder_ == null) {
          issued_ = builderForValue.build();
          onChanged();
        } else {
          issuedBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp indicating the moment of issuance for this Bioprint ID.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant issued = 3;</code>
       */
      public Builder mergeIssued(io.opencannabis.schema.temporal.TemporalInstant.Instant value) {
        if (issuedBuilder_ == null) {
          if (issued_ != null) {
            issued_ =
              io.opencannabis.schema.temporal.TemporalInstant.Instant.newBuilder(issued_).mergeFrom(value).buildPartial();
          } else {
            issued_ = value;
          }
          onChanged();
        } else {
          issuedBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp indicating the moment of issuance for this Bioprint ID.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant issued = 3;</code>
       */
      public Builder clearIssued() {
        if (issuedBuilder_ == null) {
          issued_ = null;
          onChanged();
        } else {
          issued_ = null;
          issuedBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp indicating the moment of issuance for this Bioprint ID.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant issued = 3;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder getIssuedBuilder() {
        
        onChanged();
        return getIssuedFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Timestamp indicating the moment of issuance for this Bioprint ID.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant issued = 3;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getIssuedOrBuilder() {
        if (issuedBuilder_ != null) {
          return issuedBuilder_.getMessageOrBuilder();
        } else {
          return issued_ == null ?
              io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : issued_;
        }
      }
      /**
       * <pre>
       * Timestamp indicating the moment of issuance for this Bioprint ID.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant issued = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder> 
          getIssuedFieldBuilder() {
        if (issuedBuilder_ == null) {
          issuedBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder>(
                  getIssued(),
                  getParentForChildren(),
                  isClean());
          issued_ = null;
        }
        return issuedBuilder_;
      }

      private io.opencannabis.schema.crypto.Signature signature_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.crypto.Signature, io.opencannabis.schema.crypto.Signature.Builder, io.opencannabis.schema.crypto.SignatureOrBuilder> signatureBuilder_;
      /**
       * <pre>
       * Signature from the user's key, authorizing this Bioprint ID to be allocated and potentially shared.
       * </pre>
       *
       * <code>.opencannabis.crypto.Signature signature = 4;</code>
       */
      public boolean hasSignature() {
        return signatureBuilder_ != null || signature_ != null;
      }
      /**
       * <pre>
       * Signature from the user's key, authorizing this Bioprint ID to be allocated and potentially shared.
       * </pre>
       *
       * <code>.opencannabis.crypto.Signature signature = 4;</code>
       */
      public io.opencannabis.schema.crypto.Signature getSignature() {
        if (signatureBuilder_ == null) {
          return signature_ == null ? io.opencannabis.schema.crypto.Signature.getDefaultInstance() : signature_;
        } else {
          return signatureBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Signature from the user's key, authorizing this Bioprint ID to be allocated and potentially shared.
       * </pre>
       *
       * <code>.opencannabis.crypto.Signature signature = 4;</code>
       */
      public Builder setSignature(io.opencannabis.schema.crypto.Signature value) {
        if (signatureBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          signature_ = value;
          onChanged();
        } else {
          signatureBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Signature from the user's key, authorizing this Bioprint ID to be allocated and potentially shared.
       * </pre>
       *
       * <code>.opencannabis.crypto.Signature signature = 4;</code>
       */
      public Builder setSignature(
          io.opencannabis.schema.crypto.Signature.Builder builderForValue) {
        if (signatureBuilder_ == null) {
          signature_ = builderForValue.build();
          onChanged();
        } else {
          signatureBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Signature from the user's key, authorizing this Bioprint ID to be allocated and potentially shared.
       * </pre>
       *
       * <code>.opencannabis.crypto.Signature signature = 4;</code>
       */
      public Builder mergeSignature(io.opencannabis.schema.crypto.Signature value) {
        if (signatureBuilder_ == null) {
          if (signature_ != null) {
            signature_ =
              io.opencannabis.schema.crypto.Signature.newBuilder(signature_).mergeFrom(value).buildPartial();
          } else {
            signature_ = value;
          }
          onChanged();
        } else {
          signatureBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Signature from the user's key, authorizing this Bioprint ID to be allocated and potentially shared.
       * </pre>
       *
       * <code>.opencannabis.crypto.Signature signature = 4;</code>
       */
      public Builder clearSignature() {
        if (signatureBuilder_ == null) {
          signature_ = null;
          onChanged();
        } else {
          signature_ = null;
          signatureBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Signature from the user's key, authorizing this Bioprint ID to be allocated and potentially shared.
       * </pre>
       *
       * <code>.opencannabis.crypto.Signature signature = 4;</code>
       */
      public io.opencannabis.schema.crypto.Signature.Builder getSignatureBuilder() {
        
        onChanged();
        return getSignatureFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Signature from the user's key, authorizing this Bioprint ID to be allocated and potentially shared.
       * </pre>
       *
       * <code>.opencannabis.crypto.Signature signature = 4;</code>
       */
      public io.opencannabis.schema.crypto.SignatureOrBuilder getSignatureOrBuilder() {
        if (signatureBuilder_ != null) {
          return signatureBuilder_.getMessageOrBuilder();
        } else {
          return signature_ == null ?
              io.opencannabis.schema.crypto.Signature.getDefaultInstance() : signature_;
        }
      }
      /**
       * <pre>
       * Signature from the user's key, authorizing this Bioprint ID to be allocated and potentially shared.
       * </pre>
       *
       * <code>.opencannabis.crypto.Signature signature = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.crypto.Signature, io.opencannabis.schema.crypto.Signature.Builder, io.opencannabis.schema.crypto.SignatureOrBuilder> 
          getSignatureFieldBuilder() {
        if (signatureBuilder_ == null) {
          signatureBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.opencannabis.schema.crypto.Signature, io.opencannabis.schema.crypto.Signature.Builder, io.opencannabis.schema.crypto.SignatureOrBuilder>(
                  getSignature(),
                  getParentForChildren(),
                  isClean());
          signature_ = null;
        }
        return signatureBuilder_;
      }

      private io.bloombox.schema.partner.PartnerMeta.PartnerKey partner_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.partner.PartnerMeta.PartnerKey, io.bloombox.schema.partner.PartnerMeta.PartnerKey.Builder, io.bloombox.schema.partner.PartnerMeta.PartnerKeyOrBuilder> partnerBuilder_;
      /**
       * <pre>
       * Specifies the partner for which this ID was allocated, if applicable. The root Bioprint ID specifies no provider
       * partner or ancestor value.
       * </pre>
       *
       * <code>.bloombox.partner.PartnerKey partner = 5;</code>
       */
      public boolean hasPartner() {
        return partnerBuilder_ != null || partner_ != null;
      }
      /**
       * <pre>
       * Specifies the partner for which this ID was allocated, if applicable. The root Bioprint ID specifies no provider
       * partner or ancestor value.
       * </pre>
       *
       * <code>.bloombox.partner.PartnerKey partner = 5;</code>
       */
      public io.bloombox.schema.partner.PartnerMeta.PartnerKey getPartner() {
        if (partnerBuilder_ == null) {
          return partner_ == null ? io.bloombox.schema.partner.PartnerMeta.PartnerKey.getDefaultInstance() : partner_;
        } else {
          return partnerBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Specifies the partner for which this ID was allocated, if applicable. The root Bioprint ID specifies no provider
       * partner or ancestor value.
       * </pre>
       *
       * <code>.bloombox.partner.PartnerKey partner = 5;</code>
       */
      public Builder setPartner(io.bloombox.schema.partner.PartnerMeta.PartnerKey value) {
        if (partnerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          partner_ = value;
          onChanged();
        } else {
          partnerBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the partner for which this ID was allocated, if applicable. The root Bioprint ID specifies no provider
       * partner or ancestor value.
       * </pre>
       *
       * <code>.bloombox.partner.PartnerKey partner = 5;</code>
       */
      public Builder setPartner(
          io.bloombox.schema.partner.PartnerMeta.PartnerKey.Builder builderForValue) {
        if (partnerBuilder_ == null) {
          partner_ = builderForValue.build();
          onChanged();
        } else {
          partnerBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the partner for which this ID was allocated, if applicable. The root Bioprint ID specifies no provider
       * partner or ancestor value.
       * </pre>
       *
       * <code>.bloombox.partner.PartnerKey partner = 5;</code>
       */
      public Builder mergePartner(io.bloombox.schema.partner.PartnerMeta.PartnerKey value) {
        if (partnerBuilder_ == null) {
          if (partner_ != null) {
            partner_ =
              io.bloombox.schema.partner.PartnerMeta.PartnerKey.newBuilder(partner_).mergeFrom(value).buildPartial();
          } else {
            partner_ = value;
          }
          onChanged();
        } else {
          partnerBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the partner for which this ID was allocated, if applicable. The root Bioprint ID specifies no provider
       * partner or ancestor value.
       * </pre>
       *
       * <code>.bloombox.partner.PartnerKey partner = 5;</code>
       */
      public Builder clearPartner() {
        if (partnerBuilder_ == null) {
          partner_ = null;
          onChanged();
        } else {
          partner_ = null;
          partnerBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the partner for which this ID was allocated, if applicable. The root Bioprint ID specifies no provider
       * partner or ancestor value.
       * </pre>
       *
       * <code>.bloombox.partner.PartnerKey partner = 5;</code>
       */
      public io.bloombox.schema.partner.PartnerMeta.PartnerKey.Builder getPartnerBuilder() {
        
        onChanged();
        return getPartnerFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Specifies the partner for which this ID was allocated, if applicable. The root Bioprint ID specifies no provider
       * partner or ancestor value.
       * </pre>
       *
       * <code>.bloombox.partner.PartnerKey partner = 5;</code>
       */
      public io.bloombox.schema.partner.PartnerMeta.PartnerKeyOrBuilder getPartnerOrBuilder() {
        if (partnerBuilder_ != null) {
          return partnerBuilder_.getMessageOrBuilder();
        } else {
          return partner_ == null ?
              io.bloombox.schema.partner.PartnerMeta.PartnerKey.getDefaultInstance() : partner_;
        }
      }
      /**
       * <pre>
       * Specifies the partner for which this ID was allocated, if applicable. The root Bioprint ID specifies no provider
       * partner or ancestor value.
       * </pre>
       *
       * <code>.bloombox.partner.PartnerKey partner = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.partner.PartnerMeta.PartnerKey, io.bloombox.schema.partner.PartnerMeta.PartnerKey.Builder, io.bloombox.schema.partner.PartnerMeta.PartnerKeyOrBuilder> 
          getPartnerFieldBuilder() {
        if (partnerBuilder_ == null) {
          partnerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.bloombox.schema.partner.PartnerMeta.PartnerKey, io.bloombox.schema.partner.PartnerMeta.PartnerKey.Builder, io.bloombox.schema.partner.PartnerMeta.PartnerKeyOrBuilder>(
                  getPartner(),
                  getParentForChildren(),
                  isClean());
          partner_ = null;
        }
        return partnerBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:bloombox.identity.bioprint.BioprintID)
    }

    // @@protoc_insertion_point(class_scope:bloombox.identity.bioprint.BioprintID)
    private static final io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID();
    }

    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BioprintID>
        PARSER = new com.google.protobuf.AbstractParser<BioprintID>() {
      @java.lang.Override
      public BioprintID parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BioprintID(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<BioprintID> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BioprintID> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface KeychainOrBuilder extends
      // @@protoc_insertion_point(interface_extends:bloombox.identity.bioprint.Keychain)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Master key information and raw key material.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.MasterKey master = 1;</code>
     */
    java.util.List<io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey> 
        getMasterList();
    /**
     * <pre>
     * Master key information and raw key material.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.MasterKey master = 1;</code>
     */
    io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey getMaster(int index);
    /**
     * <pre>
     * Master key information and raw key material.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.MasterKey master = 1;</code>
     */
    int getMasterCount();
    /**
     * <pre>
     * Master key information and raw key material.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.MasterKey master = 1;</code>
     */
    java.util.List<? extends io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKeyOrBuilder> 
        getMasterOrBuilderList();
    /**
     * <pre>
     * Master key information and raw key material.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.MasterKey master = 1;</code>
     */
    io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKeyOrBuilder getMasterOrBuilder(
        int index);

    /**
     * <pre>
     * Export keys, each with their information and raw key material.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.RestorationKey restoration = 2;</code>
     */
    java.util.List<io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey> 
        getRestorationList();
    /**
     * <pre>
     * Export keys, each with their information and raw key material.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.RestorationKey restoration = 2;</code>
     */
    io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey getRestoration(int index);
    /**
     * <pre>
     * Export keys, each with their information and raw key material.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.RestorationKey restoration = 2;</code>
     */
    int getRestorationCount();
    /**
     * <pre>
     * Export keys, each with their information and raw key material.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.RestorationKey restoration = 2;</code>
     */
    java.util.List<? extends io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKeyOrBuilder> 
        getRestorationOrBuilderList();
    /**
     * <pre>
     * Export keys, each with their information and raw key material.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.RestorationKey restoration = 2;</code>
     */
    io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKeyOrBuilder getRestorationOrBuilder(
        int index);

    /**
     * <pre>
     * Key rotation generation. Indicates the tip of master key history.
     * </pre>
     *
     * <code>uint32 generation = 3;</code>
     */
    int getGeneration();

    /**
     * <pre>
     * Timestamp indicating when keys were last rotated.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant last_rotated = 4;</code>
     */
    boolean hasLastRotated();
    /**
     * <pre>
     * Timestamp indicating when keys were last rotated.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant last_rotated = 4;</code>
     */
    io.opencannabis.schema.temporal.TemporalInstant.Instant getLastRotated();
    /**
     * <pre>
     * Timestamp indicating when keys were last rotated.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant last_rotated = 4;</code>
     */
    io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getLastRotatedOrBuilder();
  }
  /**
   * <pre>
   * Specifies private cryptographic material and access policies for a user's *Bioprint*. The user's master key is stored
   * here, along with each restoration key allocated from this copy of the payload.
   * </pre>
   *
   * Protobuf type {@code bloombox.identity.bioprint.Keychain}
   */
  public  static final class Keychain extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:bloombox.identity.bioprint.Keychain)
      KeychainOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Keychain.newBuilder() to construct.
    private Keychain(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Keychain() {
      master_ = java.util.Collections.emptyList();
      restoration_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Keychain(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                master_ = new java.util.ArrayList<io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey>();
                mutable_bitField0_ |= 0x00000001;
              }
              master_.add(
                  input.readMessage(io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey.parser(), extensionRegistry));
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                restoration_ = new java.util.ArrayList<io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey>();
                mutable_bitField0_ |= 0x00000002;
              }
              restoration_.add(
                  input.readMessage(io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey.parser(), extensionRegistry));
              break;
            }
            case 24: {

              generation_ = input.readUInt32();
              break;
            }
            case 34: {
              io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder subBuilder = null;
              if (lastRotated_ != null) {
                subBuilder = lastRotated_.toBuilder();
              }
              lastRotated_ = input.readMessage(io.opencannabis.schema.temporal.TemporalInstant.Instant.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(lastRotated_);
                lastRotated_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          master_ = java.util.Collections.unmodifiableList(master_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          restoration_ = java.util.Collections.unmodifiableList(restoration_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_Keychain_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_Keychain_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain.class, io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain.Builder.class);
    }

    private int bitField0_;
    public static final int MASTER_FIELD_NUMBER = 1;
    private java.util.List<io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey> master_;
    /**
     * <pre>
     * Master key information and raw key material.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.MasterKey master = 1;</code>
     */
    public java.util.List<io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey> getMasterList() {
      return master_;
    }
    /**
     * <pre>
     * Master key information and raw key material.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.MasterKey master = 1;</code>
     */
    public java.util.List<? extends io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKeyOrBuilder> 
        getMasterOrBuilderList() {
      return master_;
    }
    /**
     * <pre>
     * Master key information and raw key material.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.MasterKey master = 1;</code>
     */
    public int getMasterCount() {
      return master_.size();
    }
    /**
     * <pre>
     * Master key information and raw key material.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.MasterKey master = 1;</code>
     */
    public io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey getMaster(int index) {
      return master_.get(index);
    }
    /**
     * <pre>
     * Master key information and raw key material.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.MasterKey master = 1;</code>
     */
    public io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKeyOrBuilder getMasterOrBuilder(
        int index) {
      return master_.get(index);
    }

    public static final int RESTORATION_FIELD_NUMBER = 2;
    private java.util.List<io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey> restoration_;
    /**
     * <pre>
     * Export keys, each with their information and raw key material.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.RestorationKey restoration = 2;</code>
     */
    public java.util.List<io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey> getRestorationList() {
      return restoration_;
    }
    /**
     * <pre>
     * Export keys, each with their information and raw key material.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.RestorationKey restoration = 2;</code>
     */
    public java.util.List<? extends io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKeyOrBuilder> 
        getRestorationOrBuilderList() {
      return restoration_;
    }
    /**
     * <pre>
     * Export keys, each with their information and raw key material.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.RestorationKey restoration = 2;</code>
     */
    public int getRestorationCount() {
      return restoration_.size();
    }
    /**
     * <pre>
     * Export keys, each with their information and raw key material.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.RestorationKey restoration = 2;</code>
     */
    public io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey getRestoration(int index) {
      return restoration_.get(index);
    }
    /**
     * <pre>
     * Export keys, each with their information and raw key material.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.RestorationKey restoration = 2;</code>
     */
    public io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKeyOrBuilder getRestorationOrBuilder(
        int index) {
      return restoration_.get(index);
    }

    public static final int GENERATION_FIELD_NUMBER = 3;
    private int generation_;
    /**
     * <pre>
     * Key rotation generation. Indicates the tip of master key history.
     * </pre>
     *
     * <code>uint32 generation = 3;</code>
     */
    public int getGeneration() {
      return generation_;
    }

    public static final int LAST_ROTATED_FIELD_NUMBER = 4;
    private io.opencannabis.schema.temporal.TemporalInstant.Instant lastRotated_;
    /**
     * <pre>
     * Timestamp indicating when keys were last rotated.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant last_rotated = 4;</code>
     */
    public boolean hasLastRotated() {
      return lastRotated_ != null;
    }
    /**
     * <pre>
     * Timestamp indicating when keys were last rotated.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant last_rotated = 4;</code>
     */
    public io.opencannabis.schema.temporal.TemporalInstant.Instant getLastRotated() {
      return lastRotated_ == null ? io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : lastRotated_;
    }
    /**
     * <pre>
     * Timestamp indicating when keys were last rotated.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant last_rotated = 4;</code>
     */
    public io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getLastRotatedOrBuilder() {
      return getLastRotated();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < master_.size(); i++) {
        output.writeMessage(1, master_.get(i));
      }
      for (int i = 0; i < restoration_.size(); i++) {
        output.writeMessage(2, restoration_.get(i));
      }
      if (generation_ != 0) {
        output.writeUInt32(3, generation_);
      }
      if (lastRotated_ != null) {
        output.writeMessage(4, getLastRotated());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < master_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, master_.get(i));
      }
      for (int i = 0; i < restoration_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, restoration_.get(i));
      }
      if (generation_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, generation_);
      }
      if (lastRotated_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getLastRotated());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain)) {
        return super.equals(obj);
      }
      io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain other = (io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain) obj;

      if (!getMasterList()
          .equals(other.getMasterList())) return false;
      if (!getRestorationList()
          .equals(other.getRestorationList())) return false;
      if (getGeneration()
          != other.getGeneration()) return false;
      if (hasLastRotated() != other.hasLastRotated()) return false;
      if (hasLastRotated()) {
        if (!getLastRotated()
            .equals(other.getLastRotated())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getMasterCount() > 0) {
        hash = (37 * hash) + MASTER_FIELD_NUMBER;
        hash = (53 * hash) + getMasterList().hashCode();
      }
      if (getRestorationCount() > 0) {
        hash = (37 * hash) + RESTORATION_FIELD_NUMBER;
        hash = (53 * hash) + getRestorationList().hashCode();
      }
      hash = (37 * hash) + GENERATION_FIELD_NUMBER;
      hash = (53 * hash) + getGeneration();
      if (hasLastRotated()) {
        hash = (37 * hash) + LAST_ROTATED_FIELD_NUMBER;
        hash = (53 * hash) + getLastRotated().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Specifies private cryptographic material and access policies for a user's *Bioprint*. The user's master key is stored
     * here, along with each restoration key allocated from this copy of the payload.
     * </pre>
     *
     * Protobuf type {@code bloombox.identity.bioprint.Keychain}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:bloombox.identity.bioprint.Keychain)
        io.bloombox.schema.identity.bioprint.BioprintOuterClass.KeychainOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_Keychain_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_Keychain_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain.class, io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain.Builder.class);
      }

      // Construct using io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getMasterFieldBuilder();
          getRestorationFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (masterBuilder_ == null) {
          master_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          masterBuilder_.clear();
        }
        if (restorationBuilder_ == null) {
          restoration_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          restorationBuilder_.clear();
        }
        generation_ = 0;

        if (lastRotatedBuilder_ == null) {
          lastRotated_ = null;
        } else {
          lastRotated_ = null;
          lastRotatedBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_Keychain_descriptor;
      }

      @java.lang.Override
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain getDefaultInstanceForType() {
        return io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain.getDefaultInstance();
      }

      @java.lang.Override
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain build() {
        io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain buildPartial() {
        io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain result = new io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (masterBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            master_ = java.util.Collections.unmodifiableList(master_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.master_ = master_;
        } else {
          result.master_ = masterBuilder_.build();
        }
        if (restorationBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            restoration_ = java.util.Collections.unmodifiableList(restoration_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.restoration_ = restoration_;
        } else {
          result.restoration_ = restorationBuilder_.build();
        }
        result.generation_ = generation_;
        if (lastRotatedBuilder_ == null) {
          result.lastRotated_ = lastRotated_;
        } else {
          result.lastRotated_ = lastRotatedBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain) {
          return mergeFrom((io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain other) {
        if (other == io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain.getDefaultInstance()) return this;
        if (masterBuilder_ == null) {
          if (!other.master_.isEmpty()) {
            if (master_.isEmpty()) {
              master_ = other.master_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureMasterIsMutable();
              master_.addAll(other.master_);
            }
            onChanged();
          }
        } else {
          if (!other.master_.isEmpty()) {
            if (masterBuilder_.isEmpty()) {
              masterBuilder_.dispose();
              masterBuilder_ = null;
              master_ = other.master_;
              bitField0_ = (bitField0_ & ~0x00000001);
              masterBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getMasterFieldBuilder() : null;
            } else {
              masterBuilder_.addAllMessages(other.master_);
            }
          }
        }
        if (restorationBuilder_ == null) {
          if (!other.restoration_.isEmpty()) {
            if (restoration_.isEmpty()) {
              restoration_ = other.restoration_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureRestorationIsMutable();
              restoration_.addAll(other.restoration_);
            }
            onChanged();
          }
        } else {
          if (!other.restoration_.isEmpty()) {
            if (restorationBuilder_.isEmpty()) {
              restorationBuilder_.dispose();
              restorationBuilder_ = null;
              restoration_ = other.restoration_;
              bitField0_ = (bitField0_ & ~0x00000002);
              restorationBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getRestorationFieldBuilder() : null;
            } else {
              restorationBuilder_.addAllMessages(other.restoration_);
            }
          }
        }
        if (other.getGeneration() != 0) {
          setGeneration(other.getGeneration());
        }
        if (other.hasLastRotated()) {
          mergeLastRotated(other.getLastRotated());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey> master_ =
        java.util.Collections.emptyList();
      private void ensureMasterIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          master_ = new java.util.ArrayList<io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey>(master_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey, io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey.Builder, io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKeyOrBuilder> masterBuilder_;

      /**
       * <pre>
       * Master key information and raw key material.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.MasterKey master = 1;</code>
       */
      public java.util.List<io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey> getMasterList() {
        if (masterBuilder_ == null) {
          return java.util.Collections.unmodifiableList(master_);
        } else {
          return masterBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Master key information and raw key material.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.MasterKey master = 1;</code>
       */
      public int getMasterCount() {
        if (masterBuilder_ == null) {
          return master_.size();
        } else {
          return masterBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Master key information and raw key material.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.MasterKey master = 1;</code>
       */
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey getMaster(int index) {
        if (masterBuilder_ == null) {
          return master_.get(index);
        } else {
          return masterBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Master key information and raw key material.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.MasterKey master = 1;</code>
       */
      public Builder setMaster(
          int index, io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey value) {
        if (masterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMasterIsMutable();
          master_.set(index, value);
          onChanged();
        } else {
          masterBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Master key information and raw key material.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.MasterKey master = 1;</code>
       */
      public Builder setMaster(
          int index, io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey.Builder builderForValue) {
        if (masterBuilder_ == null) {
          ensureMasterIsMutable();
          master_.set(index, builderForValue.build());
          onChanged();
        } else {
          masterBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Master key information and raw key material.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.MasterKey master = 1;</code>
       */
      public Builder addMaster(io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey value) {
        if (masterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMasterIsMutable();
          master_.add(value);
          onChanged();
        } else {
          masterBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Master key information and raw key material.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.MasterKey master = 1;</code>
       */
      public Builder addMaster(
          int index, io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey value) {
        if (masterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMasterIsMutable();
          master_.add(index, value);
          onChanged();
        } else {
          masterBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Master key information and raw key material.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.MasterKey master = 1;</code>
       */
      public Builder addMaster(
          io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey.Builder builderForValue) {
        if (masterBuilder_ == null) {
          ensureMasterIsMutable();
          master_.add(builderForValue.build());
          onChanged();
        } else {
          masterBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Master key information and raw key material.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.MasterKey master = 1;</code>
       */
      public Builder addMaster(
          int index, io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey.Builder builderForValue) {
        if (masterBuilder_ == null) {
          ensureMasterIsMutable();
          master_.add(index, builderForValue.build());
          onChanged();
        } else {
          masterBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Master key information and raw key material.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.MasterKey master = 1;</code>
       */
      public Builder addAllMaster(
          java.lang.Iterable<? extends io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey> values) {
        if (masterBuilder_ == null) {
          ensureMasterIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, master_);
          onChanged();
        } else {
          masterBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Master key information and raw key material.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.MasterKey master = 1;</code>
       */
      public Builder clearMaster() {
        if (masterBuilder_ == null) {
          master_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          masterBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Master key information and raw key material.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.MasterKey master = 1;</code>
       */
      public Builder removeMaster(int index) {
        if (masterBuilder_ == null) {
          ensureMasterIsMutable();
          master_.remove(index);
          onChanged();
        } else {
          masterBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Master key information and raw key material.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.MasterKey master = 1;</code>
       */
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey.Builder getMasterBuilder(
          int index) {
        return getMasterFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Master key information and raw key material.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.MasterKey master = 1;</code>
       */
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKeyOrBuilder getMasterOrBuilder(
          int index) {
        if (masterBuilder_ == null) {
          return master_.get(index);  } else {
          return masterBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Master key information and raw key material.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.MasterKey master = 1;</code>
       */
      public java.util.List<? extends io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKeyOrBuilder> 
           getMasterOrBuilderList() {
        if (masterBuilder_ != null) {
          return masterBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(master_);
        }
      }
      /**
       * <pre>
       * Master key information and raw key material.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.MasterKey master = 1;</code>
       */
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey.Builder addMasterBuilder() {
        return getMasterFieldBuilder().addBuilder(
            io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey.getDefaultInstance());
      }
      /**
       * <pre>
       * Master key information and raw key material.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.MasterKey master = 1;</code>
       */
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey.Builder addMasterBuilder(
          int index) {
        return getMasterFieldBuilder().addBuilder(
            index, io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey.getDefaultInstance());
      }
      /**
       * <pre>
       * Master key information and raw key material.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.MasterKey master = 1;</code>
       */
      public java.util.List<io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey.Builder> 
           getMasterBuilderList() {
        return getMasterFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey, io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey.Builder, io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKeyOrBuilder> 
          getMasterFieldBuilder() {
        if (masterBuilder_ == null) {
          masterBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey, io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKey.Builder, io.bloombox.schema.identity.bioprint.BioprintOuterClass.MasterKeyOrBuilder>(
                  master_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          master_ = null;
        }
        return masterBuilder_;
      }

      private java.util.List<io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey> restoration_ =
        java.util.Collections.emptyList();
      private void ensureRestorationIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          restoration_ = new java.util.ArrayList<io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey>(restoration_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey, io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey.Builder, io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKeyOrBuilder> restorationBuilder_;

      /**
       * <pre>
       * Export keys, each with their information and raw key material.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.RestorationKey restoration = 2;</code>
       */
      public java.util.List<io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey> getRestorationList() {
        if (restorationBuilder_ == null) {
          return java.util.Collections.unmodifiableList(restoration_);
        } else {
          return restorationBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Export keys, each with their information and raw key material.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.RestorationKey restoration = 2;</code>
       */
      public int getRestorationCount() {
        if (restorationBuilder_ == null) {
          return restoration_.size();
        } else {
          return restorationBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Export keys, each with their information and raw key material.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.RestorationKey restoration = 2;</code>
       */
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey getRestoration(int index) {
        if (restorationBuilder_ == null) {
          return restoration_.get(index);
        } else {
          return restorationBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Export keys, each with their information and raw key material.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.RestorationKey restoration = 2;</code>
       */
      public Builder setRestoration(
          int index, io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey value) {
        if (restorationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRestorationIsMutable();
          restoration_.set(index, value);
          onChanged();
        } else {
          restorationBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Export keys, each with their information and raw key material.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.RestorationKey restoration = 2;</code>
       */
      public Builder setRestoration(
          int index, io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey.Builder builderForValue) {
        if (restorationBuilder_ == null) {
          ensureRestorationIsMutable();
          restoration_.set(index, builderForValue.build());
          onChanged();
        } else {
          restorationBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Export keys, each with their information and raw key material.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.RestorationKey restoration = 2;</code>
       */
      public Builder addRestoration(io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey value) {
        if (restorationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRestorationIsMutable();
          restoration_.add(value);
          onChanged();
        } else {
          restorationBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Export keys, each with their information and raw key material.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.RestorationKey restoration = 2;</code>
       */
      public Builder addRestoration(
          int index, io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey value) {
        if (restorationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRestorationIsMutable();
          restoration_.add(index, value);
          onChanged();
        } else {
          restorationBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Export keys, each with their information and raw key material.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.RestorationKey restoration = 2;</code>
       */
      public Builder addRestoration(
          io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey.Builder builderForValue) {
        if (restorationBuilder_ == null) {
          ensureRestorationIsMutable();
          restoration_.add(builderForValue.build());
          onChanged();
        } else {
          restorationBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Export keys, each with their information and raw key material.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.RestorationKey restoration = 2;</code>
       */
      public Builder addRestoration(
          int index, io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey.Builder builderForValue) {
        if (restorationBuilder_ == null) {
          ensureRestorationIsMutable();
          restoration_.add(index, builderForValue.build());
          onChanged();
        } else {
          restorationBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Export keys, each with their information and raw key material.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.RestorationKey restoration = 2;</code>
       */
      public Builder addAllRestoration(
          java.lang.Iterable<? extends io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey> values) {
        if (restorationBuilder_ == null) {
          ensureRestorationIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, restoration_);
          onChanged();
        } else {
          restorationBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Export keys, each with their information and raw key material.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.RestorationKey restoration = 2;</code>
       */
      public Builder clearRestoration() {
        if (restorationBuilder_ == null) {
          restoration_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          restorationBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Export keys, each with their information and raw key material.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.RestorationKey restoration = 2;</code>
       */
      public Builder removeRestoration(int index) {
        if (restorationBuilder_ == null) {
          ensureRestorationIsMutable();
          restoration_.remove(index);
          onChanged();
        } else {
          restorationBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Export keys, each with their information and raw key material.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.RestorationKey restoration = 2;</code>
       */
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey.Builder getRestorationBuilder(
          int index) {
        return getRestorationFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Export keys, each with their information and raw key material.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.RestorationKey restoration = 2;</code>
       */
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKeyOrBuilder getRestorationOrBuilder(
          int index) {
        if (restorationBuilder_ == null) {
          return restoration_.get(index);  } else {
          return restorationBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Export keys, each with their information and raw key material.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.RestorationKey restoration = 2;</code>
       */
      public java.util.List<? extends io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKeyOrBuilder> 
           getRestorationOrBuilderList() {
        if (restorationBuilder_ != null) {
          return restorationBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(restoration_);
        }
      }
      /**
       * <pre>
       * Export keys, each with their information and raw key material.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.RestorationKey restoration = 2;</code>
       */
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey.Builder addRestorationBuilder() {
        return getRestorationFieldBuilder().addBuilder(
            io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey.getDefaultInstance());
      }
      /**
       * <pre>
       * Export keys, each with their information and raw key material.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.RestorationKey restoration = 2;</code>
       */
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey.Builder addRestorationBuilder(
          int index) {
        return getRestorationFieldBuilder().addBuilder(
            index, io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey.getDefaultInstance());
      }
      /**
       * <pre>
       * Export keys, each with their information and raw key material.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.RestorationKey restoration = 2;</code>
       */
      public java.util.List<io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey.Builder> 
           getRestorationBuilderList() {
        return getRestorationFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey, io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey.Builder, io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKeyOrBuilder> 
          getRestorationFieldBuilder() {
        if (restorationBuilder_ == null) {
          restorationBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey, io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKey.Builder, io.bloombox.schema.identity.bioprint.BioprintOuterClass.RestorationKeyOrBuilder>(
                  restoration_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          restoration_ = null;
        }
        return restorationBuilder_;
      }

      private int generation_ ;
      /**
       * <pre>
       * Key rotation generation. Indicates the tip of master key history.
       * </pre>
       *
       * <code>uint32 generation = 3;</code>
       */
      public int getGeneration() {
        return generation_;
      }
      /**
       * <pre>
       * Key rotation generation. Indicates the tip of master key history.
       * </pre>
       *
       * <code>uint32 generation = 3;</code>
       */
      public Builder setGeneration(int value) {
        
        generation_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Key rotation generation. Indicates the tip of master key history.
       * </pre>
       *
       * <code>uint32 generation = 3;</code>
       */
      public Builder clearGeneration() {
        
        generation_ = 0;
        onChanged();
        return this;
      }

      private io.opencannabis.schema.temporal.TemporalInstant.Instant lastRotated_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder> lastRotatedBuilder_;
      /**
       * <pre>
       * Timestamp indicating when keys were last rotated.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant last_rotated = 4;</code>
       */
      public boolean hasLastRotated() {
        return lastRotatedBuilder_ != null || lastRotated_ != null;
      }
      /**
       * <pre>
       * Timestamp indicating when keys were last rotated.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant last_rotated = 4;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.Instant getLastRotated() {
        if (lastRotatedBuilder_ == null) {
          return lastRotated_ == null ? io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : lastRotated_;
        } else {
          return lastRotatedBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Timestamp indicating when keys were last rotated.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant last_rotated = 4;</code>
       */
      public Builder setLastRotated(io.opencannabis.schema.temporal.TemporalInstant.Instant value) {
        if (lastRotatedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          lastRotated_ = value;
          onChanged();
        } else {
          lastRotatedBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp indicating when keys were last rotated.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant last_rotated = 4;</code>
       */
      public Builder setLastRotated(
          io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder builderForValue) {
        if (lastRotatedBuilder_ == null) {
          lastRotated_ = builderForValue.build();
          onChanged();
        } else {
          lastRotatedBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp indicating when keys were last rotated.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant last_rotated = 4;</code>
       */
      public Builder mergeLastRotated(io.opencannabis.schema.temporal.TemporalInstant.Instant value) {
        if (lastRotatedBuilder_ == null) {
          if (lastRotated_ != null) {
            lastRotated_ =
              io.opencannabis.schema.temporal.TemporalInstant.Instant.newBuilder(lastRotated_).mergeFrom(value).buildPartial();
          } else {
            lastRotated_ = value;
          }
          onChanged();
        } else {
          lastRotatedBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp indicating when keys were last rotated.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant last_rotated = 4;</code>
       */
      public Builder clearLastRotated() {
        if (lastRotatedBuilder_ == null) {
          lastRotated_ = null;
          onChanged();
        } else {
          lastRotated_ = null;
          lastRotatedBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp indicating when keys were last rotated.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant last_rotated = 4;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder getLastRotatedBuilder() {
        
        onChanged();
        return getLastRotatedFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Timestamp indicating when keys were last rotated.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant last_rotated = 4;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getLastRotatedOrBuilder() {
        if (lastRotatedBuilder_ != null) {
          return lastRotatedBuilder_.getMessageOrBuilder();
        } else {
          return lastRotated_ == null ?
              io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : lastRotated_;
        }
      }
      /**
       * <pre>
       * Timestamp indicating when keys were last rotated.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant last_rotated = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder> 
          getLastRotatedFieldBuilder() {
        if (lastRotatedBuilder_ == null) {
          lastRotatedBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder>(
                  getLastRotated(),
                  getParentForChildren(),
                  isClean());
          lastRotated_ = null;
        }
        return lastRotatedBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:bloombox.identity.bioprint.Keychain)
    }

    // @@protoc_insertion_point(class_scope:bloombox.identity.bioprint.Keychain)
    private static final io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain();
    }

    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Keychain>
        PARSER = new com.google.protobuf.AbstractParser<Keychain>() {
      @java.lang.Override
      public Keychain parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Keychain(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Keychain> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Keychain> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BioprintPayloadOrBuilder extends
      // @@protoc_insertion_point(interface_extends:bloombox.identity.bioprint.BioprintPayload)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Integer that indicates the generation ID of this Bioprint payload. Each time a Bioprint is regenerated, the value
     * in this property is incremented, to give a rough idea of the "maturity" of the Bioprint relative to when it was
     * first provisioned on behalf of the subject user.
     * </pre>
     *
     * <code>uint32 generation = 1;</code>
     */
    int getGeneration();

    /**
     * <pre>
     * Specifies affinities, calculated and otherwise, for each aspect-of-use, as they relate to the subject consumer that
     * owns this Bioprint payload. Affinities are opaque occur individually or in groups, via categorization.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.Affinity affinity = 2;</code>
     */
    java.util.List<io.bloombox.schema.identity.bioprint.Affinities.Affinity> 
        getAffinityList();
    /**
     * <pre>
     * Specifies affinities, calculated and otherwise, for each aspect-of-use, as they relate to the subject consumer that
     * owns this Bioprint payload. Affinities are opaque occur individually or in groups, via categorization.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.Affinity affinity = 2;</code>
     */
    io.bloombox.schema.identity.bioprint.Affinities.Affinity getAffinity(int index);
    /**
     * <pre>
     * Specifies affinities, calculated and otherwise, for each aspect-of-use, as they relate to the subject consumer that
     * owns this Bioprint payload. Affinities are opaque occur individually or in groups, via categorization.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.Affinity affinity = 2;</code>
     */
    int getAffinityCount();
    /**
     * <pre>
     * Specifies affinities, calculated and otherwise, for each aspect-of-use, as they relate to the subject consumer that
     * owns this Bioprint payload. Affinities are opaque occur individually or in groups, via categorization.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.Affinity affinity = 2;</code>
     */
    java.util.List<? extends io.bloombox.schema.identity.bioprint.Affinities.AffinityOrBuilder> 
        getAffinityOrBuilderList();
    /**
     * <pre>
     * Specifies affinities, calculated and otherwise, for each aspect-of-use, as they relate to the subject consumer that
     * owns this Bioprint payload. Affinities are opaque occur individually or in groups, via categorization.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.Affinity affinity = 2;</code>
     */
    io.bloombox.schema.identity.bioprint.Affinities.AffinityOrBuilder getAffinityOrBuilder(
        int index);

    /**
     * <pre>
     * Specifies details regarding this consumer's declared use preferences. This includes their stated preferred mode of
     * ingestion, their preferred product types, cannabinoid ratios, and more.
     * </pre>
     *
     * <code>.bloombox.identity.ConsumerPreferences preferences = 3;</code>
     */
    boolean hasPreferences();
    /**
     * <pre>
     * Specifies details regarding this consumer's declared use preferences. This includes their stated preferred mode of
     * ingestion, their preferred product types, cannabinoid ratios, and more.
     * </pre>
     *
     * <code>.bloombox.identity.ConsumerPreferences preferences = 3;</code>
     */
    io.bloombox.schema.identity.AppUser.ConsumerPreferences getPreferences();
    /**
     * <pre>
     * Specifies details regarding this consumer's declared use preferences. This includes their stated preferred mode of
     * ingestion, their preferred product types, cannabinoid ratios, and more.
     * </pre>
     *
     * <code>.bloombox.identity.ConsumerPreferences preferences = 3;</code>
     */
    io.bloombox.schema.identity.AppUser.ConsumerPreferencesOrBuilder getPreferencesOrBuilder();
  }
  /**
   * <pre>
   * Describes the content of a user's *Bioprint*. This is considered the "inner" payload, and it contains references to
   * each of the major components, that, together, form the user's cannabis purchase and experience response history. Hash
   * calculations based on *Bioprint* content occur based on this record.
   * </pre>
   *
   * Protobuf type {@code bloombox.identity.bioprint.BioprintPayload}
   */
  public  static final class BioprintPayload extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:bloombox.identity.bioprint.BioprintPayload)
      BioprintPayloadOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use BioprintPayload.newBuilder() to construct.
    private BioprintPayload(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private BioprintPayload() {
      affinity_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private BioprintPayload(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              generation_ = input.readUInt32();
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                affinity_ = new java.util.ArrayList<io.bloombox.schema.identity.bioprint.Affinities.Affinity>();
                mutable_bitField0_ |= 0x00000002;
              }
              affinity_.add(
                  input.readMessage(io.bloombox.schema.identity.bioprint.Affinities.Affinity.parser(), extensionRegistry));
              break;
            }
            case 26: {
              io.bloombox.schema.identity.AppUser.ConsumerPreferences.Builder subBuilder = null;
              if (preferences_ != null) {
                subBuilder = preferences_.toBuilder();
              }
              preferences_ = input.readMessage(io.bloombox.schema.identity.AppUser.ConsumerPreferences.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(preferences_);
                preferences_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          affinity_ = java.util.Collections.unmodifiableList(affinity_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_BioprintPayload_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_BioprintPayload_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload.class, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload.Builder.class);
    }

    private int bitField0_;
    public static final int GENERATION_FIELD_NUMBER = 1;
    private int generation_;
    /**
     * <pre>
     * Integer that indicates the generation ID of this Bioprint payload. Each time a Bioprint is regenerated, the value
     * in this property is incremented, to give a rough idea of the "maturity" of the Bioprint relative to when it was
     * first provisioned on behalf of the subject user.
     * </pre>
     *
     * <code>uint32 generation = 1;</code>
     */
    public int getGeneration() {
      return generation_;
    }

    public static final int AFFINITY_FIELD_NUMBER = 2;
    private java.util.List<io.bloombox.schema.identity.bioprint.Affinities.Affinity> affinity_;
    /**
     * <pre>
     * Specifies affinities, calculated and otherwise, for each aspect-of-use, as they relate to the subject consumer that
     * owns this Bioprint payload. Affinities are opaque occur individually or in groups, via categorization.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.Affinity affinity = 2;</code>
     */
    public java.util.List<io.bloombox.schema.identity.bioprint.Affinities.Affinity> getAffinityList() {
      return affinity_;
    }
    /**
     * <pre>
     * Specifies affinities, calculated and otherwise, for each aspect-of-use, as they relate to the subject consumer that
     * owns this Bioprint payload. Affinities are opaque occur individually or in groups, via categorization.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.Affinity affinity = 2;</code>
     */
    public java.util.List<? extends io.bloombox.schema.identity.bioprint.Affinities.AffinityOrBuilder> 
        getAffinityOrBuilderList() {
      return affinity_;
    }
    /**
     * <pre>
     * Specifies affinities, calculated and otherwise, for each aspect-of-use, as they relate to the subject consumer that
     * owns this Bioprint payload. Affinities are opaque occur individually or in groups, via categorization.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.Affinity affinity = 2;</code>
     */
    public int getAffinityCount() {
      return affinity_.size();
    }
    /**
     * <pre>
     * Specifies affinities, calculated and otherwise, for each aspect-of-use, as they relate to the subject consumer that
     * owns this Bioprint payload. Affinities are opaque occur individually or in groups, via categorization.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.Affinity affinity = 2;</code>
     */
    public io.bloombox.schema.identity.bioprint.Affinities.Affinity getAffinity(int index) {
      return affinity_.get(index);
    }
    /**
     * <pre>
     * Specifies affinities, calculated and otherwise, for each aspect-of-use, as they relate to the subject consumer that
     * owns this Bioprint payload. Affinities are opaque occur individually or in groups, via categorization.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.Affinity affinity = 2;</code>
     */
    public io.bloombox.schema.identity.bioprint.Affinities.AffinityOrBuilder getAffinityOrBuilder(
        int index) {
      return affinity_.get(index);
    }

    public static final int PREFERENCES_FIELD_NUMBER = 3;
    private io.bloombox.schema.identity.AppUser.ConsumerPreferences preferences_;
    /**
     * <pre>
     * Specifies details regarding this consumer's declared use preferences. This includes their stated preferred mode of
     * ingestion, their preferred product types, cannabinoid ratios, and more.
     * </pre>
     *
     * <code>.bloombox.identity.ConsumerPreferences preferences = 3;</code>
     */
    public boolean hasPreferences() {
      return preferences_ != null;
    }
    /**
     * <pre>
     * Specifies details regarding this consumer's declared use preferences. This includes their stated preferred mode of
     * ingestion, their preferred product types, cannabinoid ratios, and more.
     * </pre>
     *
     * <code>.bloombox.identity.ConsumerPreferences preferences = 3;</code>
     */
    public io.bloombox.schema.identity.AppUser.ConsumerPreferences getPreferences() {
      return preferences_ == null ? io.bloombox.schema.identity.AppUser.ConsumerPreferences.getDefaultInstance() : preferences_;
    }
    /**
     * <pre>
     * Specifies details regarding this consumer's declared use preferences. This includes their stated preferred mode of
     * ingestion, their preferred product types, cannabinoid ratios, and more.
     * </pre>
     *
     * <code>.bloombox.identity.ConsumerPreferences preferences = 3;</code>
     */
    public io.bloombox.schema.identity.AppUser.ConsumerPreferencesOrBuilder getPreferencesOrBuilder() {
      return getPreferences();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (generation_ != 0) {
        output.writeUInt32(1, generation_);
      }
      for (int i = 0; i < affinity_.size(); i++) {
        output.writeMessage(2, affinity_.get(i));
      }
      if (preferences_ != null) {
        output.writeMessage(3, getPreferences());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (generation_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, generation_);
      }
      for (int i = 0; i < affinity_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, affinity_.get(i));
      }
      if (preferences_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getPreferences());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload)) {
        return super.equals(obj);
      }
      io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload other = (io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload) obj;

      if (getGeneration()
          != other.getGeneration()) return false;
      if (!getAffinityList()
          .equals(other.getAffinityList())) return false;
      if (hasPreferences() != other.hasPreferences()) return false;
      if (hasPreferences()) {
        if (!getPreferences()
            .equals(other.getPreferences())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + GENERATION_FIELD_NUMBER;
      hash = (53 * hash) + getGeneration();
      if (getAffinityCount() > 0) {
        hash = (37 * hash) + AFFINITY_FIELD_NUMBER;
        hash = (53 * hash) + getAffinityList().hashCode();
      }
      if (hasPreferences()) {
        hash = (37 * hash) + PREFERENCES_FIELD_NUMBER;
        hash = (53 * hash) + getPreferences().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Describes the content of a user's *Bioprint*. This is considered the "inner" payload, and it contains references to
     * each of the major components, that, together, form the user's cannabis purchase and experience response history. Hash
     * calculations based on *Bioprint* content occur based on this record.
     * </pre>
     *
     * Protobuf type {@code bloombox.identity.bioprint.BioprintPayload}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:bloombox.identity.bioprint.BioprintPayload)
        io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayloadOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_BioprintPayload_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_BioprintPayload_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload.class, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload.Builder.class);
      }

      // Construct using io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getAffinityFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        generation_ = 0;

        if (affinityBuilder_ == null) {
          affinity_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          affinityBuilder_.clear();
        }
        if (preferencesBuilder_ == null) {
          preferences_ = null;
        } else {
          preferences_ = null;
          preferencesBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_BioprintPayload_descriptor;
      }

      @java.lang.Override
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload getDefaultInstanceForType() {
        return io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload.getDefaultInstance();
      }

      @java.lang.Override
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload build() {
        io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload buildPartial() {
        io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload result = new io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.generation_ = generation_;
        if (affinityBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            affinity_ = java.util.Collections.unmodifiableList(affinity_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.affinity_ = affinity_;
        } else {
          result.affinity_ = affinityBuilder_.build();
        }
        if (preferencesBuilder_ == null) {
          result.preferences_ = preferences_;
        } else {
          result.preferences_ = preferencesBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload) {
          return mergeFrom((io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload other) {
        if (other == io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload.getDefaultInstance()) return this;
        if (other.getGeneration() != 0) {
          setGeneration(other.getGeneration());
        }
        if (affinityBuilder_ == null) {
          if (!other.affinity_.isEmpty()) {
            if (affinity_.isEmpty()) {
              affinity_ = other.affinity_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureAffinityIsMutable();
              affinity_.addAll(other.affinity_);
            }
            onChanged();
          }
        } else {
          if (!other.affinity_.isEmpty()) {
            if (affinityBuilder_.isEmpty()) {
              affinityBuilder_.dispose();
              affinityBuilder_ = null;
              affinity_ = other.affinity_;
              bitField0_ = (bitField0_ & ~0x00000002);
              affinityBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getAffinityFieldBuilder() : null;
            } else {
              affinityBuilder_.addAllMessages(other.affinity_);
            }
          }
        }
        if (other.hasPreferences()) {
          mergePreferences(other.getPreferences());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int generation_ ;
      /**
       * <pre>
       * Integer that indicates the generation ID of this Bioprint payload. Each time a Bioprint is regenerated, the value
       * in this property is incremented, to give a rough idea of the "maturity" of the Bioprint relative to when it was
       * first provisioned on behalf of the subject user.
       * </pre>
       *
       * <code>uint32 generation = 1;</code>
       */
      public int getGeneration() {
        return generation_;
      }
      /**
       * <pre>
       * Integer that indicates the generation ID of this Bioprint payload. Each time a Bioprint is regenerated, the value
       * in this property is incremented, to give a rough idea of the "maturity" of the Bioprint relative to when it was
       * first provisioned on behalf of the subject user.
       * </pre>
       *
       * <code>uint32 generation = 1;</code>
       */
      public Builder setGeneration(int value) {
        
        generation_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Integer that indicates the generation ID of this Bioprint payload. Each time a Bioprint is regenerated, the value
       * in this property is incremented, to give a rough idea of the "maturity" of the Bioprint relative to when it was
       * first provisioned on behalf of the subject user.
       * </pre>
       *
       * <code>uint32 generation = 1;</code>
       */
      public Builder clearGeneration() {
        
        generation_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<io.bloombox.schema.identity.bioprint.Affinities.Affinity> affinity_ =
        java.util.Collections.emptyList();
      private void ensureAffinityIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          affinity_ = new java.util.ArrayList<io.bloombox.schema.identity.bioprint.Affinities.Affinity>(affinity_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.bloombox.schema.identity.bioprint.Affinities.Affinity, io.bloombox.schema.identity.bioprint.Affinities.Affinity.Builder, io.bloombox.schema.identity.bioprint.Affinities.AffinityOrBuilder> affinityBuilder_;

      /**
       * <pre>
       * Specifies affinities, calculated and otherwise, for each aspect-of-use, as they relate to the subject consumer that
       * owns this Bioprint payload. Affinities are opaque occur individually or in groups, via categorization.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.Affinity affinity = 2;</code>
       */
      public java.util.List<io.bloombox.schema.identity.bioprint.Affinities.Affinity> getAffinityList() {
        if (affinityBuilder_ == null) {
          return java.util.Collections.unmodifiableList(affinity_);
        } else {
          return affinityBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Specifies affinities, calculated and otherwise, for each aspect-of-use, as they relate to the subject consumer that
       * owns this Bioprint payload. Affinities are opaque occur individually or in groups, via categorization.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.Affinity affinity = 2;</code>
       */
      public int getAffinityCount() {
        if (affinityBuilder_ == null) {
          return affinity_.size();
        } else {
          return affinityBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Specifies affinities, calculated and otherwise, for each aspect-of-use, as they relate to the subject consumer that
       * owns this Bioprint payload. Affinities are opaque occur individually or in groups, via categorization.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.Affinity affinity = 2;</code>
       */
      public io.bloombox.schema.identity.bioprint.Affinities.Affinity getAffinity(int index) {
        if (affinityBuilder_ == null) {
          return affinity_.get(index);
        } else {
          return affinityBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Specifies affinities, calculated and otherwise, for each aspect-of-use, as they relate to the subject consumer that
       * owns this Bioprint payload. Affinities are opaque occur individually or in groups, via categorization.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.Affinity affinity = 2;</code>
       */
      public Builder setAffinity(
          int index, io.bloombox.schema.identity.bioprint.Affinities.Affinity value) {
        if (affinityBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAffinityIsMutable();
          affinity_.set(index, value);
          onChanged();
        } else {
          affinityBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies affinities, calculated and otherwise, for each aspect-of-use, as they relate to the subject consumer that
       * owns this Bioprint payload. Affinities are opaque occur individually or in groups, via categorization.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.Affinity affinity = 2;</code>
       */
      public Builder setAffinity(
          int index, io.bloombox.schema.identity.bioprint.Affinities.Affinity.Builder builderForValue) {
        if (affinityBuilder_ == null) {
          ensureAffinityIsMutable();
          affinity_.set(index, builderForValue.build());
          onChanged();
        } else {
          affinityBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies affinities, calculated and otherwise, for each aspect-of-use, as they relate to the subject consumer that
       * owns this Bioprint payload. Affinities are opaque occur individually or in groups, via categorization.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.Affinity affinity = 2;</code>
       */
      public Builder addAffinity(io.bloombox.schema.identity.bioprint.Affinities.Affinity value) {
        if (affinityBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAffinityIsMutable();
          affinity_.add(value);
          onChanged();
        } else {
          affinityBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies affinities, calculated and otherwise, for each aspect-of-use, as they relate to the subject consumer that
       * owns this Bioprint payload. Affinities are opaque occur individually or in groups, via categorization.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.Affinity affinity = 2;</code>
       */
      public Builder addAffinity(
          int index, io.bloombox.schema.identity.bioprint.Affinities.Affinity value) {
        if (affinityBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureAffinityIsMutable();
          affinity_.add(index, value);
          onChanged();
        } else {
          affinityBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies affinities, calculated and otherwise, for each aspect-of-use, as they relate to the subject consumer that
       * owns this Bioprint payload. Affinities are opaque occur individually or in groups, via categorization.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.Affinity affinity = 2;</code>
       */
      public Builder addAffinity(
          io.bloombox.schema.identity.bioprint.Affinities.Affinity.Builder builderForValue) {
        if (affinityBuilder_ == null) {
          ensureAffinityIsMutable();
          affinity_.add(builderForValue.build());
          onChanged();
        } else {
          affinityBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies affinities, calculated and otherwise, for each aspect-of-use, as they relate to the subject consumer that
       * owns this Bioprint payload. Affinities are opaque occur individually or in groups, via categorization.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.Affinity affinity = 2;</code>
       */
      public Builder addAffinity(
          int index, io.bloombox.schema.identity.bioprint.Affinities.Affinity.Builder builderForValue) {
        if (affinityBuilder_ == null) {
          ensureAffinityIsMutable();
          affinity_.add(index, builderForValue.build());
          onChanged();
        } else {
          affinityBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies affinities, calculated and otherwise, for each aspect-of-use, as they relate to the subject consumer that
       * owns this Bioprint payload. Affinities are opaque occur individually or in groups, via categorization.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.Affinity affinity = 2;</code>
       */
      public Builder addAllAffinity(
          java.lang.Iterable<? extends io.bloombox.schema.identity.bioprint.Affinities.Affinity> values) {
        if (affinityBuilder_ == null) {
          ensureAffinityIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, affinity_);
          onChanged();
        } else {
          affinityBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies affinities, calculated and otherwise, for each aspect-of-use, as they relate to the subject consumer that
       * owns this Bioprint payload. Affinities are opaque occur individually or in groups, via categorization.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.Affinity affinity = 2;</code>
       */
      public Builder clearAffinity() {
        if (affinityBuilder_ == null) {
          affinity_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          affinityBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Specifies affinities, calculated and otherwise, for each aspect-of-use, as they relate to the subject consumer that
       * owns this Bioprint payload. Affinities are opaque occur individually or in groups, via categorization.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.Affinity affinity = 2;</code>
       */
      public Builder removeAffinity(int index) {
        if (affinityBuilder_ == null) {
          ensureAffinityIsMutable();
          affinity_.remove(index);
          onChanged();
        } else {
          affinityBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies affinities, calculated and otherwise, for each aspect-of-use, as they relate to the subject consumer that
       * owns this Bioprint payload. Affinities are opaque occur individually or in groups, via categorization.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.Affinity affinity = 2;</code>
       */
      public io.bloombox.schema.identity.bioprint.Affinities.Affinity.Builder getAffinityBuilder(
          int index) {
        return getAffinityFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Specifies affinities, calculated and otherwise, for each aspect-of-use, as they relate to the subject consumer that
       * owns this Bioprint payload. Affinities are opaque occur individually or in groups, via categorization.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.Affinity affinity = 2;</code>
       */
      public io.bloombox.schema.identity.bioprint.Affinities.AffinityOrBuilder getAffinityOrBuilder(
          int index) {
        if (affinityBuilder_ == null) {
          return affinity_.get(index);  } else {
          return affinityBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Specifies affinities, calculated and otherwise, for each aspect-of-use, as they relate to the subject consumer that
       * owns this Bioprint payload. Affinities are opaque occur individually or in groups, via categorization.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.Affinity affinity = 2;</code>
       */
      public java.util.List<? extends io.bloombox.schema.identity.bioprint.Affinities.AffinityOrBuilder> 
           getAffinityOrBuilderList() {
        if (affinityBuilder_ != null) {
          return affinityBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(affinity_);
        }
      }
      /**
       * <pre>
       * Specifies affinities, calculated and otherwise, for each aspect-of-use, as they relate to the subject consumer that
       * owns this Bioprint payload. Affinities are opaque occur individually or in groups, via categorization.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.Affinity affinity = 2;</code>
       */
      public io.bloombox.schema.identity.bioprint.Affinities.Affinity.Builder addAffinityBuilder() {
        return getAffinityFieldBuilder().addBuilder(
            io.bloombox.schema.identity.bioprint.Affinities.Affinity.getDefaultInstance());
      }
      /**
       * <pre>
       * Specifies affinities, calculated and otherwise, for each aspect-of-use, as they relate to the subject consumer that
       * owns this Bioprint payload. Affinities are opaque occur individually or in groups, via categorization.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.Affinity affinity = 2;</code>
       */
      public io.bloombox.schema.identity.bioprint.Affinities.Affinity.Builder addAffinityBuilder(
          int index) {
        return getAffinityFieldBuilder().addBuilder(
            index, io.bloombox.schema.identity.bioprint.Affinities.Affinity.getDefaultInstance());
      }
      /**
       * <pre>
       * Specifies affinities, calculated and otherwise, for each aspect-of-use, as they relate to the subject consumer that
       * owns this Bioprint payload. Affinities are opaque occur individually or in groups, via categorization.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.Affinity affinity = 2;</code>
       */
      public java.util.List<io.bloombox.schema.identity.bioprint.Affinities.Affinity.Builder> 
           getAffinityBuilderList() {
        return getAffinityFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.bloombox.schema.identity.bioprint.Affinities.Affinity, io.bloombox.schema.identity.bioprint.Affinities.Affinity.Builder, io.bloombox.schema.identity.bioprint.Affinities.AffinityOrBuilder> 
          getAffinityFieldBuilder() {
        if (affinityBuilder_ == null) {
          affinityBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.bloombox.schema.identity.bioprint.Affinities.Affinity, io.bloombox.schema.identity.bioprint.Affinities.Affinity.Builder, io.bloombox.schema.identity.bioprint.Affinities.AffinityOrBuilder>(
                  affinity_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          affinity_ = null;
        }
        return affinityBuilder_;
      }

      private io.bloombox.schema.identity.AppUser.ConsumerPreferences preferences_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.identity.AppUser.ConsumerPreferences, io.bloombox.schema.identity.AppUser.ConsumerPreferences.Builder, io.bloombox.schema.identity.AppUser.ConsumerPreferencesOrBuilder> preferencesBuilder_;
      /**
       * <pre>
       * Specifies details regarding this consumer's declared use preferences. This includes their stated preferred mode of
       * ingestion, their preferred product types, cannabinoid ratios, and more.
       * </pre>
       *
       * <code>.bloombox.identity.ConsumerPreferences preferences = 3;</code>
       */
      public boolean hasPreferences() {
        return preferencesBuilder_ != null || preferences_ != null;
      }
      /**
       * <pre>
       * Specifies details regarding this consumer's declared use preferences. This includes their stated preferred mode of
       * ingestion, their preferred product types, cannabinoid ratios, and more.
       * </pre>
       *
       * <code>.bloombox.identity.ConsumerPreferences preferences = 3;</code>
       */
      public io.bloombox.schema.identity.AppUser.ConsumerPreferences getPreferences() {
        if (preferencesBuilder_ == null) {
          return preferences_ == null ? io.bloombox.schema.identity.AppUser.ConsumerPreferences.getDefaultInstance() : preferences_;
        } else {
          return preferencesBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Specifies details regarding this consumer's declared use preferences. This includes their stated preferred mode of
       * ingestion, their preferred product types, cannabinoid ratios, and more.
       * </pre>
       *
       * <code>.bloombox.identity.ConsumerPreferences preferences = 3;</code>
       */
      public Builder setPreferences(io.bloombox.schema.identity.AppUser.ConsumerPreferences value) {
        if (preferencesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          preferences_ = value;
          onChanged();
        } else {
          preferencesBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Specifies details regarding this consumer's declared use preferences. This includes their stated preferred mode of
       * ingestion, their preferred product types, cannabinoid ratios, and more.
       * </pre>
       *
       * <code>.bloombox.identity.ConsumerPreferences preferences = 3;</code>
       */
      public Builder setPreferences(
          io.bloombox.schema.identity.AppUser.ConsumerPreferences.Builder builderForValue) {
        if (preferencesBuilder_ == null) {
          preferences_ = builderForValue.build();
          onChanged();
        } else {
          preferencesBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Specifies details regarding this consumer's declared use preferences. This includes their stated preferred mode of
       * ingestion, their preferred product types, cannabinoid ratios, and more.
       * </pre>
       *
       * <code>.bloombox.identity.ConsumerPreferences preferences = 3;</code>
       */
      public Builder mergePreferences(io.bloombox.schema.identity.AppUser.ConsumerPreferences value) {
        if (preferencesBuilder_ == null) {
          if (preferences_ != null) {
            preferences_ =
              io.bloombox.schema.identity.AppUser.ConsumerPreferences.newBuilder(preferences_).mergeFrom(value).buildPartial();
          } else {
            preferences_ = value;
          }
          onChanged();
        } else {
          preferencesBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Specifies details regarding this consumer's declared use preferences. This includes their stated preferred mode of
       * ingestion, their preferred product types, cannabinoid ratios, and more.
       * </pre>
       *
       * <code>.bloombox.identity.ConsumerPreferences preferences = 3;</code>
       */
      public Builder clearPreferences() {
        if (preferencesBuilder_ == null) {
          preferences_ = null;
          onChanged();
        } else {
          preferences_ = null;
          preferencesBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Specifies details regarding this consumer's declared use preferences. This includes their stated preferred mode of
       * ingestion, their preferred product types, cannabinoid ratios, and more.
       * </pre>
       *
       * <code>.bloombox.identity.ConsumerPreferences preferences = 3;</code>
       */
      public io.bloombox.schema.identity.AppUser.ConsumerPreferences.Builder getPreferencesBuilder() {
        
        onChanged();
        return getPreferencesFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Specifies details regarding this consumer's declared use preferences. This includes their stated preferred mode of
       * ingestion, their preferred product types, cannabinoid ratios, and more.
       * </pre>
       *
       * <code>.bloombox.identity.ConsumerPreferences preferences = 3;</code>
       */
      public io.bloombox.schema.identity.AppUser.ConsumerPreferencesOrBuilder getPreferencesOrBuilder() {
        if (preferencesBuilder_ != null) {
          return preferencesBuilder_.getMessageOrBuilder();
        } else {
          return preferences_ == null ?
              io.bloombox.schema.identity.AppUser.ConsumerPreferences.getDefaultInstance() : preferences_;
        }
      }
      /**
       * <pre>
       * Specifies details regarding this consumer's declared use preferences. This includes their stated preferred mode of
       * ingestion, their preferred product types, cannabinoid ratios, and more.
       * </pre>
       *
       * <code>.bloombox.identity.ConsumerPreferences preferences = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.identity.AppUser.ConsumerPreferences, io.bloombox.schema.identity.AppUser.ConsumerPreferences.Builder, io.bloombox.schema.identity.AppUser.ConsumerPreferencesOrBuilder> 
          getPreferencesFieldBuilder() {
        if (preferencesBuilder_ == null) {
          preferencesBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.bloombox.schema.identity.AppUser.ConsumerPreferences, io.bloombox.schema.identity.AppUser.ConsumerPreferences.Builder, io.bloombox.schema.identity.AppUser.ConsumerPreferencesOrBuilder>(
                  getPreferences(),
                  getParentForChildren(),
                  isClean());
          preferences_ = null;
        }
        return preferencesBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:bloombox.identity.bioprint.BioprintPayload)
    }

    // @@protoc_insertion_point(class_scope:bloombox.identity.bioprint.BioprintPayload)
    private static final io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload();
    }

    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BioprintPayload>
        PARSER = new com.google.protobuf.AbstractParser<BioprintPayload>() {
      @java.lang.Override
      public BioprintPayload parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BioprintPayload(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<BioprintPayload> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BioprintPayload> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BioprintRevisionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:bloombox.identity.bioprint.BioprintRevision)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * ID that resulted after computing and applying this revision.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
     */
    boolean hasId();
    /**
     * <pre>
     * ID that resulted after computing and applying this revision.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
     */
    io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID getId();
    /**
     * <pre>
     * ID that resulted after computing and applying this revision.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
     */
    io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintIDOrBuilder getIdOrBuilder();

    /**
     * <pre>
     * Timestamp for the moment this revision was applied.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant applied = 2;</code>
     */
    boolean hasApplied();
    /**
     * <pre>
     * Timestamp for the moment this revision was applied.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant applied = 2;</code>
     */
    io.opencannabis.schema.temporal.TemporalInstant.Instant getApplied();
    /**
     * <pre>
     * Timestamp for the moment this revision was applied.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant applied = 2;</code>
     */
    io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getAppliedOrBuilder();

    /**
     * <pre>
     * Archived copy of the profile, after this revision was applied.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.BioprintPayload profile = 3;</code>
     */
    boolean hasProfile();
    /**
     * <pre>
     * Archived copy of the profile, after this revision was applied.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.BioprintPayload profile = 3;</code>
     */
    io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload getProfile();
    /**
     * <pre>
     * Archived copy of the profile, after this revision was applied.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.BioprintPayload profile = 3;</code>
     */
    io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayloadOrBuilder getProfileOrBuilder();
  }
  /**
   * <pre>
   * Specifies a substantive revision made to a *Bioprint* payload. "Substantive" is defined as, any data mutation that
   * might amount to a potential outcome change when querying the resulting *Bioprint*.
   * </pre>
   *
   * Protobuf type {@code bloombox.identity.bioprint.BioprintRevision}
   */
  public  static final class BioprintRevision extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:bloombox.identity.bioprint.BioprintRevision)
      BioprintRevisionOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use BioprintRevision.newBuilder() to construct.
    private BioprintRevision(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private BioprintRevision() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private BioprintRevision(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.Builder subBuilder = null;
              if (id_ != null) {
                subBuilder = id_.toBuilder();
              }
              id_ = input.readMessage(io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(id_);
                id_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder subBuilder = null;
              if (applied_ != null) {
                subBuilder = applied_.toBuilder();
              }
              applied_ = input.readMessage(io.opencannabis.schema.temporal.TemporalInstant.Instant.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(applied_);
                applied_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload.Builder subBuilder = null;
              if (profile_ != null) {
                subBuilder = profile_.toBuilder();
              }
              profile_ = input.readMessage(io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(profile_);
                profile_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_BioprintRevision_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_BioprintRevision_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision.class, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision.Builder.class);
    }

    public static final int ID_FIELD_NUMBER = 1;
    private io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID id_;
    /**
     * <pre>
     * ID that resulted after computing and applying this revision.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
     */
    public boolean hasId() {
      return id_ != null;
    }
    /**
     * <pre>
     * ID that resulted after computing and applying this revision.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
     */
    public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID getId() {
      return id_ == null ? io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.getDefaultInstance() : id_;
    }
    /**
     * <pre>
     * ID that resulted after computing and applying this revision.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
     */
    public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintIDOrBuilder getIdOrBuilder() {
      return getId();
    }

    public static final int APPLIED_FIELD_NUMBER = 2;
    private io.opencannabis.schema.temporal.TemporalInstant.Instant applied_;
    /**
     * <pre>
     * Timestamp for the moment this revision was applied.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant applied = 2;</code>
     */
    public boolean hasApplied() {
      return applied_ != null;
    }
    /**
     * <pre>
     * Timestamp for the moment this revision was applied.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant applied = 2;</code>
     */
    public io.opencannabis.schema.temporal.TemporalInstant.Instant getApplied() {
      return applied_ == null ? io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : applied_;
    }
    /**
     * <pre>
     * Timestamp for the moment this revision was applied.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant applied = 2;</code>
     */
    public io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getAppliedOrBuilder() {
      return getApplied();
    }

    public static final int PROFILE_FIELD_NUMBER = 3;
    private io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload profile_;
    /**
     * <pre>
     * Archived copy of the profile, after this revision was applied.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.BioprintPayload profile = 3;</code>
     */
    public boolean hasProfile() {
      return profile_ != null;
    }
    /**
     * <pre>
     * Archived copy of the profile, after this revision was applied.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.BioprintPayload profile = 3;</code>
     */
    public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload getProfile() {
      return profile_ == null ? io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload.getDefaultInstance() : profile_;
    }
    /**
     * <pre>
     * Archived copy of the profile, after this revision was applied.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.BioprintPayload profile = 3;</code>
     */
    public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayloadOrBuilder getProfileOrBuilder() {
      return getProfile();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (id_ != null) {
        output.writeMessage(1, getId());
      }
      if (applied_ != null) {
        output.writeMessage(2, getApplied());
      }
      if (profile_ != null) {
        output.writeMessage(3, getProfile());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (id_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getId());
      }
      if (applied_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getApplied());
      }
      if (profile_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getProfile());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision)) {
        return super.equals(obj);
      }
      io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision other = (io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision) obj;

      if (hasId() != other.hasId()) return false;
      if (hasId()) {
        if (!getId()
            .equals(other.getId())) return false;
      }
      if (hasApplied() != other.hasApplied()) return false;
      if (hasApplied()) {
        if (!getApplied()
            .equals(other.getApplied())) return false;
      }
      if (hasProfile() != other.hasProfile()) return false;
      if (hasProfile()) {
        if (!getProfile()
            .equals(other.getProfile())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasId()) {
        hash = (37 * hash) + ID_FIELD_NUMBER;
        hash = (53 * hash) + getId().hashCode();
      }
      if (hasApplied()) {
        hash = (37 * hash) + APPLIED_FIELD_NUMBER;
        hash = (53 * hash) + getApplied().hashCode();
      }
      if (hasProfile()) {
        hash = (37 * hash) + PROFILE_FIELD_NUMBER;
        hash = (53 * hash) + getProfile().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Specifies a substantive revision made to a *Bioprint* payload. "Substantive" is defined as, any data mutation that
     * might amount to a potential outcome change when querying the resulting *Bioprint*.
     * </pre>
     *
     * Protobuf type {@code bloombox.identity.bioprint.BioprintRevision}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:bloombox.identity.bioprint.BioprintRevision)
        io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevisionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_BioprintRevision_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_BioprintRevision_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision.class, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision.Builder.class);
      }

      // Construct using io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (idBuilder_ == null) {
          id_ = null;
        } else {
          id_ = null;
          idBuilder_ = null;
        }
        if (appliedBuilder_ == null) {
          applied_ = null;
        } else {
          applied_ = null;
          appliedBuilder_ = null;
        }
        if (profileBuilder_ == null) {
          profile_ = null;
        } else {
          profile_ = null;
          profileBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_BioprintRevision_descriptor;
      }

      @java.lang.Override
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision getDefaultInstanceForType() {
        return io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision.getDefaultInstance();
      }

      @java.lang.Override
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision build() {
        io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision buildPartial() {
        io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision result = new io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision(this);
        if (idBuilder_ == null) {
          result.id_ = id_;
        } else {
          result.id_ = idBuilder_.build();
        }
        if (appliedBuilder_ == null) {
          result.applied_ = applied_;
        } else {
          result.applied_ = appliedBuilder_.build();
        }
        if (profileBuilder_ == null) {
          result.profile_ = profile_;
        } else {
          result.profile_ = profileBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision) {
          return mergeFrom((io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision other) {
        if (other == io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision.getDefaultInstance()) return this;
        if (other.hasId()) {
          mergeId(other.getId());
        }
        if (other.hasApplied()) {
          mergeApplied(other.getApplied());
        }
        if (other.hasProfile()) {
          mergeProfile(other.getProfile());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID id_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.Builder, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintIDOrBuilder> idBuilder_;
      /**
       * <pre>
       * ID that resulted after computing and applying this revision.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
       */
      public boolean hasId() {
        return idBuilder_ != null || id_ != null;
      }
      /**
       * <pre>
       * ID that resulted after computing and applying this revision.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
       */
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID getId() {
        if (idBuilder_ == null) {
          return id_ == null ? io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.getDefaultInstance() : id_;
        } else {
          return idBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * ID that resulted after computing and applying this revision.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
       */
      public Builder setId(io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID value) {
        if (idBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          id_ = value;
          onChanged();
        } else {
          idBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * ID that resulted after computing and applying this revision.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
       */
      public Builder setId(
          io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.Builder builderForValue) {
        if (idBuilder_ == null) {
          id_ = builderForValue.build();
          onChanged();
        } else {
          idBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * ID that resulted after computing and applying this revision.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
       */
      public Builder mergeId(io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID value) {
        if (idBuilder_ == null) {
          if (id_ != null) {
            id_ =
              io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.newBuilder(id_).mergeFrom(value).buildPartial();
          } else {
            id_ = value;
          }
          onChanged();
        } else {
          idBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * ID that resulted after computing and applying this revision.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
       */
      public Builder clearId() {
        if (idBuilder_ == null) {
          id_ = null;
          onChanged();
        } else {
          id_ = null;
          idBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * ID that resulted after computing and applying this revision.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
       */
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.Builder getIdBuilder() {
        
        onChanged();
        return getIdFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * ID that resulted after computing and applying this revision.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
       */
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintIDOrBuilder getIdOrBuilder() {
        if (idBuilder_ != null) {
          return idBuilder_.getMessageOrBuilder();
        } else {
          return id_ == null ?
              io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.getDefaultInstance() : id_;
        }
      }
      /**
       * <pre>
       * ID that resulted after computing and applying this revision.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.Builder, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintIDOrBuilder> 
          getIdFieldBuilder() {
        if (idBuilder_ == null) {
          idBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.Builder, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintIDOrBuilder>(
                  getId(),
                  getParentForChildren(),
                  isClean());
          id_ = null;
        }
        return idBuilder_;
      }

      private io.opencannabis.schema.temporal.TemporalInstant.Instant applied_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder> appliedBuilder_;
      /**
       * <pre>
       * Timestamp for the moment this revision was applied.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant applied = 2;</code>
       */
      public boolean hasApplied() {
        return appliedBuilder_ != null || applied_ != null;
      }
      /**
       * <pre>
       * Timestamp for the moment this revision was applied.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant applied = 2;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.Instant getApplied() {
        if (appliedBuilder_ == null) {
          return applied_ == null ? io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : applied_;
        } else {
          return appliedBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Timestamp for the moment this revision was applied.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant applied = 2;</code>
       */
      public Builder setApplied(io.opencannabis.schema.temporal.TemporalInstant.Instant value) {
        if (appliedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          applied_ = value;
          onChanged();
        } else {
          appliedBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp for the moment this revision was applied.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant applied = 2;</code>
       */
      public Builder setApplied(
          io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder builderForValue) {
        if (appliedBuilder_ == null) {
          applied_ = builderForValue.build();
          onChanged();
        } else {
          appliedBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp for the moment this revision was applied.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant applied = 2;</code>
       */
      public Builder mergeApplied(io.opencannabis.schema.temporal.TemporalInstant.Instant value) {
        if (appliedBuilder_ == null) {
          if (applied_ != null) {
            applied_ =
              io.opencannabis.schema.temporal.TemporalInstant.Instant.newBuilder(applied_).mergeFrom(value).buildPartial();
          } else {
            applied_ = value;
          }
          onChanged();
        } else {
          appliedBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp for the moment this revision was applied.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant applied = 2;</code>
       */
      public Builder clearApplied() {
        if (appliedBuilder_ == null) {
          applied_ = null;
          onChanged();
        } else {
          applied_ = null;
          appliedBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp for the moment this revision was applied.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant applied = 2;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder getAppliedBuilder() {
        
        onChanged();
        return getAppliedFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Timestamp for the moment this revision was applied.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant applied = 2;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getAppliedOrBuilder() {
        if (appliedBuilder_ != null) {
          return appliedBuilder_.getMessageOrBuilder();
        } else {
          return applied_ == null ?
              io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : applied_;
        }
      }
      /**
       * <pre>
       * Timestamp for the moment this revision was applied.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant applied = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder> 
          getAppliedFieldBuilder() {
        if (appliedBuilder_ == null) {
          appliedBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder>(
                  getApplied(),
                  getParentForChildren(),
                  isClean());
          applied_ = null;
        }
        return appliedBuilder_;
      }

      private io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload profile_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload.Builder, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayloadOrBuilder> profileBuilder_;
      /**
       * <pre>
       * Archived copy of the profile, after this revision was applied.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintPayload profile = 3;</code>
       */
      public boolean hasProfile() {
        return profileBuilder_ != null || profile_ != null;
      }
      /**
       * <pre>
       * Archived copy of the profile, after this revision was applied.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintPayload profile = 3;</code>
       */
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload getProfile() {
        if (profileBuilder_ == null) {
          return profile_ == null ? io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload.getDefaultInstance() : profile_;
        } else {
          return profileBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Archived copy of the profile, after this revision was applied.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintPayload profile = 3;</code>
       */
      public Builder setProfile(io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload value) {
        if (profileBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          profile_ = value;
          onChanged();
        } else {
          profileBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Archived copy of the profile, after this revision was applied.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintPayload profile = 3;</code>
       */
      public Builder setProfile(
          io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload.Builder builderForValue) {
        if (profileBuilder_ == null) {
          profile_ = builderForValue.build();
          onChanged();
        } else {
          profileBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Archived copy of the profile, after this revision was applied.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintPayload profile = 3;</code>
       */
      public Builder mergeProfile(io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload value) {
        if (profileBuilder_ == null) {
          if (profile_ != null) {
            profile_ =
              io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload.newBuilder(profile_).mergeFrom(value).buildPartial();
          } else {
            profile_ = value;
          }
          onChanged();
        } else {
          profileBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Archived copy of the profile, after this revision was applied.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintPayload profile = 3;</code>
       */
      public Builder clearProfile() {
        if (profileBuilder_ == null) {
          profile_ = null;
          onChanged();
        } else {
          profile_ = null;
          profileBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Archived copy of the profile, after this revision was applied.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintPayload profile = 3;</code>
       */
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload.Builder getProfileBuilder() {
        
        onChanged();
        return getProfileFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Archived copy of the profile, after this revision was applied.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintPayload profile = 3;</code>
       */
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayloadOrBuilder getProfileOrBuilder() {
        if (profileBuilder_ != null) {
          return profileBuilder_.getMessageOrBuilder();
        } else {
          return profile_ == null ?
              io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload.getDefaultInstance() : profile_;
        }
      }
      /**
       * <pre>
       * Archived copy of the profile, after this revision was applied.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintPayload profile = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload.Builder, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayloadOrBuilder> 
          getProfileFieldBuilder() {
        if (profileBuilder_ == null) {
          profileBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload.Builder, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayloadOrBuilder>(
                  getProfile(),
                  getParentForChildren(),
                  isClean());
          profile_ = null;
        }
        return profileBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:bloombox.identity.bioprint.BioprintRevision)
    }

    // @@protoc_insertion_point(class_scope:bloombox.identity.bioprint.BioprintRevision)
    private static final io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision();
    }

    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BioprintRevision>
        PARSER = new com.google.protobuf.AbstractParser<BioprintRevision>() {
      @java.lang.Override
      public BioprintRevision parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BioprintRevision(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<BioprintRevision> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BioprintRevision> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BioprintOrBuilder extends
      // @@protoc_insertion_point(interface_extends:bloombox.identity.bioprint.Bioprint)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Specifies the current and active identifier that addresses this Bioprint. This value is considered globally unique.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
     */
    boolean hasId();
    /**
     * <pre>
     * Specifies the current and active identifier that addresses this Bioprint. This value is considered globally unique.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
     */
    io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID getId();
    /**
     * <pre>
     * Specifies the current and active identifier that addresses this Bioprint. This value is considered globally unique.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
     */
    io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintIDOrBuilder getIdOrBuilder();

    /**
     * <pre>
     * Auth and crypto keychain, specifying master and recovery keys attached to this Bioprint.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.Keychain keychain = 2;</code>
     */
    boolean hasKeychain();
    /**
     * <pre>
     * Auth and crypto keychain, specifying master and recovery keys attached to this Bioprint.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.Keychain keychain = 2;</code>
     */
    io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain getKeychain();
    /**
     * <pre>
     * Auth and crypto keychain, specifying master and recovery keys attached to this Bioprint.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.Keychain keychain = 2;</code>
     */
    io.bloombox.schema.identity.bioprint.BioprintOuterClass.KeychainOrBuilder getKeychainOrBuilder();

    /**
     * <pre>
     * Bioprint profile payload, which includes the actual content of the user's private and public Bioprint components.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.BioprintPayload profile = 3;</code>
     */
    boolean hasProfile();
    /**
     * <pre>
     * Bioprint profile payload, which includes the actual content of the user's private and public Bioprint components.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.BioprintPayload profile = 3;</code>
     */
    io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload getProfile();
    /**
     * <pre>
     * Bioprint profile payload, which includes the actual content of the user's private and public Bioprint components.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.BioprintPayload profile = 3;</code>
     */
    io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayloadOrBuilder getProfileOrBuilder();

    /**
     * <pre>
     * Contains the user's verified government identification.
     * </pre>
     *
     * <code>.bloombox.identity.ID identification = 4;</code>
     */
    boolean hasIdentification();
    /**
     * <pre>
     * Contains the user's verified government identification.
     * </pre>
     *
     * <code>.bloombox.identity.ID identification = 4;</code>
     */
    io.bloombox.schema.identity.IdentityID.ID getIdentification();
    /**
     * <pre>
     * Contains the user's verified government identification.
     * </pre>
     *
     * <code>.bloombox.identity.ID identification = 4;</code>
     */
    io.bloombox.schema.identity.IdentityID.IDOrBuilder getIdentificationOrBuilder();

    /**
     * <pre>
     * Specifies the user's globally-unique profile key.
     * </pre>
     *
     * <code>.bloombox.identity.UserKey user = 5;</code>
     */
    boolean hasUser();
    /**
     * <pre>
     * Specifies the user's globally-unique profile key.
     * </pre>
     *
     * <code>.bloombox.identity.UserKey user = 5;</code>
     */
    io.bloombox.schema.identity.AppUserKey.UserKey getUser();
    /**
     * <pre>
     * Specifies the user's globally-unique profile key.
     * </pre>
     *
     * <code>.bloombox.identity.UserKey user = 5;</code>
     */
    io.bloombox.schema.identity.AppUserKey.UserKeyOrBuilder getUserOrBuilder();

    /**
     * <pre>
     * Specifies consumer memberships stored for express check-in.
     * </pre>
     *
     * <code>map&lt;string, .bloombox.identity.ConsumerMembership&gt; memberships = 6;</code>
     */
    int getMembershipsCount();
    /**
     * <pre>
     * Specifies consumer memberships stored for express check-in.
     * </pre>
     *
     * <code>map&lt;string, .bloombox.identity.ConsumerMembership&gt; memberships = 6;</code>
     */
    boolean containsMemberships(
        java.lang.String key);
    /**
     * Use {@link #getMembershipsMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, io.bloombox.schema.identity.AppUser.ConsumerMembership>
    getMemberships();
    /**
     * <pre>
     * Specifies consumer memberships stored for express check-in.
     * </pre>
     *
     * <code>map&lt;string, .bloombox.identity.ConsumerMembership&gt; memberships = 6;</code>
     */
    java.util.Map<java.lang.String, io.bloombox.schema.identity.AppUser.ConsumerMembership>
    getMembershipsMap();
    /**
     * <pre>
     * Specifies consumer memberships stored for express check-in.
     * </pre>
     *
     * <code>map&lt;string, .bloombox.identity.ConsumerMembership&gt; memberships = 6;</code>
     */

    io.bloombox.schema.identity.AppUser.ConsumerMembership getMembershipsOrDefault(
        java.lang.String key,
        io.bloombox.schema.identity.AppUser.ConsumerMembership defaultValue);
    /**
     * <pre>
     * Specifies consumer memberships stored for express check-in.
     * </pre>
     *
     * <code>map&lt;string, .bloombox.identity.ConsumerMembership&gt; memberships = 6;</code>
     */

    io.bloombox.schema.identity.AppUser.ConsumerMembership getMembershipsOrThrow(
        java.lang.String key);

    /**
     * <pre>
     * Revision history for this Bioprint, including each ID and signature.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.BioprintRevision revision = 7;</code>
     */
    java.util.List<io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision> 
        getRevisionList();
    /**
     * <pre>
     * Revision history for this Bioprint, including each ID and signature.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.BioprintRevision revision = 7;</code>
     */
    io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision getRevision(int index);
    /**
     * <pre>
     * Revision history for this Bioprint, including each ID and signature.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.BioprintRevision revision = 7;</code>
     */
    int getRevisionCount();
    /**
     * <pre>
     * Revision history for this Bioprint, including each ID and signature.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.BioprintRevision revision = 7;</code>
     */
    java.util.List<? extends io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevisionOrBuilder> 
        getRevisionOrBuilderList();
    /**
     * <pre>
     * Revision history for this Bioprint, including each ID and signature.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.BioprintRevision revision = 7;</code>
     */
    io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevisionOrBuilder getRevisionOrBuilder(
        int index);

    /**
     * <pre>
     * Indicates the precise moment this Bioprint was last mutated or updated.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant modified = 8;</code>
     */
    boolean hasModified();
    /**
     * <pre>
     * Indicates the precise moment this Bioprint was last mutated or updated.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant modified = 8;</code>
     */
    io.opencannabis.schema.temporal.TemporalInstant.Instant getModified();
    /**
     * <pre>
     * Indicates the precise moment this Bioprint was last mutated or updated.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant modified = 8;</code>
     */
    io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getModifiedOrBuilder();

    /**
     * <pre>
     * Indicates the precise moment this Bioprint was originally created.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant created = 9;</code>
     */
    boolean hasCreated();
    /**
     * <pre>
     * Indicates the precise moment this Bioprint was originally created.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant created = 9;</code>
     */
    io.opencannabis.schema.temporal.TemporalInstant.Instant getCreated();
    /**
     * <pre>
     * Indicates the precise moment this Bioprint was originally created.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant created = 9;</code>
     */
    io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getCreatedOrBuilder();
  }
  /**
   * <pre>
   * Describes the main Bioprint outer wrapping, which is encoded and placed in an encrypted container for storage. This
   * is the outermost payload in the Bioprint that is structurally defined. It is responsible for storing revision history
   * and cryptographic material, among other metadata.
   * </pre>
   *
   * Protobuf type {@code bloombox.identity.bioprint.Bioprint}
   */
  public  static final class Bioprint extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:bloombox.identity.bioprint.Bioprint)
      BioprintOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Bioprint.newBuilder() to construct.
    private Bioprint(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Bioprint() {
      revision_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Bioprint(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.Builder subBuilder = null;
              if (id_ != null) {
                subBuilder = id_.toBuilder();
              }
              id_ = input.readMessage(io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(id_);
                id_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain.Builder subBuilder = null;
              if (keychain_ != null) {
                subBuilder = keychain_.toBuilder();
              }
              keychain_ = input.readMessage(io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(keychain_);
                keychain_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload.Builder subBuilder = null;
              if (profile_ != null) {
                subBuilder = profile_.toBuilder();
              }
              profile_ = input.readMessage(io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(profile_);
                profile_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              io.bloombox.schema.identity.IdentityID.ID.Builder subBuilder = null;
              if (identification_ != null) {
                subBuilder = identification_.toBuilder();
              }
              identification_ = input.readMessage(io.bloombox.schema.identity.IdentityID.ID.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(identification_);
                identification_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              io.bloombox.schema.identity.AppUserKey.UserKey.Builder subBuilder = null;
              if (user_ != null) {
                subBuilder = user_.toBuilder();
              }
              user_ = input.readMessage(io.bloombox.schema.identity.AppUserKey.UserKey.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(user_);
                user_ = subBuilder.buildPartial();
              }

              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) != 0)) {
                memberships_ = com.google.protobuf.MapField.newMapField(
                    MembershipsDefaultEntryHolder.defaultEntry);
                mutable_bitField0_ |= 0x00000020;
              }
              com.google.protobuf.MapEntry<java.lang.String, io.bloombox.schema.identity.AppUser.ConsumerMembership>
              memberships__ = input.readMessage(
                  MembershipsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              memberships_.getMutableMap().put(
                  memberships__.getKey(), memberships__.getValue());
              break;
            }
            case 58: {
              if (!((mutable_bitField0_ & 0x00000040) != 0)) {
                revision_ = new java.util.ArrayList<io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision>();
                mutable_bitField0_ |= 0x00000040;
              }
              revision_.add(
                  input.readMessage(io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision.parser(), extensionRegistry));
              break;
            }
            case 66: {
              io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder subBuilder = null;
              if (modified_ != null) {
                subBuilder = modified_.toBuilder();
              }
              modified_ = input.readMessage(io.opencannabis.schema.temporal.TemporalInstant.Instant.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(modified_);
                modified_ = subBuilder.buildPartial();
              }

              break;
            }
            case 74: {
              io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder subBuilder = null;
              if (created_ != null) {
                subBuilder = created_.toBuilder();
              }
              created_ = input.readMessage(io.opencannabis.schema.temporal.TemporalInstant.Instant.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(created_);
                created_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000040) != 0)) {
          revision_ = java.util.Collections.unmodifiableList(revision_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_Bioprint_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    @java.lang.Override
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 6:
          return internalGetMemberships();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_Bioprint_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.bloombox.schema.identity.bioprint.BioprintOuterClass.Bioprint.class, io.bloombox.schema.identity.bioprint.BioprintOuterClass.Bioprint.Builder.class);
    }

    private int bitField0_;
    public static final int ID_FIELD_NUMBER = 1;
    private io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID id_;
    /**
     * <pre>
     * Specifies the current and active identifier that addresses this Bioprint. This value is considered globally unique.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
     */
    public boolean hasId() {
      return id_ != null;
    }
    /**
     * <pre>
     * Specifies the current and active identifier that addresses this Bioprint. This value is considered globally unique.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
     */
    public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID getId() {
      return id_ == null ? io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.getDefaultInstance() : id_;
    }
    /**
     * <pre>
     * Specifies the current and active identifier that addresses this Bioprint. This value is considered globally unique.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
     */
    public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintIDOrBuilder getIdOrBuilder() {
      return getId();
    }

    public static final int KEYCHAIN_FIELD_NUMBER = 2;
    private io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain keychain_;
    /**
     * <pre>
     * Auth and crypto keychain, specifying master and recovery keys attached to this Bioprint.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.Keychain keychain = 2;</code>
     */
    public boolean hasKeychain() {
      return keychain_ != null;
    }
    /**
     * <pre>
     * Auth and crypto keychain, specifying master and recovery keys attached to this Bioprint.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.Keychain keychain = 2;</code>
     */
    public io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain getKeychain() {
      return keychain_ == null ? io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain.getDefaultInstance() : keychain_;
    }
    /**
     * <pre>
     * Auth and crypto keychain, specifying master and recovery keys attached to this Bioprint.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.Keychain keychain = 2;</code>
     */
    public io.bloombox.schema.identity.bioprint.BioprintOuterClass.KeychainOrBuilder getKeychainOrBuilder() {
      return getKeychain();
    }

    public static final int PROFILE_FIELD_NUMBER = 3;
    private io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload profile_;
    /**
     * <pre>
     * Bioprint profile payload, which includes the actual content of the user's private and public Bioprint components.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.BioprintPayload profile = 3;</code>
     */
    public boolean hasProfile() {
      return profile_ != null;
    }
    /**
     * <pre>
     * Bioprint profile payload, which includes the actual content of the user's private and public Bioprint components.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.BioprintPayload profile = 3;</code>
     */
    public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload getProfile() {
      return profile_ == null ? io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload.getDefaultInstance() : profile_;
    }
    /**
     * <pre>
     * Bioprint profile payload, which includes the actual content of the user's private and public Bioprint components.
     * </pre>
     *
     * <code>.bloombox.identity.bioprint.BioprintPayload profile = 3;</code>
     */
    public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayloadOrBuilder getProfileOrBuilder() {
      return getProfile();
    }

    public static final int IDENTIFICATION_FIELD_NUMBER = 4;
    private io.bloombox.schema.identity.IdentityID.ID identification_;
    /**
     * <pre>
     * Contains the user's verified government identification.
     * </pre>
     *
     * <code>.bloombox.identity.ID identification = 4;</code>
     */
    public boolean hasIdentification() {
      return identification_ != null;
    }
    /**
     * <pre>
     * Contains the user's verified government identification.
     * </pre>
     *
     * <code>.bloombox.identity.ID identification = 4;</code>
     */
    public io.bloombox.schema.identity.IdentityID.ID getIdentification() {
      return identification_ == null ? io.bloombox.schema.identity.IdentityID.ID.getDefaultInstance() : identification_;
    }
    /**
     * <pre>
     * Contains the user's verified government identification.
     * </pre>
     *
     * <code>.bloombox.identity.ID identification = 4;</code>
     */
    public io.bloombox.schema.identity.IdentityID.IDOrBuilder getIdentificationOrBuilder() {
      return getIdentification();
    }

    public static final int USER_FIELD_NUMBER = 5;
    private io.bloombox.schema.identity.AppUserKey.UserKey user_;
    /**
     * <pre>
     * Specifies the user's globally-unique profile key.
     * </pre>
     *
     * <code>.bloombox.identity.UserKey user = 5;</code>
     */
    public boolean hasUser() {
      return user_ != null;
    }
    /**
     * <pre>
     * Specifies the user's globally-unique profile key.
     * </pre>
     *
     * <code>.bloombox.identity.UserKey user = 5;</code>
     */
    public io.bloombox.schema.identity.AppUserKey.UserKey getUser() {
      return user_ == null ? io.bloombox.schema.identity.AppUserKey.UserKey.getDefaultInstance() : user_;
    }
    /**
     * <pre>
     * Specifies the user's globally-unique profile key.
     * </pre>
     *
     * <code>.bloombox.identity.UserKey user = 5;</code>
     */
    public io.bloombox.schema.identity.AppUserKey.UserKeyOrBuilder getUserOrBuilder() {
      return getUser();
    }

    public static final int MEMBERSHIPS_FIELD_NUMBER = 6;
    private static final class MembershipsDefaultEntryHolder {
      static final com.google.protobuf.MapEntry<
          java.lang.String, io.bloombox.schema.identity.AppUser.ConsumerMembership> defaultEntry =
              com.google.protobuf.MapEntry
              .<java.lang.String, io.bloombox.schema.identity.AppUser.ConsumerMembership>newDefaultInstance(
                  io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_Bioprint_MembershipsEntry_descriptor, 
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.MESSAGE,
                  io.bloombox.schema.identity.AppUser.ConsumerMembership.getDefaultInstance());
    }
    private com.google.protobuf.MapField<
        java.lang.String, io.bloombox.schema.identity.AppUser.ConsumerMembership> memberships_;
    private com.google.protobuf.MapField<java.lang.String, io.bloombox.schema.identity.AppUser.ConsumerMembership>
    internalGetMemberships() {
      if (memberships_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            MembershipsDefaultEntryHolder.defaultEntry);
      }
      return memberships_;
    }

    public int getMembershipsCount() {
      return internalGetMemberships().getMap().size();
    }
    /**
     * <pre>
     * Specifies consumer memberships stored for express check-in.
     * </pre>
     *
     * <code>map&lt;string, .bloombox.identity.ConsumerMembership&gt; memberships = 6;</code>
     */

    public boolean containsMemberships(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetMemberships().getMap().containsKey(key);
    }
    /**
     * Use {@link #getMembershipsMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, io.bloombox.schema.identity.AppUser.ConsumerMembership> getMemberships() {
      return getMembershipsMap();
    }
    /**
     * <pre>
     * Specifies consumer memberships stored for express check-in.
     * </pre>
     *
     * <code>map&lt;string, .bloombox.identity.ConsumerMembership&gt; memberships = 6;</code>
     */

    public java.util.Map<java.lang.String, io.bloombox.schema.identity.AppUser.ConsumerMembership> getMembershipsMap() {
      return internalGetMemberships().getMap();
    }
    /**
     * <pre>
     * Specifies consumer memberships stored for express check-in.
     * </pre>
     *
     * <code>map&lt;string, .bloombox.identity.ConsumerMembership&gt; memberships = 6;</code>
     */

    public io.bloombox.schema.identity.AppUser.ConsumerMembership getMembershipsOrDefault(
        java.lang.String key,
        io.bloombox.schema.identity.AppUser.ConsumerMembership defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, io.bloombox.schema.identity.AppUser.ConsumerMembership> map =
          internalGetMemberships().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Specifies consumer memberships stored for express check-in.
     * </pre>
     *
     * <code>map&lt;string, .bloombox.identity.ConsumerMembership&gt; memberships = 6;</code>
     */

    public io.bloombox.schema.identity.AppUser.ConsumerMembership getMembershipsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, io.bloombox.schema.identity.AppUser.ConsumerMembership> map =
          internalGetMemberships().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }

    public static final int REVISION_FIELD_NUMBER = 7;
    private java.util.List<io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision> revision_;
    /**
     * <pre>
     * Revision history for this Bioprint, including each ID and signature.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.BioprintRevision revision = 7;</code>
     */
    public java.util.List<io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision> getRevisionList() {
      return revision_;
    }
    /**
     * <pre>
     * Revision history for this Bioprint, including each ID and signature.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.BioprintRevision revision = 7;</code>
     */
    public java.util.List<? extends io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevisionOrBuilder> 
        getRevisionOrBuilderList() {
      return revision_;
    }
    /**
     * <pre>
     * Revision history for this Bioprint, including each ID and signature.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.BioprintRevision revision = 7;</code>
     */
    public int getRevisionCount() {
      return revision_.size();
    }
    /**
     * <pre>
     * Revision history for this Bioprint, including each ID and signature.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.BioprintRevision revision = 7;</code>
     */
    public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision getRevision(int index) {
      return revision_.get(index);
    }
    /**
     * <pre>
     * Revision history for this Bioprint, including each ID and signature.
     * </pre>
     *
     * <code>repeated .bloombox.identity.bioprint.BioprintRevision revision = 7;</code>
     */
    public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevisionOrBuilder getRevisionOrBuilder(
        int index) {
      return revision_.get(index);
    }

    public static final int MODIFIED_FIELD_NUMBER = 8;
    private io.opencannabis.schema.temporal.TemporalInstant.Instant modified_;
    /**
     * <pre>
     * Indicates the precise moment this Bioprint was last mutated or updated.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant modified = 8;</code>
     */
    public boolean hasModified() {
      return modified_ != null;
    }
    /**
     * <pre>
     * Indicates the precise moment this Bioprint was last mutated or updated.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant modified = 8;</code>
     */
    public io.opencannabis.schema.temporal.TemporalInstant.Instant getModified() {
      return modified_ == null ? io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : modified_;
    }
    /**
     * <pre>
     * Indicates the precise moment this Bioprint was last mutated or updated.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant modified = 8;</code>
     */
    public io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getModifiedOrBuilder() {
      return getModified();
    }

    public static final int CREATED_FIELD_NUMBER = 9;
    private io.opencannabis.schema.temporal.TemporalInstant.Instant created_;
    /**
     * <pre>
     * Indicates the precise moment this Bioprint was originally created.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant created = 9;</code>
     */
    public boolean hasCreated() {
      return created_ != null;
    }
    /**
     * <pre>
     * Indicates the precise moment this Bioprint was originally created.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant created = 9;</code>
     */
    public io.opencannabis.schema.temporal.TemporalInstant.Instant getCreated() {
      return created_ == null ? io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : created_;
    }
    /**
     * <pre>
     * Indicates the precise moment this Bioprint was originally created.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant created = 9;</code>
     */
    public io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getCreatedOrBuilder() {
      return getCreated();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (id_ != null) {
        output.writeMessage(1, getId());
      }
      if (keychain_ != null) {
        output.writeMessage(2, getKeychain());
      }
      if (profile_ != null) {
        output.writeMessage(3, getProfile());
      }
      if (identification_ != null) {
        output.writeMessage(4, getIdentification());
      }
      if (user_ != null) {
        output.writeMessage(5, getUser());
      }
      com.google.protobuf.GeneratedMessageV3
        .serializeStringMapTo(
          output,
          internalGetMemberships(),
          MembershipsDefaultEntryHolder.defaultEntry,
          6);
      for (int i = 0; i < revision_.size(); i++) {
        output.writeMessage(7, revision_.get(i));
      }
      if (modified_ != null) {
        output.writeMessage(8, getModified());
      }
      if (created_ != null) {
        output.writeMessage(9, getCreated());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (id_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getId());
      }
      if (keychain_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getKeychain());
      }
      if (profile_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getProfile());
      }
      if (identification_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getIdentification());
      }
      if (user_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getUser());
      }
      for (java.util.Map.Entry<java.lang.String, io.bloombox.schema.identity.AppUser.ConsumerMembership> entry
           : internalGetMemberships().getMap().entrySet()) {
        com.google.protobuf.MapEntry<java.lang.String, io.bloombox.schema.identity.AppUser.ConsumerMembership>
        memberships__ = MembershipsDefaultEntryHolder.defaultEntry.newBuilderForType()
            .setKey(entry.getKey())
            .setValue(entry.getValue())
            .build();
        size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(6, memberships__);
      }
      for (int i = 0; i < revision_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, revision_.get(i));
      }
      if (modified_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getModified());
      }
      if (created_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, getCreated());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.bloombox.schema.identity.bioprint.BioprintOuterClass.Bioprint)) {
        return super.equals(obj);
      }
      io.bloombox.schema.identity.bioprint.BioprintOuterClass.Bioprint other = (io.bloombox.schema.identity.bioprint.BioprintOuterClass.Bioprint) obj;

      if (hasId() != other.hasId()) return false;
      if (hasId()) {
        if (!getId()
            .equals(other.getId())) return false;
      }
      if (hasKeychain() != other.hasKeychain()) return false;
      if (hasKeychain()) {
        if (!getKeychain()
            .equals(other.getKeychain())) return false;
      }
      if (hasProfile() != other.hasProfile()) return false;
      if (hasProfile()) {
        if (!getProfile()
            .equals(other.getProfile())) return false;
      }
      if (hasIdentification() != other.hasIdentification()) return false;
      if (hasIdentification()) {
        if (!getIdentification()
            .equals(other.getIdentification())) return false;
      }
      if (hasUser() != other.hasUser()) return false;
      if (hasUser()) {
        if (!getUser()
            .equals(other.getUser())) return false;
      }
      if (!internalGetMemberships().equals(
          other.internalGetMemberships())) return false;
      if (!getRevisionList()
          .equals(other.getRevisionList())) return false;
      if (hasModified() != other.hasModified()) return false;
      if (hasModified()) {
        if (!getModified()
            .equals(other.getModified())) return false;
      }
      if (hasCreated() != other.hasCreated()) return false;
      if (hasCreated()) {
        if (!getCreated()
            .equals(other.getCreated())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasId()) {
        hash = (37 * hash) + ID_FIELD_NUMBER;
        hash = (53 * hash) + getId().hashCode();
      }
      if (hasKeychain()) {
        hash = (37 * hash) + KEYCHAIN_FIELD_NUMBER;
        hash = (53 * hash) + getKeychain().hashCode();
      }
      if (hasProfile()) {
        hash = (37 * hash) + PROFILE_FIELD_NUMBER;
        hash = (53 * hash) + getProfile().hashCode();
      }
      if (hasIdentification()) {
        hash = (37 * hash) + IDENTIFICATION_FIELD_NUMBER;
        hash = (53 * hash) + getIdentification().hashCode();
      }
      if (hasUser()) {
        hash = (37 * hash) + USER_FIELD_NUMBER;
        hash = (53 * hash) + getUser().hashCode();
      }
      if (!internalGetMemberships().getMap().isEmpty()) {
        hash = (37 * hash) + MEMBERSHIPS_FIELD_NUMBER;
        hash = (53 * hash) + internalGetMemberships().hashCode();
      }
      if (getRevisionCount() > 0) {
        hash = (37 * hash) + REVISION_FIELD_NUMBER;
        hash = (53 * hash) + getRevisionList().hashCode();
      }
      if (hasModified()) {
        hash = (37 * hash) + MODIFIED_FIELD_NUMBER;
        hash = (53 * hash) + getModified().hashCode();
      }
      if (hasCreated()) {
        hash = (37 * hash) + CREATED_FIELD_NUMBER;
        hash = (53 * hash) + getCreated().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.Bioprint parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.Bioprint parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.Bioprint parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.Bioprint parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.Bioprint parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.Bioprint parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.Bioprint parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.Bioprint parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.Bioprint parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.Bioprint parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.Bioprint parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.Bioprint parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.bloombox.schema.identity.bioprint.BioprintOuterClass.Bioprint prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Describes the main Bioprint outer wrapping, which is encoded and placed in an encrypted container for storage. This
     * is the outermost payload in the Bioprint that is structurally defined. It is responsible for storing revision history
     * and cryptographic material, among other metadata.
     * </pre>
     *
     * Protobuf type {@code bloombox.identity.bioprint.Bioprint}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:bloombox.identity.bioprint.Bioprint)
        io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_Bioprint_descriptor;
      }

      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMapField(
          int number) {
        switch (number) {
          case 6:
            return internalGetMemberships();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @SuppressWarnings({"rawtypes"})
      protected com.google.protobuf.MapField internalGetMutableMapField(
          int number) {
        switch (number) {
          case 6:
            return internalGetMutableMemberships();
          default:
            throw new RuntimeException(
                "Invalid map field number: " + number);
        }
      }
      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_Bioprint_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.bloombox.schema.identity.bioprint.BioprintOuterClass.Bioprint.class, io.bloombox.schema.identity.bioprint.BioprintOuterClass.Bioprint.Builder.class);
      }

      // Construct using io.bloombox.schema.identity.bioprint.BioprintOuterClass.Bioprint.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getRevisionFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (idBuilder_ == null) {
          id_ = null;
        } else {
          id_ = null;
          idBuilder_ = null;
        }
        if (keychainBuilder_ == null) {
          keychain_ = null;
        } else {
          keychain_ = null;
          keychainBuilder_ = null;
        }
        if (profileBuilder_ == null) {
          profile_ = null;
        } else {
          profile_ = null;
          profileBuilder_ = null;
        }
        if (identificationBuilder_ == null) {
          identification_ = null;
        } else {
          identification_ = null;
          identificationBuilder_ = null;
        }
        if (userBuilder_ == null) {
          user_ = null;
        } else {
          user_ = null;
          userBuilder_ = null;
        }
        internalGetMutableMemberships().clear();
        if (revisionBuilder_ == null) {
          revision_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
        } else {
          revisionBuilder_.clear();
        }
        if (modifiedBuilder_ == null) {
          modified_ = null;
        } else {
          modified_ = null;
          modifiedBuilder_ = null;
        }
        if (createdBuilder_ == null) {
          created_ = null;
        } else {
          created_ = null;
          createdBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.bloombox.schema.identity.bioprint.BioprintOuterClass.internal_static_bloombox_identity_bioprint_Bioprint_descriptor;
      }

      @java.lang.Override
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.Bioprint getDefaultInstanceForType() {
        return io.bloombox.schema.identity.bioprint.BioprintOuterClass.Bioprint.getDefaultInstance();
      }

      @java.lang.Override
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.Bioprint build() {
        io.bloombox.schema.identity.bioprint.BioprintOuterClass.Bioprint result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.Bioprint buildPartial() {
        io.bloombox.schema.identity.bioprint.BioprintOuterClass.Bioprint result = new io.bloombox.schema.identity.bioprint.BioprintOuterClass.Bioprint(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (idBuilder_ == null) {
          result.id_ = id_;
        } else {
          result.id_ = idBuilder_.build();
        }
        if (keychainBuilder_ == null) {
          result.keychain_ = keychain_;
        } else {
          result.keychain_ = keychainBuilder_.build();
        }
        if (profileBuilder_ == null) {
          result.profile_ = profile_;
        } else {
          result.profile_ = profileBuilder_.build();
        }
        if (identificationBuilder_ == null) {
          result.identification_ = identification_;
        } else {
          result.identification_ = identificationBuilder_.build();
        }
        if (userBuilder_ == null) {
          result.user_ = user_;
        } else {
          result.user_ = userBuilder_.build();
        }
        result.memberships_ = internalGetMemberships();
        result.memberships_.makeImmutable();
        if (revisionBuilder_ == null) {
          if (((bitField0_ & 0x00000040) != 0)) {
            revision_ = java.util.Collections.unmodifiableList(revision_);
            bitField0_ = (bitField0_ & ~0x00000040);
          }
          result.revision_ = revision_;
        } else {
          result.revision_ = revisionBuilder_.build();
        }
        if (modifiedBuilder_ == null) {
          result.modified_ = modified_;
        } else {
          result.modified_ = modifiedBuilder_.build();
        }
        if (createdBuilder_ == null) {
          result.created_ = created_;
        } else {
          result.created_ = createdBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.bloombox.schema.identity.bioprint.BioprintOuterClass.Bioprint) {
          return mergeFrom((io.bloombox.schema.identity.bioprint.BioprintOuterClass.Bioprint)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.bloombox.schema.identity.bioprint.BioprintOuterClass.Bioprint other) {
        if (other == io.bloombox.schema.identity.bioprint.BioprintOuterClass.Bioprint.getDefaultInstance()) return this;
        if (other.hasId()) {
          mergeId(other.getId());
        }
        if (other.hasKeychain()) {
          mergeKeychain(other.getKeychain());
        }
        if (other.hasProfile()) {
          mergeProfile(other.getProfile());
        }
        if (other.hasIdentification()) {
          mergeIdentification(other.getIdentification());
        }
        if (other.hasUser()) {
          mergeUser(other.getUser());
        }
        internalGetMutableMemberships().mergeFrom(
            other.internalGetMemberships());
        if (revisionBuilder_ == null) {
          if (!other.revision_.isEmpty()) {
            if (revision_.isEmpty()) {
              revision_ = other.revision_;
              bitField0_ = (bitField0_ & ~0x00000040);
            } else {
              ensureRevisionIsMutable();
              revision_.addAll(other.revision_);
            }
            onChanged();
          }
        } else {
          if (!other.revision_.isEmpty()) {
            if (revisionBuilder_.isEmpty()) {
              revisionBuilder_.dispose();
              revisionBuilder_ = null;
              revision_ = other.revision_;
              bitField0_ = (bitField0_ & ~0x00000040);
              revisionBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getRevisionFieldBuilder() : null;
            } else {
              revisionBuilder_.addAllMessages(other.revision_);
            }
          }
        }
        if (other.hasModified()) {
          mergeModified(other.getModified());
        }
        if (other.hasCreated()) {
          mergeCreated(other.getCreated());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.bloombox.schema.identity.bioprint.BioprintOuterClass.Bioprint parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.bloombox.schema.identity.bioprint.BioprintOuterClass.Bioprint) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID id_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.Builder, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintIDOrBuilder> idBuilder_;
      /**
       * <pre>
       * Specifies the current and active identifier that addresses this Bioprint. This value is considered globally unique.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
       */
      public boolean hasId() {
        return idBuilder_ != null || id_ != null;
      }
      /**
       * <pre>
       * Specifies the current and active identifier that addresses this Bioprint. This value is considered globally unique.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
       */
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID getId() {
        if (idBuilder_ == null) {
          return id_ == null ? io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.getDefaultInstance() : id_;
        } else {
          return idBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Specifies the current and active identifier that addresses this Bioprint. This value is considered globally unique.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
       */
      public Builder setId(io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID value) {
        if (idBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          id_ = value;
          onChanged();
        } else {
          idBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the current and active identifier that addresses this Bioprint. This value is considered globally unique.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
       */
      public Builder setId(
          io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.Builder builderForValue) {
        if (idBuilder_ == null) {
          id_ = builderForValue.build();
          onChanged();
        } else {
          idBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the current and active identifier that addresses this Bioprint. This value is considered globally unique.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
       */
      public Builder mergeId(io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID value) {
        if (idBuilder_ == null) {
          if (id_ != null) {
            id_ =
              io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.newBuilder(id_).mergeFrom(value).buildPartial();
          } else {
            id_ = value;
          }
          onChanged();
        } else {
          idBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the current and active identifier that addresses this Bioprint. This value is considered globally unique.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
       */
      public Builder clearId() {
        if (idBuilder_ == null) {
          id_ = null;
          onChanged();
        } else {
          id_ = null;
          idBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the current and active identifier that addresses this Bioprint. This value is considered globally unique.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
       */
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.Builder getIdBuilder() {
        
        onChanged();
        return getIdFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Specifies the current and active identifier that addresses this Bioprint. This value is considered globally unique.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
       */
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintIDOrBuilder getIdOrBuilder() {
        if (idBuilder_ != null) {
          return idBuilder_.getMessageOrBuilder();
        } else {
          return id_ == null ?
              io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.getDefaultInstance() : id_;
        }
      }
      /**
       * <pre>
       * Specifies the current and active identifier that addresses this Bioprint. This value is considered globally unique.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintID id = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.Builder, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintIDOrBuilder> 
          getIdFieldBuilder() {
        if (idBuilder_ == null) {
          idBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintID.Builder, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintIDOrBuilder>(
                  getId(),
                  getParentForChildren(),
                  isClean());
          id_ = null;
        }
        return idBuilder_;
      }

      private io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain keychain_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain, io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain.Builder, io.bloombox.schema.identity.bioprint.BioprintOuterClass.KeychainOrBuilder> keychainBuilder_;
      /**
       * <pre>
       * Auth and crypto keychain, specifying master and recovery keys attached to this Bioprint.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.Keychain keychain = 2;</code>
       */
      public boolean hasKeychain() {
        return keychainBuilder_ != null || keychain_ != null;
      }
      /**
       * <pre>
       * Auth and crypto keychain, specifying master and recovery keys attached to this Bioprint.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.Keychain keychain = 2;</code>
       */
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain getKeychain() {
        if (keychainBuilder_ == null) {
          return keychain_ == null ? io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain.getDefaultInstance() : keychain_;
        } else {
          return keychainBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Auth and crypto keychain, specifying master and recovery keys attached to this Bioprint.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.Keychain keychain = 2;</code>
       */
      public Builder setKeychain(io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain value) {
        if (keychainBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          keychain_ = value;
          onChanged();
        } else {
          keychainBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Auth and crypto keychain, specifying master and recovery keys attached to this Bioprint.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.Keychain keychain = 2;</code>
       */
      public Builder setKeychain(
          io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain.Builder builderForValue) {
        if (keychainBuilder_ == null) {
          keychain_ = builderForValue.build();
          onChanged();
        } else {
          keychainBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Auth and crypto keychain, specifying master and recovery keys attached to this Bioprint.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.Keychain keychain = 2;</code>
       */
      public Builder mergeKeychain(io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain value) {
        if (keychainBuilder_ == null) {
          if (keychain_ != null) {
            keychain_ =
              io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain.newBuilder(keychain_).mergeFrom(value).buildPartial();
          } else {
            keychain_ = value;
          }
          onChanged();
        } else {
          keychainBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Auth and crypto keychain, specifying master and recovery keys attached to this Bioprint.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.Keychain keychain = 2;</code>
       */
      public Builder clearKeychain() {
        if (keychainBuilder_ == null) {
          keychain_ = null;
          onChanged();
        } else {
          keychain_ = null;
          keychainBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Auth and crypto keychain, specifying master and recovery keys attached to this Bioprint.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.Keychain keychain = 2;</code>
       */
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain.Builder getKeychainBuilder() {
        
        onChanged();
        return getKeychainFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Auth and crypto keychain, specifying master and recovery keys attached to this Bioprint.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.Keychain keychain = 2;</code>
       */
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.KeychainOrBuilder getKeychainOrBuilder() {
        if (keychainBuilder_ != null) {
          return keychainBuilder_.getMessageOrBuilder();
        } else {
          return keychain_ == null ?
              io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain.getDefaultInstance() : keychain_;
        }
      }
      /**
       * <pre>
       * Auth and crypto keychain, specifying master and recovery keys attached to this Bioprint.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.Keychain keychain = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain, io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain.Builder, io.bloombox.schema.identity.bioprint.BioprintOuterClass.KeychainOrBuilder> 
          getKeychainFieldBuilder() {
        if (keychainBuilder_ == null) {
          keychainBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain, io.bloombox.schema.identity.bioprint.BioprintOuterClass.Keychain.Builder, io.bloombox.schema.identity.bioprint.BioprintOuterClass.KeychainOrBuilder>(
                  getKeychain(),
                  getParentForChildren(),
                  isClean());
          keychain_ = null;
        }
        return keychainBuilder_;
      }

      private io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload profile_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload.Builder, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayloadOrBuilder> profileBuilder_;
      /**
       * <pre>
       * Bioprint profile payload, which includes the actual content of the user's private and public Bioprint components.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintPayload profile = 3;</code>
       */
      public boolean hasProfile() {
        return profileBuilder_ != null || profile_ != null;
      }
      /**
       * <pre>
       * Bioprint profile payload, which includes the actual content of the user's private and public Bioprint components.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintPayload profile = 3;</code>
       */
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload getProfile() {
        if (profileBuilder_ == null) {
          return profile_ == null ? io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload.getDefaultInstance() : profile_;
        } else {
          return profileBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Bioprint profile payload, which includes the actual content of the user's private and public Bioprint components.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintPayload profile = 3;</code>
       */
      public Builder setProfile(io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload value) {
        if (profileBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          profile_ = value;
          onChanged();
        } else {
          profileBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Bioprint profile payload, which includes the actual content of the user's private and public Bioprint components.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintPayload profile = 3;</code>
       */
      public Builder setProfile(
          io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload.Builder builderForValue) {
        if (profileBuilder_ == null) {
          profile_ = builderForValue.build();
          onChanged();
        } else {
          profileBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Bioprint profile payload, which includes the actual content of the user's private and public Bioprint components.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintPayload profile = 3;</code>
       */
      public Builder mergeProfile(io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload value) {
        if (profileBuilder_ == null) {
          if (profile_ != null) {
            profile_ =
              io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload.newBuilder(profile_).mergeFrom(value).buildPartial();
          } else {
            profile_ = value;
          }
          onChanged();
        } else {
          profileBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Bioprint profile payload, which includes the actual content of the user's private and public Bioprint components.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintPayload profile = 3;</code>
       */
      public Builder clearProfile() {
        if (profileBuilder_ == null) {
          profile_ = null;
          onChanged();
        } else {
          profile_ = null;
          profileBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Bioprint profile payload, which includes the actual content of the user's private and public Bioprint components.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintPayload profile = 3;</code>
       */
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload.Builder getProfileBuilder() {
        
        onChanged();
        return getProfileFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Bioprint profile payload, which includes the actual content of the user's private and public Bioprint components.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintPayload profile = 3;</code>
       */
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayloadOrBuilder getProfileOrBuilder() {
        if (profileBuilder_ != null) {
          return profileBuilder_.getMessageOrBuilder();
        } else {
          return profile_ == null ?
              io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload.getDefaultInstance() : profile_;
        }
      }
      /**
       * <pre>
       * Bioprint profile payload, which includes the actual content of the user's private and public Bioprint components.
       * </pre>
       *
       * <code>.bloombox.identity.bioprint.BioprintPayload profile = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload.Builder, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayloadOrBuilder> 
          getProfileFieldBuilder() {
        if (profileBuilder_ == null) {
          profileBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayload.Builder, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintPayloadOrBuilder>(
                  getProfile(),
                  getParentForChildren(),
                  isClean());
          profile_ = null;
        }
        return profileBuilder_;
      }

      private io.bloombox.schema.identity.IdentityID.ID identification_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.identity.IdentityID.ID, io.bloombox.schema.identity.IdentityID.ID.Builder, io.bloombox.schema.identity.IdentityID.IDOrBuilder> identificationBuilder_;
      /**
       * <pre>
       * Contains the user's verified government identification.
       * </pre>
       *
       * <code>.bloombox.identity.ID identification = 4;</code>
       */
      public boolean hasIdentification() {
        return identificationBuilder_ != null || identification_ != null;
      }
      /**
       * <pre>
       * Contains the user's verified government identification.
       * </pre>
       *
       * <code>.bloombox.identity.ID identification = 4;</code>
       */
      public io.bloombox.schema.identity.IdentityID.ID getIdentification() {
        if (identificationBuilder_ == null) {
          return identification_ == null ? io.bloombox.schema.identity.IdentityID.ID.getDefaultInstance() : identification_;
        } else {
          return identificationBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Contains the user's verified government identification.
       * </pre>
       *
       * <code>.bloombox.identity.ID identification = 4;</code>
       */
      public Builder setIdentification(io.bloombox.schema.identity.IdentityID.ID value) {
        if (identificationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          identification_ = value;
          onChanged();
        } else {
          identificationBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Contains the user's verified government identification.
       * </pre>
       *
       * <code>.bloombox.identity.ID identification = 4;</code>
       */
      public Builder setIdentification(
          io.bloombox.schema.identity.IdentityID.ID.Builder builderForValue) {
        if (identificationBuilder_ == null) {
          identification_ = builderForValue.build();
          onChanged();
        } else {
          identificationBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Contains the user's verified government identification.
       * </pre>
       *
       * <code>.bloombox.identity.ID identification = 4;</code>
       */
      public Builder mergeIdentification(io.bloombox.schema.identity.IdentityID.ID value) {
        if (identificationBuilder_ == null) {
          if (identification_ != null) {
            identification_ =
              io.bloombox.schema.identity.IdentityID.ID.newBuilder(identification_).mergeFrom(value).buildPartial();
          } else {
            identification_ = value;
          }
          onChanged();
        } else {
          identificationBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Contains the user's verified government identification.
       * </pre>
       *
       * <code>.bloombox.identity.ID identification = 4;</code>
       */
      public Builder clearIdentification() {
        if (identificationBuilder_ == null) {
          identification_ = null;
          onChanged();
        } else {
          identification_ = null;
          identificationBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Contains the user's verified government identification.
       * </pre>
       *
       * <code>.bloombox.identity.ID identification = 4;</code>
       */
      public io.bloombox.schema.identity.IdentityID.ID.Builder getIdentificationBuilder() {
        
        onChanged();
        return getIdentificationFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Contains the user's verified government identification.
       * </pre>
       *
       * <code>.bloombox.identity.ID identification = 4;</code>
       */
      public io.bloombox.schema.identity.IdentityID.IDOrBuilder getIdentificationOrBuilder() {
        if (identificationBuilder_ != null) {
          return identificationBuilder_.getMessageOrBuilder();
        } else {
          return identification_ == null ?
              io.bloombox.schema.identity.IdentityID.ID.getDefaultInstance() : identification_;
        }
      }
      /**
       * <pre>
       * Contains the user's verified government identification.
       * </pre>
       *
       * <code>.bloombox.identity.ID identification = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.identity.IdentityID.ID, io.bloombox.schema.identity.IdentityID.ID.Builder, io.bloombox.schema.identity.IdentityID.IDOrBuilder> 
          getIdentificationFieldBuilder() {
        if (identificationBuilder_ == null) {
          identificationBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.bloombox.schema.identity.IdentityID.ID, io.bloombox.schema.identity.IdentityID.ID.Builder, io.bloombox.schema.identity.IdentityID.IDOrBuilder>(
                  getIdentification(),
                  getParentForChildren(),
                  isClean());
          identification_ = null;
        }
        return identificationBuilder_;
      }

      private io.bloombox.schema.identity.AppUserKey.UserKey user_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.identity.AppUserKey.UserKey, io.bloombox.schema.identity.AppUserKey.UserKey.Builder, io.bloombox.schema.identity.AppUserKey.UserKeyOrBuilder> userBuilder_;
      /**
       * <pre>
       * Specifies the user's globally-unique profile key.
       * </pre>
       *
       * <code>.bloombox.identity.UserKey user = 5;</code>
       */
      public boolean hasUser() {
        return userBuilder_ != null || user_ != null;
      }
      /**
       * <pre>
       * Specifies the user's globally-unique profile key.
       * </pre>
       *
       * <code>.bloombox.identity.UserKey user = 5;</code>
       */
      public io.bloombox.schema.identity.AppUserKey.UserKey getUser() {
        if (userBuilder_ == null) {
          return user_ == null ? io.bloombox.schema.identity.AppUserKey.UserKey.getDefaultInstance() : user_;
        } else {
          return userBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Specifies the user's globally-unique profile key.
       * </pre>
       *
       * <code>.bloombox.identity.UserKey user = 5;</code>
       */
      public Builder setUser(io.bloombox.schema.identity.AppUserKey.UserKey value) {
        if (userBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          user_ = value;
          onChanged();
        } else {
          userBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the user's globally-unique profile key.
       * </pre>
       *
       * <code>.bloombox.identity.UserKey user = 5;</code>
       */
      public Builder setUser(
          io.bloombox.schema.identity.AppUserKey.UserKey.Builder builderForValue) {
        if (userBuilder_ == null) {
          user_ = builderForValue.build();
          onChanged();
        } else {
          userBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the user's globally-unique profile key.
       * </pre>
       *
       * <code>.bloombox.identity.UserKey user = 5;</code>
       */
      public Builder mergeUser(io.bloombox.schema.identity.AppUserKey.UserKey value) {
        if (userBuilder_ == null) {
          if (user_ != null) {
            user_ =
              io.bloombox.schema.identity.AppUserKey.UserKey.newBuilder(user_).mergeFrom(value).buildPartial();
          } else {
            user_ = value;
          }
          onChanged();
        } else {
          userBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the user's globally-unique profile key.
       * </pre>
       *
       * <code>.bloombox.identity.UserKey user = 5;</code>
       */
      public Builder clearUser() {
        if (userBuilder_ == null) {
          user_ = null;
          onChanged();
        } else {
          user_ = null;
          userBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the user's globally-unique profile key.
       * </pre>
       *
       * <code>.bloombox.identity.UserKey user = 5;</code>
       */
      public io.bloombox.schema.identity.AppUserKey.UserKey.Builder getUserBuilder() {
        
        onChanged();
        return getUserFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Specifies the user's globally-unique profile key.
       * </pre>
       *
       * <code>.bloombox.identity.UserKey user = 5;</code>
       */
      public io.bloombox.schema.identity.AppUserKey.UserKeyOrBuilder getUserOrBuilder() {
        if (userBuilder_ != null) {
          return userBuilder_.getMessageOrBuilder();
        } else {
          return user_ == null ?
              io.bloombox.schema.identity.AppUserKey.UserKey.getDefaultInstance() : user_;
        }
      }
      /**
       * <pre>
       * Specifies the user's globally-unique profile key.
       * </pre>
       *
       * <code>.bloombox.identity.UserKey user = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.identity.AppUserKey.UserKey, io.bloombox.schema.identity.AppUserKey.UserKey.Builder, io.bloombox.schema.identity.AppUserKey.UserKeyOrBuilder> 
          getUserFieldBuilder() {
        if (userBuilder_ == null) {
          userBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.bloombox.schema.identity.AppUserKey.UserKey, io.bloombox.schema.identity.AppUserKey.UserKey.Builder, io.bloombox.schema.identity.AppUserKey.UserKeyOrBuilder>(
                  getUser(),
                  getParentForChildren(),
                  isClean());
          user_ = null;
        }
        return userBuilder_;
      }

      private com.google.protobuf.MapField<
          java.lang.String, io.bloombox.schema.identity.AppUser.ConsumerMembership> memberships_;
      private com.google.protobuf.MapField<java.lang.String, io.bloombox.schema.identity.AppUser.ConsumerMembership>
      internalGetMemberships() {
        if (memberships_ == null) {
          return com.google.protobuf.MapField.emptyMapField(
              MembershipsDefaultEntryHolder.defaultEntry);
        }
        return memberships_;
      }
      private com.google.protobuf.MapField<java.lang.String, io.bloombox.schema.identity.AppUser.ConsumerMembership>
      internalGetMutableMemberships() {
        onChanged();;
        if (memberships_ == null) {
          memberships_ = com.google.protobuf.MapField.newMapField(
              MembershipsDefaultEntryHolder.defaultEntry);
        }
        if (!memberships_.isMutable()) {
          memberships_ = memberships_.copy();
        }
        return memberships_;
      }

      public int getMembershipsCount() {
        return internalGetMemberships().getMap().size();
      }
      /**
       * <pre>
       * Specifies consumer memberships stored for express check-in.
       * </pre>
       *
       * <code>map&lt;string, .bloombox.identity.ConsumerMembership&gt; memberships = 6;</code>
       */

      public boolean containsMemberships(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return internalGetMemberships().getMap().containsKey(key);
      }
      /**
       * Use {@link #getMembershipsMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, io.bloombox.schema.identity.AppUser.ConsumerMembership> getMemberships() {
        return getMembershipsMap();
      }
      /**
       * <pre>
       * Specifies consumer memberships stored for express check-in.
       * </pre>
       *
       * <code>map&lt;string, .bloombox.identity.ConsumerMembership&gt; memberships = 6;</code>
       */

      public java.util.Map<java.lang.String, io.bloombox.schema.identity.AppUser.ConsumerMembership> getMembershipsMap() {
        return internalGetMemberships().getMap();
      }
      /**
       * <pre>
       * Specifies consumer memberships stored for express check-in.
       * </pre>
       *
       * <code>map&lt;string, .bloombox.identity.ConsumerMembership&gt; memberships = 6;</code>
       */

      public io.bloombox.schema.identity.AppUser.ConsumerMembership getMembershipsOrDefault(
          java.lang.String key,
          io.bloombox.schema.identity.AppUser.ConsumerMembership defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, io.bloombox.schema.identity.AppUser.ConsumerMembership> map =
            internalGetMemberships().getMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * Specifies consumer memberships stored for express check-in.
       * </pre>
       *
       * <code>map&lt;string, .bloombox.identity.ConsumerMembership&gt; memberships = 6;</code>
       */

      public io.bloombox.schema.identity.AppUser.ConsumerMembership getMembershipsOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, io.bloombox.schema.identity.AppUser.ConsumerMembership> map =
            internalGetMemberships().getMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }

      public Builder clearMemberships() {
        internalGetMutableMemberships().getMutableMap()
            .clear();
        return this;
      }
      /**
       * <pre>
       * Specifies consumer memberships stored for express check-in.
       * </pre>
       *
       * <code>map&lt;string, .bloombox.identity.ConsumerMembership&gt; memberships = 6;</code>
       */

      public Builder removeMemberships(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableMemberships().getMutableMap()
            .remove(key);
        return this;
      }
      /**
       * Use alternate mutation accessors instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, io.bloombox.schema.identity.AppUser.ConsumerMembership>
      getMutableMemberships() {
        return internalGetMutableMemberships().getMutableMap();
      }
      /**
       * <pre>
       * Specifies consumer memberships stored for express check-in.
       * </pre>
       *
       * <code>map&lt;string, .bloombox.identity.ConsumerMembership&gt; memberships = 6;</code>
       */
      public Builder putMemberships(
          java.lang.String key,
          io.bloombox.schema.identity.AppUser.ConsumerMembership value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        if (value == null) { throw new java.lang.NullPointerException(); }
        internalGetMutableMemberships().getMutableMap()
            .put(key, value);
        return this;
      }
      /**
       * <pre>
       * Specifies consumer memberships stored for express check-in.
       * </pre>
       *
       * <code>map&lt;string, .bloombox.identity.ConsumerMembership&gt; memberships = 6;</code>
       */

      public Builder putAllMemberships(
          java.util.Map<java.lang.String, io.bloombox.schema.identity.AppUser.ConsumerMembership> values) {
        internalGetMutableMemberships().getMutableMap()
            .putAll(values);
        return this;
      }

      private java.util.List<io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision> revision_ =
        java.util.Collections.emptyList();
      private void ensureRevisionIsMutable() {
        if (!((bitField0_ & 0x00000040) != 0)) {
          revision_ = new java.util.ArrayList<io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision>(revision_);
          bitField0_ |= 0x00000040;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision.Builder, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevisionOrBuilder> revisionBuilder_;

      /**
       * <pre>
       * Revision history for this Bioprint, including each ID and signature.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.BioprintRevision revision = 7;</code>
       */
      public java.util.List<io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision> getRevisionList() {
        if (revisionBuilder_ == null) {
          return java.util.Collections.unmodifiableList(revision_);
        } else {
          return revisionBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Revision history for this Bioprint, including each ID and signature.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.BioprintRevision revision = 7;</code>
       */
      public int getRevisionCount() {
        if (revisionBuilder_ == null) {
          return revision_.size();
        } else {
          return revisionBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Revision history for this Bioprint, including each ID and signature.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.BioprintRevision revision = 7;</code>
       */
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision getRevision(int index) {
        if (revisionBuilder_ == null) {
          return revision_.get(index);
        } else {
          return revisionBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Revision history for this Bioprint, including each ID and signature.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.BioprintRevision revision = 7;</code>
       */
      public Builder setRevision(
          int index, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision value) {
        if (revisionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRevisionIsMutable();
          revision_.set(index, value);
          onChanged();
        } else {
          revisionBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Revision history for this Bioprint, including each ID and signature.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.BioprintRevision revision = 7;</code>
       */
      public Builder setRevision(
          int index, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision.Builder builderForValue) {
        if (revisionBuilder_ == null) {
          ensureRevisionIsMutable();
          revision_.set(index, builderForValue.build());
          onChanged();
        } else {
          revisionBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Revision history for this Bioprint, including each ID and signature.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.BioprintRevision revision = 7;</code>
       */
      public Builder addRevision(io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision value) {
        if (revisionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRevisionIsMutable();
          revision_.add(value);
          onChanged();
        } else {
          revisionBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Revision history for this Bioprint, including each ID and signature.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.BioprintRevision revision = 7;</code>
       */
      public Builder addRevision(
          int index, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision value) {
        if (revisionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRevisionIsMutable();
          revision_.add(index, value);
          onChanged();
        } else {
          revisionBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Revision history for this Bioprint, including each ID and signature.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.BioprintRevision revision = 7;</code>
       */
      public Builder addRevision(
          io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision.Builder builderForValue) {
        if (revisionBuilder_ == null) {
          ensureRevisionIsMutable();
          revision_.add(builderForValue.build());
          onChanged();
        } else {
          revisionBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Revision history for this Bioprint, including each ID and signature.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.BioprintRevision revision = 7;</code>
       */
      public Builder addRevision(
          int index, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision.Builder builderForValue) {
        if (revisionBuilder_ == null) {
          ensureRevisionIsMutable();
          revision_.add(index, builderForValue.build());
          onChanged();
        } else {
          revisionBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Revision history for this Bioprint, including each ID and signature.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.BioprintRevision revision = 7;</code>
       */
      public Builder addAllRevision(
          java.lang.Iterable<? extends io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision> values) {
        if (revisionBuilder_ == null) {
          ensureRevisionIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, revision_);
          onChanged();
        } else {
          revisionBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Revision history for this Bioprint, including each ID and signature.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.BioprintRevision revision = 7;</code>
       */
      public Builder clearRevision() {
        if (revisionBuilder_ == null) {
          revision_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000040);
          onChanged();
        } else {
          revisionBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Revision history for this Bioprint, including each ID and signature.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.BioprintRevision revision = 7;</code>
       */
      public Builder removeRevision(int index) {
        if (revisionBuilder_ == null) {
          ensureRevisionIsMutable();
          revision_.remove(index);
          onChanged();
        } else {
          revisionBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Revision history for this Bioprint, including each ID and signature.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.BioprintRevision revision = 7;</code>
       */
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision.Builder getRevisionBuilder(
          int index) {
        return getRevisionFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Revision history for this Bioprint, including each ID and signature.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.BioprintRevision revision = 7;</code>
       */
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevisionOrBuilder getRevisionOrBuilder(
          int index) {
        if (revisionBuilder_ == null) {
          return revision_.get(index);  } else {
          return revisionBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Revision history for this Bioprint, including each ID and signature.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.BioprintRevision revision = 7;</code>
       */
      public java.util.List<? extends io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevisionOrBuilder> 
           getRevisionOrBuilderList() {
        if (revisionBuilder_ != null) {
          return revisionBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(revision_);
        }
      }
      /**
       * <pre>
       * Revision history for this Bioprint, including each ID and signature.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.BioprintRevision revision = 7;</code>
       */
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision.Builder addRevisionBuilder() {
        return getRevisionFieldBuilder().addBuilder(
            io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision.getDefaultInstance());
      }
      /**
       * <pre>
       * Revision history for this Bioprint, including each ID and signature.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.BioprintRevision revision = 7;</code>
       */
      public io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision.Builder addRevisionBuilder(
          int index) {
        return getRevisionFieldBuilder().addBuilder(
            index, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision.getDefaultInstance());
      }
      /**
       * <pre>
       * Revision history for this Bioprint, including each ID and signature.
       * </pre>
       *
       * <code>repeated .bloombox.identity.bioprint.BioprintRevision revision = 7;</code>
       */
      public java.util.List<io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision.Builder> 
           getRevisionBuilderList() {
        return getRevisionFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision.Builder, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevisionOrBuilder> 
          getRevisionFieldBuilder() {
        if (revisionBuilder_ == null) {
          revisionBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevision.Builder, io.bloombox.schema.identity.bioprint.BioprintOuterClass.BioprintRevisionOrBuilder>(
                  revision_,
                  ((bitField0_ & 0x00000040) != 0),
                  getParentForChildren(),
                  isClean());
          revision_ = null;
        }
        return revisionBuilder_;
      }

      private io.opencannabis.schema.temporal.TemporalInstant.Instant modified_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder> modifiedBuilder_;
      /**
       * <pre>
       * Indicates the precise moment this Bioprint was last mutated or updated.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant modified = 8;</code>
       */
      public boolean hasModified() {
        return modifiedBuilder_ != null || modified_ != null;
      }
      /**
       * <pre>
       * Indicates the precise moment this Bioprint was last mutated or updated.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant modified = 8;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.Instant getModified() {
        if (modifiedBuilder_ == null) {
          return modified_ == null ? io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : modified_;
        } else {
          return modifiedBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Indicates the precise moment this Bioprint was last mutated or updated.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant modified = 8;</code>
       */
      public Builder setModified(io.opencannabis.schema.temporal.TemporalInstant.Instant value) {
        if (modifiedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          modified_ = value;
          onChanged();
        } else {
          modifiedBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Indicates the precise moment this Bioprint was last mutated or updated.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant modified = 8;</code>
       */
      public Builder setModified(
          io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder builderForValue) {
        if (modifiedBuilder_ == null) {
          modified_ = builderForValue.build();
          onChanged();
        } else {
          modifiedBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Indicates the precise moment this Bioprint was last mutated or updated.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant modified = 8;</code>
       */
      public Builder mergeModified(io.opencannabis.schema.temporal.TemporalInstant.Instant value) {
        if (modifiedBuilder_ == null) {
          if (modified_ != null) {
            modified_ =
              io.opencannabis.schema.temporal.TemporalInstant.Instant.newBuilder(modified_).mergeFrom(value).buildPartial();
          } else {
            modified_ = value;
          }
          onChanged();
        } else {
          modifiedBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Indicates the precise moment this Bioprint was last mutated or updated.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant modified = 8;</code>
       */
      public Builder clearModified() {
        if (modifiedBuilder_ == null) {
          modified_ = null;
          onChanged();
        } else {
          modified_ = null;
          modifiedBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Indicates the precise moment this Bioprint was last mutated or updated.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant modified = 8;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder getModifiedBuilder() {
        
        onChanged();
        return getModifiedFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Indicates the precise moment this Bioprint was last mutated or updated.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant modified = 8;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getModifiedOrBuilder() {
        if (modifiedBuilder_ != null) {
          return modifiedBuilder_.getMessageOrBuilder();
        } else {
          return modified_ == null ?
              io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : modified_;
        }
      }
      /**
       * <pre>
       * Indicates the precise moment this Bioprint was last mutated or updated.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant modified = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder> 
          getModifiedFieldBuilder() {
        if (modifiedBuilder_ == null) {
          modifiedBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder>(
                  getModified(),
                  getParentForChildren(),
                  isClean());
          modified_ = null;
        }
        return modifiedBuilder_;
      }

      private io.opencannabis.schema.temporal.TemporalInstant.Instant created_;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder> createdBuilder_;
      /**
       * <pre>
       * Indicates the precise moment this Bioprint was originally created.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant created = 9;</code>
       */
      public boolean hasCreated() {
        return createdBuilder_ != null || created_ != null;
      }
      /**
       * <pre>
       * Indicates the precise moment this Bioprint was originally created.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant created = 9;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.Instant getCreated() {
        if (createdBuilder_ == null) {
          return created_ == null ? io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : created_;
        } else {
          return createdBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Indicates the precise moment this Bioprint was originally created.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant created = 9;</code>
       */
      public Builder setCreated(io.opencannabis.schema.temporal.TemporalInstant.Instant value) {
        if (createdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          created_ = value;
          onChanged();
        } else {
          createdBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Indicates the precise moment this Bioprint was originally created.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant created = 9;</code>
       */
      public Builder setCreated(
          io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder builderForValue) {
        if (createdBuilder_ == null) {
          created_ = builderForValue.build();
          onChanged();
        } else {
          createdBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Indicates the precise moment this Bioprint was originally created.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant created = 9;</code>
       */
      public Builder mergeCreated(io.opencannabis.schema.temporal.TemporalInstant.Instant value) {
        if (createdBuilder_ == null) {
          if (created_ != null) {
            created_ =
              io.opencannabis.schema.temporal.TemporalInstant.Instant.newBuilder(created_).mergeFrom(value).buildPartial();
          } else {
            created_ = value;
          }
          onChanged();
        } else {
          createdBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Indicates the precise moment this Bioprint was originally created.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant created = 9;</code>
       */
      public Builder clearCreated() {
        if (createdBuilder_ == null) {
          created_ = null;
          onChanged();
        } else {
          created_ = null;
          createdBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Indicates the precise moment this Bioprint was originally created.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant created = 9;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder getCreatedBuilder() {
        
        onChanged();
        return getCreatedFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Indicates the precise moment this Bioprint was originally created.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant created = 9;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getCreatedOrBuilder() {
        if (createdBuilder_ != null) {
          return createdBuilder_.getMessageOrBuilder();
        } else {
          return created_ == null ?
              io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : created_;
        }
      }
      /**
       * <pre>
       * Indicates the precise moment this Bioprint was originally created.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant created = 9;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder> 
          getCreatedFieldBuilder() {
        if (createdBuilder_ == null) {
          createdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder>(
                  getCreated(),
                  getParentForChildren(),
                  isClean());
          created_ = null;
        }
        return createdBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:bloombox.identity.bioprint.Bioprint)
    }

    // @@protoc_insertion_point(class_scope:bloombox.identity.bioprint.Bioprint)
    private static final io.bloombox.schema.identity.bioprint.BioprintOuterClass.Bioprint DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.bloombox.schema.identity.bioprint.BioprintOuterClass.Bioprint();
    }

    public static io.bloombox.schema.identity.bioprint.BioprintOuterClass.Bioprint getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Bioprint>
        PARSER = new com.google.protobuf.AbstractParser<Bioprint>() {
      @java.lang.Override
      public Bioprint parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Bioprint(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Bioprint> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Bioprint> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.bloombox.schema.identity.bioprint.BioprintOuterClass.Bioprint getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_bloombox_identity_bioprint_MasterKey_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_bloombox_identity_bioprint_MasterKey_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_bloombox_identity_bioprint_RestorationKey_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_bloombox_identity_bioprint_RestorationKey_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_bloombox_identity_bioprint_StubKey_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_bloombox_identity_bioprint_StubKey_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_bloombox_identity_bioprint_BioprintToken_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_bloombox_identity_bioprint_BioprintToken_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_bloombox_identity_bioprint_BioprintID_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_bloombox_identity_bioprint_BioprintID_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_bloombox_identity_bioprint_Keychain_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_bloombox_identity_bioprint_Keychain_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_bloombox_identity_bioprint_BioprintPayload_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_bloombox_identity_bioprint_BioprintPayload_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_bloombox_identity_bioprint_BioprintRevision_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_bloombox_identity_bioprint_BioprintRevision_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_bloombox_identity_bioprint_Bioprint_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_bloombox_identity_bioprint_Bioprint_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_bloombox_identity_bioprint_Bioprint_MembershipsEntry_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_bloombox_identity_bioprint_Bioprint_MembershipsEntry_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n identity/bioprint/Bioprint.proto\022\032bloo" +
      "mbox.identity.bioprint\032\024security/Token.p" +
      "roto\032\026temporal/Instant.proto\032\030partner/Pa" +
      "rtnerKey.proto\032\021identity/ID.proto\032\023ident" +
      "ity/User.proto\032\026identity/UserKey.proto\032\"" +
      "identity/bioprint/Affinities.proto\032\026cryp" +
      "to/Signature.proto\032\034crypto/primitives/Ke" +
      "ys.proto\032!crypto/primitives/Integrity.pr" +
      "oto\"\223\002\n\tMasterKey\022\014\n\004name\030\001 \001(\t\022\020\n\010seque" +
      "nce\030\002 \001(\r\022\020\n\010disabled\030\003 \001(\010\022\022\n\nsupersede" +
      "d\030\004 \001(\010\022.\n\003key\030\005 \001(\0132!.opencannabis.cryp" +
      "to.SymmetricKey\022,\n\004used\030\006 \001(\0132\036.opencann" +
      "abis.temporal.Instant\0221\n\tgenerated\030\007 \001(\013" +
      "2\036.opencannabis.temporal.Instant\022/\n\007revo" +
      "ked\030\010 \001(\0132\036.opencannabis.temporal.Instan" +
      "t\"\304\001\n\016RestorationKey\022\014\n\004name\030\001 \001(\t\022\020\n\010di" +
      "sabled\030\002 \001(\010\022.\n\003key\030\003 \001(\0132!.opencannabis" +
      ".crypto.SymmetricKey\0221\n\tgenerated\030\004 \001(\0132" +
      "\036.opencannabis.temporal.Instant\022/\n\007revok" +
      "ed\030\005 \001(\0132\036.opencannabis.temporal.Instant" +
      "\"\361\001\n\007StubKey\0222\n\002id\030\001 \001(\0132&.bloombox.iden" +
      "tity.bioprint.BioprintID\022\014\n\004name\030\002 \001(\t\022\020" +
      "\n\010disabled\030\003 \001(\010\022.\n\003key\030\004 \001(\0132!.opencann" +
      "abis.crypto.SymmetricKey\0221\n\tgenerated\030\005 " +
      "\001(\0132\036.opencannabis.temporal.Instant\022/\n\007r" +
      "evoked\030\006 \001(\0132\036.opencannabis.temporal.Ins" +
      "tant\"\234\001\n\rBioprintToken\022+\n\005token\030\001 \001(\0132\034." +
      "bloombox.security.AuthToken\022.\n\013fingerpri" +
      "nt\030\002 \001(\0132\031.opencannabis.crypto.Hash\022.\n\006i" +
      "ssued\030\003 \001(\0132\036.opencannabis.temporal.Inst" +
      "ant\"\300\001\n\nBioprintID\022\016\n\006origin\030\001 \001(\t\022\020\n\010an" +
      "cestor\030\002 \001(\t\022.\n\006issued\030\003 \001(\0132\036.opencanna" +
      "bis.temporal.Instant\0221\n\tsignature\030\004 \001(\0132" +
      "\036.opencannabis.crypto.Signature\022-\n\007partn" +
      "er\030\005 \001(\0132\034.bloombox.partner.PartnerKey\"\314" +
      "\001\n\010Keychain\0225\n\006master\030\001 \003(\0132%.bloombox.i" +
      "dentity.bioprint.MasterKey\022?\n\013restoratio" +
      "n\030\002 \003(\0132*.bloombox.identity.bioprint.Res" +
      "torationKey\022\022\n\ngeneration\030\003 \001(\r\0224\n\014last_" +
      "rotated\030\004 \001(\0132\036.opencannabis.temporal.In" +
      "stant\"\232\001\n\017BioprintPayload\022\022\n\ngeneration\030" +
      "\001 \001(\r\0226\n\010affinity\030\002 \003(\0132$.bloombox.ident" +
      "ity.bioprint.Affinity\022;\n\013preferences\030\003 \001" +
      "(\0132&.bloombox.identity.ConsumerPreferenc" +
      "es\"\265\001\n\020BioprintRevision\0222\n\002id\030\001 \001(\0132&.bl" +
      "oombox.identity.bioprint.BioprintID\022/\n\007a" +
      "pplied\030\002 \001(\0132\036.opencannabis.temporal.Ins" +
      "tant\022<\n\007profile\030\003 \001(\0132+.bloombox.identit" +
      "y.bioprint.BioprintPayload\"\327\004\n\010Bioprint\022" +
      "2\n\002id\030\001 \001(\0132&.bloombox.identity.bioprint" +
      ".BioprintID\0226\n\010keychain\030\002 \001(\0132$.bloombox" +
      ".identity.bioprint.Keychain\022<\n\007profile\030\003" +
      " \001(\0132+.bloombox.identity.bioprint.Biopri" +
      "ntPayload\022-\n\016identification\030\004 \001(\0132\025.bloo" +
      "mbox.identity.ID\022(\n\004user\030\005 \001(\0132\032.bloombo" +
      "x.identity.UserKey\022J\n\013memberships\030\006 \003(\0132" +
      "5.bloombox.identity.bioprint.Bioprint.Me" +
      "mbershipsEntry\022>\n\010revision\030\007 \003(\0132,.bloom" +
      "box.identity.bioprint.BioprintRevision\0220" +
      "\n\010modified\030\010 \001(\0132\036.opencannabis.temporal" +
      ".Instant\022/\n\007created\030\t \001(\0132\036.opencannabis" +
      ".temporal.Instant\032Y\n\020MembershipsEntry\022\013\n" +
      "\003key\030\001 \001(\t\0224\n\005value\030\002 \001(\0132%.bloombox.ide" +
      "ntity.ConsumerMembership:\0028\001B0\n$io.bloom" +
      "box.schema.identity.bioprintH\001P\000\242\002\003BBSb\006" +
      "proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          io.bloombox.schema.security.Token.getDescriptor(),
          io.opencannabis.schema.temporal.TemporalInstant.getDescriptor(),
          io.bloombox.schema.partner.PartnerMeta.getDescriptor(),
          io.bloombox.schema.identity.IdentityID.getDescriptor(),
          io.bloombox.schema.identity.AppUser.getDescriptor(),
          io.bloombox.schema.identity.AppUserKey.getDescriptor(),
          io.bloombox.schema.identity.bioprint.Affinities.getDescriptor(),
          io.opencannabis.schema.crypto.SignatureOuterClass.getDescriptor(),
          io.opencannabis.schema.crypto.primitives.Keys.getDescriptor(),
          io.opencannabis.schema.crypto.primitives.integrity.Integrity.getDescriptor(),
        }, assigner);
    internal_static_bloombox_identity_bioprint_MasterKey_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_bloombox_identity_bioprint_MasterKey_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_bloombox_identity_bioprint_MasterKey_descriptor,
        new java.lang.String[] { "Name", "Sequence", "Disabled", "Superseded", "Key", "Used", "Generated", "Revoked", });
    internal_static_bloombox_identity_bioprint_RestorationKey_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_bloombox_identity_bioprint_RestorationKey_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_bloombox_identity_bioprint_RestorationKey_descriptor,
        new java.lang.String[] { "Name", "Disabled", "Key", "Generated", "Revoked", });
    internal_static_bloombox_identity_bioprint_StubKey_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_bloombox_identity_bioprint_StubKey_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_bloombox_identity_bioprint_StubKey_descriptor,
        new java.lang.String[] { "Id", "Name", "Disabled", "Key", "Generated", "Revoked", });
    internal_static_bloombox_identity_bioprint_BioprintToken_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_bloombox_identity_bioprint_BioprintToken_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_bloombox_identity_bioprint_BioprintToken_descriptor,
        new java.lang.String[] { "Token", "Fingerprint", "Issued", });
    internal_static_bloombox_identity_bioprint_BioprintID_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_bloombox_identity_bioprint_BioprintID_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_bloombox_identity_bioprint_BioprintID_descriptor,
        new java.lang.String[] { "Origin", "Ancestor", "Issued", "Signature", "Partner", });
    internal_static_bloombox_identity_bioprint_Keychain_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_bloombox_identity_bioprint_Keychain_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_bloombox_identity_bioprint_Keychain_descriptor,
        new java.lang.String[] { "Master", "Restoration", "Generation", "LastRotated", });
    internal_static_bloombox_identity_bioprint_BioprintPayload_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_bloombox_identity_bioprint_BioprintPayload_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_bloombox_identity_bioprint_BioprintPayload_descriptor,
        new java.lang.String[] { "Generation", "Affinity", "Preferences", });
    internal_static_bloombox_identity_bioprint_BioprintRevision_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_bloombox_identity_bioprint_BioprintRevision_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_bloombox_identity_bioprint_BioprintRevision_descriptor,
        new java.lang.String[] { "Id", "Applied", "Profile", });
    internal_static_bloombox_identity_bioprint_Bioprint_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_bloombox_identity_bioprint_Bioprint_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_bloombox_identity_bioprint_Bioprint_descriptor,
        new java.lang.String[] { "Id", "Keychain", "Profile", "Identification", "User", "Memberships", "Revision", "Modified", "Created", });
    internal_static_bloombox_identity_bioprint_Bioprint_MembershipsEntry_descriptor =
      internal_static_bloombox_identity_bioprint_Bioprint_descriptor.getNestedTypes().get(0);
    internal_static_bloombox_identity_bioprint_Bioprint_MembershipsEntry_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_bloombox_identity_bioprint_Bioprint_MembershipsEntry_descriptor,
        new java.lang.String[] { "Key", "Value", });
    io.bloombox.schema.security.Token.getDescriptor();
    io.opencannabis.schema.temporal.TemporalInstant.getDescriptor();
    io.bloombox.schema.partner.PartnerMeta.getDescriptor();
    io.bloombox.schema.identity.IdentityID.getDescriptor();
    io.bloombox.schema.identity.AppUser.getDescriptor();
    io.bloombox.schema.identity.AppUserKey.getDescriptor();
    io.bloombox.schema.identity.bioprint.Affinities.getDescriptor();
    io.opencannabis.schema.crypto.SignatureOuterClass.getDescriptor();
    io.opencannabis.schema.crypto.primitives.Keys.getDescriptor();
    io.opencannabis.schema.crypto.primitives.integrity.Integrity.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
