/*
 * Copyright 2017, Bloombox, LLC. All rights reserved.
 *
 * Source and object computer code contained herein is the private intellectual property
 * of Bloombox, a California Limited Liability Corporation. Use of this code in source form
 * requires permission in writing before use or the publishing of derivative works, for
 * commercial purposes or any other purpose, from a duly authorized officer of Momentum
 * Ideas Co.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: identity/User.proto

package io.bloombox.schema.identity;

public interface UserOrBuilder extends
    // @@protoc_insertion_point(interface_extends:identity.User)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Unique ID for the user.
   * </pre>
   *
   * <code>string uid = 1;</code>
   */
  java.lang.String getUid();
  /**
   * <pre>
   * Unique ID for the user.
   * </pre>
   *
   * <code>string uid = 1;</code>
   */
  com.google.protobuf.ByteString
      getUidBytes();

  /**
   * <pre>
   * Boolean flags for this user.
   * </pre>
   *
   * <code>.identity.UserFlags flags = 2;</code>
   */
  boolean hasFlags();
  /**
   * <pre>
   * Boolean flags for this user.
   * </pre>
   *
   * <code>.identity.UserFlags flags = 2;</code>
   */
  io.bloombox.schema.identity.UserFlags getFlags();
  /**
   * <pre>
   * Boolean flags for this user.
   * </pre>
   *
   * <code>.identity.UserFlags flags = 2;</code>
   */
  io.bloombox.schema.identity.UserFlagsOrBuilder getFlagsOrBuilder();

  /**
   * <pre>
   * Person's information that backs this user.
   * </pre>
   *
   * <code>.person.Person person = 3;</code>
   */
  boolean hasPerson();
  /**
   * <pre>
   * Person's information that backs this user.
   * </pre>
   *
   * <code>.person.Person person = 3;</code>
   */
  io.bloombox.schema.person.Person getPerson();
  /**
   * <pre>
   * Person's information that backs this user.
   * </pre>
   *
   * <code>.person.Person person = 3;</code>
   */
  io.bloombox.schema.person.PersonOrBuilder getPersonOrBuilder();

  /**
   * <pre>
   * Government ID associated with this user.
   * </pre>
   *
   * <code>repeated .identity.ID identification = 20;</code>
   */
  java.util.List<io.bloombox.schema.identity.ID> 
      getIdentificationList();
  /**
   * <pre>
   * Government ID associated with this user.
   * </pre>
   *
   * <code>repeated .identity.ID identification = 20;</code>
   */
  io.bloombox.schema.identity.ID getIdentification(int index);
  /**
   * <pre>
   * Government ID associated with this user.
   * </pre>
   *
   * <code>repeated .identity.ID identification = 20;</code>
   */
  int getIdentificationCount();
  /**
   * <pre>
   * Government ID associated with this user.
   * </pre>
   *
   * <code>repeated .identity.ID identification = 20;</code>
   */
  java.util.List<? extends io.bloombox.schema.identity.IDOrBuilder> 
      getIdentificationOrBuilderList();
  /**
   * <pre>
   * Government ID associated with this user.
   * </pre>
   *
   * <code>repeated .identity.ID identification = 20;</code>
   */
  io.bloombox.schema.identity.IDOrBuilder getIdentificationOrBuilder(
      int index);

  /**
   * <pre>
   * Doctor's recommendations associated with this user.
   * </pre>
   *
   * <code>repeated .identity.ids.UserDoctorRec doctor_rec = 21;</code>
   */
  java.util.List<io.bloombox.schema.identity.ids.UserDoctorRec> 
      getDoctorRecList();
  /**
   * <pre>
   * Doctor's recommendations associated with this user.
   * </pre>
   *
   * <code>repeated .identity.ids.UserDoctorRec doctor_rec = 21;</code>
   */
  io.bloombox.schema.identity.ids.UserDoctorRec getDoctorRec(int index);
  /**
   * <pre>
   * Doctor's recommendations associated with this user.
   * </pre>
   *
   * <code>repeated .identity.ids.UserDoctorRec doctor_rec = 21;</code>
   */
  int getDoctorRecCount();
  /**
   * <pre>
   * Doctor's recommendations associated with this user.
   * </pre>
   *
   * <code>repeated .identity.ids.UserDoctorRec doctor_rec = 21;</code>
   */
  java.util.List<? extends io.bloombox.schema.identity.ids.UserDoctorRecOrBuilder> 
      getDoctorRecOrBuilderList();
  /**
   * <pre>
   * Doctor's recommendations associated with this user.
   * </pre>
   *
   * <code>repeated .identity.ids.UserDoctorRec doctor_rec = 21;</code>
   */
  io.bloombox.schema.identity.ids.UserDoctorRecOrBuilder getDoctorRecOrBuilder(
      int index);

  /**
   * <pre>
   * Last time this user was seen, via auth/login/enrollment etc.
   * </pre>
   *
   * <code>.temporal.Instant seen = 30;</code>
   */
  boolean hasSeen();
  /**
   * <pre>
   * Last time this user was seen, via auth/login/enrollment etc.
   * </pre>
   *
   * <code>.temporal.Instant seen = 30;</code>
   */
  io.bloombox.schema.temporal.Instant getSeen();
  /**
   * <pre>
   * Last time this user was seen, via auth/login/enrollment etc.
   * </pre>
   *
   * <code>.temporal.Instant seen = 30;</code>
   */
  io.bloombox.schema.temporal.InstantOrBuilder getSeenOrBuilder();

  /**
   * <pre>
   * Timestamp for when this user was created.
   * </pre>
   *
   * <code>.temporal.Instant signup = 31;</code>
   */
  boolean hasSignup();
  /**
   * <pre>
   * Timestamp for when this user was created.
   * </pre>
   *
   * <code>.temporal.Instant signup = 31;</code>
   */
  io.bloombox.schema.temporal.Instant getSignup();
  /**
   * <pre>
   * Timestamp for when this user was created.
   * </pre>
   *
   * <code>.temporal.Instant signup = 31;</code>
   */
  io.bloombox.schema.temporal.InstantOrBuilder getSignupOrBuilder();

  /**
   * <pre>
   * Identities associated with this user.
   * </pre>
   *
   * <code>map&lt;string, .identity.UserIdentity&gt; identities = 40;</code>
   */
  int getIdentitiesCount();
  /**
   * <pre>
   * Identities associated with this user.
   * </pre>
   *
   * <code>map&lt;string, .identity.UserIdentity&gt; identities = 40;</code>
   */
  boolean containsIdentities(
      java.lang.String key);
  /**
   * Use {@link #getIdentitiesMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, io.bloombox.schema.identity.UserIdentity>
  getIdentities();
  /**
   * <pre>
   * Identities associated with this user.
   * </pre>
   *
   * <code>map&lt;string, .identity.UserIdentity&gt; identities = 40;</code>
   */
  java.util.Map<java.lang.String, io.bloombox.schema.identity.UserIdentity>
  getIdentitiesMap();
  /**
   * <pre>
   * Identities associated with this user.
   * </pre>
   *
   * <code>map&lt;string, .identity.UserIdentity&gt; identities = 40;</code>
   */

  io.bloombox.schema.identity.UserIdentity getIdentitiesOrDefault(
      java.lang.String key,
      io.bloombox.schema.identity.UserIdentity defaultValue);
  /**
   * <pre>
   * Identities associated with this user.
   * </pre>
   *
   * <code>map&lt;string, .identity.UserIdentity&gt; identities = 40;</code>
   */

  io.bloombox.schema.identity.UserIdentity getIdentitiesOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * Media associated with this user.
   * </pre>
   *
   * <code>map&lt;string, .media.MediaItem&gt; media = 41;</code>
   */
  int getMediaCount();
  /**
   * <pre>
   * Media associated with this user.
   * </pre>
   *
   * <code>map&lt;string, .media.MediaItem&gt; media = 41;</code>
   */
  boolean containsMedia(
      java.lang.String key);
  /**
   * Use {@link #getMediaMap()} instead.
   */
  @java.lang.Deprecated
  java.util.Map<java.lang.String, io.bloombox.schema.media.MediaItem>
  getMedia();
  /**
   * <pre>
   * Media associated with this user.
   * </pre>
   *
   * <code>map&lt;string, .media.MediaItem&gt; media = 41;</code>
   */
  java.util.Map<java.lang.String, io.bloombox.schema.media.MediaItem>
  getMediaMap();
  /**
   * <pre>
   * Media associated with this user.
   * </pre>
   *
   * <code>map&lt;string, .media.MediaItem&gt; media = 41;</code>
   */

  io.bloombox.schema.media.MediaItem getMediaOrDefault(
      java.lang.String key,
      io.bloombox.schema.media.MediaItem defaultValue);
  /**
   * <pre>
   * Media associated with this user.
   * </pre>
   *
   * <code>map&lt;string, .media.MediaItem&gt; media = 41;</code>
   */

  io.bloombox.schema.media.MediaItem getMediaOrThrow(
      java.lang.String key);

  /**
   * <pre>
   * Consumer profile for this user.
   * </pre>
   *
   * <code>.identity.ConsumerProfile consumer = 100;</code>
   */
  boolean hasConsumer();
  /**
   * <pre>
   * Consumer profile for this user.
   * </pre>
   *
   * <code>.identity.ConsumerProfile consumer = 100;</code>
   */
  io.bloombox.schema.identity.ConsumerProfile getConsumer();
  /**
   * <pre>
   * Consumer profile for this user.
   * </pre>
   *
   * <code>.identity.ConsumerProfile consumer = 100;</code>
   */
  io.bloombox.schema.identity.ConsumerProfileOrBuilder getConsumerOrBuilder();

  /**
   * <pre>
   * Industry profile for this user.
   * </pre>
   *
   * <code>.identity.IndustryProfile industry = 101;</code>
   */
  boolean hasIndustry();
  /**
   * <pre>
   * Industry profile for this user.
   * </pre>
   *
   * <code>.identity.IndustryProfile industry = 101;</code>
   */
  io.bloombox.schema.identity.IndustryProfile getIndustry();
  /**
   * <pre>
   * Industry profile for this user.
   * </pre>
   *
   * <code>.identity.IndustryProfile industry = 101;</code>
   */
  io.bloombox.schema.identity.IndustryProfileOrBuilder getIndustryOrBuilder();
}
