/*
 * Copyright 2018, Bloombox, LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ledger/Asset.proto

package io.bloombox.schema.ledger;

public final class Assets {
  private Assets() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface AssetKeyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:bloombox.schema.ledger.AssetKey)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Generated ID for a digital asset. Usually this value is calculated by hashing the digital asset content, signing
     * the digital asset content, and combining the two.
     * </pre>
     *
     * <code>string id = 1;</code>
     */
    java.lang.String getId();
    /**
     * <pre>
     * Generated ID for a digital asset. Usually this value is calculated by hashing the digital asset content, signing
     * the digital asset content, and combining the two.
     * </pre>
     *
     * <code>string id = 1;</code>
     */
    com.google.protobuf.ByteString
        getIdBytes();
  }
  /**
   * <pre>
   * Unique ID structure for a digital asset. Specifies globally-unique identifying information, or at the very least, a
   * string asset ID, calculated based on the asset's content and the owner's private key signing that content.
   * </pre>
   *
   * Protobuf type {@code bloombox.schema.ledger.AssetKey}
   */
  public  static final class AssetKey extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:bloombox.schema.ledger.AssetKey)
      AssetKeyOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use AssetKey.newBuilder() to construct.
    private AssetKey(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private AssetKey() {
      id_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private AssetKey(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              id_ = s;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.bloombox.schema.ledger.Assets.internal_static_bloombox_schema_ledger_AssetKey_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.bloombox.schema.ledger.Assets.internal_static_bloombox_schema_ledger_AssetKey_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.bloombox.schema.ledger.Assets.AssetKey.class, io.bloombox.schema.ledger.Assets.AssetKey.Builder.class);
    }

    public static final int ID_FIELD_NUMBER = 1;
    private volatile java.lang.Object id_;
    /**
     * <pre>
     * Generated ID for a digital asset. Usually this value is calculated by hashing the digital asset content, signing
     * the digital asset content, and combining the two.
     * </pre>
     *
     * <code>string id = 1;</code>
     */
    public java.lang.String getId() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        id_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Generated ID for a digital asset. Usually this value is calculated by hashing the digital asset content, signing
     * the digital asset content, and combining the two.
     * </pre>
     *
     * <code>string id = 1;</code>
     */
    public com.google.protobuf.ByteString
        getIdBytes() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        id_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, id_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, id_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.bloombox.schema.ledger.Assets.AssetKey)) {
        return super.equals(obj);
      }
      io.bloombox.schema.ledger.Assets.AssetKey other = (io.bloombox.schema.ledger.Assets.AssetKey) obj;

      boolean result = true;
      result = result && getId()
          .equals(other.getId());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + getId().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.bloombox.schema.ledger.Assets.AssetKey parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.ledger.Assets.AssetKey parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Assets.AssetKey parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.ledger.Assets.AssetKey parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Assets.AssetKey parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.ledger.Assets.AssetKey parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Assets.AssetKey parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.ledger.Assets.AssetKey parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Assets.AssetKey parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.ledger.Assets.AssetKey parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Assets.AssetKey parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.ledger.Assets.AssetKey parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.bloombox.schema.ledger.Assets.AssetKey prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Unique ID structure for a digital asset. Specifies globally-unique identifying information, or at the very least, a
     * string asset ID, calculated based on the asset's content and the owner's private key signing that content.
     * </pre>
     *
     * Protobuf type {@code bloombox.schema.ledger.AssetKey}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:bloombox.schema.ledger.AssetKey)
        io.bloombox.schema.ledger.Assets.AssetKeyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.bloombox.schema.ledger.Assets.internal_static_bloombox_schema_ledger_AssetKey_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.bloombox.schema.ledger.Assets.internal_static_bloombox_schema_ledger_AssetKey_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.bloombox.schema.ledger.Assets.AssetKey.class, io.bloombox.schema.ledger.Assets.AssetKey.Builder.class);
      }

      // Construct using io.bloombox.schema.ledger.Assets.AssetKey.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        id_ = "";

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.bloombox.schema.ledger.Assets.internal_static_bloombox_schema_ledger_AssetKey_descriptor;
      }

      public io.bloombox.schema.ledger.Assets.AssetKey getDefaultInstanceForType() {
        return io.bloombox.schema.ledger.Assets.AssetKey.getDefaultInstance();
      }

      public io.bloombox.schema.ledger.Assets.AssetKey build() {
        io.bloombox.schema.ledger.Assets.AssetKey result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.bloombox.schema.ledger.Assets.AssetKey buildPartial() {
        io.bloombox.schema.ledger.Assets.AssetKey result = new io.bloombox.schema.ledger.Assets.AssetKey(this);
        result.id_ = id_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.bloombox.schema.ledger.Assets.AssetKey) {
          return mergeFrom((io.bloombox.schema.ledger.Assets.AssetKey)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.bloombox.schema.ledger.Assets.AssetKey other) {
        if (other == io.bloombox.schema.ledger.Assets.AssetKey.getDefaultInstance()) return this;
        if (!other.getId().isEmpty()) {
          id_ = other.id_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.bloombox.schema.ledger.Assets.AssetKey parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.bloombox.schema.ledger.Assets.AssetKey) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object id_ = "";
      /**
       * <pre>
       * Generated ID for a digital asset. Usually this value is calculated by hashing the digital asset content, signing
       * the digital asset content, and combining the two.
       * </pre>
       *
       * <code>string id = 1;</code>
       */
      public java.lang.String getId() {
        java.lang.Object ref = id_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          id_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Generated ID for a digital asset. Usually this value is calculated by hashing the digital asset content, signing
       * the digital asset content, and combining the two.
       * </pre>
       *
       * <code>string id = 1;</code>
       */
      public com.google.protobuf.ByteString
          getIdBytes() {
        java.lang.Object ref = id_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          id_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Generated ID for a digital asset. Usually this value is calculated by hashing the digital asset content, signing
       * the digital asset content, and combining the two.
       * </pre>
       *
       * <code>string id = 1;</code>
       */
      public Builder setId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Generated ID for a digital asset. Usually this value is calculated by hashing the digital asset content, signing
       * the digital asset content, and combining the two.
       * </pre>
       *
       * <code>string id = 1;</code>
       */
      public Builder clearId() {
        
        id_ = getDefaultInstance().getId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Generated ID for a digital asset. Usually this value is calculated by hashing the digital asset content, signing
       * the digital asset content, and combining the two.
       * </pre>
       *
       * <code>string id = 1;</code>
       */
      public Builder setIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        id_ = value;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:bloombox.schema.ledger.AssetKey)
    }

    // @@protoc_insertion_point(class_scope:bloombox.schema.ledger.AssetKey)
    private static final io.bloombox.schema.ledger.Assets.AssetKey DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.bloombox.schema.ledger.Assets.AssetKey();
    }

    public static io.bloombox.schema.ledger.Assets.AssetKey getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<AssetKey>
        PARSER = new com.google.protobuf.AbstractParser<AssetKey>() {
      public AssetKey parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new AssetKey(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<AssetKey> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<AssetKey> getParserForType() {
      return PARSER;
    }

    public io.bloombox.schema.ledger.Assets.AssetKey getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface AssetDataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:bloombox.schema.ledger.AssetData)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Raw asset data, binary encoded protobuf form.
     * </pre>
     *
     * <code>bytes raw = 1;</code>
     */
    com.google.protobuf.ByteString getRaw();

    /**
     * <pre>
     * Encoded asset data, in binary encoded protobuf form, wrapped in base58.
     * </pre>
     *
     * <code>string encoded = 2;</code>
     */
    java.lang.String getEncoded();
    /**
     * <pre>
     * Encoded asset data, in binary encoded protobuf form, wrapped in base58.
     * </pre>
     *
     * <code>string encoded = 2;</code>
     */
    com.google.protobuf.ByteString
        getEncodedBytes();

    /**
     * <pre>
     * Structured asset data, wherein an arbitrary message payload is specified.
     * </pre>
     *
     * <code>.google.protobuf.Any struct = 3;</code>
     */
    boolean hasStruct();
    /**
     * <pre>
     * Structured asset data, wherein an arbitrary message payload is specified.
     * </pre>
     *
     * <code>.google.protobuf.Any struct = 3;</code>
     */
    com.google.protobuf.Any getStruct();
    /**
     * <pre>
     * Structured asset data, wherein an arbitrary message payload is specified.
     * </pre>
     *
     * <code>.google.protobuf.Any struct = 3;</code>
     */
    com.google.protobuf.AnyOrBuilder getStructOrBuilder();

    public io.bloombox.schema.ledger.Assets.AssetData.PayloadCase getPayloadCase();
  }
  /**
   * <pre>
   * Payload that carries digital asset data content, either in structured or encoded form. In structured form, a payload
   * may reference any arbitrary proto message. In encoded form, the asset data is expressed in binary-serialized proto,
   * wrapped in base58. In all cases, a fingerprint must be supplied for integrity checking. In some cases, "raw" form may
   * be used, wherein the encoding is the same as encoded-form, without the base58 wrapping.
   * </pre>
   *
   * Protobuf type {@code bloombox.schema.ledger.AssetData}
   */
  public  static final class AssetData extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:bloombox.schema.ledger.AssetData)
      AssetDataOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use AssetData.newBuilder() to construct.
    private AssetData(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private AssetData() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private AssetData(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              payloadCase_ = 1;
              payload_ = input.readBytes();
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();
              payloadCase_ = 2;
              payload_ = s;
              break;
            }
            case 26: {
              com.google.protobuf.Any.Builder subBuilder = null;
              if (payloadCase_ == 3) {
                subBuilder = ((com.google.protobuf.Any) payload_).toBuilder();
              }
              payload_ =
                  input.readMessage(com.google.protobuf.Any.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((com.google.protobuf.Any) payload_);
                payload_ = subBuilder.buildPartial();
              }
              payloadCase_ = 3;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.bloombox.schema.ledger.Assets.internal_static_bloombox_schema_ledger_AssetData_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.bloombox.schema.ledger.Assets.internal_static_bloombox_schema_ledger_AssetData_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.bloombox.schema.ledger.Assets.AssetData.class, io.bloombox.schema.ledger.Assets.AssetData.Builder.class);
    }

    private int payloadCase_ = 0;
    private java.lang.Object payload_;
    public enum PayloadCase
        implements com.google.protobuf.Internal.EnumLite {
      RAW(1),
      ENCODED(2),
      STRUCT(3),
      PAYLOAD_NOT_SET(0);
      private final int value;
      private PayloadCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static PayloadCase valueOf(int value) {
        return forNumber(value);
      }

      public static PayloadCase forNumber(int value) {
        switch (value) {
          case 1: return RAW;
          case 2: return ENCODED;
          case 3: return STRUCT;
          case 0: return PAYLOAD_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public PayloadCase
    getPayloadCase() {
      return PayloadCase.forNumber(
          payloadCase_);
    }

    public static final int RAW_FIELD_NUMBER = 1;
    /**
     * <pre>
     * Raw asset data, binary encoded protobuf form.
     * </pre>
     *
     * <code>bytes raw = 1;</code>
     */
    public com.google.protobuf.ByteString getRaw() {
      if (payloadCase_ == 1) {
        return (com.google.protobuf.ByteString) payload_;
      }
      return com.google.protobuf.ByteString.EMPTY;
    }

    public static final int ENCODED_FIELD_NUMBER = 2;
    /**
     * <pre>
     * Encoded asset data, in binary encoded protobuf form, wrapped in base58.
     * </pre>
     *
     * <code>string encoded = 2;</code>
     */
    public java.lang.String getEncoded() {
      java.lang.Object ref = "";
      if (payloadCase_ == 2) {
        ref = payload_;
      }
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (payloadCase_ == 2) {
          payload_ = s;
        }
        return s;
      }
    }
    /**
     * <pre>
     * Encoded asset data, in binary encoded protobuf form, wrapped in base58.
     * </pre>
     *
     * <code>string encoded = 2;</code>
     */
    public com.google.protobuf.ByteString
        getEncodedBytes() {
      java.lang.Object ref = "";
      if (payloadCase_ == 2) {
        ref = payload_;
      }
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        if (payloadCase_ == 2) {
          payload_ = b;
        }
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int STRUCT_FIELD_NUMBER = 3;
    /**
     * <pre>
     * Structured asset data, wherein an arbitrary message payload is specified.
     * </pre>
     *
     * <code>.google.protobuf.Any struct = 3;</code>
     */
    public boolean hasStruct() {
      return payloadCase_ == 3;
    }
    /**
     * <pre>
     * Structured asset data, wherein an arbitrary message payload is specified.
     * </pre>
     *
     * <code>.google.protobuf.Any struct = 3;</code>
     */
    public com.google.protobuf.Any getStruct() {
      if (payloadCase_ == 3) {
         return (com.google.protobuf.Any) payload_;
      }
      return com.google.protobuf.Any.getDefaultInstance();
    }
    /**
     * <pre>
     * Structured asset data, wherein an arbitrary message payload is specified.
     * </pre>
     *
     * <code>.google.protobuf.Any struct = 3;</code>
     */
    public com.google.protobuf.AnyOrBuilder getStructOrBuilder() {
      if (payloadCase_ == 3) {
         return (com.google.protobuf.Any) payload_;
      }
      return com.google.protobuf.Any.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (payloadCase_ == 1) {
        output.writeBytes(
            1, (com.google.protobuf.ByteString) payload_);
      }
      if (payloadCase_ == 2) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, payload_);
      }
      if (payloadCase_ == 3) {
        output.writeMessage(3, (com.google.protobuf.Any) payload_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (payloadCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(
              1, (com.google.protobuf.ByteString) payload_);
      }
      if (payloadCase_ == 2) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, payload_);
      }
      if (payloadCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (com.google.protobuf.Any) payload_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.bloombox.schema.ledger.Assets.AssetData)) {
        return super.equals(obj);
      }
      io.bloombox.schema.ledger.Assets.AssetData other = (io.bloombox.schema.ledger.Assets.AssetData) obj;

      boolean result = true;
      result = result && getPayloadCase().equals(
          other.getPayloadCase());
      if (!result) return false;
      switch (payloadCase_) {
        case 1:
          result = result && getRaw()
              .equals(other.getRaw());
          break;
        case 2:
          result = result && getEncoded()
              .equals(other.getEncoded());
          break;
        case 3:
          result = result && getStruct()
              .equals(other.getStruct());
          break;
        case 0:
        default:
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (payloadCase_) {
        case 1:
          hash = (37 * hash) + RAW_FIELD_NUMBER;
          hash = (53 * hash) + getRaw().hashCode();
          break;
        case 2:
          hash = (37 * hash) + ENCODED_FIELD_NUMBER;
          hash = (53 * hash) + getEncoded().hashCode();
          break;
        case 3:
          hash = (37 * hash) + STRUCT_FIELD_NUMBER;
          hash = (53 * hash) + getStruct().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.bloombox.schema.ledger.Assets.AssetData parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.ledger.Assets.AssetData parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Assets.AssetData parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.ledger.Assets.AssetData parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Assets.AssetData parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.ledger.Assets.AssetData parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Assets.AssetData parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.ledger.Assets.AssetData parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Assets.AssetData parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.ledger.Assets.AssetData parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Assets.AssetData parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.ledger.Assets.AssetData parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.bloombox.schema.ledger.Assets.AssetData prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Payload that carries digital asset data content, either in structured or encoded form. In structured form, a payload
     * may reference any arbitrary proto message. In encoded form, the asset data is expressed in binary-serialized proto,
     * wrapped in base58. In all cases, a fingerprint must be supplied for integrity checking. In some cases, "raw" form may
     * be used, wherein the encoding is the same as encoded-form, without the base58 wrapping.
     * </pre>
     *
     * Protobuf type {@code bloombox.schema.ledger.AssetData}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:bloombox.schema.ledger.AssetData)
        io.bloombox.schema.ledger.Assets.AssetDataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.bloombox.schema.ledger.Assets.internal_static_bloombox_schema_ledger_AssetData_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.bloombox.schema.ledger.Assets.internal_static_bloombox_schema_ledger_AssetData_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.bloombox.schema.ledger.Assets.AssetData.class, io.bloombox.schema.ledger.Assets.AssetData.Builder.class);
      }

      // Construct using io.bloombox.schema.ledger.Assets.AssetData.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        payloadCase_ = 0;
        payload_ = null;
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.bloombox.schema.ledger.Assets.internal_static_bloombox_schema_ledger_AssetData_descriptor;
      }

      public io.bloombox.schema.ledger.Assets.AssetData getDefaultInstanceForType() {
        return io.bloombox.schema.ledger.Assets.AssetData.getDefaultInstance();
      }

      public io.bloombox.schema.ledger.Assets.AssetData build() {
        io.bloombox.schema.ledger.Assets.AssetData result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.bloombox.schema.ledger.Assets.AssetData buildPartial() {
        io.bloombox.schema.ledger.Assets.AssetData result = new io.bloombox.schema.ledger.Assets.AssetData(this);
        if (payloadCase_ == 1) {
          result.payload_ = payload_;
        }
        if (payloadCase_ == 2) {
          result.payload_ = payload_;
        }
        if (payloadCase_ == 3) {
          if (structBuilder_ == null) {
            result.payload_ = payload_;
          } else {
            result.payload_ = structBuilder_.build();
          }
        }
        result.payloadCase_ = payloadCase_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.bloombox.schema.ledger.Assets.AssetData) {
          return mergeFrom((io.bloombox.schema.ledger.Assets.AssetData)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.bloombox.schema.ledger.Assets.AssetData other) {
        if (other == io.bloombox.schema.ledger.Assets.AssetData.getDefaultInstance()) return this;
        switch (other.getPayloadCase()) {
          case RAW: {
            setRaw(other.getRaw());
            break;
          }
          case ENCODED: {
            payloadCase_ = 2;
            payload_ = other.payload_;
            onChanged();
            break;
          }
          case STRUCT: {
            mergeStruct(other.getStruct());
            break;
          }
          case PAYLOAD_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.bloombox.schema.ledger.Assets.AssetData parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.bloombox.schema.ledger.Assets.AssetData) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int payloadCase_ = 0;
      private java.lang.Object payload_;
      public PayloadCase
          getPayloadCase() {
        return PayloadCase.forNumber(
            payloadCase_);
      }

      public Builder clearPayload() {
        payloadCase_ = 0;
        payload_ = null;
        onChanged();
        return this;
      }


      /**
       * <pre>
       * Raw asset data, binary encoded protobuf form.
       * </pre>
       *
       * <code>bytes raw = 1;</code>
       */
      public com.google.protobuf.ByteString getRaw() {
        if (payloadCase_ == 1) {
          return (com.google.protobuf.ByteString) payload_;
        }
        return com.google.protobuf.ByteString.EMPTY;
      }
      /**
       * <pre>
       * Raw asset data, binary encoded protobuf form.
       * </pre>
       *
       * <code>bytes raw = 1;</code>
       */
      public Builder setRaw(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  payloadCase_ = 1;
        payload_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Raw asset data, binary encoded protobuf form.
       * </pre>
       *
       * <code>bytes raw = 1;</code>
       */
      public Builder clearRaw() {
        if (payloadCase_ == 1) {
          payloadCase_ = 0;
          payload_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <pre>
       * Encoded asset data, in binary encoded protobuf form, wrapped in base58.
       * </pre>
       *
       * <code>string encoded = 2;</code>
       */
      public java.lang.String getEncoded() {
        java.lang.Object ref = "";
        if (payloadCase_ == 2) {
          ref = payload_;
        }
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (payloadCase_ == 2) {
            payload_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Encoded asset data, in binary encoded protobuf form, wrapped in base58.
       * </pre>
       *
       * <code>string encoded = 2;</code>
       */
      public com.google.protobuf.ByteString
          getEncodedBytes() {
        java.lang.Object ref = "";
        if (payloadCase_ == 2) {
          ref = payload_;
        }
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          if (payloadCase_ == 2) {
            payload_ = b;
          }
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Encoded asset data, in binary encoded protobuf form, wrapped in base58.
       * </pre>
       *
       * <code>string encoded = 2;</code>
       */
      public Builder setEncoded(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  payloadCase_ = 2;
        payload_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Encoded asset data, in binary encoded protobuf form, wrapped in base58.
       * </pre>
       *
       * <code>string encoded = 2;</code>
       */
      public Builder clearEncoded() {
        if (payloadCase_ == 2) {
          payloadCase_ = 0;
          payload_ = null;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Encoded asset data, in binary encoded protobuf form, wrapped in base58.
       * </pre>
       *
       * <code>string encoded = 2;</code>
       */
      public Builder setEncodedBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        payloadCase_ = 2;
        payload_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder> structBuilder_;
      /**
       * <pre>
       * Structured asset data, wherein an arbitrary message payload is specified.
       * </pre>
       *
       * <code>.google.protobuf.Any struct = 3;</code>
       */
      public boolean hasStruct() {
        return payloadCase_ == 3;
      }
      /**
       * <pre>
       * Structured asset data, wherein an arbitrary message payload is specified.
       * </pre>
       *
       * <code>.google.protobuf.Any struct = 3;</code>
       */
      public com.google.protobuf.Any getStruct() {
        if (structBuilder_ == null) {
          if (payloadCase_ == 3) {
            return (com.google.protobuf.Any) payload_;
          }
          return com.google.protobuf.Any.getDefaultInstance();
        } else {
          if (payloadCase_ == 3) {
            return structBuilder_.getMessage();
          }
          return com.google.protobuf.Any.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Structured asset data, wherein an arbitrary message payload is specified.
       * </pre>
       *
       * <code>.google.protobuf.Any struct = 3;</code>
       */
      public Builder setStruct(com.google.protobuf.Any value) {
        if (structBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          payload_ = value;
          onChanged();
        } else {
          structBuilder_.setMessage(value);
        }
        payloadCase_ = 3;
        return this;
      }
      /**
       * <pre>
       * Structured asset data, wherein an arbitrary message payload is specified.
       * </pre>
       *
       * <code>.google.protobuf.Any struct = 3;</code>
       */
      public Builder setStruct(
          com.google.protobuf.Any.Builder builderForValue) {
        if (structBuilder_ == null) {
          payload_ = builderForValue.build();
          onChanged();
        } else {
          structBuilder_.setMessage(builderForValue.build());
        }
        payloadCase_ = 3;
        return this;
      }
      /**
       * <pre>
       * Structured asset data, wherein an arbitrary message payload is specified.
       * </pre>
       *
       * <code>.google.protobuf.Any struct = 3;</code>
       */
      public Builder mergeStruct(com.google.protobuf.Any value) {
        if (structBuilder_ == null) {
          if (payloadCase_ == 3 &&
              payload_ != com.google.protobuf.Any.getDefaultInstance()) {
            payload_ = com.google.protobuf.Any.newBuilder((com.google.protobuf.Any) payload_)
                .mergeFrom(value).buildPartial();
          } else {
            payload_ = value;
          }
          onChanged();
        } else {
          if (payloadCase_ == 3) {
            structBuilder_.mergeFrom(value);
          }
          structBuilder_.setMessage(value);
        }
        payloadCase_ = 3;
        return this;
      }
      /**
       * <pre>
       * Structured asset data, wherein an arbitrary message payload is specified.
       * </pre>
       *
       * <code>.google.protobuf.Any struct = 3;</code>
       */
      public Builder clearStruct() {
        if (structBuilder_ == null) {
          if (payloadCase_ == 3) {
            payloadCase_ = 0;
            payload_ = null;
            onChanged();
          }
        } else {
          if (payloadCase_ == 3) {
            payloadCase_ = 0;
            payload_ = null;
          }
          structBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Structured asset data, wherein an arbitrary message payload is specified.
       * </pre>
       *
       * <code>.google.protobuf.Any struct = 3;</code>
       */
      public com.google.protobuf.Any.Builder getStructBuilder() {
        return getStructFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Structured asset data, wherein an arbitrary message payload is specified.
       * </pre>
       *
       * <code>.google.protobuf.Any struct = 3;</code>
       */
      public com.google.protobuf.AnyOrBuilder getStructOrBuilder() {
        if ((payloadCase_ == 3) && (structBuilder_ != null)) {
          return structBuilder_.getMessageOrBuilder();
        } else {
          if (payloadCase_ == 3) {
            return (com.google.protobuf.Any) payload_;
          }
          return com.google.protobuf.Any.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Structured asset data, wherein an arbitrary message payload is specified.
       * </pre>
       *
       * <code>.google.protobuf.Any struct = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder> 
          getStructFieldBuilder() {
        if (structBuilder_ == null) {
          if (!(payloadCase_ == 3)) {
            payload_ = com.google.protobuf.Any.getDefaultInstance();
          }
          structBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Any, com.google.protobuf.Any.Builder, com.google.protobuf.AnyOrBuilder>(
                  (com.google.protobuf.Any) payload_,
                  getParentForChildren(),
                  isClean());
          payload_ = null;
        }
        payloadCase_ = 3;
        onChanged();;
        return structBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:bloombox.schema.ledger.AssetData)
    }

    // @@protoc_insertion_point(class_scope:bloombox.schema.ledger.AssetData)
    private static final io.bloombox.schema.ledger.Assets.AssetData DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.bloombox.schema.ledger.Assets.AssetData();
    }

    public static io.bloombox.schema.ledger.Assets.AssetData getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<AssetData>
        PARSER = new com.google.protobuf.AbstractParser<AssetData>() {
      public AssetData parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new AssetData(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<AssetData> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<AssetData> getParserForType() {
      return PARSER;
    }

    public io.bloombox.schema.ledger.Assets.AssetData getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface AssetOwnershipOrBuilder extends
      // @@protoc_insertion_point(interface_extends:bloombox.schema.ledger.AssetOwnership)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Identities of the owners of this digital asset, if known and applicable.
     * </pre>
     *
     * <code>repeated .bloombox.schema.ledger.LedgerIdentity owner = 1;</code>
     */
    java.util.List<io.bloombox.schema.ledger.Accounts.LedgerIdentity> 
        getOwnerList();
    /**
     * <pre>
     * Identities of the owners of this digital asset, if known and applicable.
     * </pre>
     *
     * <code>repeated .bloombox.schema.ledger.LedgerIdentity owner = 1;</code>
     */
    io.bloombox.schema.ledger.Accounts.LedgerIdentity getOwner(int index);
    /**
     * <pre>
     * Identities of the owners of this digital asset, if known and applicable.
     * </pre>
     *
     * <code>repeated .bloombox.schema.ledger.LedgerIdentity owner = 1;</code>
     */
    int getOwnerCount();
    /**
     * <pre>
     * Identities of the owners of this digital asset, if known and applicable.
     * </pre>
     *
     * <code>repeated .bloombox.schema.ledger.LedgerIdentity owner = 1;</code>
     */
    java.util.List<? extends io.bloombox.schema.ledger.Accounts.LedgerIdentityOrBuilder> 
        getOwnerOrBuilderList();
    /**
     * <pre>
     * Identities of the owners of this digital asset, if known and applicable.
     * </pre>
     *
     * <code>repeated .bloombox.schema.ledger.LedgerIdentity owner = 1;</code>
     */
    io.bloombox.schema.ledger.Accounts.LedgerIdentityOrBuilder getOwnerOrBuilder(
        int index);

    /**
     * <pre>
     * Previous asset ownership, allowing chained asset history to be expressed.
     * </pre>
     *
     * <code>.bloombox.schema.ledger.AssetOwnership previous = 2;</code>
     */
    boolean hasPrevious();
    /**
     * <pre>
     * Previous asset ownership, allowing chained asset history to be expressed.
     * </pre>
     *
     * <code>.bloombox.schema.ledger.AssetOwnership previous = 2;</code>
     */
    io.bloombox.schema.ledger.Assets.AssetOwnership getPrevious();
    /**
     * <pre>
     * Previous asset ownership, allowing chained asset history to be expressed.
     * </pre>
     *
     * <code>.bloombox.schema.ledger.AssetOwnership previous = 2;</code>
     */
    io.bloombox.schema.ledger.Assets.AssetOwnershipOrBuilder getPreviousOrBuilder();
  }
  /**
   * <pre>
   * Specifies digital asset ownership parameters. In most cases, this is simply a single cryptographic identity on the
   * ledger, but may be more complex (in cases of multiple owners, organizational signers for owners, and so on).
   * </pre>
   *
   * Protobuf type {@code bloombox.schema.ledger.AssetOwnership}
   */
  public  static final class AssetOwnership extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:bloombox.schema.ledger.AssetOwnership)
      AssetOwnershipOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use AssetOwnership.newBuilder() to construct.
    private AssetOwnership(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private AssetOwnership() {
      owner_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private AssetOwnership(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                owner_ = new java.util.ArrayList<io.bloombox.schema.ledger.Accounts.LedgerIdentity>();
                mutable_bitField0_ |= 0x00000001;
              }
              owner_.add(
                  input.readMessage(io.bloombox.schema.ledger.Accounts.LedgerIdentity.parser(), extensionRegistry));
              break;
            }
            case 18: {
              io.bloombox.schema.ledger.Assets.AssetOwnership.Builder subBuilder = null;
              if (previous_ != null) {
                subBuilder = previous_.toBuilder();
              }
              previous_ = input.readMessage(io.bloombox.schema.ledger.Assets.AssetOwnership.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(previous_);
                previous_ = subBuilder.buildPartial();
              }

              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          owner_ = java.util.Collections.unmodifiableList(owner_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.bloombox.schema.ledger.Assets.internal_static_bloombox_schema_ledger_AssetOwnership_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.bloombox.schema.ledger.Assets.internal_static_bloombox_schema_ledger_AssetOwnership_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.bloombox.schema.ledger.Assets.AssetOwnership.class, io.bloombox.schema.ledger.Assets.AssetOwnership.Builder.class);
    }

    private int bitField0_;
    public static final int OWNER_FIELD_NUMBER = 1;
    private java.util.List<io.bloombox.schema.ledger.Accounts.LedgerIdentity> owner_;
    /**
     * <pre>
     * Identities of the owners of this digital asset, if known and applicable.
     * </pre>
     *
     * <code>repeated .bloombox.schema.ledger.LedgerIdentity owner = 1;</code>
     */
    public java.util.List<io.bloombox.schema.ledger.Accounts.LedgerIdentity> getOwnerList() {
      return owner_;
    }
    /**
     * <pre>
     * Identities of the owners of this digital asset, if known and applicable.
     * </pre>
     *
     * <code>repeated .bloombox.schema.ledger.LedgerIdentity owner = 1;</code>
     */
    public java.util.List<? extends io.bloombox.schema.ledger.Accounts.LedgerIdentityOrBuilder> 
        getOwnerOrBuilderList() {
      return owner_;
    }
    /**
     * <pre>
     * Identities of the owners of this digital asset, if known and applicable.
     * </pre>
     *
     * <code>repeated .bloombox.schema.ledger.LedgerIdentity owner = 1;</code>
     */
    public int getOwnerCount() {
      return owner_.size();
    }
    /**
     * <pre>
     * Identities of the owners of this digital asset, if known and applicable.
     * </pre>
     *
     * <code>repeated .bloombox.schema.ledger.LedgerIdentity owner = 1;</code>
     */
    public io.bloombox.schema.ledger.Accounts.LedgerIdentity getOwner(int index) {
      return owner_.get(index);
    }
    /**
     * <pre>
     * Identities of the owners of this digital asset, if known and applicable.
     * </pre>
     *
     * <code>repeated .bloombox.schema.ledger.LedgerIdentity owner = 1;</code>
     */
    public io.bloombox.schema.ledger.Accounts.LedgerIdentityOrBuilder getOwnerOrBuilder(
        int index) {
      return owner_.get(index);
    }

    public static final int PREVIOUS_FIELD_NUMBER = 2;
    private io.bloombox.schema.ledger.Assets.AssetOwnership previous_;
    /**
     * <pre>
     * Previous asset ownership, allowing chained asset history to be expressed.
     * </pre>
     *
     * <code>.bloombox.schema.ledger.AssetOwnership previous = 2;</code>
     */
    public boolean hasPrevious() {
      return previous_ != null;
    }
    /**
     * <pre>
     * Previous asset ownership, allowing chained asset history to be expressed.
     * </pre>
     *
     * <code>.bloombox.schema.ledger.AssetOwnership previous = 2;</code>
     */
    public io.bloombox.schema.ledger.Assets.AssetOwnership getPrevious() {
      return previous_ == null ? io.bloombox.schema.ledger.Assets.AssetOwnership.getDefaultInstance() : previous_;
    }
    /**
     * <pre>
     * Previous asset ownership, allowing chained asset history to be expressed.
     * </pre>
     *
     * <code>.bloombox.schema.ledger.AssetOwnership previous = 2;</code>
     */
    public io.bloombox.schema.ledger.Assets.AssetOwnershipOrBuilder getPreviousOrBuilder() {
      return getPrevious();
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < owner_.size(); i++) {
        output.writeMessage(1, owner_.get(i));
      }
      if (previous_ != null) {
        output.writeMessage(2, getPrevious());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < owner_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, owner_.get(i));
      }
      if (previous_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getPrevious());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.bloombox.schema.ledger.Assets.AssetOwnership)) {
        return super.equals(obj);
      }
      io.bloombox.schema.ledger.Assets.AssetOwnership other = (io.bloombox.schema.ledger.Assets.AssetOwnership) obj;

      boolean result = true;
      result = result && getOwnerList()
          .equals(other.getOwnerList());
      result = result && (hasPrevious() == other.hasPrevious());
      if (hasPrevious()) {
        result = result && getPrevious()
            .equals(other.getPrevious());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getOwnerCount() > 0) {
        hash = (37 * hash) + OWNER_FIELD_NUMBER;
        hash = (53 * hash) + getOwnerList().hashCode();
      }
      if (hasPrevious()) {
        hash = (37 * hash) + PREVIOUS_FIELD_NUMBER;
        hash = (53 * hash) + getPrevious().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.bloombox.schema.ledger.Assets.AssetOwnership parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.ledger.Assets.AssetOwnership parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Assets.AssetOwnership parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.ledger.Assets.AssetOwnership parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Assets.AssetOwnership parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.ledger.Assets.AssetOwnership parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Assets.AssetOwnership parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.ledger.Assets.AssetOwnership parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Assets.AssetOwnership parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.ledger.Assets.AssetOwnership parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Assets.AssetOwnership parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.ledger.Assets.AssetOwnership parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.bloombox.schema.ledger.Assets.AssetOwnership prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Specifies digital asset ownership parameters. In most cases, this is simply a single cryptographic identity on the
     * ledger, but may be more complex (in cases of multiple owners, organizational signers for owners, and so on).
     * </pre>
     *
     * Protobuf type {@code bloombox.schema.ledger.AssetOwnership}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:bloombox.schema.ledger.AssetOwnership)
        io.bloombox.schema.ledger.Assets.AssetOwnershipOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.bloombox.schema.ledger.Assets.internal_static_bloombox_schema_ledger_AssetOwnership_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.bloombox.schema.ledger.Assets.internal_static_bloombox_schema_ledger_AssetOwnership_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.bloombox.schema.ledger.Assets.AssetOwnership.class, io.bloombox.schema.ledger.Assets.AssetOwnership.Builder.class);
      }

      // Construct using io.bloombox.schema.ledger.Assets.AssetOwnership.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getOwnerFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (ownerBuilder_ == null) {
          owner_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ownerBuilder_.clear();
        }
        if (previousBuilder_ == null) {
          previous_ = null;
        } else {
          previous_ = null;
          previousBuilder_ = null;
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.bloombox.schema.ledger.Assets.internal_static_bloombox_schema_ledger_AssetOwnership_descriptor;
      }

      public io.bloombox.schema.ledger.Assets.AssetOwnership getDefaultInstanceForType() {
        return io.bloombox.schema.ledger.Assets.AssetOwnership.getDefaultInstance();
      }

      public io.bloombox.schema.ledger.Assets.AssetOwnership build() {
        io.bloombox.schema.ledger.Assets.AssetOwnership result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.bloombox.schema.ledger.Assets.AssetOwnership buildPartial() {
        io.bloombox.schema.ledger.Assets.AssetOwnership result = new io.bloombox.schema.ledger.Assets.AssetOwnership(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (ownerBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            owner_ = java.util.Collections.unmodifiableList(owner_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.owner_ = owner_;
        } else {
          result.owner_ = ownerBuilder_.build();
        }
        if (previousBuilder_ == null) {
          result.previous_ = previous_;
        } else {
          result.previous_ = previousBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.bloombox.schema.ledger.Assets.AssetOwnership) {
          return mergeFrom((io.bloombox.schema.ledger.Assets.AssetOwnership)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.bloombox.schema.ledger.Assets.AssetOwnership other) {
        if (other == io.bloombox.schema.ledger.Assets.AssetOwnership.getDefaultInstance()) return this;
        if (ownerBuilder_ == null) {
          if (!other.owner_.isEmpty()) {
            if (owner_.isEmpty()) {
              owner_ = other.owner_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureOwnerIsMutable();
              owner_.addAll(other.owner_);
            }
            onChanged();
          }
        } else {
          if (!other.owner_.isEmpty()) {
            if (ownerBuilder_.isEmpty()) {
              ownerBuilder_.dispose();
              ownerBuilder_ = null;
              owner_ = other.owner_;
              bitField0_ = (bitField0_ & ~0x00000001);
              ownerBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getOwnerFieldBuilder() : null;
            } else {
              ownerBuilder_.addAllMessages(other.owner_);
            }
          }
        }
        if (other.hasPrevious()) {
          mergePrevious(other.getPrevious());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.bloombox.schema.ledger.Assets.AssetOwnership parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.bloombox.schema.ledger.Assets.AssetOwnership) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<io.bloombox.schema.ledger.Accounts.LedgerIdentity> owner_ =
        java.util.Collections.emptyList();
      private void ensureOwnerIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          owner_ = new java.util.ArrayList<io.bloombox.schema.ledger.Accounts.LedgerIdentity>(owner_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.bloombox.schema.ledger.Accounts.LedgerIdentity, io.bloombox.schema.ledger.Accounts.LedgerIdentity.Builder, io.bloombox.schema.ledger.Accounts.LedgerIdentityOrBuilder> ownerBuilder_;

      /**
       * <pre>
       * Identities of the owners of this digital asset, if known and applicable.
       * </pre>
       *
       * <code>repeated .bloombox.schema.ledger.LedgerIdentity owner = 1;</code>
       */
      public java.util.List<io.bloombox.schema.ledger.Accounts.LedgerIdentity> getOwnerList() {
        if (ownerBuilder_ == null) {
          return java.util.Collections.unmodifiableList(owner_);
        } else {
          return ownerBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Identities of the owners of this digital asset, if known and applicable.
       * </pre>
       *
       * <code>repeated .bloombox.schema.ledger.LedgerIdentity owner = 1;</code>
       */
      public int getOwnerCount() {
        if (ownerBuilder_ == null) {
          return owner_.size();
        } else {
          return ownerBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Identities of the owners of this digital asset, if known and applicable.
       * </pre>
       *
       * <code>repeated .bloombox.schema.ledger.LedgerIdentity owner = 1;</code>
       */
      public io.bloombox.schema.ledger.Accounts.LedgerIdentity getOwner(int index) {
        if (ownerBuilder_ == null) {
          return owner_.get(index);
        } else {
          return ownerBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Identities of the owners of this digital asset, if known and applicable.
       * </pre>
       *
       * <code>repeated .bloombox.schema.ledger.LedgerIdentity owner = 1;</code>
       */
      public Builder setOwner(
          int index, io.bloombox.schema.ledger.Accounts.LedgerIdentity value) {
        if (ownerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOwnerIsMutable();
          owner_.set(index, value);
          onChanged();
        } else {
          ownerBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Identities of the owners of this digital asset, if known and applicable.
       * </pre>
       *
       * <code>repeated .bloombox.schema.ledger.LedgerIdentity owner = 1;</code>
       */
      public Builder setOwner(
          int index, io.bloombox.schema.ledger.Accounts.LedgerIdentity.Builder builderForValue) {
        if (ownerBuilder_ == null) {
          ensureOwnerIsMutable();
          owner_.set(index, builderForValue.build());
          onChanged();
        } else {
          ownerBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Identities of the owners of this digital asset, if known and applicable.
       * </pre>
       *
       * <code>repeated .bloombox.schema.ledger.LedgerIdentity owner = 1;</code>
       */
      public Builder addOwner(io.bloombox.schema.ledger.Accounts.LedgerIdentity value) {
        if (ownerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOwnerIsMutable();
          owner_.add(value);
          onChanged();
        } else {
          ownerBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Identities of the owners of this digital asset, if known and applicable.
       * </pre>
       *
       * <code>repeated .bloombox.schema.ledger.LedgerIdentity owner = 1;</code>
       */
      public Builder addOwner(
          int index, io.bloombox.schema.ledger.Accounts.LedgerIdentity value) {
        if (ownerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOwnerIsMutable();
          owner_.add(index, value);
          onChanged();
        } else {
          ownerBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Identities of the owners of this digital asset, if known and applicable.
       * </pre>
       *
       * <code>repeated .bloombox.schema.ledger.LedgerIdentity owner = 1;</code>
       */
      public Builder addOwner(
          io.bloombox.schema.ledger.Accounts.LedgerIdentity.Builder builderForValue) {
        if (ownerBuilder_ == null) {
          ensureOwnerIsMutable();
          owner_.add(builderForValue.build());
          onChanged();
        } else {
          ownerBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Identities of the owners of this digital asset, if known and applicable.
       * </pre>
       *
       * <code>repeated .bloombox.schema.ledger.LedgerIdentity owner = 1;</code>
       */
      public Builder addOwner(
          int index, io.bloombox.schema.ledger.Accounts.LedgerIdentity.Builder builderForValue) {
        if (ownerBuilder_ == null) {
          ensureOwnerIsMutable();
          owner_.add(index, builderForValue.build());
          onChanged();
        } else {
          ownerBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Identities of the owners of this digital asset, if known and applicable.
       * </pre>
       *
       * <code>repeated .bloombox.schema.ledger.LedgerIdentity owner = 1;</code>
       */
      public Builder addAllOwner(
          java.lang.Iterable<? extends io.bloombox.schema.ledger.Accounts.LedgerIdentity> values) {
        if (ownerBuilder_ == null) {
          ensureOwnerIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, owner_);
          onChanged();
        } else {
          ownerBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Identities of the owners of this digital asset, if known and applicable.
       * </pre>
       *
       * <code>repeated .bloombox.schema.ledger.LedgerIdentity owner = 1;</code>
       */
      public Builder clearOwner() {
        if (ownerBuilder_ == null) {
          owner_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          ownerBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Identities of the owners of this digital asset, if known and applicable.
       * </pre>
       *
       * <code>repeated .bloombox.schema.ledger.LedgerIdentity owner = 1;</code>
       */
      public Builder removeOwner(int index) {
        if (ownerBuilder_ == null) {
          ensureOwnerIsMutable();
          owner_.remove(index);
          onChanged();
        } else {
          ownerBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Identities of the owners of this digital asset, if known and applicable.
       * </pre>
       *
       * <code>repeated .bloombox.schema.ledger.LedgerIdentity owner = 1;</code>
       */
      public io.bloombox.schema.ledger.Accounts.LedgerIdentity.Builder getOwnerBuilder(
          int index) {
        return getOwnerFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Identities of the owners of this digital asset, if known and applicable.
       * </pre>
       *
       * <code>repeated .bloombox.schema.ledger.LedgerIdentity owner = 1;</code>
       */
      public io.bloombox.schema.ledger.Accounts.LedgerIdentityOrBuilder getOwnerOrBuilder(
          int index) {
        if (ownerBuilder_ == null) {
          return owner_.get(index);  } else {
          return ownerBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Identities of the owners of this digital asset, if known and applicable.
       * </pre>
       *
       * <code>repeated .bloombox.schema.ledger.LedgerIdentity owner = 1;</code>
       */
      public java.util.List<? extends io.bloombox.schema.ledger.Accounts.LedgerIdentityOrBuilder> 
           getOwnerOrBuilderList() {
        if (ownerBuilder_ != null) {
          return ownerBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(owner_);
        }
      }
      /**
       * <pre>
       * Identities of the owners of this digital asset, if known and applicable.
       * </pre>
       *
       * <code>repeated .bloombox.schema.ledger.LedgerIdentity owner = 1;</code>
       */
      public io.bloombox.schema.ledger.Accounts.LedgerIdentity.Builder addOwnerBuilder() {
        return getOwnerFieldBuilder().addBuilder(
            io.bloombox.schema.ledger.Accounts.LedgerIdentity.getDefaultInstance());
      }
      /**
       * <pre>
       * Identities of the owners of this digital asset, if known and applicable.
       * </pre>
       *
       * <code>repeated .bloombox.schema.ledger.LedgerIdentity owner = 1;</code>
       */
      public io.bloombox.schema.ledger.Accounts.LedgerIdentity.Builder addOwnerBuilder(
          int index) {
        return getOwnerFieldBuilder().addBuilder(
            index, io.bloombox.schema.ledger.Accounts.LedgerIdentity.getDefaultInstance());
      }
      /**
       * <pre>
       * Identities of the owners of this digital asset, if known and applicable.
       * </pre>
       *
       * <code>repeated .bloombox.schema.ledger.LedgerIdentity owner = 1;</code>
       */
      public java.util.List<io.bloombox.schema.ledger.Accounts.LedgerIdentity.Builder> 
           getOwnerBuilderList() {
        return getOwnerFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.bloombox.schema.ledger.Accounts.LedgerIdentity, io.bloombox.schema.ledger.Accounts.LedgerIdentity.Builder, io.bloombox.schema.ledger.Accounts.LedgerIdentityOrBuilder> 
          getOwnerFieldBuilder() {
        if (ownerBuilder_ == null) {
          ownerBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.bloombox.schema.ledger.Accounts.LedgerIdentity, io.bloombox.schema.ledger.Accounts.LedgerIdentity.Builder, io.bloombox.schema.ledger.Accounts.LedgerIdentityOrBuilder>(
                  owner_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          owner_ = null;
        }
        return ownerBuilder_;
      }

      private io.bloombox.schema.ledger.Assets.AssetOwnership previous_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.ledger.Assets.AssetOwnership, io.bloombox.schema.ledger.Assets.AssetOwnership.Builder, io.bloombox.schema.ledger.Assets.AssetOwnershipOrBuilder> previousBuilder_;
      /**
       * <pre>
       * Previous asset ownership, allowing chained asset history to be expressed.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.AssetOwnership previous = 2;</code>
       */
      public boolean hasPrevious() {
        return previousBuilder_ != null || previous_ != null;
      }
      /**
       * <pre>
       * Previous asset ownership, allowing chained asset history to be expressed.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.AssetOwnership previous = 2;</code>
       */
      public io.bloombox.schema.ledger.Assets.AssetOwnership getPrevious() {
        if (previousBuilder_ == null) {
          return previous_ == null ? io.bloombox.schema.ledger.Assets.AssetOwnership.getDefaultInstance() : previous_;
        } else {
          return previousBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Previous asset ownership, allowing chained asset history to be expressed.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.AssetOwnership previous = 2;</code>
       */
      public Builder setPrevious(io.bloombox.schema.ledger.Assets.AssetOwnership value) {
        if (previousBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          previous_ = value;
          onChanged();
        } else {
          previousBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Previous asset ownership, allowing chained asset history to be expressed.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.AssetOwnership previous = 2;</code>
       */
      public Builder setPrevious(
          io.bloombox.schema.ledger.Assets.AssetOwnership.Builder builderForValue) {
        if (previousBuilder_ == null) {
          previous_ = builderForValue.build();
          onChanged();
        } else {
          previousBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Previous asset ownership, allowing chained asset history to be expressed.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.AssetOwnership previous = 2;</code>
       */
      public Builder mergePrevious(io.bloombox.schema.ledger.Assets.AssetOwnership value) {
        if (previousBuilder_ == null) {
          if (previous_ != null) {
            previous_ =
              io.bloombox.schema.ledger.Assets.AssetOwnership.newBuilder(previous_).mergeFrom(value).buildPartial();
          } else {
            previous_ = value;
          }
          onChanged();
        } else {
          previousBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Previous asset ownership, allowing chained asset history to be expressed.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.AssetOwnership previous = 2;</code>
       */
      public Builder clearPrevious() {
        if (previousBuilder_ == null) {
          previous_ = null;
          onChanged();
        } else {
          previous_ = null;
          previousBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Previous asset ownership, allowing chained asset history to be expressed.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.AssetOwnership previous = 2;</code>
       */
      public io.bloombox.schema.ledger.Assets.AssetOwnership.Builder getPreviousBuilder() {
        
        onChanged();
        return getPreviousFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Previous asset ownership, allowing chained asset history to be expressed.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.AssetOwnership previous = 2;</code>
       */
      public io.bloombox.schema.ledger.Assets.AssetOwnershipOrBuilder getPreviousOrBuilder() {
        if (previousBuilder_ != null) {
          return previousBuilder_.getMessageOrBuilder();
        } else {
          return previous_ == null ?
              io.bloombox.schema.ledger.Assets.AssetOwnership.getDefaultInstance() : previous_;
        }
      }
      /**
       * <pre>
       * Previous asset ownership, allowing chained asset history to be expressed.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.AssetOwnership previous = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.ledger.Assets.AssetOwnership, io.bloombox.schema.ledger.Assets.AssetOwnership.Builder, io.bloombox.schema.ledger.Assets.AssetOwnershipOrBuilder> 
          getPreviousFieldBuilder() {
        if (previousBuilder_ == null) {
          previousBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.bloombox.schema.ledger.Assets.AssetOwnership, io.bloombox.schema.ledger.Assets.AssetOwnership.Builder, io.bloombox.schema.ledger.Assets.AssetOwnershipOrBuilder>(
                  getPrevious(),
                  getParentForChildren(),
                  isClean());
          previous_ = null;
        }
        return previousBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:bloombox.schema.ledger.AssetOwnership)
    }

    // @@protoc_insertion_point(class_scope:bloombox.schema.ledger.AssetOwnership)
    private static final io.bloombox.schema.ledger.Assets.AssetOwnership DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.bloombox.schema.ledger.Assets.AssetOwnership();
    }

    public static io.bloombox.schema.ledger.Assets.AssetOwnership getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<AssetOwnership>
        PARSER = new com.google.protobuf.AbstractParser<AssetOwnership>() {
      public AssetOwnership parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new AssetOwnership(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<AssetOwnership> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<AssetOwnership> getParserForType() {
      return PARSER;
    }

    public io.bloombox.schema.ledger.Assets.AssetOwnership getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DigitalAssetOrBuilder extends
      // @@protoc_insertion_point(interface_extends:bloombox.schema.ledger.DigitalAsset)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Globally unique ID that identifies the asset, generally with a signed cryptographic hash based on the asset content
     * itself. Asset IDs can be generated statelessly as long as the private key for the asset's owner is available.
     * </pre>
     *
     * <code>.bloombox.schema.ledger.AssetKey key = 1;</code>
     */
    boolean hasKey();
    /**
     * <pre>
     * Globally unique ID that identifies the asset, generally with a signed cryptographic hash based on the asset content
     * itself. Asset IDs can be generated statelessly as long as the private key for the asset's owner is available.
     * </pre>
     *
     * <code>.bloombox.schema.ledger.AssetKey key = 1;</code>
     */
    io.bloombox.schema.ledger.Assets.AssetKey getKey();
    /**
     * <pre>
     * Globally unique ID that identifies the asset, generally with a signed cryptographic hash based on the asset content
     * itself. Asset IDs can be generated statelessly as long as the private key for the asset's owner is available.
     * </pre>
     *
     * <code>.bloombox.schema.ledger.AssetKey key = 1;</code>
     */
    io.bloombox.schema.ledger.Assets.AssetKeyOrBuilder getKeyOrBuilder();

    /**
     * <pre>
     * Reference to this digital asset's origin/parent digital asset, if applicable. In many cases a digital asset is
     * spawned or subdivided from an existing digital asset.
     * </pre>
     *
     * <code>.bloombox.schema.ledger.DigitalAsset parent = 2;</code>
     */
    boolean hasParent();
    /**
     * <pre>
     * Reference to this digital asset's origin/parent digital asset, if applicable. In many cases a digital asset is
     * spawned or subdivided from an existing digital asset.
     * </pre>
     *
     * <code>.bloombox.schema.ledger.DigitalAsset parent = 2;</code>
     */
    io.bloombox.schema.ledger.Assets.DigitalAsset getParent();
    /**
     * <pre>
     * Reference to this digital asset's origin/parent digital asset, if applicable. In many cases a digital asset is
     * spawned or subdivided from an existing digital asset.
     * </pre>
     *
     * <code>.bloombox.schema.ledger.DigitalAsset parent = 2;</code>
     */
    io.bloombox.schema.ledger.Assets.DigitalAssetOrBuilder getParentOrBuilder();

    /**
     * <pre>
     * Specifies digital asset content data, which may be transmitted either in structured or encoded form. Asset data
     * is always included because it constitutes the asset ID.
     * </pre>
     *
     * <code>.bloombox.schema.ledger.AssetData data = 3;</code>
     */
    boolean hasData();
    /**
     * <pre>
     * Specifies digital asset content data, which may be transmitted either in structured or encoded form. Asset data
     * is always included because it constitutes the asset ID.
     * </pre>
     *
     * <code>.bloombox.schema.ledger.AssetData data = 3;</code>
     */
    io.bloombox.schema.ledger.Assets.AssetData getData();
    /**
     * <pre>
     * Specifies digital asset content data, which may be transmitted either in structured or encoded form. Asset data
     * is always included because it constitutes the asset ID.
     * </pre>
     *
     * <code>.bloombox.schema.ledger.AssetData data = 3;</code>
     */
    io.bloombox.schema.ledger.Assets.AssetDataOrBuilder getDataOrBuilder();

    /**
     * <pre>
     * Identity of the owner(s) of this digital asset, if known and applicable.
     * </pre>
     *
     * <code>.bloombox.schema.ledger.AssetOwnership owner = 4;</code>
     */
    boolean hasOwner();
    /**
     * <pre>
     * Identity of the owner(s) of this digital asset, if known and applicable.
     * </pre>
     *
     * <code>.bloombox.schema.ledger.AssetOwnership owner = 4;</code>
     */
    io.bloombox.schema.ledger.Assets.AssetOwnership getOwner();
    /**
     * <pre>
     * Identity of the owner(s) of this digital asset, if known and applicable.
     * </pre>
     *
     * <code>.bloombox.schema.ledger.AssetOwnership owner = 4;</code>
     */
    io.bloombox.schema.ledger.Assets.AssetOwnershipOrBuilder getOwnerOrBuilder();

    /**
     * <pre>
     * Fingerprint for the asset data, which carries with it a cryptographic hash verifying the contents' integrity. The
     * hash payload carries with it the algorithm that was used.
     * </pre>
     *
     * <code>.opencannabis.crypto.primitives.integrity.Hash fingerprint = 5;</code>
     */
    boolean hasFingerprint();
    /**
     * <pre>
     * Fingerprint for the asset data, which carries with it a cryptographic hash verifying the contents' integrity. The
     * hash payload carries with it the algorithm that was used.
     * </pre>
     *
     * <code>.opencannabis.crypto.primitives.integrity.Hash fingerprint = 5;</code>
     */
    io.opencannabis.schema.crypto.primitives.integrity.Hash getFingerprint();
    /**
     * <pre>
     * Fingerprint for the asset data, which carries with it a cryptographic hash verifying the contents' integrity. The
     * hash payload carries with it the algorithm that was used.
     * </pre>
     *
     * <code>.opencannabis.crypto.primitives.integrity.Hash fingerprint = 5;</code>
     */
    io.opencannabis.schema.crypto.primitives.integrity.HashOrBuilder getFingerprintOrBuilder();

    /**
     * <pre>
     * Timestamp for when this digital asset was first created.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant created = 98;</code>
     */
    boolean hasCreated();
    /**
     * <pre>
     * Timestamp for when this digital asset was first created.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant created = 98;</code>
     */
    io.opencannabis.schema.temporal.TemporalInstant.Instant getCreated();
    /**
     * <pre>
     * Timestamp for when this digital asset was first created.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant created = 98;</code>
     */
    io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getCreatedOrBuilder();

    /**
     * <pre>
     * Timestamp for when this digital asset was last modified.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant modified = 99;</code>
     */
    boolean hasModified();
    /**
     * <pre>
     * Timestamp for when this digital asset was last modified.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant modified = 99;</code>
     */
    io.opencannabis.schema.temporal.TemporalInstant.Instant getModified();
    /**
     * <pre>
     * Timestamp for when this digital asset was last modified.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant modified = 99;</code>
     */
    io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getModifiedOrBuilder();
  }
  /**
   * <pre>
   * Specifies the concept of a digital asset, which is an asset represented by data, and usually stored or tracked within
   * a blockchain or distributed ledger.
   * </pre>
   *
   * Protobuf type {@code bloombox.schema.ledger.DigitalAsset}
   */
  public  static final class DigitalAsset extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:bloombox.schema.ledger.DigitalAsset)
      DigitalAssetOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use DigitalAsset.newBuilder() to construct.
    private DigitalAsset(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DigitalAsset() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private DigitalAsset(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              io.bloombox.schema.ledger.Assets.AssetKey.Builder subBuilder = null;
              if (key_ != null) {
                subBuilder = key_.toBuilder();
              }
              key_ = input.readMessage(io.bloombox.schema.ledger.Assets.AssetKey.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(key_);
                key_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              io.bloombox.schema.ledger.Assets.DigitalAsset.Builder subBuilder = null;
              if (parent_ != null) {
                subBuilder = parent_.toBuilder();
              }
              parent_ = input.readMessage(io.bloombox.schema.ledger.Assets.DigitalAsset.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(parent_);
                parent_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              io.bloombox.schema.ledger.Assets.AssetData.Builder subBuilder = null;
              if (data_ != null) {
                subBuilder = data_.toBuilder();
              }
              data_ = input.readMessage(io.bloombox.schema.ledger.Assets.AssetData.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(data_);
                data_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              io.bloombox.schema.ledger.Assets.AssetOwnership.Builder subBuilder = null;
              if (owner_ != null) {
                subBuilder = owner_.toBuilder();
              }
              owner_ = input.readMessage(io.bloombox.schema.ledger.Assets.AssetOwnership.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(owner_);
                owner_ = subBuilder.buildPartial();
              }

              break;
            }
            case 42: {
              io.opencannabis.schema.crypto.primitives.integrity.Hash.Builder subBuilder = null;
              if (fingerprint_ != null) {
                subBuilder = fingerprint_.toBuilder();
              }
              fingerprint_ = input.readMessage(io.opencannabis.schema.crypto.primitives.integrity.Hash.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(fingerprint_);
                fingerprint_ = subBuilder.buildPartial();
              }

              break;
            }
            case 786: {
              io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder subBuilder = null;
              if (created_ != null) {
                subBuilder = created_.toBuilder();
              }
              created_ = input.readMessage(io.opencannabis.schema.temporal.TemporalInstant.Instant.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(created_);
                created_ = subBuilder.buildPartial();
              }

              break;
            }
            case 794: {
              io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder subBuilder = null;
              if (modified_ != null) {
                subBuilder = modified_.toBuilder();
              }
              modified_ = input.readMessage(io.opencannabis.schema.temporal.TemporalInstant.Instant.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(modified_);
                modified_ = subBuilder.buildPartial();
              }

              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.bloombox.schema.ledger.Assets.internal_static_bloombox_schema_ledger_DigitalAsset_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.bloombox.schema.ledger.Assets.internal_static_bloombox_schema_ledger_DigitalAsset_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.bloombox.schema.ledger.Assets.DigitalAsset.class, io.bloombox.schema.ledger.Assets.DigitalAsset.Builder.class);
    }

    public static final int KEY_FIELD_NUMBER = 1;
    private io.bloombox.schema.ledger.Assets.AssetKey key_;
    /**
     * <pre>
     * Globally unique ID that identifies the asset, generally with a signed cryptographic hash based on the asset content
     * itself. Asset IDs can be generated statelessly as long as the private key for the asset's owner is available.
     * </pre>
     *
     * <code>.bloombox.schema.ledger.AssetKey key = 1;</code>
     */
    public boolean hasKey() {
      return key_ != null;
    }
    /**
     * <pre>
     * Globally unique ID that identifies the asset, generally with a signed cryptographic hash based on the asset content
     * itself. Asset IDs can be generated statelessly as long as the private key for the asset's owner is available.
     * </pre>
     *
     * <code>.bloombox.schema.ledger.AssetKey key = 1;</code>
     */
    public io.bloombox.schema.ledger.Assets.AssetKey getKey() {
      return key_ == null ? io.bloombox.schema.ledger.Assets.AssetKey.getDefaultInstance() : key_;
    }
    /**
     * <pre>
     * Globally unique ID that identifies the asset, generally with a signed cryptographic hash based on the asset content
     * itself. Asset IDs can be generated statelessly as long as the private key for the asset's owner is available.
     * </pre>
     *
     * <code>.bloombox.schema.ledger.AssetKey key = 1;</code>
     */
    public io.bloombox.schema.ledger.Assets.AssetKeyOrBuilder getKeyOrBuilder() {
      return getKey();
    }

    public static final int PARENT_FIELD_NUMBER = 2;
    private io.bloombox.schema.ledger.Assets.DigitalAsset parent_;
    /**
     * <pre>
     * Reference to this digital asset's origin/parent digital asset, if applicable. In many cases a digital asset is
     * spawned or subdivided from an existing digital asset.
     * </pre>
     *
     * <code>.bloombox.schema.ledger.DigitalAsset parent = 2;</code>
     */
    public boolean hasParent() {
      return parent_ != null;
    }
    /**
     * <pre>
     * Reference to this digital asset's origin/parent digital asset, if applicable. In many cases a digital asset is
     * spawned or subdivided from an existing digital asset.
     * </pre>
     *
     * <code>.bloombox.schema.ledger.DigitalAsset parent = 2;</code>
     */
    public io.bloombox.schema.ledger.Assets.DigitalAsset getParent() {
      return parent_ == null ? io.bloombox.schema.ledger.Assets.DigitalAsset.getDefaultInstance() : parent_;
    }
    /**
     * <pre>
     * Reference to this digital asset's origin/parent digital asset, if applicable. In many cases a digital asset is
     * spawned or subdivided from an existing digital asset.
     * </pre>
     *
     * <code>.bloombox.schema.ledger.DigitalAsset parent = 2;</code>
     */
    public io.bloombox.schema.ledger.Assets.DigitalAssetOrBuilder getParentOrBuilder() {
      return getParent();
    }

    public static final int DATA_FIELD_NUMBER = 3;
    private io.bloombox.schema.ledger.Assets.AssetData data_;
    /**
     * <pre>
     * Specifies digital asset content data, which may be transmitted either in structured or encoded form. Asset data
     * is always included because it constitutes the asset ID.
     * </pre>
     *
     * <code>.bloombox.schema.ledger.AssetData data = 3;</code>
     */
    public boolean hasData() {
      return data_ != null;
    }
    /**
     * <pre>
     * Specifies digital asset content data, which may be transmitted either in structured or encoded form. Asset data
     * is always included because it constitutes the asset ID.
     * </pre>
     *
     * <code>.bloombox.schema.ledger.AssetData data = 3;</code>
     */
    public io.bloombox.schema.ledger.Assets.AssetData getData() {
      return data_ == null ? io.bloombox.schema.ledger.Assets.AssetData.getDefaultInstance() : data_;
    }
    /**
     * <pre>
     * Specifies digital asset content data, which may be transmitted either in structured or encoded form. Asset data
     * is always included because it constitutes the asset ID.
     * </pre>
     *
     * <code>.bloombox.schema.ledger.AssetData data = 3;</code>
     */
    public io.bloombox.schema.ledger.Assets.AssetDataOrBuilder getDataOrBuilder() {
      return getData();
    }

    public static final int OWNER_FIELD_NUMBER = 4;
    private io.bloombox.schema.ledger.Assets.AssetOwnership owner_;
    /**
     * <pre>
     * Identity of the owner(s) of this digital asset, if known and applicable.
     * </pre>
     *
     * <code>.bloombox.schema.ledger.AssetOwnership owner = 4;</code>
     */
    public boolean hasOwner() {
      return owner_ != null;
    }
    /**
     * <pre>
     * Identity of the owner(s) of this digital asset, if known and applicable.
     * </pre>
     *
     * <code>.bloombox.schema.ledger.AssetOwnership owner = 4;</code>
     */
    public io.bloombox.schema.ledger.Assets.AssetOwnership getOwner() {
      return owner_ == null ? io.bloombox.schema.ledger.Assets.AssetOwnership.getDefaultInstance() : owner_;
    }
    /**
     * <pre>
     * Identity of the owner(s) of this digital asset, if known and applicable.
     * </pre>
     *
     * <code>.bloombox.schema.ledger.AssetOwnership owner = 4;</code>
     */
    public io.bloombox.schema.ledger.Assets.AssetOwnershipOrBuilder getOwnerOrBuilder() {
      return getOwner();
    }

    public static final int FINGERPRINT_FIELD_NUMBER = 5;
    private io.opencannabis.schema.crypto.primitives.integrity.Hash fingerprint_;
    /**
     * <pre>
     * Fingerprint for the asset data, which carries with it a cryptographic hash verifying the contents' integrity. The
     * hash payload carries with it the algorithm that was used.
     * </pre>
     *
     * <code>.opencannabis.crypto.primitives.integrity.Hash fingerprint = 5;</code>
     */
    public boolean hasFingerprint() {
      return fingerprint_ != null;
    }
    /**
     * <pre>
     * Fingerprint for the asset data, which carries with it a cryptographic hash verifying the contents' integrity. The
     * hash payload carries with it the algorithm that was used.
     * </pre>
     *
     * <code>.opencannabis.crypto.primitives.integrity.Hash fingerprint = 5;</code>
     */
    public io.opencannabis.schema.crypto.primitives.integrity.Hash getFingerprint() {
      return fingerprint_ == null ? io.opencannabis.schema.crypto.primitives.integrity.Hash.getDefaultInstance() : fingerprint_;
    }
    /**
     * <pre>
     * Fingerprint for the asset data, which carries with it a cryptographic hash verifying the contents' integrity. The
     * hash payload carries with it the algorithm that was used.
     * </pre>
     *
     * <code>.opencannabis.crypto.primitives.integrity.Hash fingerprint = 5;</code>
     */
    public io.opencannabis.schema.crypto.primitives.integrity.HashOrBuilder getFingerprintOrBuilder() {
      return getFingerprint();
    }

    public static final int CREATED_FIELD_NUMBER = 98;
    private io.opencannabis.schema.temporal.TemporalInstant.Instant created_;
    /**
     * <pre>
     * Timestamp for when this digital asset was first created.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant created = 98;</code>
     */
    public boolean hasCreated() {
      return created_ != null;
    }
    /**
     * <pre>
     * Timestamp for when this digital asset was first created.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant created = 98;</code>
     */
    public io.opencannabis.schema.temporal.TemporalInstant.Instant getCreated() {
      return created_ == null ? io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : created_;
    }
    /**
     * <pre>
     * Timestamp for when this digital asset was first created.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant created = 98;</code>
     */
    public io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getCreatedOrBuilder() {
      return getCreated();
    }

    public static final int MODIFIED_FIELD_NUMBER = 99;
    private io.opencannabis.schema.temporal.TemporalInstant.Instant modified_;
    /**
     * <pre>
     * Timestamp for when this digital asset was last modified.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant modified = 99;</code>
     */
    public boolean hasModified() {
      return modified_ != null;
    }
    /**
     * <pre>
     * Timestamp for when this digital asset was last modified.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant modified = 99;</code>
     */
    public io.opencannabis.schema.temporal.TemporalInstant.Instant getModified() {
      return modified_ == null ? io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : modified_;
    }
    /**
     * <pre>
     * Timestamp for when this digital asset was last modified.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant modified = 99;</code>
     */
    public io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getModifiedOrBuilder() {
      return getModified();
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (key_ != null) {
        output.writeMessage(1, getKey());
      }
      if (parent_ != null) {
        output.writeMessage(2, getParent());
      }
      if (data_ != null) {
        output.writeMessage(3, getData());
      }
      if (owner_ != null) {
        output.writeMessage(4, getOwner());
      }
      if (fingerprint_ != null) {
        output.writeMessage(5, getFingerprint());
      }
      if (created_ != null) {
        output.writeMessage(98, getCreated());
      }
      if (modified_ != null) {
        output.writeMessage(99, getModified());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (key_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getKey());
      }
      if (parent_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getParent());
      }
      if (data_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getData());
      }
      if (owner_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getOwner());
      }
      if (fingerprint_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getFingerprint());
      }
      if (created_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(98, getCreated());
      }
      if (modified_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(99, getModified());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.bloombox.schema.ledger.Assets.DigitalAsset)) {
        return super.equals(obj);
      }
      io.bloombox.schema.ledger.Assets.DigitalAsset other = (io.bloombox.schema.ledger.Assets.DigitalAsset) obj;

      boolean result = true;
      result = result && (hasKey() == other.hasKey());
      if (hasKey()) {
        result = result && getKey()
            .equals(other.getKey());
      }
      result = result && (hasParent() == other.hasParent());
      if (hasParent()) {
        result = result && getParent()
            .equals(other.getParent());
      }
      result = result && (hasData() == other.hasData());
      if (hasData()) {
        result = result && getData()
            .equals(other.getData());
      }
      result = result && (hasOwner() == other.hasOwner());
      if (hasOwner()) {
        result = result && getOwner()
            .equals(other.getOwner());
      }
      result = result && (hasFingerprint() == other.hasFingerprint());
      if (hasFingerprint()) {
        result = result && getFingerprint()
            .equals(other.getFingerprint());
      }
      result = result && (hasCreated() == other.hasCreated());
      if (hasCreated()) {
        result = result && getCreated()
            .equals(other.getCreated());
      }
      result = result && (hasModified() == other.hasModified());
      if (hasModified()) {
        result = result && getModified()
            .equals(other.getModified());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasKey()) {
        hash = (37 * hash) + KEY_FIELD_NUMBER;
        hash = (53 * hash) + getKey().hashCode();
      }
      if (hasParent()) {
        hash = (37 * hash) + PARENT_FIELD_NUMBER;
        hash = (53 * hash) + getParent().hashCode();
      }
      if (hasData()) {
        hash = (37 * hash) + DATA_FIELD_NUMBER;
        hash = (53 * hash) + getData().hashCode();
      }
      if (hasOwner()) {
        hash = (37 * hash) + OWNER_FIELD_NUMBER;
        hash = (53 * hash) + getOwner().hashCode();
      }
      if (hasFingerprint()) {
        hash = (37 * hash) + FINGERPRINT_FIELD_NUMBER;
        hash = (53 * hash) + getFingerprint().hashCode();
      }
      if (hasCreated()) {
        hash = (37 * hash) + CREATED_FIELD_NUMBER;
        hash = (53 * hash) + getCreated().hashCode();
      }
      if (hasModified()) {
        hash = (37 * hash) + MODIFIED_FIELD_NUMBER;
        hash = (53 * hash) + getModified().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.bloombox.schema.ledger.Assets.DigitalAsset parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.ledger.Assets.DigitalAsset parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Assets.DigitalAsset parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.ledger.Assets.DigitalAsset parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Assets.DigitalAsset parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.ledger.Assets.DigitalAsset parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Assets.DigitalAsset parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.ledger.Assets.DigitalAsset parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Assets.DigitalAsset parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.ledger.Assets.DigitalAsset parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Assets.DigitalAsset parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.ledger.Assets.DigitalAsset parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.bloombox.schema.ledger.Assets.DigitalAsset prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Specifies the concept of a digital asset, which is an asset represented by data, and usually stored or tracked within
     * a blockchain or distributed ledger.
     * </pre>
     *
     * Protobuf type {@code bloombox.schema.ledger.DigitalAsset}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:bloombox.schema.ledger.DigitalAsset)
        io.bloombox.schema.ledger.Assets.DigitalAssetOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.bloombox.schema.ledger.Assets.internal_static_bloombox_schema_ledger_DigitalAsset_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.bloombox.schema.ledger.Assets.internal_static_bloombox_schema_ledger_DigitalAsset_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.bloombox.schema.ledger.Assets.DigitalAsset.class, io.bloombox.schema.ledger.Assets.DigitalAsset.Builder.class);
      }

      // Construct using io.bloombox.schema.ledger.Assets.DigitalAsset.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        if (keyBuilder_ == null) {
          key_ = null;
        } else {
          key_ = null;
          keyBuilder_ = null;
        }
        if (parentBuilder_ == null) {
          parent_ = null;
        } else {
          parent_ = null;
          parentBuilder_ = null;
        }
        if (dataBuilder_ == null) {
          data_ = null;
        } else {
          data_ = null;
          dataBuilder_ = null;
        }
        if (ownerBuilder_ == null) {
          owner_ = null;
        } else {
          owner_ = null;
          ownerBuilder_ = null;
        }
        if (fingerprintBuilder_ == null) {
          fingerprint_ = null;
        } else {
          fingerprint_ = null;
          fingerprintBuilder_ = null;
        }
        if (createdBuilder_ == null) {
          created_ = null;
        } else {
          created_ = null;
          createdBuilder_ = null;
        }
        if (modifiedBuilder_ == null) {
          modified_ = null;
        } else {
          modified_ = null;
          modifiedBuilder_ = null;
        }
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.bloombox.schema.ledger.Assets.internal_static_bloombox_schema_ledger_DigitalAsset_descriptor;
      }

      public io.bloombox.schema.ledger.Assets.DigitalAsset getDefaultInstanceForType() {
        return io.bloombox.schema.ledger.Assets.DigitalAsset.getDefaultInstance();
      }

      public io.bloombox.schema.ledger.Assets.DigitalAsset build() {
        io.bloombox.schema.ledger.Assets.DigitalAsset result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.bloombox.schema.ledger.Assets.DigitalAsset buildPartial() {
        io.bloombox.schema.ledger.Assets.DigitalAsset result = new io.bloombox.schema.ledger.Assets.DigitalAsset(this);
        if (keyBuilder_ == null) {
          result.key_ = key_;
        } else {
          result.key_ = keyBuilder_.build();
        }
        if (parentBuilder_ == null) {
          result.parent_ = parent_;
        } else {
          result.parent_ = parentBuilder_.build();
        }
        if (dataBuilder_ == null) {
          result.data_ = data_;
        } else {
          result.data_ = dataBuilder_.build();
        }
        if (ownerBuilder_ == null) {
          result.owner_ = owner_;
        } else {
          result.owner_ = ownerBuilder_.build();
        }
        if (fingerprintBuilder_ == null) {
          result.fingerprint_ = fingerprint_;
        } else {
          result.fingerprint_ = fingerprintBuilder_.build();
        }
        if (createdBuilder_ == null) {
          result.created_ = created_;
        } else {
          result.created_ = createdBuilder_.build();
        }
        if (modifiedBuilder_ == null) {
          result.modified_ = modified_;
        } else {
          result.modified_ = modifiedBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.bloombox.schema.ledger.Assets.DigitalAsset) {
          return mergeFrom((io.bloombox.schema.ledger.Assets.DigitalAsset)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.bloombox.schema.ledger.Assets.DigitalAsset other) {
        if (other == io.bloombox.schema.ledger.Assets.DigitalAsset.getDefaultInstance()) return this;
        if (other.hasKey()) {
          mergeKey(other.getKey());
        }
        if (other.hasParent()) {
          mergeParent(other.getParent());
        }
        if (other.hasData()) {
          mergeData(other.getData());
        }
        if (other.hasOwner()) {
          mergeOwner(other.getOwner());
        }
        if (other.hasFingerprint()) {
          mergeFingerprint(other.getFingerprint());
        }
        if (other.hasCreated()) {
          mergeCreated(other.getCreated());
        }
        if (other.hasModified()) {
          mergeModified(other.getModified());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.bloombox.schema.ledger.Assets.DigitalAsset parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.bloombox.schema.ledger.Assets.DigitalAsset) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private io.bloombox.schema.ledger.Assets.AssetKey key_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.ledger.Assets.AssetKey, io.bloombox.schema.ledger.Assets.AssetKey.Builder, io.bloombox.schema.ledger.Assets.AssetKeyOrBuilder> keyBuilder_;
      /**
       * <pre>
       * Globally unique ID that identifies the asset, generally with a signed cryptographic hash based on the asset content
       * itself. Asset IDs can be generated statelessly as long as the private key for the asset's owner is available.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.AssetKey key = 1;</code>
       */
      public boolean hasKey() {
        return keyBuilder_ != null || key_ != null;
      }
      /**
       * <pre>
       * Globally unique ID that identifies the asset, generally with a signed cryptographic hash based on the asset content
       * itself. Asset IDs can be generated statelessly as long as the private key for the asset's owner is available.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.AssetKey key = 1;</code>
       */
      public io.bloombox.schema.ledger.Assets.AssetKey getKey() {
        if (keyBuilder_ == null) {
          return key_ == null ? io.bloombox.schema.ledger.Assets.AssetKey.getDefaultInstance() : key_;
        } else {
          return keyBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Globally unique ID that identifies the asset, generally with a signed cryptographic hash based on the asset content
       * itself. Asset IDs can be generated statelessly as long as the private key for the asset's owner is available.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.AssetKey key = 1;</code>
       */
      public Builder setKey(io.bloombox.schema.ledger.Assets.AssetKey value) {
        if (keyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          key_ = value;
          onChanged();
        } else {
          keyBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Globally unique ID that identifies the asset, generally with a signed cryptographic hash based on the asset content
       * itself. Asset IDs can be generated statelessly as long as the private key for the asset's owner is available.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.AssetKey key = 1;</code>
       */
      public Builder setKey(
          io.bloombox.schema.ledger.Assets.AssetKey.Builder builderForValue) {
        if (keyBuilder_ == null) {
          key_ = builderForValue.build();
          onChanged();
        } else {
          keyBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Globally unique ID that identifies the asset, generally with a signed cryptographic hash based on the asset content
       * itself. Asset IDs can be generated statelessly as long as the private key for the asset's owner is available.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.AssetKey key = 1;</code>
       */
      public Builder mergeKey(io.bloombox.schema.ledger.Assets.AssetKey value) {
        if (keyBuilder_ == null) {
          if (key_ != null) {
            key_ =
              io.bloombox.schema.ledger.Assets.AssetKey.newBuilder(key_).mergeFrom(value).buildPartial();
          } else {
            key_ = value;
          }
          onChanged();
        } else {
          keyBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Globally unique ID that identifies the asset, generally with a signed cryptographic hash based on the asset content
       * itself. Asset IDs can be generated statelessly as long as the private key for the asset's owner is available.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.AssetKey key = 1;</code>
       */
      public Builder clearKey() {
        if (keyBuilder_ == null) {
          key_ = null;
          onChanged();
        } else {
          key_ = null;
          keyBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Globally unique ID that identifies the asset, generally with a signed cryptographic hash based on the asset content
       * itself. Asset IDs can be generated statelessly as long as the private key for the asset's owner is available.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.AssetKey key = 1;</code>
       */
      public io.bloombox.schema.ledger.Assets.AssetKey.Builder getKeyBuilder() {
        
        onChanged();
        return getKeyFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Globally unique ID that identifies the asset, generally with a signed cryptographic hash based on the asset content
       * itself. Asset IDs can be generated statelessly as long as the private key for the asset's owner is available.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.AssetKey key = 1;</code>
       */
      public io.bloombox.schema.ledger.Assets.AssetKeyOrBuilder getKeyOrBuilder() {
        if (keyBuilder_ != null) {
          return keyBuilder_.getMessageOrBuilder();
        } else {
          return key_ == null ?
              io.bloombox.schema.ledger.Assets.AssetKey.getDefaultInstance() : key_;
        }
      }
      /**
       * <pre>
       * Globally unique ID that identifies the asset, generally with a signed cryptographic hash based on the asset content
       * itself. Asset IDs can be generated statelessly as long as the private key for the asset's owner is available.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.AssetKey key = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.ledger.Assets.AssetKey, io.bloombox.schema.ledger.Assets.AssetKey.Builder, io.bloombox.schema.ledger.Assets.AssetKeyOrBuilder> 
          getKeyFieldBuilder() {
        if (keyBuilder_ == null) {
          keyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.bloombox.schema.ledger.Assets.AssetKey, io.bloombox.schema.ledger.Assets.AssetKey.Builder, io.bloombox.schema.ledger.Assets.AssetKeyOrBuilder>(
                  getKey(),
                  getParentForChildren(),
                  isClean());
          key_ = null;
        }
        return keyBuilder_;
      }

      private io.bloombox.schema.ledger.Assets.DigitalAsset parent_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.ledger.Assets.DigitalAsset, io.bloombox.schema.ledger.Assets.DigitalAsset.Builder, io.bloombox.schema.ledger.Assets.DigitalAssetOrBuilder> parentBuilder_;
      /**
       * <pre>
       * Reference to this digital asset's origin/parent digital asset, if applicable. In many cases a digital asset is
       * spawned or subdivided from an existing digital asset.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.DigitalAsset parent = 2;</code>
       */
      public boolean hasParent() {
        return parentBuilder_ != null || parent_ != null;
      }
      /**
       * <pre>
       * Reference to this digital asset's origin/parent digital asset, if applicable. In many cases a digital asset is
       * spawned or subdivided from an existing digital asset.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.DigitalAsset parent = 2;</code>
       */
      public io.bloombox.schema.ledger.Assets.DigitalAsset getParent() {
        if (parentBuilder_ == null) {
          return parent_ == null ? io.bloombox.schema.ledger.Assets.DigitalAsset.getDefaultInstance() : parent_;
        } else {
          return parentBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Reference to this digital asset's origin/parent digital asset, if applicable. In many cases a digital asset is
       * spawned or subdivided from an existing digital asset.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.DigitalAsset parent = 2;</code>
       */
      public Builder setParent(io.bloombox.schema.ledger.Assets.DigitalAsset value) {
        if (parentBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          parent_ = value;
          onChanged();
        } else {
          parentBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Reference to this digital asset's origin/parent digital asset, if applicable. In many cases a digital asset is
       * spawned or subdivided from an existing digital asset.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.DigitalAsset parent = 2;</code>
       */
      public Builder setParent(
          io.bloombox.schema.ledger.Assets.DigitalAsset.Builder builderForValue) {
        if (parentBuilder_ == null) {
          parent_ = builderForValue.build();
          onChanged();
        } else {
          parentBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Reference to this digital asset's origin/parent digital asset, if applicable. In many cases a digital asset is
       * spawned or subdivided from an existing digital asset.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.DigitalAsset parent = 2;</code>
       */
      public Builder mergeParent(io.bloombox.schema.ledger.Assets.DigitalAsset value) {
        if (parentBuilder_ == null) {
          if (parent_ != null) {
            parent_ =
              io.bloombox.schema.ledger.Assets.DigitalAsset.newBuilder(parent_).mergeFrom(value).buildPartial();
          } else {
            parent_ = value;
          }
          onChanged();
        } else {
          parentBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Reference to this digital asset's origin/parent digital asset, if applicable. In many cases a digital asset is
       * spawned or subdivided from an existing digital asset.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.DigitalAsset parent = 2;</code>
       */
      public Builder clearParent() {
        if (parentBuilder_ == null) {
          parent_ = null;
          onChanged();
        } else {
          parent_ = null;
          parentBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Reference to this digital asset's origin/parent digital asset, if applicable. In many cases a digital asset is
       * spawned or subdivided from an existing digital asset.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.DigitalAsset parent = 2;</code>
       */
      public io.bloombox.schema.ledger.Assets.DigitalAsset.Builder getParentBuilder() {
        
        onChanged();
        return getParentFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Reference to this digital asset's origin/parent digital asset, if applicable. In many cases a digital asset is
       * spawned or subdivided from an existing digital asset.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.DigitalAsset parent = 2;</code>
       */
      public io.bloombox.schema.ledger.Assets.DigitalAssetOrBuilder getParentOrBuilder() {
        if (parentBuilder_ != null) {
          return parentBuilder_.getMessageOrBuilder();
        } else {
          return parent_ == null ?
              io.bloombox.schema.ledger.Assets.DigitalAsset.getDefaultInstance() : parent_;
        }
      }
      /**
       * <pre>
       * Reference to this digital asset's origin/parent digital asset, if applicable. In many cases a digital asset is
       * spawned or subdivided from an existing digital asset.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.DigitalAsset parent = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.ledger.Assets.DigitalAsset, io.bloombox.schema.ledger.Assets.DigitalAsset.Builder, io.bloombox.schema.ledger.Assets.DigitalAssetOrBuilder> 
          getParentFieldBuilder() {
        if (parentBuilder_ == null) {
          parentBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.bloombox.schema.ledger.Assets.DigitalAsset, io.bloombox.schema.ledger.Assets.DigitalAsset.Builder, io.bloombox.schema.ledger.Assets.DigitalAssetOrBuilder>(
                  getParent(),
                  getParentForChildren(),
                  isClean());
          parent_ = null;
        }
        return parentBuilder_;
      }

      private io.bloombox.schema.ledger.Assets.AssetData data_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.ledger.Assets.AssetData, io.bloombox.schema.ledger.Assets.AssetData.Builder, io.bloombox.schema.ledger.Assets.AssetDataOrBuilder> dataBuilder_;
      /**
       * <pre>
       * Specifies digital asset content data, which may be transmitted either in structured or encoded form. Asset data
       * is always included because it constitutes the asset ID.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.AssetData data = 3;</code>
       */
      public boolean hasData() {
        return dataBuilder_ != null || data_ != null;
      }
      /**
       * <pre>
       * Specifies digital asset content data, which may be transmitted either in structured or encoded form. Asset data
       * is always included because it constitutes the asset ID.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.AssetData data = 3;</code>
       */
      public io.bloombox.schema.ledger.Assets.AssetData getData() {
        if (dataBuilder_ == null) {
          return data_ == null ? io.bloombox.schema.ledger.Assets.AssetData.getDefaultInstance() : data_;
        } else {
          return dataBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Specifies digital asset content data, which may be transmitted either in structured or encoded form. Asset data
       * is always included because it constitutes the asset ID.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.AssetData data = 3;</code>
       */
      public Builder setData(io.bloombox.schema.ledger.Assets.AssetData value) {
        if (dataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          data_ = value;
          onChanged();
        } else {
          dataBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Specifies digital asset content data, which may be transmitted either in structured or encoded form. Asset data
       * is always included because it constitutes the asset ID.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.AssetData data = 3;</code>
       */
      public Builder setData(
          io.bloombox.schema.ledger.Assets.AssetData.Builder builderForValue) {
        if (dataBuilder_ == null) {
          data_ = builderForValue.build();
          onChanged();
        } else {
          dataBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Specifies digital asset content data, which may be transmitted either in structured or encoded form. Asset data
       * is always included because it constitutes the asset ID.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.AssetData data = 3;</code>
       */
      public Builder mergeData(io.bloombox.schema.ledger.Assets.AssetData value) {
        if (dataBuilder_ == null) {
          if (data_ != null) {
            data_ =
              io.bloombox.schema.ledger.Assets.AssetData.newBuilder(data_).mergeFrom(value).buildPartial();
          } else {
            data_ = value;
          }
          onChanged();
        } else {
          dataBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Specifies digital asset content data, which may be transmitted either in structured or encoded form. Asset data
       * is always included because it constitutes the asset ID.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.AssetData data = 3;</code>
       */
      public Builder clearData() {
        if (dataBuilder_ == null) {
          data_ = null;
          onChanged();
        } else {
          data_ = null;
          dataBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Specifies digital asset content data, which may be transmitted either in structured or encoded form. Asset data
       * is always included because it constitutes the asset ID.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.AssetData data = 3;</code>
       */
      public io.bloombox.schema.ledger.Assets.AssetData.Builder getDataBuilder() {
        
        onChanged();
        return getDataFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Specifies digital asset content data, which may be transmitted either in structured or encoded form. Asset data
       * is always included because it constitutes the asset ID.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.AssetData data = 3;</code>
       */
      public io.bloombox.schema.ledger.Assets.AssetDataOrBuilder getDataOrBuilder() {
        if (dataBuilder_ != null) {
          return dataBuilder_.getMessageOrBuilder();
        } else {
          return data_ == null ?
              io.bloombox.schema.ledger.Assets.AssetData.getDefaultInstance() : data_;
        }
      }
      /**
       * <pre>
       * Specifies digital asset content data, which may be transmitted either in structured or encoded form. Asset data
       * is always included because it constitutes the asset ID.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.AssetData data = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.ledger.Assets.AssetData, io.bloombox.schema.ledger.Assets.AssetData.Builder, io.bloombox.schema.ledger.Assets.AssetDataOrBuilder> 
          getDataFieldBuilder() {
        if (dataBuilder_ == null) {
          dataBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.bloombox.schema.ledger.Assets.AssetData, io.bloombox.schema.ledger.Assets.AssetData.Builder, io.bloombox.schema.ledger.Assets.AssetDataOrBuilder>(
                  getData(),
                  getParentForChildren(),
                  isClean());
          data_ = null;
        }
        return dataBuilder_;
      }

      private io.bloombox.schema.ledger.Assets.AssetOwnership owner_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.ledger.Assets.AssetOwnership, io.bloombox.schema.ledger.Assets.AssetOwnership.Builder, io.bloombox.schema.ledger.Assets.AssetOwnershipOrBuilder> ownerBuilder_;
      /**
       * <pre>
       * Identity of the owner(s) of this digital asset, if known and applicable.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.AssetOwnership owner = 4;</code>
       */
      public boolean hasOwner() {
        return ownerBuilder_ != null || owner_ != null;
      }
      /**
       * <pre>
       * Identity of the owner(s) of this digital asset, if known and applicable.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.AssetOwnership owner = 4;</code>
       */
      public io.bloombox.schema.ledger.Assets.AssetOwnership getOwner() {
        if (ownerBuilder_ == null) {
          return owner_ == null ? io.bloombox.schema.ledger.Assets.AssetOwnership.getDefaultInstance() : owner_;
        } else {
          return ownerBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Identity of the owner(s) of this digital asset, if known and applicable.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.AssetOwnership owner = 4;</code>
       */
      public Builder setOwner(io.bloombox.schema.ledger.Assets.AssetOwnership value) {
        if (ownerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          owner_ = value;
          onChanged();
        } else {
          ownerBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Identity of the owner(s) of this digital asset, if known and applicable.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.AssetOwnership owner = 4;</code>
       */
      public Builder setOwner(
          io.bloombox.schema.ledger.Assets.AssetOwnership.Builder builderForValue) {
        if (ownerBuilder_ == null) {
          owner_ = builderForValue.build();
          onChanged();
        } else {
          ownerBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Identity of the owner(s) of this digital asset, if known and applicable.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.AssetOwnership owner = 4;</code>
       */
      public Builder mergeOwner(io.bloombox.schema.ledger.Assets.AssetOwnership value) {
        if (ownerBuilder_ == null) {
          if (owner_ != null) {
            owner_ =
              io.bloombox.schema.ledger.Assets.AssetOwnership.newBuilder(owner_).mergeFrom(value).buildPartial();
          } else {
            owner_ = value;
          }
          onChanged();
        } else {
          ownerBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Identity of the owner(s) of this digital asset, if known and applicable.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.AssetOwnership owner = 4;</code>
       */
      public Builder clearOwner() {
        if (ownerBuilder_ == null) {
          owner_ = null;
          onChanged();
        } else {
          owner_ = null;
          ownerBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Identity of the owner(s) of this digital asset, if known and applicable.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.AssetOwnership owner = 4;</code>
       */
      public io.bloombox.schema.ledger.Assets.AssetOwnership.Builder getOwnerBuilder() {
        
        onChanged();
        return getOwnerFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Identity of the owner(s) of this digital asset, if known and applicable.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.AssetOwnership owner = 4;</code>
       */
      public io.bloombox.schema.ledger.Assets.AssetOwnershipOrBuilder getOwnerOrBuilder() {
        if (ownerBuilder_ != null) {
          return ownerBuilder_.getMessageOrBuilder();
        } else {
          return owner_ == null ?
              io.bloombox.schema.ledger.Assets.AssetOwnership.getDefaultInstance() : owner_;
        }
      }
      /**
       * <pre>
       * Identity of the owner(s) of this digital asset, if known and applicable.
       * </pre>
       *
       * <code>.bloombox.schema.ledger.AssetOwnership owner = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.ledger.Assets.AssetOwnership, io.bloombox.schema.ledger.Assets.AssetOwnership.Builder, io.bloombox.schema.ledger.Assets.AssetOwnershipOrBuilder> 
          getOwnerFieldBuilder() {
        if (ownerBuilder_ == null) {
          ownerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.bloombox.schema.ledger.Assets.AssetOwnership, io.bloombox.schema.ledger.Assets.AssetOwnership.Builder, io.bloombox.schema.ledger.Assets.AssetOwnershipOrBuilder>(
                  getOwner(),
                  getParentForChildren(),
                  isClean());
          owner_ = null;
        }
        return ownerBuilder_;
      }

      private io.opencannabis.schema.crypto.primitives.integrity.Hash fingerprint_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.crypto.primitives.integrity.Hash, io.opencannabis.schema.crypto.primitives.integrity.Hash.Builder, io.opencannabis.schema.crypto.primitives.integrity.HashOrBuilder> fingerprintBuilder_;
      /**
       * <pre>
       * Fingerprint for the asset data, which carries with it a cryptographic hash verifying the contents' integrity. The
       * hash payload carries with it the algorithm that was used.
       * </pre>
       *
       * <code>.opencannabis.crypto.primitives.integrity.Hash fingerprint = 5;</code>
       */
      public boolean hasFingerprint() {
        return fingerprintBuilder_ != null || fingerprint_ != null;
      }
      /**
       * <pre>
       * Fingerprint for the asset data, which carries with it a cryptographic hash verifying the contents' integrity. The
       * hash payload carries with it the algorithm that was used.
       * </pre>
       *
       * <code>.opencannabis.crypto.primitives.integrity.Hash fingerprint = 5;</code>
       */
      public io.opencannabis.schema.crypto.primitives.integrity.Hash getFingerprint() {
        if (fingerprintBuilder_ == null) {
          return fingerprint_ == null ? io.opencannabis.schema.crypto.primitives.integrity.Hash.getDefaultInstance() : fingerprint_;
        } else {
          return fingerprintBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Fingerprint for the asset data, which carries with it a cryptographic hash verifying the contents' integrity. The
       * hash payload carries with it the algorithm that was used.
       * </pre>
       *
       * <code>.opencannabis.crypto.primitives.integrity.Hash fingerprint = 5;</code>
       */
      public Builder setFingerprint(io.opencannabis.schema.crypto.primitives.integrity.Hash value) {
        if (fingerprintBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          fingerprint_ = value;
          onChanged();
        } else {
          fingerprintBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Fingerprint for the asset data, which carries with it a cryptographic hash verifying the contents' integrity. The
       * hash payload carries with it the algorithm that was used.
       * </pre>
       *
       * <code>.opencannabis.crypto.primitives.integrity.Hash fingerprint = 5;</code>
       */
      public Builder setFingerprint(
          io.opencannabis.schema.crypto.primitives.integrity.Hash.Builder builderForValue) {
        if (fingerprintBuilder_ == null) {
          fingerprint_ = builderForValue.build();
          onChanged();
        } else {
          fingerprintBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Fingerprint for the asset data, which carries with it a cryptographic hash verifying the contents' integrity. The
       * hash payload carries with it the algorithm that was used.
       * </pre>
       *
       * <code>.opencannabis.crypto.primitives.integrity.Hash fingerprint = 5;</code>
       */
      public Builder mergeFingerprint(io.opencannabis.schema.crypto.primitives.integrity.Hash value) {
        if (fingerprintBuilder_ == null) {
          if (fingerprint_ != null) {
            fingerprint_ =
              io.opencannabis.schema.crypto.primitives.integrity.Hash.newBuilder(fingerprint_).mergeFrom(value).buildPartial();
          } else {
            fingerprint_ = value;
          }
          onChanged();
        } else {
          fingerprintBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Fingerprint for the asset data, which carries with it a cryptographic hash verifying the contents' integrity. The
       * hash payload carries with it the algorithm that was used.
       * </pre>
       *
       * <code>.opencannabis.crypto.primitives.integrity.Hash fingerprint = 5;</code>
       */
      public Builder clearFingerprint() {
        if (fingerprintBuilder_ == null) {
          fingerprint_ = null;
          onChanged();
        } else {
          fingerprint_ = null;
          fingerprintBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Fingerprint for the asset data, which carries with it a cryptographic hash verifying the contents' integrity. The
       * hash payload carries with it the algorithm that was used.
       * </pre>
       *
       * <code>.opencannabis.crypto.primitives.integrity.Hash fingerprint = 5;</code>
       */
      public io.opencannabis.schema.crypto.primitives.integrity.Hash.Builder getFingerprintBuilder() {
        
        onChanged();
        return getFingerprintFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Fingerprint for the asset data, which carries with it a cryptographic hash verifying the contents' integrity. The
       * hash payload carries with it the algorithm that was used.
       * </pre>
       *
       * <code>.opencannabis.crypto.primitives.integrity.Hash fingerprint = 5;</code>
       */
      public io.opencannabis.schema.crypto.primitives.integrity.HashOrBuilder getFingerprintOrBuilder() {
        if (fingerprintBuilder_ != null) {
          return fingerprintBuilder_.getMessageOrBuilder();
        } else {
          return fingerprint_ == null ?
              io.opencannabis.schema.crypto.primitives.integrity.Hash.getDefaultInstance() : fingerprint_;
        }
      }
      /**
       * <pre>
       * Fingerprint for the asset data, which carries with it a cryptographic hash verifying the contents' integrity. The
       * hash payload carries with it the algorithm that was used.
       * </pre>
       *
       * <code>.opencannabis.crypto.primitives.integrity.Hash fingerprint = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.crypto.primitives.integrity.Hash, io.opencannabis.schema.crypto.primitives.integrity.Hash.Builder, io.opencannabis.schema.crypto.primitives.integrity.HashOrBuilder> 
          getFingerprintFieldBuilder() {
        if (fingerprintBuilder_ == null) {
          fingerprintBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.opencannabis.schema.crypto.primitives.integrity.Hash, io.opencannabis.schema.crypto.primitives.integrity.Hash.Builder, io.opencannabis.schema.crypto.primitives.integrity.HashOrBuilder>(
                  getFingerprint(),
                  getParentForChildren(),
                  isClean());
          fingerprint_ = null;
        }
        return fingerprintBuilder_;
      }

      private io.opencannabis.schema.temporal.TemporalInstant.Instant created_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder> createdBuilder_;
      /**
       * <pre>
       * Timestamp for when this digital asset was first created.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant created = 98;</code>
       */
      public boolean hasCreated() {
        return createdBuilder_ != null || created_ != null;
      }
      /**
       * <pre>
       * Timestamp for when this digital asset was first created.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant created = 98;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.Instant getCreated() {
        if (createdBuilder_ == null) {
          return created_ == null ? io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : created_;
        } else {
          return createdBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Timestamp for when this digital asset was first created.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant created = 98;</code>
       */
      public Builder setCreated(io.opencannabis.schema.temporal.TemporalInstant.Instant value) {
        if (createdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          created_ = value;
          onChanged();
        } else {
          createdBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp for when this digital asset was first created.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant created = 98;</code>
       */
      public Builder setCreated(
          io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder builderForValue) {
        if (createdBuilder_ == null) {
          created_ = builderForValue.build();
          onChanged();
        } else {
          createdBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp for when this digital asset was first created.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant created = 98;</code>
       */
      public Builder mergeCreated(io.opencannabis.schema.temporal.TemporalInstant.Instant value) {
        if (createdBuilder_ == null) {
          if (created_ != null) {
            created_ =
              io.opencannabis.schema.temporal.TemporalInstant.Instant.newBuilder(created_).mergeFrom(value).buildPartial();
          } else {
            created_ = value;
          }
          onChanged();
        } else {
          createdBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp for when this digital asset was first created.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant created = 98;</code>
       */
      public Builder clearCreated() {
        if (createdBuilder_ == null) {
          created_ = null;
          onChanged();
        } else {
          created_ = null;
          createdBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp for when this digital asset was first created.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant created = 98;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder getCreatedBuilder() {
        
        onChanged();
        return getCreatedFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Timestamp for when this digital asset was first created.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant created = 98;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getCreatedOrBuilder() {
        if (createdBuilder_ != null) {
          return createdBuilder_.getMessageOrBuilder();
        } else {
          return created_ == null ?
              io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : created_;
        }
      }
      /**
       * <pre>
       * Timestamp for when this digital asset was first created.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant created = 98;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder> 
          getCreatedFieldBuilder() {
        if (createdBuilder_ == null) {
          createdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder>(
                  getCreated(),
                  getParentForChildren(),
                  isClean());
          created_ = null;
        }
        return createdBuilder_;
      }

      private io.opencannabis.schema.temporal.TemporalInstant.Instant modified_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder> modifiedBuilder_;
      /**
       * <pre>
       * Timestamp for when this digital asset was last modified.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant modified = 99;</code>
       */
      public boolean hasModified() {
        return modifiedBuilder_ != null || modified_ != null;
      }
      /**
       * <pre>
       * Timestamp for when this digital asset was last modified.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant modified = 99;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.Instant getModified() {
        if (modifiedBuilder_ == null) {
          return modified_ == null ? io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : modified_;
        } else {
          return modifiedBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Timestamp for when this digital asset was last modified.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant modified = 99;</code>
       */
      public Builder setModified(io.opencannabis.schema.temporal.TemporalInstant.Instant value) {
        if (modifiedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          modified_ = value;
          onChanged();
        } else {
          modifiedBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp for when this digital asset was last modified.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant modified = 99;</code>
       */
      public Builder setModified(
          io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder builderForValue) {
        if (modifiedBuilder_ == null) {
          modified_ = builderForValue.build();
          onChanged();
        } else {
          modifiedBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp for when this digital asset was last modified.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant modified = 99;</code>
       */
      public Builder mergeModified(io.opencannabis.schema.temporal.TemporalInstant.Instant value) {
        if (modifiedBuilder_ == null) {
          if (modified_ != null) {
            modified_ =
              io.opencannabis.schema.temporal.TemporalInstant.Instant.newBuilder(modified_).mergeFrom(value).buildPartial();
          } else {
            modified_ = value;
          }
          onChanged();
        } else {
          modifiedBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp for when this digital asset was last modified.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant modified = 99;</code>
       */
      public Builder clearModified() {
        if (modifiedBuilder_ == null) {
          modified_ = null;
          onChanged();
        } else {
          modified_ = null;
          modifiedBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp for when this digital asset was last modified.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant modified = 99;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder getModifiedBuilder() {
        
        onChanged();
        return getModifiedFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Timestamp for when this digital asset was last modified.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant modified = 99;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getModifiedOrBuilder() {
        if (modifiedBuilder_ != null) {
          return modifiedBuilder_.getMessageOrBuilder();
        } else {
          return modified_ == null ?
              io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : modified_;
        }
      }
      /**
       * <pre>
       * Timestamp for when this digital asset was last modified.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant modified = 99;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder> 
          getModifiedFieldBuilder() {
        if (modifiedBuilder_ == null) {
          modifiedBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder>(
                  getModified(),
                  getParentForChildren(),
                  isClean());
          modified_ = null;
        }
        return modifiedBuilder_;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:bloombox.schema.ledger.DigitalAsset)
    }

    // @@protoc_insertion_point(class_scope:bloombox.schema.ledger.DigitalAsset)
    private static final io.bloombox.schema.ledger.Assets.DigitalAsset DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.bloombox.schema.ledger.Assets.DigitalAsset();
    }

    public static io.bloombox.schema.ledger.Assets.DigitalAsset getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DigitalAsset>
        PARSER = new com.google.protobuf.AbstractParser<DigitalAsset>() {
      public DigitalAsset parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DigitalAsset(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DigitalAsset> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DigitalAsset> getParserForType() {
      return PARSER;
    }

    public io.bloombox.schema.ledger.Assets.DigitalAsset getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_bloombox_schema_ledger_AssetKey_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_bloombox_schema_ledger_AssetKey_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_bloombox_schema_ledger_AssetData_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_bloombox_schema_ledger_AssetData_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_bloombox_schema_ledger_AssetOwnership_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_bloombox_schema_ledger_AssetOwnership_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_bloombox_schema_ledger_DigitalAsset_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_bloombox_schema_ledger_DigitalAsset_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\022ledger/Asset.proto\022\026bloombox.schema.le" +
      "dger\032\024ledger/Account.proto\032\026temporal/Ins" +
      "tant.proto\032!crypto/primitives/Integrity." +
      "proto\032\031google/protobuf/any.proto\"\026\n\010Asse" +
      "tKey\022\n\n\002id\030\001 \001(\t\"`\n\tAssetData\022\r\n\003raw\030\001 \001" +
      "(\014H\000\022\021\n\007encoded\030\002 \001(\tH\000\022&\n\006struct\030\003 \001(\0132" +
      "\024.google.protobuf.AnyH\000B\t\n\007payload\"\201\001\n\016A" +
      "ssetOwnership\0225\n\005owner\030\001 \003(\0132&.bloombox." +
      "schema.ledger.LedgerIdentity\0228\n\010previous" +
      "\030\002 \001(\0132&.bloombox.schema.ledger.AssetOwn" +
      "ership\"\203\003\n\014DigitalAsset\022-\n\003key\030\001 \001(\0132 .b" +
      "loombox.schema.ledger.AssetKey\0224\n\006parent" +
      "\030\002 \001(\0132$.bloombox.schema.ledger.DigitalA" +
      "sset\022/\n\004data\030\003 \001(\0132!.bloombox.schema.led" +
      "ger.AssetData\0225\n\005owner\030\004 \001(\0132&.bloombox." +
      "schema.ledger.AssetOwnership\022C\n\013fingerpr" +
      "int\030\005 \001(\0132..opencannabis.crypto.primitiv" +
      "es.integrity.Hash\022/\n\007created\030b \001(\0132\036.ope" +
      "ncannabis.temporal.Instant\0220\n\010modified\030c" +
      " \001(\0132\036.opencannabis.temporal.InstantB-\n\031" +
      "io.bloombox.schema.ledgerB\006AssetsH\001P\000\242\002\003" +
      "BBSb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          io.bloombox.schema.ledger.Accounts.getDescriptor(),
          io.opencannabis.schema.temporal.TemporalInstant.getDescriptor(),
          io.opencannabis.schema.crypto.primitives.integrity.Integrity.getDescriptor(),
          com.google.protobuf.AnyProto.getDescriptor(),
        }, assigner);
    internal_static_bloombox_schema_ledger_AssetKey_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_bloombox_schema_ledger_AssetKey_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_bloombox_schema_ledger_AssetKey_descriptor,
        new java.lang.String[] { "Id", });
    internal_static_bloombox_schema_ledger_AssetData_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_bloombox_schema_ledger_AssetData_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_bloombox_schema_ledger_AssetData_descriptor,
        new java.lang.String[] { "Raw", "Encoded", "Struct", "Payload", });
    internal_static_bloombox_schema_ledger_AssetOwnership_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_bloombox_schema_ledger_AssetOwnership_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_bloombox_schema_ledger_AssetOwnership_descriptor,
        new java.lang.String[] { "Owner", "Previous", });
    internal_static_bloombox_schema_ledger_DigitalAsset_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_bloombox_schema_ledger_DigitalAsset_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_bloombox_schema_ledger_DigitalAsset_descriptor,
        new java.lang.String[] { "Key", "Parent", "Data", "Owner", "Fingerprint", "Created", "Modified", });
    io.bloombox.schema.ledger.Accounts.getDescriptor();
    io.opencannabis.schema.temporal.TemporalInstant.getDescriptor();
    io.opencannabis.schema.crypto.primitives.integrity.Integrity.getDescriptor();
    com.google.protobuf.AnyProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
