/*
 * Copyright 2018, Momentum Ideas, Co. All rights reserved.
 *
 * Source and object computer code contained herein is the private intellectual
 * property of Momentum Ideas Co., a Delaware Corporation. Use of this
 * code in source form requires permission in writing before use or the
 * assembly, distribution, or publishing of derivative works, for commercial
 * purposes or any other purpose, from a duly authorized officer of Momentum
 * Ideas Co.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ledger/Transaction.proto

package io.bloombox.schema.ledger;

public final class Transactions {
  private Transactions() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface CreateOperationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:bloombox.ledger.CreateOperation)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Specifies the digital asset we are creating a record for in the digital ledger. The content of this data depends on
     * the particular asset being stored.
     * </pre>
     *
     * <code>.bloombox.ledger.DigitalAsset asset = 1;</code>
     */
    boolean hasAsset();
    /**
     * <pre>
     * Specifies the digital asset we are creating a record for in the digital ledger. The content of this data depends on
     * the particular asset being stored.
     * </pre>
     *
     * <code>.bloombox.ledger.DigitalAsset asset = 1;</code>
     */
    io.bloombox.schema.ledger.Assets.DigitalAsset getAsset();
    /**
     * <pre>
     * Specifies the digital asset we are creating a record for in the digital ledger. The content of this data depends on
     * the particular asset being stored.
     * </pre>
     *
     * <code>.bloombox.ledger.DigitalAsset asset = 1;</code>
     */
    io.bloombox.schema.ledger.Assets.DigitalAssetOrBuilder getAssetOrBuilder();

    /**
     * <pre>
     * Specifies the acting identity on the ledger for this transaction. In the context of a CREATE transaction, this is
     * the final owner of the digital asset after execution.
     * </pre>
     *
     * <code>.bloombox.ledger.LedgerIdentity owner = 2;</code>
     */
    boolean hasOwner();
    /**
     * <pre>
     * Specifies the acting identity on the ledger for this transaction. In the context of a CREATE transaction, this is
     * the final owner of the digital asset after execution.
     * </pre>
     *
     * <code>.bloombox.ledger.LedgerIdentity owner = 2;</code>
     */
    io.bloombox.schema.ledger.Accounts.LedgerIdentity getOwner();
    /**
     * <pre>
     * Specifies the acting identity on the ledger for this transaction. In the context of a CREATE transaction, this is
     * the final owner of the digital asset after execution.
     * </pre>
     *
     * <code>.bloombox.ledger.LedgerIdentity owner = 2;</code>
     */
    io.bloombox.schema.ledger.Accounts.LedgerIdentityOrBuilder getOwnerOrBuilder();
  }
  /**
   * <pre>
   * Transactions: CREATE. Create transactions allocate, or issue, digital assets within the context of a ledger. The
   * owner-to-be of those assets commits the transaction, signed with their private key.
   * </pre>
   *
   * Protobuf type {@code bloombox.ledger.CreateOperation}
   */
  public  static final class CreateOperation extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:bloombox.ledger.CreateOperation)
      CreateOperationOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CreateOperation.newBuilder() to construct.
    private CreateOperation(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CreateOperation() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CreateOperation(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              io.bloombox.schema.ledger.Assets.DigitalAsset.Builder subBuilder = null;
              if (asset_ != null) {
                subBuilder = asset_.toBuilder();
              }
              asset_ = input.readMessage(io.bloombox.schema.ledger.Assets.DigitalAsset.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(asset_);
                asset_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              io.bloombox.schema.ledger.Accounts.LedgerIdentity.Builder subBuilder = null;
              if (owner_ != null) {
                subBuilder = owner_.toBuilder();
              }
              owner_ = input.readMessage(io.bloombox.schema.ledger.Accounts.LedgerIdentity.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(owner_);
                owner_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.bloombox.schema.ledger.Transactions.internal_static_bloombox_ledger_CreateOperation_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.bloombox.schema.ledger.Transactions.internal_static_bloombox_ledger_CreateOperation_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.bloombox.schema.ledger.Transactions.CreateOperation.class, io.bloombox.schema.ledger.Transactions.CreateOperation.Builder.class);
    }

    public static final int ASSET_FIELD_NUMBER = 1;
    private io.bloombox.schema.ledger.Assets.DigitalAsset asset_;
    /**
     * <pre>
     * Specifies the digital asset we are creating a record for in the digital ledger. The content of this data depends on
     * the particular asset being stored.
     * </pre>
     *
     * <code>.bloombox.ledger.DigitalAsset asset = 1;</code>
     */
    public boolean hasAsset() {
      return asset_ != null;
    }
    /**
     * <pre>
     * Specifies the digital asset we are creating a record for in the digital ledger. The content of this data depends on
     * the particular asset being stored.
     * </pre>
     *
     * <code>.bloombox.ledger.DigitalAsset asset = 1;</code>
     */
    public io.bloombox.schema.ledger.Assets.DigitalAsset getAsset() {
      return asset_ == null ? io.bloombox.schema.ledger.Assets.DigitalAsset.getDefaultInstance() : asset_;
    }
    /**
     * <pre>
     * Specifies the digital asset we are creating a record for in the digital ledger. The content of this data depends on
     * the particular asset being stored.
     * </pre>
     *
     * <code>.bloombox.ledger.DigitalAsset asset = 1;</code>
     */
    public io.bloombox.schema.ledger.Assets.DigitalAssetOrBuilder getAssetOrBuilder() {
      return getAsset();
    }

    public static final int OWNER_FIELD_NUMBER = 2;
    private io.bloombox.schema.ledger.Accounts.LedgerIdentity owner_;
    /**
     * <pre>
     * Specifies the acting identity on the ledger for this transaction. In the context of a CREATE transaction, this is
     * the final owner of the digital asset after execution.
     * </pre>
     *
     * <code>.bloombox.ledger.LedgerIdentity owner = 2;</code>
     */
    public boolean hasOwner() {
      return owner_ != null;
    }
    /**
     * <pre>
     * Specifies the acting identity on the ledger for this transaction. In the context of a CREATE transaction, this is
     * the final owner of the digital asset after execution.
     * </pre>
     *
     * <code>.bloombox.ledger.LedgerIdentity owner = 2;</code>
     */
    public io.bloombox.schema.ledger.Accounts.LedgerIdentity getOwner() {
      return owner_ == null ? io.bloombox.schema.ledger.Accounts.LedgerIdentity.getDefaultInstance() : owner_;
    }
    /**
     * <pre>
     * Specifies the acting identity on the ledger for this transaction. In the context of a CREATE transaction, this is
     * the final owner of the digital asset after execution.
     * </pre>
     *
     * <code>.bloombox.ledger.LedgerIdentity owner = 2;</code>
     */
    public io.bloombox.schema.ledger.Accounts.LedgerIdentityOrBuilder getOwnerOrBuilder() {
      return getOwner();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (asset_ != null) {
        output.writeMessage(1, getAsset());
      }
      if (owner_ != null) {
        output.writeMessage(2, getOwner());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (asset_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getAsset());
      }
      if (owner_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getOwner());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.bloombox.schema.ledger.Transactions.CreateOperation)) {
        return super.equals(obj);
      }
      io.bloombox.schema.ledger.Transactions.CreateOperation other = (io.bloombox.schema.ledger.Transactions.CreateOperation) obj;

      boolean result = true;
      result = result && (hasAsset() == other.hasAsset());
      if (hasAsset()) {
        result = result && getAsset()
            .equals(other.getAsset());
      }
      result = result && (hasOwner() == other.hasOwner());
      if (hasOwner()) {
        result = result && getOwner()
            .equals(other.getOwner());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasAsset()) {
        hash = (37 * hash) + ASSET_FIELD_NUMBER;
        hash = (53 * hash) + getAsset().hashCode();
      }
      if (hasOwner()) {
        hash = (37 * hash) + OWNER_FIELD_NUMBER;
        hash = (53 * hash) + getOwner().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.bloombox.schema.ledger.Transactions.CreateOperation parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.ledger.Transactions.CreateOperation parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Transactions.CreateOperation parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.ledger.Transactions.CreateOperation parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Transactions.CreateOperation parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.ledger.Transactions.CreateOperation parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Transactions.CreateOperation parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.ledger.Transactions.CreateOperation parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Transactions.CreateOperation parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.ledger.Transactions.CreateOperation parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Transactions.CreateOperation parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.ledger.Transactions.CreateOperation parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.bloombox.schema.ledger.Transactions.CreateOperation prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Transactions: CREATE. Create transactions allocate, or issue, digital assets within the context of a ledger. The
     * owner-to-be of those assets commits the transaction, signed with their private key.
     * </pre>
     *
     * Protobuf type {@code bloombox.ledger.CreateOperation}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:bloombox.ledger.CreateOperation)
        io.bloombox.schema.ledger.Transactions.CreateOperationOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.bloombox.schema.ledger.Transactions.internal_static_bloombox_ledger_CreateOperation_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.bloombox.schema.ledger.Transactions.internal_static_bloombox_ledger_CreateOperation_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.bloombox.schema.ledger.Transactions.CreateOperation.class, io.bloombox.schema.ledger.Transactions.CreateOperation.Builder.class);
      }

      // Construct using io.bloombox.schema.ledger.Transactions.CreateOperation.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (assetBuilder_ == null) {
          asset_ = null;
        } else {
          asset_ = null;
          assetBuilder_ = null;
        }
        if (ownerBuilder_ == null) {
          owner_ = null;
        } else {
          owner_ = null;
          ownerBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.bloombox.schema.ledger.Transactions.internal_static_bloombox_ledger_CreateOperation_descriptor;
      }

      @java.lang.Override
      public io.bloombox.schema.ledger.Transactions.CreateOperation getDefaultInstanceForType() {
        return io.bloombox.schema.ledger.Transactions.CreateOperation.getDefaultInstance();
      }

      @java.lang.Override
      public io.bloombox.schema.ledger.Transactions.CreateOperation build() {
        io.bloombox.schema.ledger.Transactions.CreateOperation result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.bloombox.schema.ledger.Transactions.CreateOperation buildPartial() {
        io.bloombox.schema.ledger.Transactions.CreateOperation result = new io.bloombox.schema.ledger.Transactions.CreateOperation(this);
        if (assetBuilder_ == null) {
          result.asset_ = asset_;
        } else {
          result.asset_ = assetBuilder_.build();
        }
        if (ownerBuilder_ == null) {
          result.owner_ = owner_;
        } else {
          result.owner_ = ownerBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.bloombox.schema.ledger.Transactions.CreateOperation) {
          return mergeFrom((io.bloombox.schema.ledger.Transactions.CreateOperation)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.bloombox.schema.ledger.Transactions.CreateOperation other) {
        if (other == io.bloombox.schema.ledger.Transactions.CreateOperation.getDefaultInstance()) return this;
        if (other.hasAsset()) {
          mergeAsset(other.getAsset());
        }
        if (other.hasOwner()) {
          mergeOwner(other.getOwner());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.bloombox.schema.ledger.Transactions.CreateOperation parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.bloombox.schema.ledger.Transactions.CreateOperation) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private io.bloombox.schema.ledger.Assets.DigitalAsset asset_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.ledger.Assets.DigitalAsset, io.bloombox.schema.ledger.Assets.DigitalAsset.Builder, io.bloombox.schema.ledger.Assets.DigitalAssetOrBuilder> assetBuilder_;
      /**
       * <pre>
       * Specifies the digital asset we are creating a record for in the digital ledger. The content of this data depends on
       * the particular asset being stored.
       * </pre>
       *
       * <code>.bloombox.ledger.DigitalAsset asset = 1;</code>
       */
      public boolean hasAsset() {
        return assetBuilder_ != null || asset_ != null;
      }
      /**
       * <pre>
       * Specifies the digital asset we are creating a record for in the digital ledger. The content of this data depends on
       * the particular asset being stored.
       * </pre>
       *
       * <code>.bloombox.ledger.DigitalAsset asset = 1;</code>
       */
      public io.bloombox.schema.ledger.Assets.DigitalAsset getAsset() {
        if (assetBuilder_ == null) {
          return asset_ == null ? io.bloombox.schema.ledger.Assets.DigitalAsset.getDefaultInstance() : asset_;
        } else {
          return assetBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Specifies the digital asset we are creating a record for in the digital ledger. The content of this data depends on
       * the particular asset being stored.
       * </pre>
       *
       * <code>.bloombox.ledger.DigitalAsset asset = 1;</code>
       */
      public Builder setAsset(io.bloombox.schema.ledger.Assets.DigitalAsset value) {
        if (assetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          asset_ = value;
          onChanged();
        } else {
          assetBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the digital asset we are creating a record for in the digital ledger. The content of this data depends on
       * the particular asset being stored.
       * </pre>
       *
       * <code>.bloombox.ledger.DigitalAsset asset = 1;</code>
       */
      public Builder setAsset(
          io.bloombox.schema.ledger.Assets.DigitalAsset.Builder builderForValue) {
        if (assetBuilder_ == null) {
          asset_ = builderForValue.build();
          onChanged();
        } else {
          assetBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the digital asset we are creating a record for in the digital ledger. The content of this data depends on
       * the particular asset being stored.
       * </pre>
       *
       * <code>.bloombox.ledger.DigitalAsset asset = 1;</code>
       */
      public Builder mergeAsset(io.bloombox.schema.ledger.Assets.DigitalAsset value) {
        if (assetBuilder_ == null) {
          if (asset_ != null) {
            asset_ =
              io.bloombox.schema.ledger.Assets.DigitalAsset.newBuilder(asset_).mergeFrom(value).buildPartial();
          } else {
            asset_ = value;
          }
          onChanged();
        } else {
          assetBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the digital asset we are creating a record for in the digital ledger. The content of this data depends on
       * the particular asset being stored.
       * </pre>
       *
       * <code>.bloombox.ledger.DigitalAsset asset = 1;</code>
       */
      public Builder clearAsset() {
        if (assetBuilder_ == null) {
          asset_ = null;
          onChanged();
        } else {
          asset_ = null;
          assetBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the digital asset we are creating a record for in the digital ledger. The content of this data depends on
       * the particular asset being stored.
       * </pre>
       *
       * <code>.bloombox.ledger.DigitalAsset asset = 1;</code>
       */
      public io.bloombox.schema.ledger.Assets.DigitalAsset.Builder getAssetBuilder() {
        
        onChanged();
        return getAssetFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Specifies the digital asset we are creating a record for in the digital ledger. The content of this data depends on
       * the particular asset being stored.
       * </pre>
       *
       * <code>.bloombox.ledger.DigitalAsset asset = 1;</code>
       */
      public io.bloombox.schema.ledger.Assets.DigitalAssetOrBuilder getAssetOrBuilder() {
        if (assetBuilder_ != null) {
          return assetBuilder_.getMessageOrBuilder();
        } else {
          return asset_ == null ?
              io.bloombox.schema.ledger.Assets.DigitalAsset.getDefaultInstance() : asset_;
        }
      }
      /**
       * <pre>
       * Specifies the digital asset we are creating a record for in the digital ledger. The content of this data depends on
       * the particular asset being stored.
       * </pre>
       *
       * <code>.bloombox.ledger.DigitalAsset asset = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.ledger.Assets.DigitalAsset, io.bloombox.schema.ledger.Assets.DigitalAsset.Builder, io.bloombox.schema.ledger.Assets.DigitalAssetOrBuilder> 
          getAssetFieldBuilder() {
        if (assetBuilder_ == null) {
          assetBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.bloombox.schema.ledger.Assets.DigitalAsset, io.bloombox.schema.ledger.Assets.DigitalAsset.Builder, io.bloombox.schema.ledger.Assets.DigitalAssetOrBuilder>(
                  getAsset(),
                  getParentForChildren(),
                  isClean());
          asset_ = null;
        }
        return assetBuilder_;
      }

      private io.bloombox.schema.ledger.Accounts.LedgerIdentity owner_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.ledger.Accounts.LedgerIdentity, io.bloombox.schema.ledger.Accounts.LedgerIdentity.Builder, io.bloombox.schema.ledger.Accounts.LedgerIdentityOrBuilder> ownerBuilder_;
      /**
       * <pre>
       * Specifies the acting identity on the ledger for this transaction. In the context of a CREATE transaction, this is
       * the final owner of the digital asset after execution.
       * </pre>
       *
       * <code>.bloombox.ledger.LedgerIdentity owner = 2;</code>
       */
      public boolean hasOwner() {
        return ownerBuilder_ != null || owner_ != null;
      }
      /**
       * <pre>
       * Specifies the acting identity on the ledger for this transaction. In the context of a CREATE transaction, this is
       * the final owner of the digital asset after execution.
       * </pre>
       *
       * <code>.bloombox.ledger.LedgerIdentity owner = 2;</code>
       */
      public io.bloombox.schema.ledger.Accounts.LedgerIdentity getOwner() {
        if (ownerBuilder_ == null) {
          return owner_ == null ? io.bloombox.schema.ledger.Accounts.LedgerIdentity.getDefaultInstance() : owner_;
        } else {
          return ownerBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Specifies the acting identity on the ledger for this transaction. In the context of a CREATE transaction, this is
       * the final owner of the digital asset after execution.
       * </pre>
       *
       * <code>.bloombox.ledger.LedgerIdentity owner = 2;</code>
       */
      public Builder setOwner(io.bloombox.schema.ledger.Accounts.LedgerIdentity value) {
        if (ownerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          owner_ = value;
          onChanged();
        } else {
          ownerBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the acting identity on the ledger for this transaction. In the context of a CREATE transaction, this is
       * the final owner of the digital asset after execution.
       * </pre>
       *
       * <code>.bloombox.ledger.LedgerIdentity owner = 2;</code>
       */
      public Builder setOwner(
          io.bloombox.schema.ledger.Accounts.LedgerIdentity.Builder builderForValue) {
        if (ownerBuilder_ == null) {
          owner_ = builderForValue.build();
          onChanged();
        } else {
          ownerBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the acting identity on the ledger for this transaction. In the context of a CREATE transaction, this is
       * the final owner of the digital asset after execution.
       * </pre>
       *
       * <code>.bloombox.ledger.LedgerIdentity owner = 2;</code>
       */
      public Builder mergeOwner(io.bloombox.schema.ledger.Accounts.LedgerIdentity value) {
        if (ownerBuilder_ == null) {
          if (owner_ != null) {
            owner_ =
              io.bloombox.schema.ledger.Accounts.LedgerIdentity.newBuilder(owner_).mergeFrom(value).buildPartial();
          } else {
            owner_ = value;
          }
          onChanged();
        } else {
          ownerBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the acting identity on the ledger for this transaction. In the context of a CREATE transaction, this is
       * the final owner of the digital asset after execution.
       * </pre>
       *
       * <code>.bloombox.ledger.LedgerIdentity owner = 2;</code>
       */
      public Builder clearOwner() {
        if (ownerBuilder_ == null) {
          owner_ = null;
          onChanged();
        } else {
          owner_ = null;
          ownerBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the acting identity on the ledger for this transaction. In the context of a CREATE transaction, this is
       * the final owner of the digital asset after execution.
       * </pre>
       *
       * <code>.bloombox.ledger.LedgerIdentity owner = 2;</code>
       */
      public io.bloombox.schema.ledger.Accounts.LedgerIdentity.Builder getOwnerBuilder() {
        
        onChanged();
        return getOwnerFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Specifies the acting identity on the ledger for this transaction. In the context of a CREATE transaction, this is
       * the final owner of the digital asset after execution.
       * </pre>
       *
       * <code>.bloombox.ledger.LedgerIdentity owner = 2;</code>
       */
      public io.bloombox.schema.ledger.Accounts.LedgerIdentityOrBuilder getOwnerOrBuilder() {
        if (ownerBuilder_ != null) {
          return ownerBuilder_.getMessageOrBuilder();
        } else {
          return owner_ == null ?
              io.bloombox.schema.ledger.Accounts.LedgerIdentity.getDefaultInstance() : owner_;
        }
      }
      /**
       * <pre>
       * Specifies the acting identity on the ledger for this transaction. In the context of a CREATE transaction, this is
       * the final owner of the digital asset after execution.
       * </pre>
       *
       * <code>.bloombox.ledger.LedgerIdentity owner = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.ledger.Accounts.LedgerIdentity, io.bloombox.schema.ledger.Accounts.LedgerIdentity.Builder, io.bloombox.schema.ledger.Accounts.LedgerIdentityOrBuilder> 
          getOwnerFieldBuilder() {
        if (ownerBuilder_ == null) {
          ownerBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.bloombox.schema.ledger.Accounts.LedgerIdentity, io.bloombox.schema.ledger.Accounts.LedgerIdentity.Builder, io.bloombox.schema.ledger.Accounts.LedgerIdentityOrBuilder>(
                  getOwner(),
                  getParentForChildren(),
                  isClean());
          owner_ = null;
        }
        return ownerBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:bloombox.ledger.CreateOperation)
    }

    // @@protoc_insertion_point(class_scope:bloombox.ledger.CreateOperation)
    private static final io.bloombox.schema.ledger.Transactions.CreateOperation DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.bloombox.schema.ledger.Transactions.CreateOperation();
    }

    public static io.bloombox.schema.ledger.Transactions.CreateOperation getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CreateOperation>
        PARSER = new com.google.protobuf.AbstractParser<CreateOperation>() {
      @java.lang.Override
      public CreateOperation parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CreateOperation(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CreateOperation> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CreateOperation> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.bloombox.schema.ledger.Transactions.CreateOperation getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TransferOperationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:bloombox.ledger.TransferOperation)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Specifies the underlying digital asset being transferred. TRANSFER transactions specify digital assets by
     * reference. It is worth noting here that an asset's ID is equal to the CREATE transaction's ID that created it.
     * </pre>
     *
     * <code>.bloombox.ledger.AssetKey asset = 1;</code>
     */
    boolean hasAsset();
    /**
     * <pre>
     * Specifies the underlying digital asset being transferred. TRANSFER transactions specify digital assets by
     * reference. It is worth noting here that an asset's ID is equal to the CREATE transaction's ID that created it.
     * </pre>
     *
     * <code>.bloombox.ledger.AssetKey asset = 1;</code>
     */
    io.bloombox.schema.ledger.Assets.AssetKey getAsset();
    /**
     * <pre>
     * Specifies the underlying digital asset being transferred. TRANSFER transactions specify digital assets by
     * reference. It is worth noting here that an asset's ID is equal to the CREATE transaction's ID that created it.
     * </pre>
     *
     * <code>.bloombox.ledger.AssetKey asset = 1;</code>
     */
    io.bloombox.schema.ledger.Assets.AssetKeyOrBuilder getAssetOrBuilder();

    /**
     * <pre>
     * Specifies the acting identity on the ledger for this transaction. In the case of a TRANSFER, it must be the
     * authorized owner of the asset in its current state, in order to fully authorize the underlying asset's transfer.
     * </pre>
     *
     * <code>.bloombox.ledger.LedgerIdentity source = 2;</code>
     */
    boolean hasSource();
    /**
     * <pre>
     * Specifies the acting identity on the ledger for this transaction. In the case of a TRANSFER, it must be the
     * authorized owner of the asset in its current state, in order to fully authorize the underlying asset's transfer.
     * </pre>
     *
     * <code>.bloombox.ledger.LedgerIdentity source = 2;</code>
     */
    io.bloombox.schema.ledger.Accounts.LedgerIdentity getSource();
    /**
     * <pre>
     * Specifies the acting identity on the ledger for this transaction. In the case of a TRANSFER, it must be the
     * authorized owner of the asset in its current state, in order to fully authorize the underlying asset's transfer.
     * </pre>
     *
     * <code>.bloombox.ledger.LedgerIdentity source = 2;</code>
     */
    io.bloombox.schema.ledger.Accounts.LedgerIdentityOrBuilder getSourceOrBuilder();

    /**
     * <pre>
     * Specifies the identity of the future-owner of the digital asset, should this transaction be deemed valid and then
     * accepted to the ledger. That is to say, this is the "recipient" in the transaction.
     * </pre>
     *
     * <code>.bloombox.ledger.LedgerIdentity target = 3;</code>
     */
    boolean hasTarget();
    /**
     * <pre>
     * Specifies the identity of the future-owner of the digital asset, should this transaction be deemed valid and then
     * accepted to the ledger. That is to say, this is the "recipient" in the transaction.
     * </pre>
     *
     * <code>.bloombox.ledger.LedgerIdentity target = 3;</code>
     */
    io.bloombox.schema.ledger.Accounts.LedgerIdentity getTarget();
    /**
     * <pre>
     * Specifies the identity of the future-owner of the digital asset, should this transaction be deemed valid and then
     * accepted to the ledger. That is to say, this is the "recipient" in the transaction.
     * </pre>
     *
     * <code>.bloombox.ledger.LedgerIdentity target = 3;</code>
     */
    io.bloombox.schema.ledger.Accounts.LedgerIdentityOrBuilder getTargetOrBuilder();
  }
  /**
   * <pre>
   * Transactions: TRANSFER. Transfer transactions enable the interchange of existing digital assets, and, as such, always
   * follow a CREATE transaction in the lifecycle of an asset.
   * </pre>
   *
   * Protobuf type {@code bloombox.ledger.TransferOperation}
   */
  public  static final class TransferOperation extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:bloombox.ledger.TransferOperation)
      TransferOperationOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TransferOperation.newBuilder() to construct.
    private TransferOperation(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TransferOperation() {
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TransferOperation(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              io.bloombox.schema.ledger.Assets.AssetKey.Builder subBuilder = null;
              if (asset_ != null) {
                subBuilder = asset_.toBuilder();
              }
              asset_ = input.readMessage(io.bloombox.schema.ledger.Assets.AssetKey.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(asset_);
                asset_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              io.bloombox.schema.ledger.Accounts.LedgerIdentity.Builder subBuilder = null;
              if (source_ != null) {
                subBuilder = source_.toBuilder();
              }
              source_ = input.readMessage(io.bloombox.schema.ledger.Accounts.LedgerIdentity.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(source_);
                source_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              io.bloombox.schema.ledger.Accounts.LedgerIdentity.Builder subBuilder = null;
              if (target_ != null) {
                subBuilder = target_.toBuilder();
              }
              target_ = input.readMessage(io.bloombox.schema.ledger.Accounts.LedgerIdentity.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(target_);
                target_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.bloombox.schema.ledger.Transactions.internal_static_bloombox_ledger_TransferOperation_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.bloombox.schema.ledger.Transactions.internal_static_bloombox_ledger_TransferOperation_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.bloombox.schema.ledger.Transactions.TransferOperation.class, io.bloombox.schema.ledger.Transactions.TransferOperation.Builder.class);
    }

    public static final int ASSET_FIELD_NUMBER = 1;
    private io.bloombox.schema.ledger.Assets.AssetKey asset_;
    /**
     * <pre>
     * Specifies the underlying digital asset being transferred. TRANSFER transactions specify digital assets by
     * reference. It is worth noting here that an asset's ID is equal to the CREATE transaction's ID that created it.
     * </pre>
     *
     * <code>.bloombox.ledger.AssetKey asset = 1;</code>
     */
    public boolean hasAsset() {
      return asset_ != null;
    }
    /**
     * <pre>
     * Specifies the underlying digital asset being transferred. TRANSFER transactions specify digital assets by
     * reference. It is worth noting here that an asset's ID is equal to the CREATE transaction's ID that created it.
     * </pre>
     *
     * <code>.bloombox.ledger.AssetKey asset = 1;</code>
     */
    public io.bloombox.schema.ledger.Assets.AssetKey getAsset() {
      return asset_ == null ? io.bloombox.schema.ledger.Assets.AssetKey.getDefaultInstance() : asset_;
    }
    /**
     * <pre>
     * Specifies the underlying digital asset being transferred. TRANSFER transactions specify digital assets by
     * reference. It is worth noting here that an asset's ID is equal to the CREATE transaction's ID that created it.
     * </pre>
     *
     * <code>.bloombox.ledger.AssetKey asset = 1;</code>
     */
    public io.bloombox.schema.ledger.Assets.AssetKeyOrBuilder getAssetOrBuilder() {
      return getAsset();
    }

    public static final int SOURCE_FIELD_NUMBER = 2;
    private io.bloombox.schema.ledger.Accounts.LedgerIdentity source_;
    /**
     * <pre>
     * Specifies the acting identity on the ledger for this transaction. In the case of a TRANSFER, it must be the
     * authorized owner of the asset in its current state, in order to fully authorize the underlying asset's transfer.
     * </pre>
     *
     * <code>.bloombox.ledger.LedgerIdentity source = 2;</code>
     */
    public boolean hasSource() {
      return source_ != null;
    }
    /**
     * <pre>
     * Specifies the acting identity on the ledger for this transaction. In the case of a TRANSFER, it must be the
     * authorized owner of the asset in its current state, in order to fully authorize the underlying asset's transfer.
     * </pre>
     *
     * <code>.bloombox.ledger.LedgerIdentity source = 2;</code>
     */
    public io.bloombox.schema.ledger.Accounts.LedgerIdentity getSource() {
      return source_ == null ? io.bloombox.schema.ledger.Accounts.LedgerIdentity.getDefaultInstance() : source_;
    }
    /**
     * <pre>
     * Specifies the acting identity on the ledger for this transaction. In the case of a TRANSFER, it must be the
     * authorized owner of the asset in its current state, in order to fully authorize the underlying asset's transfer.
     * </pre>
     *
     * <code>.bloombox.ledger.LedgerIdentity source = 2;</code>
     */
    public io.bloombox.schema.ledger.Accounts.LedgerIdentityOrBuilder getSourceOrBuilder() {
      return getSource();
    }

    public static final int TARGET_FIELD_NUMBER = 3;
    private io.bloombox.schema.ledger.Accounts.LedgerIdentity target_;
    /**
     * <pre>
     * Specifies the identity of the future-owner of the digital asset, should this transaction be deemed valid and then
     * accepted to the ledger. That is to say, this is the "recipient" in the transaction.
     * </pre>
     *
     * <code>.bloombox.ledger.LedgerIdentity target = 3;</code>
     */
    public boolean hasTarget() {
      return target_ != null;
    }
    /**
     * <pre>
     * Specifies the identity of the future-owner of the digital asset, should this transaction be deemed valid and then
     * accepted to the ledger. That is to say, this is the "recipient" in the transaction.
     * </pre>
     *
     * <code>.bloombox.ledger.LedgerIdentity target = 3;</code>
     */
    public io.bloombox.schema.ledger.Accounts.LedgerIdentity getTarget() {
      return target_ == null ? io.bloombox.schema.ledger.Accounts.LedgerIdentity.getDefaultInstance() : target_;
    }
    /**
     * <pre>
     * Specifies the identity of the future-owner of the digital asset, should this transaction be deemed valid and then
     * accepted to the ledger. That is to say, this is the "recipient" in the transaction.
     * </pre>
     *
     * <code>.bloombox.ledger.LedgerIdentity target = 3;</code>
     */
    public io.bloombox.schema.ledger.Accounts.LedgerIdentityOrBuilder getTargetOrBuilder() {
      return getTarget();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (asset_ != null) {
        output.writeMessage(1, getAsset());
      }
      if (source_ != null) {
        output.writeMessage(2, getSource());
      }
      if (target_ != null) {
        output.writeMessage(3, getTarget());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (asset_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getAsset());
      }
      if (source_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getSource());
      }
      if (target_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getTarget());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.bloombox.schema.ledger.Transactions.TransferOperation)) {
        return super.equals(obj);
      }
      io.bloombox.schema.ledger.Transactions.TransferOperation other = (io.bloombox.schema.ledger.Transactions.TransferOperation) obj;

      boolean result = true;
      result = result && (hasAsset() == other.hasAsset());
      if (hasAsset()) {
        result = result && getAsset()
            .equals(other.getAsset());
      }
      result = result && (hasSource() == other.hasSource());
      if (hasSource()) {
        result = result && getSource()
            .equals(other.getSource());
      }
      result = result && (hasTarget() == other.hasTarget());
      if (hasTarget()) {
        result = result && getTarget()
            .equals(other.getTarget());
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasAsset()) {
        hash = (37 * hash) + ASSET_FIELD_NUMBER;
        hash = (53 * hash) + getAsset().hashCode();
      }
      if (hasSource()) {
        hash = (37 * hash) + SOURCE_FIELD_NUMBER;
        hash = (53 * hash) + getSource().hashCode();
      }
      if (hasTarget()) {
        hash = (37 * hash) + TARGET_FIELD_NUMBER;
        hash = (53 * hash) + getTarget().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.bloombox.schema.ledger.Transactions.TransferOperation parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.ledger.Transactions.TransferOperation parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Transactions.TransferOperation parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.ledger.Transactions.TransferOperation parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Transactions.TransferOperation parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.ledger.Transactions.TransferOperation parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Transactions.TransferOperation parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.ledger.Transactions.TransferOperation parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Transactions.TransferOperation parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.ledger.Transactions.TransferOperation parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Transactions.TransferOperation parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.ledger.Transactions.TransferOperation parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.bloombox.schema.ledger.Transactions.TransferOperation prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Transactions: TRANSFER. Transfer transactions enable the interchange of existing digital assets, and, as such, always
     * follow a CREATE transaction in the lifecycle of an asset.
     * </pre>
     *
     * Protobuf type {@code bloombox.ledger.TransferOperation}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:bloombox.ledger.TransferOperation)
        io.bloombox.schema.ledger.Transactions.TransferOperationOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.bloombox.schema.ledger.Transactions.internal_static_bloombox_ledger_TransferOperation_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.bloombox.schema.ledger.Transactions.internal_static_bloombox_ledger_TransferOperation_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.bloombox.schema.ledger.Transactions.TransferOperation.class, io.bloombox.schema.ledger.Transactions.TransferOperation.Builder.class);
      }

      // Construct using io.bloombox.schema.ledger.Transactions.TransferOperation.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (assetBuilder_ == null) {
          asset_ = null;
        } else {
          asset_ = null;
          assetBuilder_ = null;
        }
        if (sourceBuilder_ == null) {
          source_ = null;
        } else {
          source_ = null;
          sourceBuilder_ = null;
        }
        if (targetBuilder_ == null) {
          target_ = null;
        } else {
          target_ = null;
          targetBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.bloombox.schema.ledger.Transactions.internal_static_bloombox_ledger_TransferOperation_descriptor;
      }

      @java.lang.Override
      public io.bloombox.schema.ledger.Transactions.TransferOperation getDefaultInstanceForType() {
        return io.bloombox.schema.ledger.Transactions.TransferOperation.getDefaultInstance();
      }

      @java.lang.Override
      public io.bloombox.schema.ledger.Transactions.TransferOperation build() {
        io.bloombox.schema.ledger.Transactions.TransferOperation result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.bloombox.schema.ledger.Transactions.TransferOperation buildPartial() {
        io.bloombox.schema.ledger.Transactions.TransferOperation result = new io.bloombox.schema.ledger.Transactions.TransferOperation(this);
        if (assetBuilder_ == null) {
          result.asset_ = asset_;
        } else {
          result.asset_ = assetBuilder_.build();
        }
        if (sourceBuilder_ == null) {
          result.source_ = source_;
        } else {
          result.source_ = sourceBuilder_.build();
        }
        if (targetBuilder_ == null) {
          result.target_ = target_;
        } else {
          result.target_ = targetBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.bloombox.schema.ledger.Transactions.TransferOperation) {
          return mergeFrom((io.bloombox.schema.ledger.Transactions.TransferOperation)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.bloombox.schema.ledger.Transactions.TransferOperation other) {
        if (other == io.bloombox.schema.ledger.Transactions.TransferOperation.getDefaultInstance()) return this;
        if (other.hasAsset()) {
          mergeAsset(other.getAsset());
        }
        if (other.hasSource()) {
          mergeSource(other.getSource());
        }
        if (other.hasTarget()) {
          mergeTarget(other.getTarget());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.bloombox.schema.ledger.Transactions.TransferOperation parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.bloombox.schema.ledger.Transactions.TransferOperation) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private io.bloombox.schema.ledger.Assets.AssetKey asset_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.ledger.Assets.AssetKey, io.bloombox.schema.ledger.Assets.AssetKey.Builder, io.bloombox.schema.ledger.Assets.AssetKeyOrBuilder> assetBuilder_;
      /**
       * <pre>
       * Specifies the underlying digital asset being transferred. TRANSFER transactions specify digital assets by
       * reference. It is worth noting here that an asset's ID is equal to the CREATE transaction's ID that created it.
       * </pre>
       *
       * <code>.bloombox.ledger.AssetKey asset = 1;</code>
       */
      public boolean hasAsset() {
        return assetBuilder_ != null || asset_ != null;
      }
      /**
       * <pre>
       * Specifies the underlying digital asset being transferred. TRANSFER transactions specify digital assets by
       * reference. It is worth noting here that an asset's ID is equal to the CREATE transaction's ID that created it.
       * </pre>
       *
       * <code>.bloombox.ledger.AssetKey asset = 1;</code>
       */
      public io.bloombox.schema.ledger.Assets.AssetKey getAsset() {
        if (assetBuilder_ == null) {
          return asset_ == null ? io.bloombox.schema.ledger.Assets.AssetKey.getDefaultInstance() : asset_;
        } else {
          return assetBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Specifies the underlying digital asset being transferred. TRANSFER transactions specify digital assets by
       * reference. It is worth noting here that an asset's ID is equal to the CREATE transaction's ID that created it.
       * </pre>
       *
       * <code>.bloombox.ledger.AssetKey asset = 1;</code>
       */
      public Builder setAsset(io.bloombox.schema.ledger.Assets.AssetKey value) {
        if (assetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          asset_ = value;
          onChanged();
        } else {
          assetBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the underlying digital asset being transferred. TRANSFER transactions specify digital assets by
       * reference. It is worth noting here that an asset's ID is equal to the CREATE transaction's ID that created it.
       * </pre>
       *
       * <code>.bloombox.ledger.AssetKey asset = 1;</code>
       */
      public Builder setAsset(
          io.bloombox.schema.ledger.Assets.AssetKey.Builder builderForValue) {
        if (assetBuilder_ == null) {
          asset_ = builderForValue.build();
          onChanged();
        } else {
          assetBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the underlying digital asset being transferred. TRANSFER transactions specify digital assets by
       * reference. It is worth noting here that an asset's ID is equal to the CREATE transaction's ID that created it.
       * </pre>
       *
       * <code>.bloombox.ledger.AssetKey asset = 1;</code>
       */
      public Builder mergeAsset(io.bloombox.schema.ledger.Assets.AssetKey value) {
        if (assetBuilder_ == null) {
          if (asset_ != null) {
            asset_ =
              io.bloombox.schema.ledger.Assets.AssetKey.newBuilder(asset_).mergeFrom(value).buildPartial();
          } else {
            asset_ = value;
          }
          onChanged();
        } else {
          assetBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the underlying digital asset being transferred. TRANSFER transactions specify digital assets by
       * reference. It is worth noting here that an asset's ID is equal to the CREATE transaction's ID that created it.
       * </pre>
       *
       * <code>.bloombox.ledger.AssetKey asset = 1;</code>
       */
      public Builder clearAsset() {
        if (assetBuilder_ == null) {
          asset_ = null;
          onChanged();
        } else {
          asset_ = null;
          assetBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the underlying digital asset being transferred. TRANSFER transactions specify digital assets by
       * reference. It is worth noting here that an asset's ID is equal to the CREATE transaction's ID that created it.
       * </pre>
       *
       * <code>.bloombox.ledger.AssetKey asset = 1;</code>
       */
      public io.bloombox.schema.ledger.Assets.AssetKey.Builder getAssetBuilder() {
        
        onChanged();
        return getAssetFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Specifies the underlying digital asset being transferred. TRANSFER transactions specify digital assets by
       * reference. It is worth noting here that an asset's ID is equal to the CREATE transaction's ID that created it.
       * </pre>
       *
       * <code>.bloombox.ledger.AssetKey asset = 1;</code>
       */
      public io.bloombox.schema.ledger.Assets.AssetKeyOrBuilder getAssetOrBuilder() {
        if (assetBuilder_ != null) {
          return assetBuilder_.getMessageOrBuilder();
        } else {
          return asset_ == null ?
              io.bloombox.schema.ledger.Assets.AssetKey.getDefaultInstance() : asset_;
        }
      }
      /**
       * <pre>
       * Specifies the underlying digital asset being transferred. TRANSFER transactions specify digital assets by
       * reference. It is worth noting here that an asset's ID is equal to the CREATE transaction's ID that created it.
       * </pre>
       *
       * <code>.bloombox.ledger.AssetKey asset = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.ledger.Assets.AssetKey, io.bloombox.schema.ledger.Assets.AssetKey.Builder, io.bloombox.schema.ledger.Assets.AssetKeyOrBuilder> 
          getAssetFieldBuilder() {
        if (assetBuilder_ == null) {
          assetBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.bloombox.schema.ledger.Assets.AssetKey, io.bloombox.schema.ledger.Assets.AssetKey.Builder, io.bloombox.schema.ledger.Assets.AssetKeyOrBuilder>(
                  getAsset(),
                  getParentForChildren(),
                  isClean());
          asset_ = null;
        }
        return assetBuilder_;
      }

      private io.bloombox.schema.ledger.Accounts.LedgerIdentity source_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.ledger.Accounts.LedgerIdentity, io.bloombox.schema.ledger.Accounts.LedgerIdentity.Builder, io.bloombox.schema.ledger.Accounts.LedgerIdentityOrBuilder> sourceBuilder_;
      /**
       * <pre>
       * Specifies the acting identity on the ledger for this transaction. In the case of a TRANSFER, it must be the
       * authorized owner of the asset in its current state, in order to fully authorize the underlying asset's transfer.
       * </pre>
       *
       * <code>.bloombox.ledger.LedgerIdentity source = 2;</code>
       */
      public boolean hasSource() {
        return sourceBuilder_ != null || source_ != null;
      }
      /**
       * <pre>
       * Specifies the acting identity on the ledger for this transaction. In the case of a TRANSFER, it must be the
       * authorized owner of the asset in its current state, in order to fully authorize the underlying asset's transfer.
       * </pre>
       *
       * <code>.bloombox.ledger.LedgerIdentity source = 2;</code>
       */
      public io.bloombox.schema.ledger.Accounts.LedgerIdentity getSource() {
        if (sourceBuilder_ == null) {
          return source_ == null ? io.bloombox.schema.ledger.Accounts.LedgerIdentity.getDefaultInstance() : source_;
        } else {
          return sourceBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Specifies the acting identity on the ledger for this transaction. In the case of a TRANSFER, it must be the
       * authorized owner of the asset in its current state, in order to fully authorize the underlying asset's transfer.
       * </pre>
       *
       * <code>.bloombox.ledger.LedgerIdentity source = 2;</code>
       */
      public Builder setSource(io.bloombox.schema.ledger.Accounts.LedgerIdentity value) {
        if (sourceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          source_ = value;
          onChanged();
        } else {
          sourceBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the acting identity on the ledger for this transaction. In the case of a TRANSFER, it must be the
       * authorized owner of the asset in its current state, in order to fully authorize the underlying asset's transfer.
       * </pre>
       *
       * <code>.bloombox.ledger.LedgerIdentity source = 2;</code>
       */
      public Builder setSource(
          io.bloombox.schema.ledger.Accounts.LedgerIdentity.Builder builderForValue) {
        if (sourceBuilder_ == null) {
          source_ = builderForValue.build();
          onChanged();
        } else {
          sourceBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the acting identity on the ledger for this transaction. In the case of a TRANSFER, it must be the
       * authorized owner of the asset in its current state, in order to fully authorize the underlying asset's transfer.
       * </pre>
       *
       * <code>.bloombox.ledger.LedgerIdentity source = 2;</code>
       */
      public Builder mergeSource(io.bloombox.schema.ledger.Accounts.LedgerIdentity value) {
        if (sourceBuilder_ == null) {
          if (source_ != null) {
            source_ =
              io.bloombox.schema.ledger.Accounts.LedgerIdentity.newBuilder(source_).mergeFrom(value).buildPartial();
          } else {
            source_ = value;
          }
          onChanged();
        } else {
          sourceBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the acting identity on the ledger for this transaction. In the case of a TRANSFER, it must be the
       * authorized owner of the asset in its current state, in order to fully authorize the underlying asset's transfer.
       * </pre>
       *
       * <code>.bloombox.ledger.LedgerIdentity source = 2;</code>
       */
      public Builder clearSource() {
        if (sourceBuilder_ == null) {
          source_ = null;
          onChanged();
        } else {
          source_ = null;
          sourceBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the acting identity on the ledger for this transaction. In the case of a TRANSFER, it must be the
       * authorized owner of the asset in its current state, in order to fully authorize the underlying asset's transfer.
       * </pre>
       *
       * <code>.bloombox.ledger.LedgerIdentity source = 2;</code>
       */
      public io.bloombox.schema.ledger.Accounts.LedgerIdentity.Builder getSourceBuilder() {
        
        onChanged();
        return getSourceFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Specifies the acting identity on the ledger for this transaction. In the case of a TRANSFER, it must be the
       * authorized owner of the asset in its current state, in order to fully authorize the underlying asset's transfer.
       * </pre>
       *
       * <code>.bloombox.ledger.LedgerIdentity source = 2;</code>
       */
      public io.bloombox.schema.ledger.Accounts.LedgerIdentityOrBuilder getSourceOrBuilder() {
        if (sourceBuilder_ != null) {
          return sourceBuilder_.getMessageOrBuilder();
        } else {
          return source_ == null ?
              io.bloombox.schema.ledger.Accounts.LedgerIdentity.getDefaultInstance() : source_;
        }
      }
      /**
       * <pre>
       * Specifies the acting identity on the ledger for this transaction. In the case of a TRANSFER, it must be the
       * authorized owner of the asset in its current state, in order to fully authorize the underlying asset's transfer.
       * </pre>
       *
       * <code>.bloombox.ledger.LedgerIdentity source = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.ledger.Accounts.LedgerIdentity, io.bloombox.schema.ledger.Accounts.LedgerIdentity.Builder, io.bloombox.schema.ledger.Accounts.LedgerIdentityOrBuilder> 
          getSourceFieldBuilder() {
        if (sourceBuilder_ == null) {
          sourceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.bloombox.schema.ledger.Accounts.LedgerIdentity, io.bloombox.schema.ledger.Accounts.LedgerIdentity.Builder, io.bloombox.schema.ledger.Accounts.LedgerIdentityOrBuilder>(
                  getSource(),
                  getParentForChildren(),
                  isClean());
          source_ = null;
        }
        return sourceBuilder_;
      }

      private io.bloombox.schema.ledger.Accounts.LedgerIdentity target_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.ledger.Accounts.LedgerIdentity, io.bloombox.schema.ledger.Accounts.LedgerIdentity.Builder, io.bloombox.schema.ledger.Accounts.LedgerIdentityOrBuilder> targetBuilder_;
      /**
       * <pre>
       * Specifies the identity of the future-owner of the digital asset, should this transaction be deemed valid and then
       * accepted to the ledger. That is to say, this is the "recipient" in the transaction.
       * </pre>
       *
       * <code>.bloombox.ledger.LedgerIdentity target = 3;</code>
       */
      public boolean hasTarget() {
        return targetBuilder_ != null || target_ != null;
      }
      /**
       * <pre>
       * Specifies the identity of the future-owner of the digital asset, should this transaction be deemed valid and then
       * accepted to the ledger. That is to say, this is the "recipient" in the transaction.
       * </pre>
       *
       * <code>.bloombox.ledger.LedgerIdentity target = 3;</code>
       */
      public io.bloombox.schema.ledger.Accounts.LedgerIdentity getTarget() {
        if (targetBuilder_ == null) {
          return target_ == null ? io.bloombox.schema.ledger.Accounts.LedgerIdentity.getDefaultInstance() : target_;
        } else {
          return targetBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Specifies the identity of the future-owner of the digital asset, should this transaction be deemed valid and then
       * accepted to the ledger. That is to say, this is the "recipient" in the transaction.
       * </pre>
       *
       * <code>.bloombox.ledger.LedgerIdentity target = 3;</code>
       */
      public Builder setTarget(io.bloombox.schema.ledger.Accounts.LedgerIdentity value) {
        if (targetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          target_ = value;
          onChanged();
        } else {
          targetBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the identity of the future-owner of the digital asset, should this transaction be deemed valid and then
       * accepted to the ledger. That is to say, this is the "recipient" in the transaction.
       * </pre>
       *
       * <code>.bloombox.ledger.LedgerIdentity target = 3;</code>
       */
      public Builder setTarget(
          io.bloombox.schema.ledger.Accounts.LedgerIdentity.Builder builderForValue) {
        if (targetBuilder_ == null) {
          target_ = builderForValue.build();
          onChanged();
        } else {
          targetBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the identity of the future-owner of the digital asset, should this transaction be deemed valid and then
       * accepted to the ledger. That is to say, this is the "recipient" in the transaction.
       * </pre>
       *
       * <code>.bloombox.ledger.LedgerIdentity target = 3;</code>
       */
      public Builder mergeTarget(io.bloombox.schema.ledger.Accounts.LedgerIdentity value) {
        if (targetBuilder_ == null) {
          if (target_ != null) {
            target_ =
              io.bloombox.schema.ledger.Accounts.LedgerIdentity.newBuilder(target_).mergeFrom(value).buildPartial();
          } else {
            target_ = value;
          }
          onChanged();
        } else {
          targetBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the identity of the future-owner of the digital asset, should this transaction be deemed valid and then
       * accepted to the ledger. That is to say, this is the "recipient" in the transaction.
       * </pre>
       *
       * <code>.bloombox.ledger.LedgerIdentity target = 3;</code>
       */
      public Builder clearTarget() {
        if (targetBuilder_ == null) {
          target_ = null;
          onChanged();
        } else {
          target_ = null;
          targetBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Specifies the identity of the future-owner of the digital asset, should this transaction be deemed valid and then
       * accepted to the ledger. That is to say, this is the "recipient" in the transaction.
       * </pre>
       *
       * <code>.bloombox.ledger.LedgerIdentity target = 3;</code>
       */
      public io.bloombox.schema.ledger.Accounts.LedgerIdentity.Builder getTargetBuilder() {
        
        onChanged();
        return getTargetFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Specifies the identity of the future-owner of the digital asset, should this transaction be deemed valid and then
       * accepted to the ledger. That is to say, this is the "recipient" in the transaction.
       * </pre>
       *
       * <code>.bloombox.ledger.LedgerIdentity target = 3;</code>
       */
      public io.bloombox.schema.ledger.Accounts.LedgerIdentityOrBuilder getTargetOrBuilder() {
        if (targetBuilder_ != null) {
          return targetBuilder_.getMessageOrBuilder();
        } else {
          return target_ == null ?
              io.bloombox.schema.ledger.Accounts.LedgerIdentity.getDefaultInstance() : target_;
        }
      }
      /**
       * <pre>
       * Specifies the identity of the future-owner of the digital asset, should this transaction be deemed valid and then
       * accepted to the ledger. That is to say, this is the "recipient" in the transaction.
       * </pre>
       *
       * <code>.bloombox.ledger.LedgerIdentity target = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.ledger.Accounts.LedgerIdentity, io.bloombox.schema.ledger.Accounts.LedgerIdentity.Builder, io.bloombox.schema.ledger.Accounts.LedgerIdentityOrBuilder> 
          getTargetFieldBuilder() {
        if (targetBuilder_ == null) {
          targetBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.bloombox.schema.ledger.Accounts.LedgerIdentity, io.bloombox.schema.ledger.Accounts.LedgerIdentity.Builder, io.bloombox.schema.ledger.Accounts.LedgerIdentityOrBuilder>(
                  getTarget(),
                  getParentForChildren(),
                  isClean());
          target_ = null;
        }
        return targetBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:bloombox.ledger.TransferOperation)
    }

    // @@protoc_insertion_point(class_scope:bloombox.ledger.TransferOperation)
    private static final io.bloombox.schema.ledger.Transactions.TransferOperation DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.bloombox.schema.ledger.Transactions.TransferOperation();
    }

    public static io.bloombox.schema.ledger.Transactions.TransferOperation getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TransferOperation>
        PARSER = new com.google.protobuf.AbstractParser<TransferOperation>() {
      @java.lang.Override
      public TransferOperation parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TransferOperation(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TransferOperation> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TransferOperation> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.bloombox.schema.ledger.Transactions.TransferOperation getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TransactionKeyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:bloombox.ledger.TransactionKey)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Specifies the 'XID', or eXternal ID, for a given transaction. External IDs are not required to be dependent on
     * signed transaction content.
     * </pre>
     *
     * <code>string xid = 1;</code>
     */
    java.lang.String getXid();
    /**
     * <pre>
     * Specifies the 'XID', or eXternal ID, for a given transaction. External IDs are not required to be dependent on
     * signed transaction content.
     * </pre>
     *
     * <code>string xid = 1;</code>
     */
    com.google.protobuf.ByteString
        getXidBytes();

    /**
     * <pre>
     * Specifies the 'ID' of a transaction, which, in the context of a blockchain or distributed ledger, may be entirely
     * based on the content and private-key signature of the subject transaction.
     * </pre>
     *
     * <code>string id = 2;</code>
     */
    java.lang.String getId();
    /**
     * <pre>
     * Specifies the 'ID' of a transaction, which, in the context of a blockchain or distributed ledger, may be entirely
     * based on the content and private-key signature of the subject transaction.
     * </pre>
     *
     * <code>string id = 2;</code>
     */
    com.google.protobuf.ByteString
        getIdBytes();
  }
  /**
   * <pre>
   * Specifies the concept of a transaction "key," which may or may not be based on the transaction's ID, and may be
   * allocated outside of the transaction's commitment lifecycle (i.e. to track an in-flight transaction).
   * </pre>
   *
   * Protobuf type {@code bloombox.ledger.TransactionKey}
   */
  public  static final class TransactionKey extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:bloombox.ledger.TransactionKey)
      TransactionKeyOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TransactionKey.newBuilder() to construct.
    private TransactionKey(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TransactionKey() {
      xid_ = "";
      id_ = "";
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TransactionKey(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              xid_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              id_ = s;
              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.bloombox.schema.ledger.Transactions.internal_static_bloombox_ledger_TransactionKey_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.bloombox.schema.ledger.Transactions.internal_static_bloombox_ledger_TransactionKey_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.bloombox.schema.ledger.Transactions.TransactionKey.class, io.bloombox.schema.ledger.Transactions.TransactionKey.Builder.class);
    }

    public static final int XID_FIELD_NUMBER = 1;
    private volatile java.lang.Object xid_;
    /**
     * <pre>
     * Specifies the 'XID', or eXternal ID, for a given transaction. External IDs are not required to be dependent on
     * signed transaction content.
     * </pre>
     *
     * <code>string xid = 1;</code>
     */
    public java.lang.String getXid() {
      java.lang.Object ref = xid_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        xid_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Specifies the 'XID', or eXternal ID, for a given transaction. External IDs are not required to be dependent on
     * signed transaction content.
     * </pre>
     *
     * <code>string xid = 1;</code>
     */
    public com.google.protobuf.ByteString
        getXidBytes() {
      java.lang.Object ref = xid_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        xid_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ID_FIELD_NUMBER = 2;
    private volatile java.lang.Object id_;
    /**
     * <pre>
     * Specifies the 'ID' of a transaction, which, in the context of a blockchain or distributed ledger, may be entirely
     * based on the content and private-key signature of the subject transaction.
     * </pre>
     *
     * <code>string id = 2;</code>
     */
    public java.lang.String getId() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        id_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Specifies the 'ID' of a transaction, which, in the context of a blockchain or distributed ledger, may be entirely
     * based on the content and private-key signature of the subject transaction.
     * </pre>
     *
     * <code>string id = 2;</code>
     */
    public com.google.protobuf.ByteString
        getIdBytes() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        id_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getXidBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, xid_);
      }
      if (!getIdBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, id_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getXidBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, xid_);
      }
      if (!getIdBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, id_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.bloombox.schema.ledger.Transactions.TransactionKey)) {
        return super.equals(obj);
      }
      io.bloombox.schema.ledger.Transactions.TransactionKey other = (io.bloombox.schema.ledger.Transactions.TransactionKey) obj;

      boolean result = true;
      result = result && getXid()
          .equals(other.getXid());
      result = result && getId()
          .equals(other.getId());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + XID_FIELD_NUMBER;
      hash = (53 * hash) + getXid().hashCode();
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + getId().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.bloombox.schema.ledger.Transactions.TransactionKey parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.ledger.Transactions.TransactionKey parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Transactions.TransactionKey parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.ledger.Transactions.TransactionKey parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Transactions.TransactionKey parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.ledger.Transactions.TransactionKey parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Transactions.TransactionKey parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.ledger.Transactions.TransactionKey parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Transactions.TransactionKey parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.ledger.Transactions.TransactionKey parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Transactions.TransactionKey parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.ledger.Transactions.TransactionKey parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.bloombox.schema.ledger.Transactions.TransactionKey prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Specifies the concept of a transaction "key," which may or may not be based on the transaction's ID, and may be
     * allocated outside of the transaction's commitment lifecycle (i.e. to track an in-flight transaction).
     * </pre>
     *
     * Protobuf type {@code bloombox.ledger.TransactionKey}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:bloombox.ledger.TransactionKey)
        io.bloombox.schema.ledger.Transactions.TransactionKeyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.bloombox.schema.ledger.Transactions.internal_static_bloombox_ledger_TransactionKey_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.bloombox.schema.ledger.Transactions.internal_static_bloombox_ledger_TransactionKey_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.bloombox.schema.ledger.Transactions.TransactionKey.class, io.bloombox.schema.ledger.Transactions.TransactionKey.Builder.class);
      }

      // Construct using io.bloombox.schema.ledger.Transactions.TransactionKey.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        xid_ = "";

        id_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.bloombox.schema.ledger.Transactions.internal_static_bloombox_ledger_TransactionKey_descriptor;
      }

      @java.lang.Override
      public io.bloombox.schema.ledger.Transactions.TransactionKey getDefaultInstanceForType() {
        return io.bloombox.schema.ledger.Transactions.TransactionKey.getDefaultInstance();
      }

      @java.lang.Override
      public io.bloombox.schema.ledger.Transactions.TransactionKey build() {
        io.bloombox.schema.ledger.Transactions.TransactionKey result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.bloombox.schema.ledger.Transactions.TransactionKey buildPartial() {
        io.bloombox.schema.ledger.Transactions.TransactionKey result = new io.bloombox.schema.ledger.Transactions.TransactionKey(this);
        result.xid_ = xid_;
        result.id_ = id_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.bloombox.schema.ledger.Transactions.TransactionKey) {
          return mergeFrom((io.bloombox.schema.ledger.Transactions.TransactionKey)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.bloombox.schema.ledger.Transactions.TransactionKey other) {
        if (other == io.bloombox.schema.ledger.Transactions.TransactionKey.getDefaultInstance()) return this;
        if (!other.getXid().isEmpty()) {
          xid_ = other.xid_;
          onChanged();
        }
        if (!other.getId().isEmpty()) {
          id_ = other.id_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.bloombox.schema.ledger.Transactions.TransactionKey parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.bloombox.schema.ledger.Transactions.TransactionKey) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object xid_ = "";
      /**
       * <pre>
       * Specifies the 'XID', or eXternal ID, for a given transaction. External IDs are not required to be dependent on
       * signed transaction content.
       * </pre>
       *
       * <code>string xid = 1;</code>
       */
      public java.lang.String getXid() {
        java.lang.Object ref = xid_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          xid_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Specifies the 'XID', or eXternal ID, for a given transaction. External IDs are not required to be dependent on
       * signed transaction content.
       * </pre>
       *
       * <code>string xid = 1;</code>
       */
      public com.google.protobuf.ByteString
          getXidBytes() {
        java.lang.Object ref = xid_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          xid_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Specifies the 'XID', or eXternal ID, for a given transaction. External IDs are not required to be dependent on
       * signed transaction content.
       * </pre>
       *
       * <code>string xid = 1;</code>
       */
      public Builder setXid(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        xid_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the 'XID', or eXternal ID, for a given transaction. External IDs are not required to be dependent on
       * signed transaction content.
       * </pre>
       *
       * <code>string xid = 1;</code>
       */
      public Builder clearXid() {
        
        xid_ = getDefaultInstance().getXid();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the 'XID', or eXternal ID, for a given transaction. External IDs are not required to be dependent on
       * signed transaction content.
       * </pre>
       *
       * <code>string xid = 1;</code>
       */
      public Builder setXidBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        xid_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object id_ = "";
      /**
       * <pre>
       * Specifies the 'ID' of a transaction, which, in the context of a blockchain or distributed ledger, may be entirely
       * based on the content and private-key signature of the subject transaction.
       * </pre>
       *
       * <code>string id = 2;</code>
       */
      public java.lang.String getId() {
        java.lang.Object ref = id_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          id_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Specifies the 'ID' of a transaction, which, in the context of a blockchain or distributed ledger, may be entirely
       * based on the content and private-key signature of the subject transaction.
       * </pre>
       *
       * <code>string id = 2;</code>
       */
      public com.google.protobuf.ByteString
          getIdBytes() {
        java.lang.Object ref = id_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          id_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Specifies the 'ID' of a transaction, which, in the context of a blockchain or distributed ledger, may be entirely
       * based on the content and private-key signature of the subject transaction.
       * </pre>
       *
       * <code>string id = 2;</code>
       */
      public Builder setId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the 'ID' of a transaction, which, in the context of a blockchain or distributed ledger, may be entirely
       * based on the content and private-key signature of the subject transaction.
       * </pre>
       *
       * <code>string id = 2;</code>
       */
      public Builder clearId() {
        
        id_ = getDefaultInstance().getId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the 'ID' of a transaction, which, in the context of a blockchain or distributed ledger, may be entirely
       * based on the content and private-key signature of the subject transaction.
       * </pre>
       *
       * <code>string id = 2;</code>
       */
      public Builder setIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        id_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:bloombox.ledger.TransactionKey)
    }

    // @@protoc_insertion_point(class_scope:bloombox.ledger.TransactionKey)
    private static final io.bloombox.schema.ledger.Transactions.TransactionKey DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.bloombox.schema.ledger.Transactions.TransactionKey();
    }

    public static io.bloombox.schema.ledger.Transactions.TransactionKey getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TransactionKey>
        PARSER = new com.google.protobuf.AbstractParser<TransactionKey>() {
      @java.lang.Override
      public TransactionKey parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TransactionKey(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TransactionKey> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TransactionKey> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.bloombox.schema.ledger.Transactions.TransactionKey getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TransactionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:bloombox.ledger.Transaction)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Key for the transaction, which may consist of an ID (calculated from the underlying transaction content), and/or
     * an XID (external ID, which is independent of the transaction content and committment status).
     * </pre>
     *
     * <code>.bloombox.ledger.TransactionKey key = 1;</code>
     */
    boolean hasKey();
    /**
     * <pre>
     * Key for the transaction, which may consist of an ID (calculated from the underlying transaction content), and/or
     * an XID (external ID, which is independent of the transaction content and committment status).
     * </pre>
     *
     * <code>.bloombox.ledger.TransactionKey key = 1;</code>
     */
    io.bloombox.schema.ledger.Transactions.TransactionKey getKey();
    /**
     * <pre>
     * Key for the transaction, which may consist of an ID (calculated from the underlying transaction content), and/or
     * an XID (external ID, which is independent of the transaction content and committment status).
     * </pre>
     *
     * <code>.bloombox.ledger.TransactionKey key = 1;</code>
     */
    io.bloombox.schema.ledger.Transactions.TransactionKeyOrBuilder getKeyOrBuilder();

    /**
     * <pre>
     * Operation mode of this transaction. Can either be CREATE or TRANSFER. Create transactions perform the issuance of
     * digital assets, and TRANSFER transactions perform their interchange.
     * </pre>
     *
     * <code>.bloombox.ledger.Transaction.Operation operation = 2;</code>
     */
    int getOperationValue();
    /**
     * <pre>
     * Operation mode of this transaction. Can either be CREATE or TRANSFER. Create transactions perform the issuance of
     * digital assets, and TRANSFER transactions perform their interchange.
     * </pre>
     *
     * <code>.bloombox.ledger.Transaction.Operation operation = 2;</code>
     */
    io.bloombox.schema.ledger.Transactions.Transaction.Operation getOperation();

    /**
     * <pre>
     * Specifies a payload for an asset CREATE transaction.
     * </pre>
     *
     * <code>.bloombox.ledger.CreateOperation issuance = 10;</code>
     */
    boolean hasIssuance();
    /**
     * <pre>
     * Specifies a payload for an asset CREATE transaction.
     * </pre>
     *
     * <code>.bloombox.ledger.CreateOperation issuance = 10;</code>
     */
    io.bloombox.schema.ledger.Transactions.CreateOperation getIssuance();
    /**
     * <pre>
     * Specifies a payload for an asset CREATE transaction.
     * </pre>
     *
     * <code>.bloombox.ledger.CreateOperation issuance = 10;</code>
     */
    io.bloombox.schema.ledger.Transactions.CreateOperationOrBuilder getIssuanceOrBuilder();

    /**
     * <pre>
     * Specifies a payload for an asset TRANSFER transaction.
     * </pre>
     *
     * <code>.bloombox.ledger.TransferOperation interchange = 11;</code>
     */
    boolean hasInterchange();
    /**
     * <pre>
     * Specifies a payload for an asset TRANSFER transaction.
     * </pre>
     *
     * <code>.bloombox.ledger.TransferOperation interchange = 11;</code>
     */
    io.bloombox.schema.ledger.Transactions.TransferOperation getInterchange();
    /**
     * <pre>
     * Specifies a payload for an asset TRANSFER transaction.
     * </pre>
     *
     * <code>.bloombox.ledger.TransferOperation interchange = 11;</code>
     */
    io.bloombox.schema.ledger.Transactions.TransferOperationOrBuilder getInterchangeOrBuilder();

    /**
     * <pre>
     * Timestamp for when this ledger transaction was created.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant created = 98;</code>
     */
    boolean hasCreated();
    /**
     * <pre>
     * Timestamp for when this ledger transaction was created.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant created = 98;</code>
     */
    io.opencannabis.schema.temporal.TemporalInstant.Instant getCreated();
    /**
     * <pre>
     * Timestamp for when this ledger transaction was created.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant created = 98;</code>
     */
    io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getCreatedOrBuilder();

    /**
     * <pre>
     * Timestamp for when this ledger transaction was last modified.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant modified = 99;</code>
     */
    boolean hasModified();
    /**
     * <pre>
     * Timestamp for when this ledger transaction was last modified.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant modified = 99;</code>
     */
    io.opencannabis.schema.temporal.TemporalInstant.Instant getModified();
    /**
     * <pre>
     * Timestamp for when this ledger transaction was last modified.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant modified = 99;</code>
     */
    io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getModifiedOrBuilder();

    public io.bloombox.schema.ledger.Transactions.Transaction.TxnCase getTxnCase();
  }
  /**
   * <pre>
   * Describes the structure of an individual transaction on the ledger. This serves as the main structural specification
   * for a transaction, by operating as a generic container of both CREATE and TRANSFER operations.
   * </pre>
   *
   * Protobuf type {@code bloombox.ledger.Transaction}
   */
  public  static final class Transaction extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:bloombox.ledger.Transaction)
      TransactionOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Transaction.newBuilder() to construct.
    private Transaction(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Transaction() {
      operation_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Transaction(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              io.bloombox.schema.ledger.Transactions.TransactionKey.Builder subBuilder = null;
              if (key_ != null) {
                subBuilder = key_.toBuilder();
              }
              key_ = input.readMessage(io.bloombox.schema.ledger.Transactions.TransactionKey.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(key_);
                key_ = subBuilder.buildPartial();
              }

              break;
            }
            case 16: {
              int rawValue = input.readEnum();

              operation_ = rawValue;
              break;
            }
            case 82: {
              io.bloombox.schema.ledger.Transactions.CreateOperation.Builder subBuilder = null;
              if (txnCase_ == 10) {
                subBuilder = ((io.bloombox.schema.ledger.Transactions.CreateOperation) txn_).toBuilder();
              }
              txn_ =
                  input.readMessage(io.bloombox.schema.ledger.Transactions.CreateOperation.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((io.bloombox.schema.ledger.Transactions.CreateOperation) txn_);
                txn_ = subBuilder.buildPartial();
              }
              txnCase_ = 10;
              break;
            }
            case 90: {
              io.bloombox.schema.ledger.Transactions.TransferOperation.Builder subBuilder = null;
              if (txnCase_ == 11) {
                subBuilder = ((io.bloombox.schema.ledger.Transactions.TransferOperation) txn_).toBuilder();
              }
              txn_ =
                  input.readMessage(io.bloombox.schema.ledger.Transactions.TransferOperation.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((io.bloombox.schema.ledger.Transactions.TransferOperation) txn_);
                txn_ = subBuilder.buildPartial();
              }
              txnCase_ = 11;
              break;
            }
            case 786: {
              io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder subBuilder = null;
              if (created_ != null) {
                subBuilder = created_.toBuilder();
              }
              created_ = input.readMessage(io.opencannabis.schema.temporal.TemporalInstant.Instant.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(created_);
                created_ = subBuilder.buildPartial();
              }

              break;
            }
            case 794: {
              io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder subBuilder = null;
              if (modified_ != null) {
                subBuilder = modified_.toBuilder();
              }
              modified_ = input.readMessage(io.opencannabis.schema.temporal.TemporalInstant.Instant.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(modified_);
                modified_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.bloombox.schema.ledger.Transactions.internal_static_bloombox_ledger_Transaction_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.bloombox.schema.ledger.Transactions.internal_static_bloombox_ledger_Transaction_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.bloombox.schema.ledger.Transactions.Transaction.class, io.bloombox.schema.ledger.Transactions.Transaction.Builder.class);
    }

    /**
     * <pre>
     * Enumerates the types of operations supported via this interface. At the time of writing, supported transaction
     * types include CREATE and TRANSFER.
     * </pre>
     *
     * Protobuf enum {@code bloombox.ledger.Transaction.Operation}
     */
    public enum Operation
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * CREATE operations perform the issuance of digital assets.
       * </pre>
       *
       * <code>CREATE = 0;</code>
       */
      CREATE(0),
      /**
       * <pre>
       * TRANSFER operations perform the interchange of existing digital assets.
       * </pre>
       *
       * <code>TRANSFER = 1;</code>
       */
      TRANSFER(1),
      UNRECOGNIZED(-1),
      ;

      /**
       * <pre>
       * CREATE operations perform the issuance of digital assets.
       * </pre>
       *
       * <code>CREATE = 0;</code>
       */
      public static final int CREATE_VALUE = 0;
      /**
       * <pre>
       * TRANSFER operations perform the interchange of existing digital assets.
       * </pre>
       *
       * <code>TRANSFER = 1;</code>
       */
      public static final int TRANSFER_VALUE = 1;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Operation valueOf(int value) {
        return forNumber(value);
      }

      public static Operation forNumber(int value) {
        switch (value) {
          case 0: return CREATE;
          case 1: return TRANSFER;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Operation>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Operation> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Operation>() {
              public Operation findValueByNumber(int number) {
                return Operation.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return io.bloombox.schema.ledger.Transactions.Transaction.getDescriptor().getEnumTypes().get(0);
      }

      private static final Operation[] VALUES = values();

      public static Operation valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Operation(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:bloombox.ledger.Transaction.Operation)
    }

    private int txnCase_ = 0;
    private java.lang.Object txn_;
    public enum TxnCase
        implements com.google.protobuf.Internal.EnumLite {
      ISSUANCE(10),
      INTERCHANGE(11),
      TXN_NOT_SET(0);
      private final int value;
      private TxnCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static TxnCase valueOf(int value) {
        return forNumber(value);
      }

      public static TxnCase forNumber(int value) {
        switch (value) {
          case 10: return ISSUANCE;
          case 11: return INTERCHANGE;
          case 0: return TXN_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public TxnCase
    getTxnCase() {
      return TxnCase.forNumber(
          txnCase_);
    }

    public static final int KEY_FIELD_NUMBER = 1;
    private io.bloombox.schema.ledger.Transactions.TransactionKey key_;
    /**
     * <pre>
     * Key for the transaction, which may consist of an ID (calculated from the underlying transaction content), and/or
     * an XID (external ID, which is independent of the transaction content and committment status).
     * </pre>
     *
     * <code>.bloombox.ledger.TransactionKey key = 1;</code>
     */
    public boolean hasKey() {
      return key_ != null;
    }
    /**
     * <pre>
     * Key for the transaction, which may consist of an ID (calculated from the underlying transaction content), and/or
     * an XID (external ID, which is independent of the transaction content and committment status).
     * </pre>
     *
     * <code>.bloombox.ledger.TransactionKey key = 1;</code>
     */
    public io.bloombox.schema.ledger.Transactions.TransactionKey getKey() {
      return key_ == null ? io.bloombox.schema.ledger.Transactions.TransactionKey.getDefaultInstance() : key_;
    }
    /**
     * <pre>
     * Key for the transaction, which may consist of an ID (calculated from the underlying transaction content), and/or
     * an XID (external ID, which is independent of the transaction content and committment status).
     * </pre>
     *
     * <code>.bloombox.ledger.TransactionKey key = 1;</code>
     */
    public io.bloombox.schema.ledger.Transactions.TransactionKeyOrBuilder getKeyOrBuilder() {
      return getKey();
    }

    public static final int OPERATION_FIELD_NUMBER = 2;
    private int operation_;
    /**
     * <pre>
     * Operation mode of this transaction. Can either be CREATE or TRANSFER. Create transactions perform the issuance of
     * digital assets, and TRANSFER transactions perform their interchange.
     * </pre>
     *
     * <code>.bloombox.ledger.Transaction.Operation operation = 2;</code>
     */
    public int getOperationValue() {
      return operation_;
    }
    /**
     * <pre>
     * Operation mode of this transaction. Can either be CREATE or TRANSFER. Create transactions perform the issuance of
     * digital assets, and TRANSFER transactions perform their interchange.
     * </pre>
     *
     * <code>.bloombox.ledger.Transaction.Operation operation = 2;</code>
     */
    public io.bloombox.schema.ledger.Transactions.Transaction.Operation getOperation() {
      @SuppressWarnings("deprecation")
      io.bloombox.schema.ledger.Transactions.Transaction.Operation result = io.bloombox.schema.ledger.Transactions.Transaction.Operation.valueOf(operation_);
      return result == null ? io.bloombox.schema.ledger.Transactions.Transaction.Operation.UNRECOGNIZED : result;
    }

    public static final int ISSUANCE_FIELD_NUMBER = 10;
    /**
     * <pre>
     * Specifies a payload for an asset CREATE transaction.
     * </pre>
     *
     * <code>.bloombox.ledger.CreateOperation issuance = 10;</code>
     */
    public boolean hasIssuance() {
      return txnCase_ == 10;
    }
    /**
     * <pre>
     * Specifies a payload for an asset CREATE transaction.
     * </pre>
     *
     * <code>.bloombox.ledger.CreateOperation issuance = 10;</code>
     */
    public io.bloombox.schema.ledger.Transactions.CreateOperation getIssuance() {
      if (txnCase_ == 10) {
         return (io.bloombox.schema.ledger.Transactions.CreateOperation) txn_;
      }
      return io.bloombox.schema.ledger.Transactions.CreateOperation.getDefaultInstance();
    }
    /**
     * <pre>
     * Specifies a payload for an asset CREATE transaction.
     * </pre>
     *
     * <code>.bloombox.ledger.CreateOperation issuance = 10;</code>
     */
    public io.bloombox.schema.ledger.Transactions.CreateOperationOrBuilder getIssuanceOrBuilder() {
      if (txnCase_ == 10) {
         return (io.bloombox.schema.ledger.Transactions.CreateOperation) txn_;
      }
      return io.bloombox.schema.ledger.Transactions.CreateOperation.getDefaultInstance();
    }

    public static final int INTERCHANGE_FIELD_NUMBER = 11;
    /**
     * <pre>
     * Specifies a payload for an asset TRANSFER transaction.
     * </pre>
     *
     * <code>.bloombox.ledger.TransferOperation interchange = 11;</code>
     */
    public boolean hasInterchange() {
      return txnCase_ == 11;
    }
    /**
     * <pre>
     * Specifies a payload for an asset TRANSFER transaction.
     * </pre>
     *
     * <code>.bloombox.ledger.TransferOperation interchange = 11;</code>
     */
    public io.bloombox.schema.ledger.Transactions.TransferOperation getInterchange() {
      if (txnCase_ == 11) {
         return (io.bloombox.schema.ledger.Transactions.TransferOperation) txn_;
      }
      return io.bloombox.schema.ledger.Transactions.TransferOperation.getDefaultInstance();
    }
    /**
     * <pre>
     * Specifies a payload for an asset TRANSFER transaction.
     * </pre>
     *
     * <code>.bloombox.ledger.TransferOperation interchange = 11;</code>
     */
    public io.bloombox.schema.ledger.Transactions.TransferOperationOrBuilder getInterchangeOrBuilder() {
      if (txnCase_ == 11) {
         return (io.bloombox.schema.ledger.Transactions.TransferOperation) txn_;
      }
      return io.bloombox.schema.ledger.Transactions.TransferOperation.getDefaultInstance();
    }

    public static final int CREATED_FIELD_NUMBER = 98;
    private io.opencannabis.schema.temporal.TemporalInstant.Instant created_;
    /**
     * <pre>
     * Timestamp for when this ledger transaction was created.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant created = 98;</code>
     */
    public boolean hasCreated() {
      return created_ != null;
    }
    /**
     * <pre>
     * Timestamp for when this ledger transaction was created.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant created = 98;</code>
     */
    public io.opencannabis.schema.temporal.TemporalInstant.Instant getCreated() {
      return created_ == null ? io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : created_;
    }
    /**
     * <pre>
     * Timestamp for when this ledger transaction was created.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant created = 98;</code>
     */
    public io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getCreatedOrBuilder() {
      return getCreated();
    }

    public static final int MODIFIED_FIELD_NUMBER = 99;
    private io.opencannabis.schema.temporal.TemporalInstant.Instant modified_;
    /**
     * <pre>
     * Timestamp for when this ledger transaction was last modified.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant modified = 99;</code>
     */
    public boolean hasModified() {
      return modified_ != null;
    }
    /**
     * <pre>
     * Timestamp for when this ledger transaction was last modified.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant modified = 99;</code>
     */
    public io.opencannabis.schema.temporal.TemporalInstant.Instant getModified() {
      return modified_ == null ? io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : modified_;
    }
    /**
     * <pre>
     * Timestamp for when this ledger transaction was last modified.
     * </pre>
     *
     * <code>.opencannabis.temporal.Instant modified = 99;</code>
     */
    public io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getModifiedOrBuilder() {
      return getModified();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (key_ != null) {
        output.writeMessage(1, getKey());
      }
      if (operation_ != io.bloombox.schema.ledger.Transactions.Transaction.Operation.CREATE.getNumber()) {
        output.writeEnum(2, operation_);
      }
      if (txnCase_ == 10) {
        output.writeMessage(10, (io.bloombox.schema.ledger.Transactions.CreateOperation) txn_);
      }
      if (txnCase_ == 11) {
        output.writeMessage(11, (io.bloombox.schema.ledger.Transactions.TransferOperation) txn_);
      }
      if (created_ != null) {
        output.writeMessage(98, getCreated());
      }
      if (modified_ != null) {
        output.writeMessage(99, getModified());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (key_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getKey());
      }
      if (operation_ != io.bloombox.schema.ledger.Transactions.Transaction.Operation.CREATE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, operation_);
      }
      if (txnCase_ == 10) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, (io.bloombox.schema.ledger.Transactions.CreateOperation) txn_);
      }
      if (txnCase_ == 11) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, (io.bloombox.schema.ledger.Transactions.TransferOperation) txn_);
      }
      if (created_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(98, getCreated());
      }
      if (modified_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(99, getModified());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.bloombox.schema.ledger.Transactions.Transaction)) {
        return super.equals(obj);
      }
      io.bloombox.schema.ledger.Transactions.Transaction other = (io.bloombox.schema.ledger.Transactions.Transaction) obj;

      boolean result = true;
      result = result && (hasKey() == other.hasKey());
      if (hasKey()) {
        result = result && getKey()
            .equals(other.getKey());
      }
      result = result && operation_ == other.operation_;
      result = result && (hasCreated() == other.hasCreated());
      if (hasCreated()) {
        result = result && getCreated()
            .equals(other.getCreated());
      }
      result = result && (hasModified() == other.hasModified());
      if (hasModified()) {
        result = result && getModified()
            .equals(other.getModified());
      }
      result = result && getTxnCase().equals(
          other.getTxnCase());
      if (!result) return false;
      switch (txnCase_) {
        case 10:
          result = result && getIssuance()
              .equals(other.getIssuance());
          break;
        case 11:
          result = result && getInterchange()
              .equals(other.getInterchange());
          break;
        case 0:
        default:
      }
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasKey()) {
        hash = (37 * hash) + KEY_FIELD_NUMBER;
        hash = (53 * hash) + getKey().hashCode();
      }
      hash = (37 * hash) + OPERATION_FIELD_NUMBER;
      hash = (53 * hash) + operation_;
      if (hasCreated()) {
        hash = (37 * hash) + CREATED_FIELD_NUMBER;
        hash = (53 * hash) + getCreated().hashCode();
      }
      if (hasModified()) {
        hash = (37 * hash) + MODIFIED_FIELD_NUMBER;
        hash = (53 * hash) + getModified().hashCode();
      }
      switch (txnCase_) {
        case 10:
          hash = (37 * hash) + ISSUANCE_FIELD_NUMBER;
          hash = (53 * hash) + getIssuance().hashCode();
          break;
        case 11:
          hash = (37 * hash) + INTERCHANGE_FIELD_NUMBER;
          hash = (53 * hash) + getInterchange().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.bloombox.schema.ledger.Transactions.Transaction parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.ledger.Transactions.Transaction parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Transactions.Transaction parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.ledger.Transactions.Transaction parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Transactions.Transaction parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.ledger.Transactions.Transaction parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Transactions.Transaction parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.ledger.Transactions.Transaction parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Transactions.Transaction parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.ledger.Transactions.Transaction parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.ledger.Transactions.Transaction parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.ledger.Transactions.Transaction parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.bloombox.schema.ledger.Transactions.Transaction prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Describes the structure of an individual transaction on the ledger. This serves as the main structural specification
     * for a transaction, by operating as a generic container of both CREATE and TRANSFER operations.
     * </pre>
     *
     * Protobuf type {@code bloombox.ledger.Transaction}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:bloombox.ledger.Transaction)
        io.bloombox.schema.ledger.Transactions.TransactionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.bloombox.schema.ledger.Transactions.internal_static_bloombox_ledger_Transaction_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.bloombox.schema.ledger.Transactions.internal_static_bloombox_ledger_Transaction_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.bloombox.schema.ledger.Transactions.Transaction.class, io.bloombox.schema.ledger.Transactions.Transaction.Builder.class);
      }

      // Construct using io.bloombox.schema.ledger.Transactions.Transaction.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (keyBuilder_ == null) {
          key_ = null;
        } else {
          key_ = null;
          keyBuilder_ = null;
        }
        operation_ = 0;

        if (createdBuilder_ == null) {
          created_ = null;
        } else {
          created_ = null;
          createdBuilder_ = null;
        }
        if (modifiedBuilder_ == null) {
          modified_ = null;
        } else {
          modified_ = null;
          modifiedBuilder_ = null;
        }
        txnCase_ = 0;
        txn_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.bloombox.schema.ledger.Transactions.internal_static_bloombox_ledger_Transaction_descriptor;
      }

      @java.lang.Override
      public io.bloombox.schema.ledger.Transactions.Transaction getDefaultInstanceForType() {
        return io.bloombox.schema.ledger.Transactions.Transaction.getDefaultInstance();
      }

      @java.lang.Override
      public io.bloombox.schema.ledger.Transactions.Transaction build() {
        io.bloombox.schema.ledger.Transactions.Transaction result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.bloombox.schema.ledger.Transactions.Transaction buildPartial() {
        io.bloombox.schema.ledger.Transactions.Transaction result = new io.bloombox.schema.ledger.Transactions.Transaction(this);
        if (keyBuilder_ == null) {
          result.key_ = key_;
        } else {
          result.key_ = keyBuilder_.build();
        }
        result.operation_ = operation_;
        if (txnCase_ == 10) {
          if (issuanceBuilder_ == null) {
            result.txn_ = txn_;
          } else {
            result.txn_ = issuanceBuilder_.build();
          }
        }
        if (txnCase_ == 11) {
          if (interchangeBuilder_ == null) {
            result.txn_ = txn_;
          } else {
            result.txn_ = interchangeBuilder_.build();
          }
        }
        if (createdBuilder_ == null) {
          result.created_ = created_;
        } else {
          result.created_ = createdBuilder_.build();
        }
        if (modifiedBuilder_ == null) {
          result.modified_ = modified_;
        } else {
          result.modified_ = modifiedBuilder_.build();
        }
        result.txnCase_ = txnCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return (Builder) super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.bloombox.schema.ledger.Transactions.Transaction) {
          return mergeFrom((io.bloombox.schema.ledger.Transactions.Transaction)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.bloombox.schema.ledger.Transactions.Transaction other) {
        if (other == io.bloombox.schema.ledger.Transactions.Transaction.getDefaultInstance()) return this;
        if (other.hasKey()) {
          mergeKey(other.getKey());
        }
        if (other.operation_ != 0) {
          setOperationValue(other.getOperationValue());
        }
        if (other.hasCreated()) {
          mergeCreated(other.getCreated());
        }
        if (other.hasModified()) {
          mergeModified(other.getModified());
        }
        switch (other.getTxnCase()) {
          case ISSUANCE: {
            mergeIssuance(other.getIssuance());
            break;
          }
          case INTERCHANGE: {
            mergeInterchange(other.getInterchange());
            break;
          }
          case TXN_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.bloombox.schema.ledger.Transactions.Transaction parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.bloombox.schema.ledger.Transactions.Transaction) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int txnCase_ = 0;
      private java.lang.Object txn_;
      public TxnCase
          getTxnCase() {
        return TxnCase.forNumber(
            txnCase_);
      }

      public Builder clearTxn() {
        txnCase_ = 0;
        txn_ = null;
        onChanged();
        return this;
      }


      private io.bloombox.schema.ledger.Transactions.TransactionKey key_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.ledger.Transactions.TransactionKey, io.bloombox.schema.ledger.Transactions.TransactionKey.Builder, io.bloombox.schema.ledger.Transactions.TransactionKeyOrBuilder> keyBuilder_;
      /**
       * <pre>
       * Key for the transaction, which may consist of an ID (calculated from the underlying transaction content), and/or
       * an XID (external ID, which is independent of the transaction content and committment status).
       * </pre>
       *
       * <code>.bloombox.ledger.TransactionKey key = 1;</code>
       */
      public boolean hasKey() {
        return keyBuilder_ != null || key_ != null;
      }
      /**
       * <pre>
       * Key for the transaction, which may consist of an ID (calculated from the underlying transaction content), and/or
       * an XID (external ID, which is independent of the transaction content and committment status).
       * </pre>
       *
       * <code>.bloombox.ledger.TransactionKey key = 1;</code>
       */
      public io.bloombox.schema.ledger.Transactions.TransactionKey getKey() {
        if (keyBuilder_ == null) {
          return key_ == null ? io.bloombox.schema.ledger.Transactions.TransactionKey.getDefaultInstance() : key_;
        } else {
          return keyBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Key for the transaction, which may consist of an ID (calculated from the underlying transaction content), and/or
       * an XID (external ID, which is independent of the transaction content and committment status).
       * </pre>
       *
       * <code>.bloombox.ledger.TransactionKey key = 1;</code>
       */
      public Builder setKey(io.bloombox.schema.ledger.Transactions.TransactionKey value) {
        if (keyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          key_ = value;
          onChanged();
        } else {
          keyBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Key for the transaction, which may consist of an ID (calculated from the underlying transaction content), and/or
       * an XID (external ID, which is independent of the transaction content and committment status).
       * </pre>
       *
       * <code>.bloombox.ledger.TransactionKey key = 1;</code>
       */
      public Builder setKey(
          io.bloombox.schema.ledger.Transactions.TransactionKey.Builder builderForValue) {
        if (keyBuilder_ == null) {
          key_ = builderForValue.build();
          onChanged();
        } else {
          keyBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Key for the transaction, which may consist of an ID (calculated from the underlying transaction content), and/or
       * an XID (external ID, which is independent of the transaction content and committment status).
       * </pre>
       *
       * <code>.bloombox.ledger.TransactionKey key = 1;</code>
       */
      public Builder mergeKey(io.bloombox.schema.ledger.Transactions.TransactionKey value) {
        if (keyBuilder_ == null) {
          if (key_ != null) {
            key_ =
              io.bloombox.schema.ledger.Transactions.TransactionKey.newBuilder(key_).mergeFrom(value).buildPartial();
          } else {
            key_ = value;
          }
          onChanged();
        } else {
          keyBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Key for the transaction, which may consist of an ID (calculated from the underlying transaction content), and/or
       * an XID (external ID, which is independent of the transaction content and committment status).
       * </pre>
       *
       * <code>.bloombox.ledger.TransactionKey key = 1;</code>
       */
      public Builder clearKey() {
        if (keyBuilder_ == null) {
          key_ = null;
          onChanged();
        } else {
          key_ = null;
          keyBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Key for the transaction, which may consist of an ID (calculated from the underlying transaction content), and/or
       * an XID (external ID, which is independent of the transaction content and committment status).
       * </pre>
       *
       * <code>.bloombox.ledger.TransactionKey key = 1;</code>
       */
      public io.bloombox.schema.ledger.Transactions.TransactionKey.Builder getKeyBuilder() {
        
        onChanged();
        return getKeyFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Key for the transaction, which may consist of an ID (calculated from the underlying transaction content), and/or
       * an XID (external ID, which is independent of the transaction content and committment status).
       * </pre>
       *
       * <code>.bloombox.ledger.TransactionKey key = 1;</code>
       */
      public io.bloombox.schema.ledger.Transactions.TransactionKeyOrBuilder getKeyOrBuilder() {
        if (keyBuilder_ != null) {
          return keyBuilder_.getMessageOrBuilder();
        } else {
          return key_ == null ?
              io.bloombox.schema.ledger.Transactions.TransactionKey.getDefaultInstance() : key_;
        }
      }
      /**
       * <pre>
       * Key for the transaction, which may consist of an ID (calculated from the underlying transaction content), and/or
       * an XID (external ID, which is independent of the transaction content and committment status).
       * </pre>
       *
       * <code>.bloombox.ledger.TransactionKey key = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.ledger.Transactions.TransactionKey, io.bloombox.schema.ledger.Transactions.TransactionKey.Builder, io.bloombox.schema.ledger.Transactions.TransactionKeyOrBuilder> 
          getKeyFieldBuilder() {
        if (keyBuilder_ == null) {
          keyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.bloombox.schema.ledger.Transactions.TransactionKey, io.bloombox.schema.ledger.Transactions.TransactionKey.Builder, io.bloombox.schema.ledger.Transactions.TransactionKeyOrBuilder>(
                  getKey(),
                  getParentForChildren(),
                  isClean());
          key_ = null;
        }
        return keyBuilder_;
      }

      private int operation_ = 0;
      /**
       * <pre>
       * Operation mode of this transaction. Can either be CREATE or TRANSFER. Create transactions perform the issuance of
       * digital assets, and TRANSFER transactions perform their interchange.
       * </pre>
       *
       * <code>.bloombox.ledger.Transaction.Operation operation = 2;</code>
       */
      public int getOperationValue() {
        return operation_;
      }
      /**
       * <pre>
       * Operation mode of this transaction. Can either be CREATE or TRANSFER. Create transactions perform the issuance of
       * digital assets, and TRANSFER transactions perform their interchange.
       * </pre>
       *
       * <code>.bloombox.ledger.Transaction.Operation operation = 2;</code>
       */
      public Builder setOperationValue(int value) {
        operation_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Operation mode of this transaction. Can either be CREATE or TRANSFER. Create transactions perform the issuance of
       * digital assets, and TRANSFER transactions perform their interchange.
       * </pre>
       *
       * <code>.bloombox.ledger.Transaction.Operation operation = 2;</code>
       */
      public io.bloombox.schema.ledger.Transactions.Transaction.Operation getOperation() {
        @SuppressWarnings("deprecation")
        io.bloombox.schema.ledger.Transactions.Transaction.Operation result = io.bloombox.schema.ledger.Transactions.Transaction.Operation.valueOf(operation_);
        return result == null ? io.bloombox.schema.ledger.Transactions.Transaction.Operation.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Operation mode of this transaction. Can either be CREATE or TRANSFER. Create transactions perform the issuance of
       * digital assets, and TRANSFER transactions perform their interchange.
       * </pre>
       *
       * <code>.bloombox.ledger.Transaction.Operation operation = 2;</code>
       */
      public Builder setOperation(io.bloombox.schema.ledger.Transactions.Transaction.Operation value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        operation_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Operation mode of this transaction. Can either be CREATE or TRANSFER. Create transactions perform the issuance of
       * digital assets, and TRANSFER transactions perform their interchange.
       * </pre>
       *
       * <code>.bloombox.ledger.Transaction.Operation operation = 2;</code>
       */
      public Builder clearOperation() {
        
        operation_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.ledger.Transactions.CreateOperation, io.bloombox.schema.ledger.Transactions.CreateOperation.Builder, io.bloombox.schema.ledger.Transactions.CreateOperationOrBuilder> issuanceBuilder_;
      /**
       * <pre>
       * Specifies a payload for an asset CREATE transaction.
       * </pre>
       *
       * <code>.bloombox.ledger.CreateOperation issuance = 10;</code>
       */
      public boolean hasIssuance() {
        return txnCase_ == 10;
      }
      /**
       * <pre>
       * Specifies a payload for an asset CREATE transaction.
       * </pre>
       *
       * <code>.bloombox.ledger.CreateOperation issuance = 10;</code>
       */
      public io.bloombox.schema.ledger.Transactions.CreateOperation getIssuance() {
        if (issuanceBuilder_ == null) {
          if (txnCase_ == 10) {
            return (io.bloombox.schema.ledger.Transactions.CreateOperation) txn_;
          }
          return io.bloombox.schema.ledger.Transactions.CreateOperation.getDefaultInstance();
        } else {
          if (txnCase_ == 10) {
            return issuanceBuilder_.getMessage();
          }
          return io.bloombox.schema.ledger.Transactions.CreateOperation.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Specifies a payload for an asset CREATE transaction.
       * </pre>
       *
       * <code>.bloombox.ledger.CreateOperation issuance = 10;</code>
       */
      public Builder setIssuance(io.bloombox.schema.ledger.Transactions.CreateOperation value) {
        if (issuanceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          txn_ = value;
          onChanged();
        } else {
          issuanceBuilder_.setMessage(value);
        }
        txnCase_ = 10;
        return this;
      }
      /**
       * <pre>
       * Specifies a payload for an asset CREATE transaction.
       * </pre>
       *
       * <code>.bloombox.ledger.CreateOperation issuance = 10;</code>
       */
      public Builder setIssuance(
          io.bloombox.schema.ledger.Transactions.CreateOperation.Builder builderForValue) {
        if (issuanceBuilder_ == null) {
          txn_ = builderForValue.build();
          onChanged();
        } else {
          issuanceBuilder_.setMessage(builderForValue.build());
        }
        txnCase_ = 10;
        return this;
      }
      /**
       * <pre>
       * Specifies a payload for an asset CREATE transaction.
       * </pre>
       *
       * <code>.bloombox.ledger.CreateOperation issuance = 10;</code>
       */
      public Builder mergeIssuance(io.bloombox.schema.ledger.Transactions.CreateOperation value) {
        if (issuanceBuilder_ == null) {
          if (txnCase_ == 10 &&
              txn_ != io.bloombox.schema.ledger.Transactions.CreateOperation.getDefaultInstance()) {
            txn_ = io.bloombox.schema.ledger.Transactions.CreateOperation.newBuilder((io.bloombox.schema.ledger.Transactions.CreateOperation) txn_)
                .mergeFrom(value).buildPartial();
          } else {
            txn_ = value;
          }
          onChanged();
        } else {
          if (txnCase_ == 10) {
            issuanceBuilder_.mergeFrom(value);
          }
          issuanceBuilder_.setMessage(value);
        }
        txnCase_ = 10;
        return this;
      }
      /**
       * <pre>
       * Specifies a payload for an asset CREATE transaction.
       * </pre>
       *
       * <code>.bloombox.ledger.CreateOperation issuance = 10;</code>
       */
      public Builder clearIssuance() {
        if (issuanceBuilder_ == null) {
          if (txnCase_ == 10) {
            txnCase_ = 0;
            txn_ = null;
            onChanged();
          }
        } else {
          if (txnCase_ == 10) {
            txnCase_ = 0;
            txn_ = null;
          }
          issuanceBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Specifies a payload for an asset CREATE transaction.
       * </pre>
       *
       * <code>.bloombox.ledger.CreateOperation issuance = 10;</code>
       */
      public io.bloombox.schema.ledger.Transactions.CreateOperation.Builder getIssuanceBuilder() {
        return getIssuanceFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Specifies a payload for an asset CREATE transaction.
       * </pre>
       *
       * <code>.bloombox.ledger.CreateOperation issuance = 10;</code>
       */
      public io.bloombox.schema.ledger.Transactions.CreateOperationOrBuilder getIssuanceOrBuilder() {
        if ((txnCase_ == 10) && (issuanceBuilder_ != null)) {
          return issuanceBuilder_.getMessageOrBuilder();
        } else {
          if (txnCase_ == 10) {
            return (io.bloombox.schema.ledger.Transactions.CreateOperation) txn_;
          }
          return io.bloombox.schema.ledger.Transactions.CreateOperation.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Specifies a payload for an asset CREATE transaction.
       * </pre>
       *
       * <code>.bloombox.ledger.CreateOperation issuance = 10;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.ledger.Transactions.CreateOperation, io.bloombox.schema.ledger.Transactions.CreateOperation.Builder, io.bloombox.schema.ledger.Transactions.CreateOperationOrBuilder> 
          getIssuanceFieldBuilder() {
        if (issuanceBuilder_ == null) {
          if (!(txnCase_ == 10)) {
            txn_ = io.bloombox.schema.ledger.Transactions.CreateOperation.getDefaultInstance();
          }
          issuanceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.bloombox.schema.ledger.Transactions.CreateOperation, io.bloombox.schema.ledger.Transactions.CreateOperation.Builder, io.bloombox.schema.ledger.Transactions.CreateOperationOrBuilder>(
                  (io.bloombox.schema.ledger.Transactions.CreateOperation) txn_,
                  getParentForChildren(),
                  isClean());
          txn_ = null;
        }
        txnCase_ = 10;
        onChanged();;
        return issuanceBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.ledger.Transactions.TransferOperation, io.bloombox.schema.ledger.Transactions.TransferOperation.Builder, io.bloombox.schema.ledger.Transactions.TransferOperationOrBuilder> interchangeBuilder_;
      /**
       * <pre>
       * Specifies a payload for an asset TRANSFER transaction.
       * </pre>
       *
       * <code>.bloombox.ledger.TransferOperation interchange = 11;</code>
       */
      public boolean hasInterchange() {
        return txnCase_ == 11;
      }
      /**
       * <pre>
       * Specifies a payload for an asset TRANSFER transaction.
       * </pre>
       *
       * <code>.bloombox.ledger.TransferOperation interchange = 11;</code>
       */
      public io.bloombox.schema.ledger.Transactions.TransferOperation getInterchange() {
        if (interchangeBuilder_ == null) {
          if (txnCase_ == 11) {
            return (io.bloombox.schema.ledger.Transactions.TransferOperation) txn_;
          }
          return io.bloombox.schema.ledger.Transactions.TransferOperation.getDefaultInstance();
        } else {
          if (txnCase_ == 11) {
            return interchangeBuilder_.getMessage();
          }
          return io.bloombox.schema.ledger.Transactions.TransferOperation.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Specifies a payload for an asset TRANSFER transaction.
       * </pre>
       *
       * <code>.bloombox.ledger.TransferOperation interchange = 11;</code>
       */
      public Builder setInterchange(io.bloombox.schema.ledger.Transactions.TransferOperation value) {
        if (interchangeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          txn_ = value;
          onChanged();
        } else {
          interchangeBuilder_.setMessage(value);
        }
        txnCase_ = 11;
        return this;
      }
      /**
       * <pre>
       * Specifies a payload for an asset TRANSFER transaction.
       * </pre>
       *
       * <code>.bloombox.ledger.TransferOperation interchange = 11;</code>
       */
      public Builder setInterchange(
          io.bloombox.schema.ledger.Transactions.TransferOperation.Builder builderForValue) {
        if (interchangeBuilder_ == null) {
          txn_ = builderForValue.build();
          onChanged();
        } else {
          interchangeBuilder_.setMessage(builderForValue.build());
        }
        txnCase_ = 11;
        return this;
      }
      /**
       * <pre>
       * Specifies a payload for an asset TRANSFER transaction.
       * </pre>
       *
       * <code>.bloombox.ledger.TransferOperation interchange = 11;</code>
       */
      public Builder mergeInterchange(io.bloombox.schema.ledger.Transactions.TransferOperation value) {
        if (interchangeBuilder_ == null) {
          if (txnCase_ == 11 &&
              txn_ != io.bloombox.schema.ledger.Transactions.TransferOperation.getDefaultInstance()) {
            txn_ = io.bloombox.schema.ledger.Transactions.TransferOperation.newBuilder((io.bloombox.schema.ledger.Transactions.TransferOperation) txn_)
                .mergeFrom(value).buildPartial();
          } else {
            txn_ = value;
          }
          onChanged();
        } else {
          if (txnCase_ == 11) {
            interchangeBuilder_.mergeFrom(value);
          }
          interchangeBuilder_.setMessage(value);
        }
        txnCase_ = 11;
        return this;
      }
      /**
       * <pre>
       * Specifies a payload for an asset TRANSFER transaction.
       * </pre>
       *
       * <code>.bloombox.ledger.TransferOperation interchange = 11;</code>
       */
      public Builder clearInterchange() {
        if (interchangeBuilder_ == null) {
          if (txnCase_ == 11) {
            txnCase_ = 0;
            txn_ = null;
            onChanged();
          }
        } else {
          if (txnCase_ == 11) {
            txnCase_ = 0;
            txn_ = null;
          }
          interchangeBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Specifies a payload for an asset TRANSFER transaction.
       * </pre>
       *
       * <code>.bloombox.ledger.TransferOperation interchange = 11;</code>
       */
      public io.bloombox.schema.ledger.Transactions.TransferOperation.Builder getInterchangeBuilder() {
        return getInterchangeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Specifies a payload for an asset TRANSFER transaction.
       * </pre>
       *
       * <code>.bloombox.ledger.TransferOperation interchange = 11;</code>
       */
      public io.bloombox.schema.ledger.Transactions.TransferOperationOrBuilder getInterchangeOrBuilder() {
        if ((txnCase_ == 11) && (interchangeBuilder_ != null)) {
          return interchangeBuilder_.getMessageOrBuilder();
        } else {
          if (txnCase_ == 11) {
            return (io.bloombox.schema.ledger.Transactions.TransferOperation) txn_;
          }
          return io.bloombox.schema.ledger.Transactions.TransferOperation.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Specifies a payload for an asset TRANSFER transaction.
       * </pre>
       *
       * <code>.bloombox.ledger.TransferOperation interchange = 11;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.bloombox.schema.ledger.Transactions.TransferOperation, io.bloombox.schema.ledger.Transactions.TransferOperation.Builder, io.bloombox.schema.ledger.Transactions.TransferOperationOrBuilder> 
          getInterchangeFieldBuilder() {
        if (interchangeBuilder_ == null) {
          if (!(txnCase_ == 11)) {
            txn_ = io.bloombox.schema.ledger.Transactions.TransferOperation.getDefaultInstance();
          }
          interchangeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.bloombox.schema.ledger.Transactions.TransferOperation, io.bloombox.schema.ledger.Transactions.TransferOperation.Builder, io.bloombox.schema.ledger.Transactions.TransferOperationOrBuilder>(
                  (io.bloombox.schema.ledger.Transactions.TransferOperation) txn_,
                  getParentForChildren(),
                  isClean());
          txn_ = null;
        }
        txnCase_ = 11;
        onChanged();;
        return interchangeBuilder_;
      }

      private io.opencannabis.schema.temporal.TemporalInstant.Instant created_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder> createdBuilder_;
      /**
       * <pre>
       * Timestamp for when this ledger transaction was created.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant created = 98;</code>
       */
      public boolean hasCreated() {
        return createdBuilder_ != null || created_ != null;
      }
      /**
       * <pre>
       * Timestamp for when this ledger transaction was created.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant created = 98;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.Instant getCreated() {
        if (createdBuilder_ == null) {
          return created_ == null ? io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : created_;
        } else {
          return createdBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Timestamp for when this ledger transaction was created.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant created = 98;</code>
       */
      public Builder setCreated(io.opencannabis.schema.temporal.TemporalInstant.Instant value) {
        if (createdBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          created_ = value;
          onChanged();
        } else {
          createdBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp for when this ledger transaction was created.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant created = 98;</code>
       */
      public Builder setCreated(
          io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder builderForValue) {
        if (createdBuilder_ == null) {
          created_ = builderForValue.build();
          onChanged();
        } else {
          createdBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp for when this ledger transaction was created.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant created = 98;</code>
       */
      public Builder mergeCreated(io.opencannabis.schema.temporal.TemporalInstant.Instant value) {
        if (createdBuilder_ == null) {
          if (created_ != null) {
            created_ =
              io.opencannabis.schema.temporal.TemporalInstant.Instant.newBuilder(created_).mergeFrom(value).buildPartial();
          } else {
            created_ = value;
          }
          onChanged();
        } else {
          createdBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp for when this ledger transaction was created.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant created = 98;</code>
       */
      public Builder clearCreated() {
        if (createdBuilder_ == null) {
          created_ = null;
          onChanged();
        } else {
          created_ = null;
          createdBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp for when this ledger transaction was created.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant created = 98;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder getCreatedBuilder() {
        
        onChanged();
        return getCreatedFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Timestamp for when this ledger transaction was created.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant created = 98;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getCreatedOrBuilder() {
        if (createdBuilder_ != null) {
          return createdBuilder_.getMessageOrBuilder();
        } else {
          return created_ == null ?
              io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : created_;
        }
      }
      /**
       * <pre>
       * Timestamp for when this ledger transaction was created.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant created = 98;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder> 
          getCreatedFieldBuilder() {
        if (createdBuilder_ == null) {
          createdBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder>(
                  getCreated(),
                  getParentForChildren(),
                  isClean());
          created_ = null;
        }
        return createdBuilder_;
      }

      private io.opencannabis.schema.temporal.TemporalInstant.Instant modified_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder> modifiedBuilder_;
      /**
       * <pre>
       * Timestamp for when this ledger transaction was last modified.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant modified = 99;</code>
       */
      public boolean hasModified() {
        return modifiedBuilder_ != null || modified_ != null;
      }
      /**
       * <pre>
       * Timestamp for when this ledger transaction was last modified.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant modified = 99;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.Instant getModified() {
        if (modifiedBuilder_ == null) {
          return modified_ == null ? io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : modified_;
        } else {
          return modifiedBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Timestamp for when this ledger transaction was last modified.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant modified = 99;</code>
       */
      public Builder setModified(io.opencannabis.schema.temporal.TemporalInstant.Instant value) {
        if (modifiedBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          modified_ = value;
          onChanged();
        } else {
          modifiedBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp for when this ledger transaction was last modified.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant modified = 99;</code>
       */
      public Builder setModified(
          io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder builderForValue) {
        if (modifiedBuilder_ == null) {
          modified_ = builderForValue.build();
          onChanged();
        } else {
          modifiedBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp for when this ledger transaction was last modified.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant modified = 99;</code>
       */
      public Builder mergeModified(io.opencannabis.schema.temporal.TemporalInstant.Instant value) {
        if (modifiedBuilder_ == null) {
          if (modified_ != null) {
            modified_ =
              io.opencannabis.schema.temporal.TemporalInstant.Instant.newBuilder(modified_).mergeFrom(value).buildPartial();
          } else {
            modified_ = value;
          }
          onChanged();
        } else {
          modifiedBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp for when this ledger transaction was last modified.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant modified = 99;</code>
       */
      public Builder clearModified() {
        if (modifiedBuilder_ == null) {
          modified_ = null;
          onChanged();
        } else {
          modified_ = null;
          modifiedBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Timestamp for when this ledger transaction was last modified.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant modified = 99;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder getModifiedBuilder() {
        
        onChanged();
        return getModifiedFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Timestamp for when this ledger transaction was last modified.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant modified = 99;</code>
       */
      public io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder getModifiedOrBuilder() {
        if (modifiedBuilder_ != null) {
          return modifiedBuilder_.getMessageOrBuilder();
        } else {
          return modified_ == null ?
              io.opencannabis.schema.temporal.TemporalInstant.Instant.getDefaultInstance() : modified_;
        }
      }
      /**
       * <pre>
       * Timestamp for when this ledger transaction was last modified.
       * </pre>
       *
       * <code>.opencannabis.temporal.Instant modified = 99;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder> 
          getModifiedFieldBuilder() {
        if (modifiedBuilder_ == null) {
          modifiedBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              io.opencannabis.schema.temporal.TemporalInstant.Instant, io.opencannabis.schema.temporal.TemporalInstant.Instant.Builder, io.opencannabis.schema.temporal.TemporalInstant.InstantOrBuilder>(
                  getModified(),
                  getParentForChildren(),
                  isClean());
          modified_ = null;
        }
        return modifiedBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:bloombox.ledger.Transaction)
    }

    // @@protoc_insertion_point(class_scope:bloombox.ledger.Transaction)
    private static final io.bloombox.schema.ledger.Transactions.Transaction DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.bloombox.schema.ledger.Transactions.Transaction();
    }

    public static io.bloombox.schema.ledger.Transactions.Transaction getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Transaction>
        PARSER = new com.google.protobuf.AbstractParser<Transaction>() {
      @java.lang.Override
      public Transaction parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Transaction(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Transaction> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Transaction> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.bloombox.schema.ledger.Transactions.Transaction getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_bloombox_ledger_CreateOperation_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_bloombox_ledger_CreateOperation_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_bloombox_ledger_TransferOperation_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_bloombox_ledger_TransferOperation_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_bloombox_ledger_TransactionKey_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_bloombox_ledger_TransactionKey_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_bloombox_ledger_Transaction_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_bloombox_ledger_Transaction_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\030ledger/Transaction.proto\022\017bloombox.led" +
      "ger\032\022ledger/Asset.proto\032\024ledger/Account." +
      "proto\032\026temporal/Instant.proto\"o\n\017CreateO" +
      "peration\022,\n\005asset\030\001 \001(\0132\035.bloombox.ledge" +
      "r.DigitalAsset\022.\n\005owner\030\002 \001(\0132\037.bloombox" +
      ".ledger.LedgerIdentity\"\237\001\n\021TransferOpera" +
      "tion\022(\n\005asset\030\001 \001(\0132\031.bloombox.ledger.As" +
      "setKey\022/\n\006source\030\002 \001(\0132\037.bloombox.ledger" +
      ".LedgerIdentity\022/\n\006target\030\003 \001(\0132\037.bloomb" +
      "ox.ledger.LedgerIdentity\")\n\016TransactionK" +
      "ey\022\013\n\003xid\030\001 \001(\t\022\n\n\002id\030\002 \001(\t\"\370\002\n\013Transact" +
      "ion\022,\n\003key\030\001 \001(\0132\037.bloombox.ledger.Trans" +
      "actionKey\0229\n\toperation\030\002 \001(\0162&.bloombox." +
      "ledger.Transaction.Operation\0224\n\010issuance" +
      "\030\n \001(\0132 .bloombox.ledger.CreateOperation" +
      "H\000\0229\n\013interchange\030\013 \001(\0132\".bloombox.ledge" +
      "r.TransferOperationH\000\022/\n\007created\030b \001(\0132\036" +
      ".opencannabis.temporal.Instant\0220\n\010modifi" +
      "ed\030c \001(\0132\036.opencannabis.temporal.Instant" +
      "\"%\n\tOperation\022\n\n\006CREATE\020\000\022\014\n\010TRANSFER\020\001B" +
      "\005\n\003txnB3\n\031io.bloombox.schema.ledgerB\014Tra" +
      "nsactionsH\001P\000\242\002\003BBSb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          io.bloombox.schema.ledger.Assets.getDescriptor(),
          io.bloombox.schema.ledger.Accounts.getDescriptor(),
          io.opencannabis.schema.temporal.TemporalInstant.getDescriptor(),
        }, assigner);
    internal_static_bloombox_ledger_CreateOperation_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_bloombox_ledger_CreateOperation_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_bloombox_ledger_CreateOperation_descriptor,
        new java.lang.String[] { "Asset", "Owner", });
    internal_static_bloombox_ledger_TransferOperation_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_bloombox_ledger_TransferOperation_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_bloombox_ledger_TransferOperation_descriptor,
        new java.lang.String[] { "Asset", "Source", "Target", });
    internal_static_bloombox_ledger_TransactionKey_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_bloombox_ledger_TransactionKey_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_bloombox_ledger_TransactionKey_descriptor,
        new java.lang.String[] { "Xid", "Id", });
    internal_static_bloombox_ledger_Transaction_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_bloombox_ledger_Transaction_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_bloombox_ledger_Transaction_descriptor,
        new java.lang.String[] { "Key", "Operation", "Issuance", "Interchange", "Created", "Modified", "Txn", });
    io.bloombox.schema.ledger.Assets.getDescriptor();
    io.bloombox.schema.ledger.Accounts.getDescriptor();
    io.opencannabis.schema.temporal.TemporalInstant.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
