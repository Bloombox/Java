/*
 * Copyright 2019, Momentum Ideas, Co. All rights reserved.
 *
 * Source and object computer code contained herein is the private intellectual
 * property of Momentum Ideas Co., a Delaware Corporation. Use of this
 * code in source form requires permission in writing before use or the
 * assembly, distribution, or publishing of derivative works, for commercial
 * purposes or any other purpose, from a duly authorized officer of Momentum
 * Ideas Co.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: analytics/stream/Filter.proto

package io.bloombox.schema.analytics.stream;

public final class Filter {
  private Filter() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface BloomFilterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:bloombox.stream.BloomFilter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Hash iteration count, or *k* value, for the Bloom filter.
     * </pre>
     *
     * <code>uint32 hash_count = 1;</code>
     */
    int getHashCount();

    /**
     * <pre>
     * Raw bits of the Bloom filter.
     * </pre>
     *
     * <code>repeated fixed64 bits = 2;</code>
     */
    java.util.List<java.lang.Long> getBitsList();
    /**
     * <pre>
     * Raw bits of the Bloom filter.
     * </pre>
     *
     * <code>repeated fixed64 bits = 2;</code>
     */
    int getBitsCount();
    /**
     * <pre>
     * Raw bits of the Bloom filter.
     * </pre>
     *
     * <code>repeated fixed64 bits = 2;</code>
     */
    long getBits(int index);
  }
  /**
   * <pre>
   * Defines a basic Bloom-style binary filter structure. Also specifies the hash iteration count, or *k* value, used to
   * derive and query this filter.
   * </pre>
   *
   * Protobuf type {@code bloombox.stream.BloomFilter}
   */
  public  static final class BloomFilter extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:bloombox.stream.BloomFilter)
      BloomFilterOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use BloomFilter.newBuilder() to construct.
    private BloomFilter(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private BloomFilter() {
      bits_ = emptyLongList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private BloomFilter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              hashCount_ = input.readUInt32();
              break;
            }
            case 17: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                bits_ = newLongList();
                mutable_bitField0_ |= 0x00000002;
              }
              bits_.addLong(input.readFixed64());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) != 0) && input.getBytesUntilLimit() > 0) {
                bits_ = newLongList();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                bits_.addLong(input.readFixed64());
              }
              input.popLimit(limit);
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          bits_.makeImmutable(); // C
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.bloombox.schema.analytics.stream.Filter.internal_static_bloombox_stream_BloomFilter_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.bloombox.schema.analytics.stream.Filter.internal_static_bloombox_stream_BloomFilter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.bloombox.schema.analytics.stream.Filter.BloomFilter.class, io.bloombox.schema.analytics.stream.Filter.BloomFilter.Builder.class);
    }

    private int bitField0_;
    public static final int HASH_COUNT_FIELD_NUMBER = 1;
    private int hashCount_;
    /**
     * <pre>
     * Hash iteration count, or *k* value, for the Bloom filter.
     * </pre>
     *
     * <code>uint32 hash_count = 1;</code>
     */
    public int getHashCount() {
      return hashCount_;
    }

    public static final int BITS_FIELD_NUMBER = 2;
    private com.google.protobuf.Internal.LongList bits_;
    /**
     * <pre>
     * Raw bits of the Bloom filter.
     * </pre>
     *
     * <code>repeated fixed64 bits = 2;</code>
     */
    public java.util.List<java.lang.Long>
        getBitsList() {
      return bits_;
    }
    /**
     * <pre>
     * Raw bits of the Bloom filter.
     * </pre>
     *
     * <code>repeated fixed64 bits = 2;</code>
     */
    public int getBitsCount() {
      return bits_.size();
    }
    /**
     * <pre>
     * Raw bits of the Bloom filter.
     * </pre>
     *
     * <code>repeated fixed64 bits = 2;</code>
     */
    public long getBits(int index) {
      return bits_.getLong(index);
    }
    private int bitsMemoizedSerializedSize = -1;

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hashCount_ != 0) {
        output.writeUInt32(1, hashCount_);
      }
      if (getBitsList().size() > 0) {
        output.writeUInt32NoTag(18);
        output.writeUInt32NoTag(bitsMemoizedSerializedSize);
      }
      for (int i = 0; i < bits_.size(); i++) {
        output.writeFixed64NoTag(bits_.getLong(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (hashCount_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, hashCount_);
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBitsList().size();
        size += dataSize;
        if (!getBitsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        bitsMemoizedSerializedSize = dataSize;
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.bloombox.schema.analytics.stream.Filter.BloomFilter)) {
        return super.equals(obj);
      }
      io.bloombox.schema.analytics.stream.Filter.BloomFilter other = (io.bloombox.schema.analytics.stream.Filter.BloomFilter) obj;

      if (getHashCount()
          != other.getHashCount()) return false;
      if (!getBitsList()
          .equals(other.getBitsList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + HASH_COUNT_FIELD_NUMBER;
      hash = (53 * hash) + getHashCount();
      if (getBitsCount() > 0) {
        hash = (37 * hash) + BITS_FIELD_NUMBER;
        hash = (53 * hash) + getBitsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.bloombox.schema.analytics.stream.Filter.BloomFilter parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.analytics.stream.Filter.BloomFilter parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.analytics.stream.Filter.BloomFilter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.analytics.stream.Filter.BloomFilter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.analytics.stream.Filter.BloomFilter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.analytics.stream.Filter.BloomFilter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.analytics.stream.Filter.BloomFilter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.analytics.stream.Filter.BloomFilter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.analytics.stream.Filter.BloomFilter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.analytics.stream.Filter.BloomFilter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.analytics.stream.Filter.BloomFilter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.analytics.stream.Filter.BloomFilter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.bloombox.schema.analytics.stream.Filter.BloomFilter prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Defines a basic Bloom-style binary filter structure. Also specifies the hash iteration count, or *k* value, used to
     * derive and query this filter.
     * </pre>
     *
     * Protobuf type {@code bloombox.stream.BloomFilter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:bloombox.stream.BloomFilter)
        io.bloombox.schema.analytics.stream.Filter.BloomFilterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.bloombox.schema.analytics.stream.Filter.internal_static_bloombox_stream_BloomFilter_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.bloombox.schema.analytics.stream.Filter.internal_static_bloombox_stream_BloomFilter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.bloombox.schema.analytics.stream.Filter.BloomFilter.class, io.bloombox.schema.analytics.stream.Filter.BloomFilter.Builder.class);
      }

      // Construct using io.bloombox.schema.analytics.stream.Filter.BloomFilter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        hashCount_ = 0;

        bits_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.bloombox.schema.analytics.stream.Filter.internal_static_bloombox_stream_BloomFilter_descriptor;
      }

      @java.lang.Override
      public io.bloombox.schema.analytics.stream.Filter.BloomFilter getDefaultInstanceForType() {
        return io.bloombox.schema.analytics.stream.Filter.BloomFilter.getDefaultInstance();
      }

      @java.lang.Override
      public io.bloombox.schema.analytics.stream.Filter.BloomFilter build() {
        io.bloombox.schema.analytics.stream.Filter.BloomFilter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.bloombox.schema.analytics.stream.Filter.BloomFilter buildPartial() {
        io.bloombox.schema.analytics.stream.Filter.BloomFilter result = new io.bloombox.schema.analytics.stream.Filter.BloomFilter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.hashCount_ = hashCount_;
        if (((bitField0_ & 0x00000002) != 0)) {
          bits_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.bits_ = bits_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.bloombox.schema.analytics.stream.Filter.BloomFilter) {
          return mergeFrom((io.bloombox.schema.analytics.stream.Filter.BloomFilter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.bloombox.schema.analytics.stream.Filter.BloomFilter other) {
        if (other == io.bloombox.schema.analytics.stream.Filter.BloomFilter.getDefaultInstance()) return this;
        if (other.getHashCount() != 0) {
          setHashCount(other.getHashCount());
        }
        if (!other.bits_.isEmpty()) {
          if (bits_.isEmpty()) {
            bits_ = other.bits_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureBitsIsMutable();
            bits_.addAll(other.bits_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.bloombox.schema.analytics.stream.Filter.BloomFilter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.bloombox.schema.analytics.stream.Filter.BloomFilter) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int hashCount_ ;
      /**
       * <pre>
       * Hash iteration count, or *k* value, for the Bloom filter.
       * </pre>
       *
       * <code>uint32 hash_count = 1;</code>
       */
      public int getHashCount() {
        return hashCount_;
      }
      /**
       * <pre>
       * Hash iteration count, or *k* value, for the Bloom filter.
       * </pre>
       *
       * <code>uint32 hash_count = 1;</code>
       */
      public Builder setHashCount(int value) {
        
        hashCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Hash iteration count, or *k* value, for the Bloom filter.
       * </pre>
       *
       * <code>uint32 hash_count = 1;</code>
       */
      public Builder clearHashCount() {
        
        hashCount_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.LongList bits_ = emptyLongList();
      private void ensureBitsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          bits_ = mutableCopy(bits_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <pre>
       * Raw bits of the Bloom filter.
       * </pre>
       *
       * <code>repeated fixed64 bits = 2;</code>
       */
      public java.util.List<java.lang.Long>
          getBitsList() {
        return ((bitField0_ & 0x00000002) != 0) ?
                 java.util.Collections.unmodifiableList(bits_) : bits_;
      }
      /**
       * <pre>
       * Raw bits of the Bloom filter.
       * </pre>
       *
       * <code>repeated fixed64 bits = 2;</code>
       */
      public int getBitsCount() {
        return bits_.size();
      }
      /**
       * <pre>
       * Raw bits of the Bloom filter.
       * </pre>
       *
       * <code>repeated fixed64 bits = 2;</code>
       */
      public long getBits(int index) {
        return bits_.getLong(index);
      }
      /**
       * <pre>
       * Raw bits of the Bloom filter.
       * </pre>
       *
       * <code>repeated fixed64 bits = 2;</code>
       */
      public Builder setBits(
          int index, long value) {
        ensureBitsIsMutable();
        bits_.setLong(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Raw bits of the Bloom filter.
       * </pre>
       *
       * <code>repeated fixed64 bits = 2;</code>
       */
      public Builder addBits(long value) {
        ensureBitsIsMutable();
        bits_.addLong(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Raw bits of the Bloom filter.
       * </pre>
       *
       * <code>repeated fixed64 bits = 2;</code>
       */
      public Builder addAllBits(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureBitsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, bits_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Raw bits of the Bloom filter.
       * </pre>
       *
       * <code>repeated fixed64 bits = 2;</code>
       */
      public Builder clearBits() {
        bits_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:bloombox.stream.BloomFilter)
    }

    // @@protoc_insertion_point(class_scope:bloombox.stream.BloomFilter)
    private static final io.bloombox.schema.analytics.stream.Filter.BloomFilter DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.bloombox.schema.analytics.stream.Filter.BloomFilter();
    }

    public static io.bloombox.schema.analytics.stream.Filter.BloomFilter getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BloomFilter>
        PARSER = new com.google.protobuf.AbstractParser<BloomFilter>() {
      @java.lang.Override
      public BloomFilter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BloomFilter(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<BloomFilter> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BloomFilter> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.bloombox.schema.analytics.stream.Filter.BloomFilter getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface LayeredBloomFilterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:bloombox.stream.LayeredBloomFilter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Specifies a static Bloom filter.
     * </pre>
     *
     * <code>repeated .bloombox.stream.BloomFilter filter = 1;</code>
     */
    java.util.List<io.bloombox.schema.analytics.stream.Filter.BloomFilter> 
        getFilterList();
    /**
     * <pre>
     * Specifies a static Bloom filter.
     * </pre>
     *
     * <code>repeated .bloombox.stream.BloomFilter filter = 1;</code>
     */
    io.bloombox.schema.analytics.stream.Filter.BloomFilter getFilter(int index);
    /**
     * <pre>
     * Specifies a static Bloom filter.
     * </pre>
     *
     * <code>repeated .bloombox.stream.BloomFilter filter = 1;</code>
     */
    int getFilterCount();
    /**
     * <pre>
     * Specifies a static Bloom filter.
     * </pre>
     *
     * <code>repeated .bloombox.stream.BloomFilter filter = 1;</code>
     */
    java.util.List<? extends io.bloombox.schema.analytics.stream.Filter.BloomFilterOrBuilder> 
        getFilterOrBuilderList();
    /**
     * <pre>
     * Specifies a static Bloom filter.
     * </pre>
     *
     * <code>repeated .bloombox.stream.BloomFilter filter = 1;</code>
     */
    io.bloombox.schema.analytics.stream.Filter.BloomFilterOrBuilder getFilterOrBuilder(
        int index);

    /**
     * <pre>
     * Limit for additional layers. If unspecified, default is 0 (the first layer does not count).
     * </pre>
     *
     * <code>uint32 limit = 2;</code>
     */
    int getLimit();
  }
  /**
   * <pre>
   * Defines a multi-layer Bloom filter, wherein each layer is defined by some application semantics to signify additional
   * value. An arbitrary number of layers may be kept.
   * </pre>
   *
   * Protobuf type {@code bloombox.stream.LayeredBloomFilter}
   */
  public  static final class LayeredBloomFilter extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:bloombox.stream.LayeredBloomFilter)
      LayeredBloomFilterOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use LayeredBloomFilter.newBuilder() to construct.
    private LayeredBloomFilter(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private LayeredBloomFilter() {
      filter_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private LayeredBloomFilter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                filter_ = new java.util.ArrayList<io.bloombox.schema.analytics.stream.Filter.BloomFilter>();
                mutable_bitField0_ |= 0x00000001;
              }
              filter_.add(
                  input.readMessage(io.bloombox.schema.analytics.stream.Filter.BloomFilter.parser(), extensionRegistry));
              break;
            }
            case 16: {

              limit_ = input.readUInt32();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          filter_ = java.util.Collections.unmodifiableList(filter_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.bloombox.schema.analytics.stream.Filter.internal_static_bloombox_stream_LayeredBloomFilter_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.bloombox.schema.analytics.stream.Filter.internal_static_bloombox_stream_LayeredBloomFilter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.bloombox.schema.analytics.stream.Filter.LayeredBloomFilter.class, io.bloombox.schema.analytics.stream.Filter.LayeredBloomFilter.Builder.class);
    }

    private int bitField0_;
    public static final int FILTER_FIELD_NUMBER = 1;
    private java.util.List<io.bloombox.schema.analytics.stream.Filter.BloomFilter> filter_;
    /**
     * <pre>
     * Specifies a static Bloom filter.
     * </pre>
     *
     * <code>repeated .bloombox.stream.BloomFilter filter = 1;</code>
     */
    public java.util.List<io.bloombox.schema.analytics.stream.Filter.BloomFilter> getFilterList() {
      return filter_;
    }
    /**
     * <pre>
     * Specifies a static Bloom filter.
     * </pre>
     *
     * <code>repeated .bloombox.stream.BloomFilter filter = 1;</code>
     */
    public java.util.List<? extends io.bloombox.schema.analytics.stream.Filter.BloomFilterOrBuilder> 
        getFilterOrBuilderList() {
      return filter_;
    }
    /**
     * <pre>
     * Specifies a static Bloom filter.
     * </pre>
     *
     * <code>repeated .bloombox.stream.BloomFilter filter = 1;</code>
     */
    public int getFilterCount() {
      return filter_.size();
    }
    /**
     * <pre>
     * Specifies a static Bloom filter.
     * </pre>
     *
     * <code>repeated .bloombox.stream.BloomFilter filter = 1;</code>
     */
    public io.bloombox.schema.analytics.stream.Filter.BloomFilter getFilter(int index) {
      return filter_.get(index);
    }
    /**
     * <pre>
     * Specifies a static Bloom filter.
     * </pre>
     *
     * <code>repeated .bloombox.stream.BloomFilter filter = 1;</code>
     */
    public io.bloombox.schema.analytics.stream.Filter.BloomFilterOrBuilder getFilterOrBuilder(
        int index) {
      return filter_.get(index);
    }

    public static final int LIMIT_FIELD_NUMBER = 2;
    private int limit_;
    /**
     * <pre>
     * Limit for additional layers. If unspecified, default is 0 (the first layer does not count).
     * </pre>
     *
     * <code>uint32 limit = 2;</code>
     */
    public int getLimit() {
      return limit_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < filter_.size(); i++) {
        output.writeMessage(1, filter_.get(i));
      }
      if (limit_ != 0) {
        output.writeUInt32(2, limit_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < filter_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, filter_.get(i));
      }
      if (limit_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, limit_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.bloombox.schema.analytics.stream.Filter.LayeredBloomFilter)) {
        return super.equals(obj);
      }
      io.bloombox.schema.analytics.stream.Filter.LayeredBloomFilter other = (io.bloombox.schema.analytics.stream.Filter.LayeredBloomFilter) obj;

      if (!getFilterList()
          .equals(other.getFilterList())) return false;
      if (getLimit()
          != other.getLimit()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getFilterCount() > 0) {
        hash = (37 * hash) + FILTER_FIELD_NUMBER;
        hash = (53 * hash) + getFilterList().hashCode();
      }
      hash = (37 * hash) + LIMIT_FIELD_NUMBER;
      hash = (53 * hash) + getLimit();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.bloombox.schema.analytics.stream.Filter.LayeredBloomFilter parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.analytics.stream.Filter.LayeredBloomFilter parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.analytics.stream.Filter.LayeredBloomFilter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.analytics.stream.Filter.LayeredBloomFilter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.analytics.stream.Filter.LayeredBloomFilter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.analytics.stream.Filter.LayeredBloomFilter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.analytics.stream.Filter.LayeredBloomFilter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.analytics.stream.Filter.LayeredBloomFilter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.analytics.stream.Filter.LayeredBloomFilter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.analytics.stream.Filter.LayeredBloomFilter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.analytics.stream.Filter.LayeredBloomFilter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.analytics.stream.Filter.LayeredBloomFilter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.bloombox.schema.analytics.stream.Filter.LayeredBloomFilter prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Defines a multi-layer Bloom filter, wherein each layer is defined by some application semantics to signify additional
     * value. An arbitrary number of layers may be kept.
     * </pre>
     *
     * Protobuf type {@code bloombox.stream.LayeredBloomFilter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:bloombox.stream.LayeredBloomFilter)
        io.bloombox.schema.analytics.stream.Filter.LayeredBloomFilterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.bloombox.schema.analytics.stream.Filter.internal_static_bloombox_stream_LayeredBloomFilter_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.bloombox.schema.analytics.stream.Filter.internal_static_bloombox_stream_LayeredBloomFilter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.bloombox.schema.analytics.stream.Filter.LayeredBloomFilter.class, io.bloombox.schema.analytics.stream.Filter.LayeredBloomFilter.Builder.class);
      }

      // Construct using io.bloombox.schema.analytics.stream.Filter.LayeredBloomFilter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getFilterFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (filterBuilder_ == null) {
          filter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          filterBuilder_.clear();
        }
        limit_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.bloombox.schema.analytics.stream.Filter.internal_static_bloombox_stream_LayeredBloomFilter_descriptor;
      }

      @java.lang.Override
      public io.bloombox.schema.analytics.stream.Filter.LayeredBloomFilter getDefaultInstanceForType() {
        return io.bloombox.schema.analytics.stream.Filter.LayeredBloomFilter.getDefaultInstance();
      }

      @java.lang.Override
      public io.bloombox.schema.analytics.stream.Filter.LayeredBloomFilter build() {
        io.bloombox.schema.analytics.stream.Filter.LayeredBloomFilter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.bloombox.schema.analytics.stream.Filter.LayeredBloomFilter buildPartial() {
        io.bloombox.schema.analytics.stream.Filter.LayeredBloomFilter result = new io.bloombox.schema.analytics.stream.Filter.LayeredBloomFilter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (filterBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            filter_ = java.util.Collections.unmodifiableList(filter_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.filter_ = filter_;
        } else {
          result.filter_ = filterBuilder_.build();
        }
        result.limit_ = limit_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.bloombox.schema.analytics.stream.Filter.LayeredBloomFilter) {
          return mergeFrom((io.bloombox.schema.analytics.stream.Filter.LayeredBloomFilter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.bloombox.schema.analytics.stream.Filter.LayeredBloomFilter other) {
        if (other == io.bloombox.schema.analytics.stream.Filter.LayeredBloomFilter.getDefaultInstance()) return this;
        if (filterBuilder_ == null) {
          if (!other.filter_.isEmpty()) {
            if (filter_.isEmpty()) {
              filter_ = other.filter_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureFilterIsMutable();
              filter_.addAll(other.filter_);
            }
            onChanged();
          }
        } else {
          if (!other.filter_.isEmpty()) {
            if (filterBuilder_.isEmpty()) {
              filterBuilder_.dispose();
              filterBuilder_ = null;
              filter_ = other.filter_;
              bitField0_ = (bitField0_ & ~0x00000001);
              filterBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getFilterFieldBuilder() : null;
            } else {
              filterBuilder_.addAllMessages(other.filter_);
            }
          }
        }
        if (other.getLimit() != 0) {
          setLimit(other.getLimit());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.bloombox.schema.analytics.stream.Filter.LayeredBloomFilter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.bloombox.schema.analytics.stream.Filter.LayeredBloomFilter) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<io.bloombox.schema.analytics.stream.Filter.BloomFilter> filter_ =
        java.util.Collections.emptyList();
      private void ensureFilterIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          filter_ = new java.util.ArrayList<io.bloombox.schema.analytics.stream.Filter.BloomFilter>(filter_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.bloombox.schema.analytics.stream.Filter.BloomFilter, io.bloombox.schema.analytics.stream.Filter.BloomFilter.Builder, io.bloombox.schema.analytics.stream.Filter.BloomFilterOrBuilder> filterBuilder_;

      /**
       * <pre>
       * Specifies a static Bloom filter.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter filter = 1;</code>
       */
      public java.util.List<io.bloombox.schema.analytics.stream.Filter.BloomFilter> getFilterList() {
        if (filterBuilder_ == null) {
          return java.util.Collections.unmodifiableList(filter_);
        } else {
          return filterBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Specifies a static Bloom filter.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter filter = 1;</code>
       */
      public int getFilterCount() {
        if (filterBuilder_ == null) {
          return filter_.size();
        } else {
          return filterBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Specifies a static Bloom filter.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter filter = 1;</code>
       */
      public io.bloombox.schema.analytics.stream.Filter.BloomFilter getFilter(int index) {
        if (filterBuilder_ == null) {
          return filter_.get(index);
        } else {
          return filterBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Specifies a static Bloom filter.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter filter = 1;</code>
       */
      public Builder setFilter(
          int index, io.bloombox.schema.analytics.stream.Filter.BloomFilter value) {
        if (filterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFilterIsMutable();
          filter_.set(index, value);
          onChanged();
        } else {
          filterBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies a static Bloom filter.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter filter = 1;</code>
       */
      public Builder setFilter(
          int index, io.bloombox.schema.analytics.stream.Filter.BloomFilter.Builder builderForValue) {
        if (filterBuilder_ == null) {
          ensureFilterIsMutable();
          filter_.set(index, builderForValue.build());
          onChanged();
        } else {
          filterBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies a static Bloom filter.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter filter = 1;</code>
       */
      public Builder addFilter(io.bloombox.schema.analytics.stream.Filter.BloomFilter value) {
        if (filterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFilterIsMutable();
          filter_.add(value);
          onChanged();
        } else {
          filterBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies a static Bloom filter.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter filter = 1;</code>
       */
      public Builder addFilter(
          int index, io.bloombox.schema.analytics.stream.Filter.BloomFilter value) {
        if (filterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFilterIsMutable();
          filter_.add(index, value);
          onChanged();
        } else {
          filterBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies a static Bloom filter.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter filter = 1;</code>
       */
      public Builder addFilter(
          io.bloombox.schema.analytics.stream.Filter.BloomFilter.Builder builderForValue) {
        if (filterBuilder_ == null) {
          ensureFilterIsMutable();
          filter_.add(builderForValue.build());
          onChanged();
        } else {
          filterBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies a static Bloom filter.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter filter = 1;</code>
       */
      public Builder addFilter(
          int index, io.bloombox.schema.analytics.stream.Filter.BloomFilter.Builder builderForValue) {
        if (filterBuilder_ == null) {
          ensureFilterIsMutable();
          filter_.add(index, builderForValue.build());
          onChanged();
        } else {
          filterBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies a static Bloom filter.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter filter = 1;</code>
       */
      public Builder addAllFilter(
          java.lang.Iterable<? extends io.bloombox.schema.analytics.stream.Filter.BloomFilter> values) {
        if (filterBuilder_ == null) {
          ensureFilterIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, filter_);
          onChanged();
        } else {
          filterBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies a static Bloom filter.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter filter = 1;</code>
       */
      public Builder clearFilter() {
        if (filterBuilder_ == null) {
          filter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          filterBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Specifies a static Bloom filter.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter filter = 1;</code>
       */
      public Builder removeFilter(int index) {
        if (filterBuilder_ == null) {
          ensureFilterIsMutable();
          filter_.remove(index);
          onChanged();
        } else {
          filterBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies a static Bloom filter.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter filter = 1;</code>
       */
      public io.bloombox.schema.analytics.stream.Filter.BloomFilter.Builder getFilterBuilder(
          int index) {
        return getFilterFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Specifies a static Bloom filter.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter filter = 1;</code>
       */
      public io.bloombox.schema.analytics.stream.Filter.BloomFilterOrBuilder getFilterOrBuilder(
          int index) {
        if (filterBuilder_ == null) {
          return filter_.get(index);  } else {
          return filterBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Specifies a static Bloom filter.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter filter = 1;</code>
       */
      public java.util.List<? extends io.bloombox.schema.analytics.stream.Filter.BloomFilterOrBuilder> 
           getFilterOrBuilderList() {
        if (filterBuilder_ != null) {
          return filterBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(filter_);
        }
      }
      /**
       * <pre>
       * Specifies a static Bloom filter.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter filter = 1;</code>
       */
      public io.bloombox.schema.analytics.stream.Filter.BloomFilter.Builder addFilterBuilder() {
        return getFilterFieldBuilder().addBuilder(
            io.bloombox.schema.analytics.stream.Filter.BloomFilter.getDefaultInstance());
      }
      /**
       * <pre>
       * Specifies a static Bloom filter.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter filter = 1;</code>
       */
      public io.bloombox.schema.analytics.stream.Filter.BloomFilter.Builder addFilterBuilder(
          int index) {
        return getFilterFieldBuilder().addBuilder(
            index, io.bloombox.schema.analytics.stream.Filter.BloomFilter.getDefaultInstance());
      }
      /**
       * <pre>
       * Specifies a static Bloom filter.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter filter = 1;</code>
       */
      public java.util.List<io.bloombox.schema.analytics.stream.Filter.BloomFilter.Builder> 
           getFilterBuilderList() {
        return getFilterFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.bloombox.schema.analytics.stream.Filter.BloomFilter, io.bloombox.schema.analytics.stream.Filter.BloomFilter.Builder, io.bloombox.schema.analytics.stream.Filter.BloomFilterOrBuilder> 
          getFilterFieldBuilder() {
        if (filterBuilder_ == null) {
          filterBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.bloombox.schema.analytics.stream.Filter.BloomFilter, io.bloombox.schema.analytics.stream.Filter.BloomFilter.Builder, io.bloombox.schema.analytics.stream.Filter.BloomFilterOrBuilder>(
                  filter_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          filter_ = null;
        }
        return filterBuilder_;
      }

      private int limit_ ;
      /**
       * <pre>
       * Limit for additional layers. If unspecified, default is 0 (the first layer does not count).
       * </pre>
       *
       * <code>uint32 limit = 2;</code>
       */
      public int getLimit() {
        return limit_;
      }
      /**
       * <pre>
       * Limit for additional layers. If unspecified, default is 0 (the first layer does not count).
       * </pre>
       *
       * <code>uint32 limit = 2;</code>
       */
      public Builder setLimit(int value) {
        
        limit_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Limit for additional layers. If unspecified, default is 0 (the first layer does not count).
       * </pre>
       *
       * <code>uint32 limit = 2;</code>
       */
      public Builder clearLimit() {
        
        limit_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:bloombox.stream.LayeredBloomFilter)
    }

    // @@protoc_insertion_point(class_scope:bloombox.stream.LayeredBloomFilter)
    private static final io.bloombox.schema.analytics.stream.Filter.LayeredBloomFilter DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.bloombox.schema.analytics.stream.Filter.LayeredBloomFilter();
    }

    public static io.bloombox.schema.analytics.stream.Filter.LayeredBloomFilter getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<LayeredBloomFilter>
        PARSER = new com.google.protobuf.AbstractParser<LayeredBloomFilter>() {
      @java.lang.Override
      public LayeredBloomFilter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LayeredBloomFilter(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<LayeredBloomFilter> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<LayeredBloomFilter> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.bloombox.schema.analytics.stream.Filter.LayeredBloomFilter getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CountingBloomFilterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:bloombox.stream.CountingBloomFilter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Hash iteration count, or *k* value, for the Bloom filter.
     * </pre>
     *
     * <code>uint32 hash_count = 1;</code>
     */
    int getHashCount();

    /**
     * <pre>
     * Raw buckets for the counter.
     * </pre>
     *
     * <code>repeated fixed64 bucket = 2;</code>
     */
    java.util.List<java.lang.Long> getBucketList();
    /**
     * <pre>
     * Raw buckets for the counter.
     * </pre>
     *
     * <code>repeated fixed64 bucket = 2;</code>
     */
    int getBucketCount();
    /**
     * <pre>
     * Raw buckets for the counter.
     * </pre>
     *
     * <code>repeated fixed64 bucket = 2;</code>
     */
    long getBucket(int index);
  }
  /**
   * <pre>
   * Defines an extended Bloom-style binary filter, where each position of the filter is expanded to include integer state
   * for a counter. Counters cannot be negative and so are stored unsigned.
   * </pre>
   *
   * Protobuf type {@code bloombox.stream.CountingBloomFilter}
   */
  public  static final class CountingBloomFilter extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:bloombox.stream.CountingBloomFilter)
      CountingBloomFilterOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CountingBloomFilter.newBuilder() to construct.
    private CountingBloomFilter(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CountingBloomFilter() {
      bucket_ = emptyLongList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CountingBloomFilter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              hashCount_ = input.readUInt32();
              break;
            }
            case 17: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                bucket_ = newLongList();
                mutable_bitField0_ |= 0x00000002;
              }
              bucket_.addLong(input.readFixed64());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) != 0) && input.getBytesUntilLimit() > 0) {
                bucket_ = newLongList();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                bucket_.addLong(input.readFixed64());
              }
              input.popLimit(limit);
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          bucket_.makeImmutable(); // C
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.bloombox.schema.analytics.stream.Filter.internal_static_bloombox_stream_CountingBloomFilter_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.bloombox.schema.analytics.stream.Filter.internal_static_bloombox_stream_CountingBloomFilter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.bloombox.schema.analytics.stream.Filter.CountingBloomFilter.class, io.bloombox.schema.analytics.stream.Filter.CountingBloomFilter.Builder.class);
    }

    private int bitField0_;
    public static final int HASH_COUNT_FIELD_NUMBER = 1;
    private int hashCount_;
    /**
     * <pre>
     * Hash iteration count, or *k* value, for the Bloom filter.
     * </pre>
     *
     * <code>uint32 hash_count = 1;</code>
     */
    public int getHashCount() {
      return hashCount_;
    }

    public static final int BUCKET_FIELD_NUMBER = 2;
    private com.google.protobuf.Internal.LongList bucket_;
    /**
     * <pre>
     * Raw buckets for the counter.
     * </pre>
     *
     * <code>repeated fixed64 bucket = 2;</code>
     */
    public java.util.List<java.lang.Long>
        getBucketList() {
      return bucket_;
    }
    /**
     * <pre>
     * Raw buckets for the counter.
     * </pre>
     *
     * <code>repeated fixed64 bucket = 2;</code>
     */
    public int getBucketCount() {
      return bucket_.size();
    }
    /**
     * <pre>
     * Raw buckets for the counter.
     * </pre>
     *
     * <code>repeated fixed64 bucket = 2;</code>
     */
    public long getBucket(int index) {
      return bucket_.getLong(index);
    }
    private int bucketMemoizedSerializedSize = -1;

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hashCount_ != 0) {
        output.writeUInt32(1, hashCount_);
      }
      if (getBucketList().size() > 0) {
        output.writeUInt32NoTag(18);
        output.writeUInt32NoTag(bucketMemoizedSerializedSize);
      }
      for (int i = 0; i < bucket_.size(); i++) {
        output.writeFixed64NoTag(bucket_.getLong(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (hashCount_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, hashCount_);
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBucketList().size();
        size += dataSize;
        if (!getBucketList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        bucketMemoizedSerializedSize = dataSize;
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.bloombox.schema.analytics.stream.Filter.CountingBloomFilter)) {
        return super.equals(obj);
      }
      io.bloombox.schema.analytics.stream.Filter.CountingBloomFilter other = (io.bloombox.schema.analytics.stream.Filter.CountingBloomFilter) obj;

      if (getHashCount()
          != other.getHashCount()) return false;
      if (!getBucketList()
          .equals(other.getBucketList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + HASH_COUNT_FIELD_NUMBER;
      hash = (53 * hash) + getHashCount();
      if (getBucketCount() > 0) {
        hash = (37 * hash) + BUCKET_FIELD_NUMBER;
        hash = (53 * hash) + getBucketList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.bloombox.schema.analytics.stream.Filter.CountingBloomFilter parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.analytics.stream.Filter.CountingBloomFilter parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.analytics.stream.Filter.CountingBloomFilter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.analytics.stream.Filter.CountingBloomFilter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.analytics.stream.Filter.CountingBloomFilter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.analytics.stream.Filter.CountingBloomFilter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.analytics.stream.Filter.CountingBloomFilter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.analytics.stream.Filter.CountingBloomFilter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.analytics.stream.Filter.CountingBloomFilter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.analytics.stream.Filter.CountingBloomFilter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.analytics.stream.Filter.CountingBloomFilter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.analytics.stream.Filter.CountingBloomFilter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.bloombox.schema.analytics.stream.Filter.CountingBloomFilter prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Defines an extended Bloom-style binary filter, where each position of the filter is expanded to include integer state
     * for a counter. Counters cannot be negative and so are stored unsigned.
     * </pre>
     *
     * Protobuf type {@code bloombox.stream.CountingBloomFilter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:bloombox.stream.CountingBloomFilter)
        io.bloombox.schema.analytics.stream.Filter.CountingBloomFilterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.bloombox.schema.analytics.stream.Filter.internal_static_bloombox_stream_CountingBloomFilter_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.bloombox.schema.analytics.stream.Filter.internal_static_bloombox_stream_CountingBloomFilter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.bloombox.schema.analytics.stream.Filter.CountingBloomFilter.class, io.bloombox.schema.analytics.stream.Filter.CountingBloomFilter.Builder.class);
      }

      // Construct using io.bloombox.schema.analytics.stream.Filter.CountingBloomFilter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        hashCount_ = 0;

        bucket_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.bloombox.schema.analytics.stream.Filter.internal_static_bloombox_stream_CountingBloomFilter_descriptor;
      }

      @java.lang.Override
      public io.bloombox.schema.analytics.stream.Filter.CountingBloomFilter getDefaultInstanceForType() {
        return io.bloombox.schema.analytics.stream.Filter.CountingBloomFilter.getDefaultInstance();
      }

      @java.lang.Override
      public io.bloombox.schema.analytics.stream.Filter.CountingBloomFilter build() {
        io.bloombox.schema.analytics.stream.Filter.CountingBloomFilter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.bloombox.schema.analytics.stream.Filter.CountingBloomFilter buildPartial() {
        io.bloombox.schema.analytics.stream.Filter.CountingBloomFilter result = new io.bloombox.schema.analytics.stream.Filter.CountingBloomFilter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.hashCount_ = hashCount_;
        if (((bitField0_ & 0x00000002) != 0)) {
          bucket_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.bucket_ = bucket_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.bloombox.schema.analytics.stream.Filter.CountingBloomFilter) {
          return mergeFrom((io.bloombox.schema.analytics.stream.Filter.CountingBloomFilter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.bloombox.schema.analytics.stream.Filter.CountingBloomFilter other) {
        if (other == io.bloombox.schema.analytics.stream.Filter.CountingBloomFilter.getDefaultInstance()) return this;
        if (other.getHashCount() != 0) {
          setHashCount(other.getHashCount());
        }
        if (!other.bucket_.isEmpty()) {
          if (bucket_.isEmpty()) {
            bucket_ = other.bucket_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureBucketIsMutable();
            bucket_.addAll(other.bucket_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.bloombox.schema.analytics.stream.Filter.CountingBloomFilter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.bloombox.schema.analytics.stream.Filter.CountingBloomFilter) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int hashCount_ ;
      /**
       * <pre>
       * Hash iteration count, or *k* value, for the Bloom filter.
       * </pre>
       *
       * <code>uint32 hash_count = 1;</code>
       */
      public int getHashCount() {
        return hashCount_;
      }
      /**
       * <pre>
       * Hash iteration count, or *k* value, for the Bloom filter.
       * </pre>
       *
       * <code>uint32 hash_count = 1;</code>
       */
      public Builder setHashCount(int value) {
        
        hashCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Hash iteration count, or *k* value, for the Bloom filter.
       * </pre>
       *
       * <code>uint32 hash_count = 1;</code>
       */
      public Builder clearHashCount() {
        
        hashCount_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.LongList bucket_ = emptyLongList();
      private void ensureBucketIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          bucket_ = mutableCopy(bucket_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <pre>
       * Raw buckets for the counter.
       * </pre>
       *
       * <code>repeated fixed64 bucket = 2;</code>
       */
      public java.util.List<java.lang.Long>
          getBucketList() {
        return ((bitField0_ & 0x00000002) != 0) ?
                 java.util.Collections.unmodifiableList(bucket_) : bucket_;
      }
      /**
       * <pre>
       * Raw buckets for the counter.
       * </pre>
       *
       * <code>repeated fixed64 bucket = 2;</code>
       */
      public int getBucketCount() {
        return bucket_.size();
      }
      /**
       * <pre>
       * Raw buckets for the counter.
       * </pre>
       *
       * <code>repeated fixed64 bucket = 2;</code>
       */
      public long getBucket(int index) {
        return bucket_.getLong(index);
      }
      /**
       * <pre>
       * Raw buckets for the counter.
       * </pre>
       *
       * <code>repeated fixed64 bucket = 2;</code>
       */
      public Builder setBucket(
          int index, long value) {
        ensureBucketIsMutable();
        bucket_.setLong(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Raw buckets for the counter.
       * </pre>
       *
       * <code>repeated fixed64 bucket = 2;</code>
       */
      public Builder addBucket(long value) {
        ensureBucketIsMutable();
        bucket_.addLong(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Raw buckets for the counter.
       * </pre>
       *
       * <code>repeated fixed64 bucket = 2;</code>
       */
      public Builder addAllBucket(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureBucketIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, bucket_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Raw buckets for the counter.
       * </pre>
       *
       * <code>repeated fixed64 bucket = 2;</code>
       */
      public Builder clearBucket() {
        bucket_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:bloombox.stream.CountingBloomFilter)
    }

    // @@protoc_insertion_point(class_scope:bloombox.stream.CountingBloomFilter)
    private static final io.bloombox.schema.analytics.stream.Filter.CountingBloomFilter DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.bloombox.schema.analytics.stream.Filter.CountingBloomFilter();
    }

    public static io.bloombox.schema.analytics.stream.Filter.CountingBloomFilter getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CountingBloomFilter>
        PARSER = new com.google.protobuf.AbstractParser<CountingBloomFilter>() {
      @java.lang.Override
      public CountingBloomFilter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CountingBloomFilter(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CountingBloomFilter> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CountingBloomFilter> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.bloombox.schema.analytics.stream.Filter.CountingBloomFilter getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface OITDBloomFilterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:bloombox.stream.OITDBloomFilter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Hash iteration count, or *k* value, for the Bloom filter.
     * </pre>
     *
     * <code>uint32 hash_count = 1;</code>
     */
    int getHashCount();

    /**
     * <pre>
     * Set of raw filter bits (i.e., the "content" of the filter).
     * </pre>
     *
     * <code>repeated fixed64 bitset = 2;</code>
     */
    java.util.List<java.lang.Long> getBitsetList();
    /**
     * <pre>
     * Set of raw filter bits (i.e., the "content" of the filter).
     * </pre>
     *
     * <code>repeated fixed64 bitset = 2;</code>
     */
    int getBitsetCount();
    /**
     * <pre>
     * Set of raw filter bits (i.e., the "content" of the filter).
     * </pre>
     *
     * <code>repeated fixed64 bitset = 2;</code>
     */
    long getBitset(int index);

    /**
     * <pre>
     * Counter buckets corresponding to each filter bit position.
     * </pre>
     *
     * <code>repeated fixed64 bucket = 3;</code>
     */
    java.util.List<java.lang.Long> getBucketList();
    /**
     * <pre>
     * Counter buckets corresponding to each filter bit position.
     * </pre>
     *
     * <code>repeated fixed64 bucket = 3;</code>
     */
    int getBucketCount();
    /**
     * <pre>
     * Counter buckets corresponding to each filter bit position.
     * </pre>
     *
     * <code>repeated fixed64 bucket = 3;</code>
     */
    long getBucket(int index);

    /**
     * <pre>
     * Set of timestamps corresponding to each filter bit position.
     * </pre>
     *
     * <code>repeated uint64 timestamp = 4;</code>
     */
    java.util.List<java.lang.Long> getTimestampList();
    /**
     * <pre>
     * Set of timestamps corresponding to each filter bit position.
     * </pre>
     *
     * <code>repeated uint64 timestamp = 4;</code>
     */
    int getTimestampCount();
    /**
     * <pre>
     * Set of timestamps corresponding to each filter bit position.
     * </pre>
     *
     * <code>repeated uint64 timestamp = 4;</code>
     */
    long getTimestamp(int index);

    /**
     * <pre>
     * Specifies an insertions count, which tracks the number of items globally inserted into each layer.
     * </pre>
     *
     * <code>repeated uint32 insertions = 5;</code>
     */
    java.util.List<java.lang.Integer> getInsertionsList();
    /**
     * <pre>
     * Specifies an insertions count, which tracks the number of items globally inserted into each layer.
     * </pre>
     *
     * <code>repeated uint32 insertions = 5;</code>
     */
    int getInsertionsCount();
    /**
     * <pre>
     * Specifies an insertions count, which tracks the number of items globally inserted into each layer.
     * </pre>
     *
     * <code>repeated uint32 insertions = 5;</code>
     */
    int getInsertions(int index);

    /**
     * <pre>
     * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
     * </pre>
     *
     * <code>repeated .bloombox.stream.BloomFilter membership = 6;</code>
     */
    java.util.List<io.bloombox.schema.analytics.stream.Filter.BloomFilter> 
        getMembershipList();
    /**
     * <pre>
     * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
     * </pre>
     *
     * <code>repeated .bloombox.stream.BloomFilter membership = 6;</code>
     */
    io.bloombox.schema.analytics.stream.Filter.BloomFilter getMembership(int index);
    /**
     * <pre>
     * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
     * </pre>
     *
     * <code>repeated .bloombox.stream.BloomFilter membership = 6;</code>
     */
    int getMembershipCount();
    /**
     * <pre>
     * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
     * </pre>
     *
     * <code>repeated .bloombox.stream.BloomFilter membership = 6;</code>
     */
    java.util.List<? extends io.bloombox.schema.analytics.stream.Filter.BloomFilterOrBuilder> 
        getMembershipOrBuilderList();
    /**
     * <pre>
     * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
     * </pre>
     *
     * <code>repeated .bloombox.stream.BloomFilter membership = 6;</code>
     */
    io.bloombox.schema.analytics.stream.Filter.BloomFilterOrBuilder getMembershipOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Defines a Bloom filter with additional temporal properties, for the purpose of facilitating time-based decay. Arrays
   * for timestamp storage, counter storage, and bitset storage are kept in sync.
   * </pre>
   *
   * Protobuf type {@code bloombox.stream.OITDBloomFilter}
   */
  public  static final class OITDBloomFilter extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:bloombox.stream.OITDBloomFilter)
      OITDBloomFilterOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use OITDBloomFilter.newBuilder() to construct.
    private OITDBloomFilter(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private OITDBloomFilter() {
      bitset_ = emptyLongList();
      bucket_ = emptyLongList();
      timestamp_ = emptyLongList();
      insertions_ = emptyIntList();
      membership_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private OITDBloomFilter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              hashCount_ = input.readUInt32();
              break;
            }
            case 17: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                bitset_ = newLongList();
                mutable_bitField0_ |= 0x00000002;
              }
              bitset_.addLong(input.readFixed64());
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000002) != 0) && input.getBytesUntilLimit() > 0) {
                bitset_ = newLongList();
                mutable_bitField0_ |= 0x00000002;
              }
              while (input.getBytesUntilLimit() > 0) {
                bitset_.addLong(input.readFixed64());
              }
              input.popLimit(limit);
              break;
            }
            case 25: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                bucket_ = newLongList();
                mutable_bitField0_ |= 0x00000004;
              }
              bucket_.addLong(input.readFixed64());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) != 0) && input.getBytesUntilLimit() > 0) {
                bucket_ = newLongList();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                bucket_.addLong(input.readFixed64());
              }
              input.popLimit(limit);
              break;
            }
            case 32: {
              if (!((mutable_bitField0_ & 0x00000008) != 0)) {
                timestamp_ = newLongList();
                mutable_bitField0_ |= 0x00000008;
              }
              timestamp_.addLong(input.readUInt64());
              break;
            }
            case 34: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000008) != 0) && input.getBytesUntilLimit() > 0) {
                timestamp_ = newLongList();
                mutable_bitField0_ |= 0x00000008;
              }
              while (input.getBytesUntilLimit() > 0) {
                timestamp_.addLong(input.readUInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 40: {
              if (!((mutable_bitField0_ & 0x00000010) != 0)) {
                insertions_ = newIntList();
                mutable_bitField0_ |= 0x00000010;
              }
              insertions_.addInt(input.readUInt32());
              break;
            }
            case 42: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000010) != 0) && input.getBytesUntilLimit() > 0) {
                insertions_ = newIntList();
                mutable_bitField0_ |= 0x00000010;
              }
              while (input.getBytesUntilLimit() > 0) {
                insertions_.addInt(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 50: {
              if (!((mutable_bitField0_ & 0x00000020) != 0)) {
                membership_ = new java.util.ArrayList<io.bloombox.schema.analytics.stream.Filter.BloomFilter>();
                mutable_bitField0_ |= 0x00000020;
              }
              membership_.add(
                  input.readMessage(io.bloombox.schema.analytics.stream.Filter.BloomFilter.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          bitset_.makeImmutable(); // C
        }
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          bucket_.makeImmutable(); // C
        }
        if (((mutable_bitField0_ & 0x00000008) != 0)) {
          timestamp_.makeImmutable(); // C
        }
        if (((mutable_bitField0_ & 0x00000010) != 0)) {
          insertions_.makeImmutable(); // C
        }
        if (((mutable_bitField0_ & 0x00000020) != 0)) {
          membership_ = java.util.Collections.unmodifiableList(membership_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.bloombox.schema.analytics.stream.Filter.internal_static_bloombox_stream_OITDBloomFilter_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.bloombox.schema.analytics.stream.Filter.internal_static_bloombox_stream_OITDBloomFilter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.class, io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.Builder.class);
    }

    private int bitField0_;
    public static final int HASH_COUNT_FIELD_NUMBER = 1;
    private int hashCount_;
    /**
     * <pre>
     * Hash iteration count, or *k* value, for the Bloom filter.
     * </pre>
     *
     * <code>uint32 hash_count = 1;</code>
     */
    public int getHashCount() {
      return hashCount_;
    }

    public static final int BITSET_FIELD_NUMBER = 2;
    private com.google.protobuf.Internal.LongList bitset_;
    /**
     * <pre>
     * Set of raw filter bits (i.e., the "content" of the filter).
     * </pre>
     *
     * <code>repeated fixed64 bitset = 2;</code>
     */
    public java.util.List<java.lang.Long>
        getBitsetList() {
      return bitset_;
    }
    /**
     * <pre>
     * Set of raw filter bits (i.e., the "content" of the filter).
     * </pre>
     *
     * <code>repeated fixed64 bitset = 2;</code>
     */
    public int getBitsetCount() {
      return bitset_.size();
    }
    /**
     * <pre>
     * Set of raw filter bits (i.e., the "content" of the filter).
     * </pre>
     *
     * <code>repeated fixed64 bitset = 2;</code>
     */
    public long getBitset(int index) {
      return bitset_.getLong(index);
    }
    private int bitsetMemoizedSerializedSize = -1;

    public static final int BUCKET_FIELD_NUMBER = 3;
    private com.google.protobuf.Internal.LongList bucket_;
    /**
     * <pre>
     * Counter buckets corresponding to each filter bit position.
     * </pre>
     *
     * <code>repeated fixed64 bucket = 3;</code>
     */
    public java.util.List<java.lang.Long>
        getBucketList() {
      return bucket_;
    }
    /**
     * <pre>
     * Counter buckets corresponding to each filter bit position.
     * </pre>
     *
     * <code>repeated fixed64 bucket = 3;</code>
     */
    public int getBucketCount() {
      return bucket_.size();
    }
    /**
     * <pre>
     * Counter buckets corresponding to each filter bit position.
     * </pre>
     *
     * <code>repeated fixed64 bucket = 3;</code>
     */
    public long getBucket(int index) {
      return bucket_.getLong(index);
    }
    private int bucketMemoizedSerializedSize = -1;

    public static final int TIMESTAMP_FIELD_NUMBER = 4;
    private com.google.protobuf.Internal.LongList timestamp_;
    /**
     * <pre>
     * Set of timestamps corresponding to each filter bit position.
     * </pre>
     *
     * <code>repeated uint64 timestamp = 4;</code>
     */
    public java.util.List<java.lang.Long>
        getTimestampList() {
      return timestamp_;
    }
    /**
     * <pre>
     * Set of timestamps corresponding to each filter bit position.
     * </pre>
     *
     * <code>repeated uint64 timestamp = 4;</code>
     */
    public int getTimestampCount() {
      return timestamp_.size();
    }
    /**
     * <pre>
     * Set of timestamps corresponding to each filter bit position.
     * </pre>
     *
     * <code>repeated uint64 timestamp = 4;</code>
     */
    public long getTimestamp(int index) {
      return timestamp_.getLong(index);
    }
    private int timestampMemoizedSerializedSize = -1;

    public static final int INSERTIONS_FIELD_NUMBER = 5;
    private com.google.protobuf.Internal.IntList insertions_;
    /**
     * <pre>
     * Specifies an insertions count, which tracks the number of items globally inserted into each layer.
     * </pre>
     *
     * <code>repeated uint32 insertions = 5;</code>
     */
    public java.util.List<java.lang.Integer>
        getInsertionsList() {
      return insertions_;
    }
    /**
     * <pre>
     * Specifies an insertions count, which tracks the number of items globally inserted into each layer.
     * </pre>
     *
     * <code>repeated uint32 insertions = 5;</code>
     */
    public int getInsertionsCount() {
      return insertions_.size();
    }
    /**
     * <pre>
     * Specifies an insertions count, which tracks the number of items globally inserted into each layer.
     * </pre>
     *
     * <code>repeated uint32 insertions = 5;</code>
     */
    public int getInsertions(int index) {
      return insertions_.getInt(index);
    }
    private int insertionsMemoizedSerializedSize = -1;

    public static final int MEMBERSHIP_FIELD_NUMBER = 6;
    private java.util.List<io.bloombox.schema.analytics.stream.Filter.BloomFilter> membership_;
    /**
     * <pre>
     * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
     * </pre>
     *
     * <code>repeated .bloombox.stream.BloomFilter membership = 6;</code>
     */
    public java.util.List<io.bloombox.schema.analytics.stream.Filter.BloomFilter> getMembershipList() {
      return membership_;
    }
    /**
     * <pre>
     * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
     * </pre>
     *
     * <code>repeated .bloombox.stream.BloomFilter membership = 6;</code>
     */
    public java.util.List<? extends io.bloombox.schema.analytics.stream.Filter.BloomFilterOrBuilder> 
        getMembershipOrBuilderList() {
      return membership_;
    }
    /**
     * <pre>
     * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
     * </pre>
     *
     * <code>repeated .bloombox.stream.BloomFilter membership = 6;</code>
     */
    public int getMembershipCount() {
      return membership_.size();
    }
    /**
     * <pre>
     * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
     * </pre>
     *
     * <code>repeated .bloombox.stream.BloomFilter membership = 6;</code>
     */
    public io.bloombox.schema.analytics.stream.Filter.BloomFilter getMembership(int index) {
      return membership_.get(index);
    }
    /**
     * <pre>
     * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
     * </pre>
     *
     * <code>repeated .bloombox.stream.BloomFilter membership = 6;</code>
     */
    public io.bloombox.schema.analytics.stream.Filter.BloomFilterOrBuilder getMembershipOrBuilder(
        int index) {
      return membership_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hashCount_ != 0) {
        output.writeUInt32(1, hashCount_);
      }
      if (getBitsetList().size() > 0) {
        output.writeUInt32NoTag(18);
        output.writeUInt32NoTag(bitsetMemoizedSerializedSize);
      }
      for (int i = 0; i < bitset_.size(); i++) {
        output.writeFixed64NoTag(bitset_.getLong(i));
      }
      if (getBucketList().size() > 0) {
        output.writeUInt32NoTag(26);
        output.writeUInt32NoTag(bucketMemoizedSerializedSize);
      }
      for (int i = 0; i < bucket_.size(); i++) {
        output.writeFixed64NoTag(bucket_.getLong(i));
      }
      if (getTimestampList().size() > 0) {
        output.writeUInt32NoTag(34);
        output.writeUInt32NoTag(timestampMemoizedSerializedSize);
      }
      for (int i = 0; i < timestamp_.size(); i++) {
        output.writeUInt64NoTag(timestamp_.getLong(i));
      }
      if (getInsertionsList().size() > 0) {
        output.writeUInt32NoTag(42);
        output.writeUInt32NoTag(insertionsMemoizedSerializedSize);
      }
      for (int i = 0; i < insertions_.size(); i++) {
        output.writeUInt32NoTag(insertions_.getInt(i));
      }
      for (int i = 0; i < membership_.size(); i++) {
        output.writeMessage(6, membership_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (hashCount_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, hashCount_);
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBitsetList().size();
        size += dataSize;
        if (!getBitsetList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        bitsetMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        dataSize = 8 * getBucketList().size();
        size += dataSize;
        if (!getBucketList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        bucketMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < timestamp_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt64SizeNoTag(timestamp_.getLong(i));
        }
        size += dataSize;
        if (!getTimestampList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        timestampMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < insertions_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(insertions_.getInt(i));
        }
        size += dataSize;
        if (!getInsertionsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        insertionsMemoizedSerializedSize = dataSize;
      }
      for (int i = 0; i < membership_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, membership_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter)) {
        return super.equals(obj);
      }
      io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter other = (io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter) obj;

      if (getHashCount()
          != other.getHashCount()) return false;
      if (!getBitsetList()
          .equals(other.getBitsetList())) return false;
      if (!getBucketList()
          .equals(other.getBucketList())) return false;
      if (!getTimestampList()
          .equals(other.getTimestampList())) return false;
      if (!getInsertionsList()
          .equals(other.getInsertionsList())) return false;
      if (!getMembershipList()
          .equals(other.getMembershipList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + HASH_COUNT_FIELD_NUMBER;
      hash = (53 * hash) + getHashCount();
      if (getBitsetCount() > 0) {
        hash = (37 * hash) + BITSET_FIELD_NUMBER;
        hash = (53 * hash) + getBitsetList().hashCode();
      }
      if (getBucketCount() > 0) {
        hash = (37 * hash) + BUCKET_FIELD_NUMBER;
        hash = (53 * hash) + getBucketList().hashCode();
      }
      if (getTimestampCount() > 0) {
        hash = (37 * hash) + TIMESTAMP_FIELD_NUMBER;
        hash = (53 * hash) + getTimestampList().hashCode();
      }
      if (getInsertionsCount() > 0) {
        hash = (37 * hash) + INSERTIONS_FIELD_NUMBER;
        hash = (53 * hash) + getInsertionsList().hashCode();
      }
      if (getMembershipCount() > 0) {
        hash = (37 * hash) + MEMBERSHIP_FIELD_NUMBER;
        hash = (53 * hash) + getMembershipList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Defines a Bloom filter with additional temporal properties, for the purpose of facilitating time-based decay. Arrays
     * for timestamp storage, counter storage, and bitset storage are kept in sync.
     * </pre>
     *
     * Protobuf type {@code bloombox.stream.OITDBloomFilter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:bloombox.stream.OITDBloomFilter)
        io.bloombox.schema.analytics.stream.Filter.OITDBloomFilterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.bloombox.schema.analytics.stream.Filter.internal_static_bloombox_stream_OITDBloomFilter_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.bloombox.schema.analytics.stream.Filter.internal_static_bloombox_stream_OITDBloomFilter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.class, io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.Builder.class);
      }

      // Construct using io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getMembershipFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        hashCount_ = 0;

        bitset_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000002);
        bucket_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000004);
        timestamp_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000008);
        insertions_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000010);
        if (membershipBuilder_ == null) {
          membership_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
        } else {
          membershipBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.bloombox.schema.analytics.stream.Filter.internal_static_bloombox_stream_OITDBloomFilter_descriptor;
      }

      @java.lang.Override
      public io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter getDefaultInstanceForType() {
        return io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.getDefaultInstance();
      }

      @java.lang.Override
      public io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter build() {
        io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter buildPartial() {
        io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter result = new io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.hashCount_ = hashCount_;
        if (((bitField0_ & 0x00000002) != 0)) {
          bitset_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.bitset_ = bitset_;
        if (((bitField0_ & 0x00000004) != 0)) {
          bucket_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.bucket_ = bucket_;
        if (((bitField0_ & 0x00000008) != 0)) {
          timestamp_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.timestamp_ = timestamp_;
        if (((bitField0_ & 0x00000010) != 0)) {
          insertions_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000010);
        }
        result.insertions_ = insertions_;
        if (membershipBuilder_ == null) {
          if (((bitField0_ & 0x00000020) != 0)) {
            membership_ = java.util.Collections.unmodifiableList(membership_);
            bitField0_ = (bitField0_ & ~0x00000020);
          }
          result.membership_ = membership_;
        } else {
          result.membership_ = membershipBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter) {
          return mergeFrom((io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter other) {
        if (other == io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.getDefaultInstance()) return this;
        if (other.getHashCount() != 0) {
          setHashCount(other.getHashCount());
        }
        if (!other.bitset_.isEmpty()) {
          if (bitset_.isEmpty()) {
            bitset_ = other.bitset_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureBitsetIsMutable();
            bitset_.addAll(other.bitset_);
          }
          onChanged();
        }
        if (!other.bucket_.isEmpty()) {
          if (bucket_.isEmpty()) {
            bucket_ = other.bucket_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureBucketIsMutable();
            bucket_.addAll(other.bucket_);
          }
          onChanged();
        }
        if (!other.timestamp_.isEmpty()) {
          if (timestamp_.isEmpty()) {
            timestamp_ = other.timestamp_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureTimestampIsMutable();
            timestamp_.addAll(other.timestamp_);
          }
          onChanged();
        }
        if (!other.insertions_.isEmpty()) {
          if (insertions_.isEmpty()) {
            insertions_ = other.insertions_;
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            ensureInsertionsIsMutable();
            insertions_.addAll(other.insertions_);
          }
          onChanged();
        }
        if (membershipBuilder_ == null) {
          if (!other.membership_.isEmpty()) {
            if (membership_.isEmpty()) {
              membership_ = other.membership_;
              bitField0_ = (bitField0_ & ~0x00000020);
            } else {
              ensureMembershipIsMutable();
              membership_.addAll(other.membership_);
            }
            onChanged();
          }
        } else {
          if (!other.membership_.isEmpty()) {
            if (membershipBuilder_.isEmpty()) {
              membershipBuilder_.dispose();
              membershipBuilder_ = null;
              membership_ = other.membership_;
              bitField0_ = (bitField0_ & ~0x00000020);
              membershipBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getMembershipFieldBuilder() : null;
            } else {
              membershipBuilder_.addAllMessages(other.membership_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int hashCount_ ;
      /**
       * <pre>
       * Hash iteration count, or *k* value, for the Bloom filter.
       * </pre>
       *
       * <code>uint32 hash_count = 1;</code>
       */
      public int getHashCount() {
        return hashCount_;
      }
      /**
       * <pre>
       * Hash iteration count, or *k* value, for the Bloom filter.
       * </pre>
       *
       * <code>uint32 hash_count = 1;</code>
       */
      public Builder setHashCount(int value) {
        
        hashCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Hash iteration count, or *k* value, for the Bloom filter.
       * </pre>
       *
       * <code>uint32 hash_count = 1;</code>
       */
      public Builder clearHashCount() {
        
        hashCount_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.LongList bitset_ = emptyLongList();
      private void ensureBitsetIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          bitset_ = mutableCopy(bitset_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <pre>
       * Set of raw filter bits (i.e., the "content" of the filter).
       * </pre>
       *
       * <code>repeated fixed64 bitset = 2;</code>
       */
      public java.util.List<java.lang.Long>
          getBitsetList() {
        return ((bitField0_ & 0x00000002) != 0) ?
                 java.util.Collections.unmodifiableList(bitset_) : bitset_;
      }
      /**
       * <pre>
       * Set of raw filter bits (i.e., the "content" of the filter).
       * </pre>
       *
       * <code>repeated fixed64 bitset = 2;</code>
       */
      public int getBitsetCount() {
        return bitset_.size();
      }
      /**
       * <pre>
       * Set of raw filter bits (i.e., the "content" of the filter).
       * </pre>
       *
       * <code>repeated fixed64 bitset = 2;</code>
       */
      public long getBitset(int index) {
        return bitset_.getLong(index);
      }
      /**
       * <pre>
       * Set of raw filter bits (i.e., the "content" of the filter).
       * </pre>
       *
       * <code>repeated fixed64 bitset = 2;</code>
       */
      public Builder setBitset(
          int index, long value) {
        ensureBitsetIsMutable();
        bitset_.setLong(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set of raw filter bits (i.e., the "content" of the filter).
       * </pre>
       *
       * <code>repeated fixed64 bitset = 2;</code>
       */
      public Builder addBitset(long value) {
        ensureBitsetIsMutable();
        bitset_.addLong(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set of raw filter bits (i.e., the "content" of the filter).
       * </pre>
       *
       * <code>repeated fixed64 bitset = 2;</code>
       */
      public Builder addAllBitset(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureBitsetIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, bitset_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set of raw filter bits (i.e., the "content" of the filter).
       * </pre>
       *
       * <code>repeated fixed64 bitset = 2;</code>
       */
      public Builder clearBitset() {
        bitset_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.LongList bucket_ = emptyLongList();
      private void ensureBucketIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          bucket_ = mutableCopy(bucket_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <pre>
       * Counter buckets corresponding to each filter bit position.
       * </pre>
       *
       * <code>repeated fixed64 bucket = 3;</code>
       */
      public java.util.List<java.lang.Long>
          getBucketList() {
        return ((bitField0_ & 0x00000004) != 0) ?
                 java.util.Collections.unmodifiableList(bucket_) : bucket_;
      }
      /**
       * <pre>
       * Counter buckets corresponding to each filter bit position.
       * </pre>
       *
       * <code>repeated fixed64 bucket = 3;</code>
       */
      public int getBucketCount() {
        return bucket_.size();
      }
      /**
       * <pre>
       * Counter buckets corresponding to each filter bit position.
       * </pre>
       *
       * <code>repeated fixed64 bucket = 3;</code>
       */
      public long getBucket(int index) {
        return bucket_.getLong(index);
      }
      /**
       * <pre>
       * Counter buckets corresponding to each filter bit position.
       * </pre>
       *
       * <code>repeated fixed64 bucket = 3;</code>
       */
      public Builder setBucket(
          int index, long value) {
        ensureBucketIsMutable();
        bucket_.setLong(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Counter buckets corresponding to each filter bit position.
       * </pre>
       *
       * <code>repeated fixed64 bucket = 3;</code>
       */
      public Builder addBucket(long value) {
        ensureBucketIsMutable();
        bucket_.addLong(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Counter buckets corresponding to each filter bit position.
       * </pre>
       *
       * <code>repeated fixed64 bucket = 3;</code>
       */
      public Builder addAllBucket(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureBucketIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, bucket_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Counter buckets corresponding to each filter bit position.
       * </pre>
       *
       * <code>repeated fixed64 bucket = 3;</code>
       */
      public Builder clearBucket() {
        bucket_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.LongList timestamp_ = emptyLongList();
      private void ensureTimestampIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          timestamp_ = mutableCopy(timestamp_);
          bitField0_ |= 0x00000008;
         }
      }
      /**
       * <pre>
       * Set of timestamps corresponding to each filter bit position.
       * </pre>
       *
       * <code>repeated uint64 timestamp = 4;</code>
       */
      public java.util.List<java.lang.Long>
          getTimestampList() {
        return ((bitField0_ & 0x00000008) != 0) ?
                 java.util.Collections.unmodifiableList(timestamp_) : timestamp_;
      }
      /**
       * <pre>
       * Set of timestamps corresponding to each filter bit position.
       * </pre>
       *
       * <code>repeated uint64 timestamp = 4;</code>
       */
      public int getTimestampCount() {
        return timestamp_.size();
      }
      /**
       * <pre>
       * Set of timestamps corresponding to each filter bit position.
       * </pre>
       *
       * <code>repeated uint64 timestamp = 4;</code>
       */
      public long getTimestamp(int index) {
        return timestamp_.getLong(index);
      }
      /**
       * <pre>
       * Set of timestamps corresponding to each filter bit position.
       * </pre>
       *
       * <code>repeated uint64 timestamp = 4;</code>
       */
      public Builder setTimestamp(
          int index, long value) {
        ensureTimestampIsMutable();
        timestamp_.setLong(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set of timestamps corresponding to each filter bit position.
       * </pre>
       *
       * <code>repeated uint64 timestamp = 4;</code>
       */
      public Builder addTimestamp(long value) {
        ensureTimestampIsMutable();
        timestamp_.addLong(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set of timestamps corresponding to each filter bit position.
       * </pre>
       *
       * <code>repeated uint64 timestamp = 4;</code>
       */
      public Builder addAllTimestamp(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureTimestampIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, timestamp_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Set of timestamps corresponding to each filter bit position.
       * </pre>
       *
       * <code>repeated uint64 timestamp = 4;</code>
       */
      public Builder clearTimestamp() {
        timestamp_ = emptyLongList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.IntList insertions_ = emptyIntList();
      private void ensureInsertionsIsMutable() {
        if (!((bitField0_ & 0x00000010) != 0)) {
          insertions_ = mutableCopy(insertions_);
          bitField0_ |= 0x00000010;
         }
      }
      /**
       * <pre>
       * Specifies an insertions count, which tracks the number of items globally inserted into each layer.
       * </pre>
       *
       * <code>repeated uint32 insertions = 5;</code>
       */
      public java.util.List<java.lang.Integer>
          getInsertionsList() {
        return ((bitField0_ & 0x00000010) != 0) ?
                 java.util.Collections.unmodifiableList(insertions_) : insertions_;
      }
      /**
       * <pre>
       * Specifies an insertions count, which tracks the number of items globally inserted into each layer.
       * </pre>
       *
       * <code>repeated uint32 insertions = 5;</code>
       */
      public int getInsertionsCount() {
        return insertions_.size();
      }
      /**
       * <pre>
       * Specifies an insertions count, which tracks the number of items globally inserted into each layer.
       * </pre>
       *
       * <code>repeated uint32 insertions = 5;</code>
       */
      public int getInsertions(int index) {
        return insertions_.getInt(index);
      }
      /**
       * <pre>
       * Specifies an insertions count, which tracks the number of items globally inserted into each layer.
       * </pre>
       *
       * <code>repeated uint32 insertions = 5;</code>
       */
      public Builder setInsertions(
          int index, int value) {
        ensureInsertionsIsMutable();
        insertions_.setInt(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies an insertions count, which tracks the number of items globally inserted into each layer.
       * </pre>
       *
       * <code>repeated uint32 insertions = 5;</code>
       */
      public Builder addInsertions(int value) {
        ensureInsertionsIsMutable();
        insertions_.addInt(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies an insertions count, which tracks the number of items globally inserted into each layer.
       * </pre>
       *
       * <code>repeated uint32 insertions = 5;</code>
       */
      public Builder addAllInsertions(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureInsertionsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, insertions_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies an insertions count, which tracks the number of items globally inserted into each layer.
       * </pre>
       *
       * <code>repeated uint32 insertions = 5;</code>
       */
      public Builder clearInsertions() {
        insertions_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000010);
        onChanged();
        return this;
      }

      private java.util.List<io.bloombox.schema.analytics.stream.Filter.BloomFilter> membership_ =
        java.util.Collections.emptyList();
      private void ensureMembershipIsMutable() {
        if (!((bitField0_ & 0x00000020) != 0)) {
          membership_ = new java.util.ArrayList<io.bloombox.schema.analytics.stream.Filter.BloomFilter>(membership_);
          bitField0_ |= 0x00000020;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.bloombox.schema.analytics.stream.Filter.BloomFilter, io.bloombox.schema.analytics.stream.Filter.BloomFilter.Builder, io.bloombox.schema.analytics.stream.Filter.BloomFilterOrBuilder> membershipBuilder_;

      /**
       * <pre>
       * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter membership = 6;</code>
       */
      public java.util.List<io.bloombox.schema.analytics.stream.Filter.BloomFilter> getMembershipList() {
        if (membershipBuilder_ == null) {
          return java.util.Collections.unmodifiableList(membership_);
        } else {
          return membershipBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter membership = 6;</code>
       */
      public int getMembershipCount() {
        if (membershipBuilder_ == null) {
          return membership_.size();
        } else {
          return membershipBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter membership = 6;</code>
       */
      public io.bloombox.schema.analytics.stream.Filter.BloomFilter getMembership(int index) {
        if (membershipBuilder_ == null) {
          return membership_.get(index);
        } else {
          return membershipBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter membership = 6;</code>
       */
      public Builder setMembership(
          int index, io.bloombox.schema.analytics.stream.Filter.BloomFilter value) {
        if (membershipBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMembershipIsMutable();
          membership_.set(index, value);
          onChanged();
        } else {
          membershipBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter membership = 6;</code>
       */
      public Builder setMembership(
          int index, io.bloombox.schema.analytics.stream.Filter.BloomFilter.Builder builderForValue) {
        if (membershipBuilder_ == null) {
          ensureMembershipIsMutable();
          membership_.set(index, builderForValue.build());
          onChanged();
        } else {
          membershipBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter membership = 6;</code>
       */
      public Builder addMembership(io.bloombox.schema.analytics.stream.Filter.BloomFilter value) {
        if (membershipBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMembershipIsMutable();
          membership_.add(value);
          onChanged();
        } else {
          membershipBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter membership = 6;</code>
       */
      public Builder addMembership(
          int index, io.bloombox.schema.analytics.stream.Filter.BloomFilter value) {
        if (membershipBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMembershipIsMutable();
          membership_.add(index, value);
          onChanged();
        } else {
          membershipBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter membership = 6;</code>
       */
      public Builder addMembership(
          io.bloombox.schema.analytics.stream.Filter.BloomFilter.Builder builderForValue) {
        if (membershipBuilder_ == null) {
          ensureMembershipIsMutable();
          membership_.add(builderForValue.build());
          onChanged();
        } else {
          membershipBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter membership = 6;</code>
       */
      public Builder addMembership(
          int index, io.bloombox.schema.analytics.stream.Filter.BloomFilter.Builder builderForValue) {
        if (membershipBuilder_ == null) {
          ensureMembershipIsMutable();
          membership_.add(index, builderForValue.build());
          onChanged();
        } else {
          membershipBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter membership = 6;</code>
       */
      public Builder addAllMembership(
          java.lang.Iterable<? extends io.bloombox.schema.analytics.stream.Filter.BloomFilter> values) {
        if (membershipBuilder_ == null) {
          ensureMembershipIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, membership_);
          onChanged();
        } else {
          membershipBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter membership = 6;</code>
       */
      public Builder clearMembership() {
        if (membershipBuilder_ == null) {
          membership_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000020);
          onChanged();
        } else {
          membershipBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter membership = 6;</code>
       */
      public Builder removeMembership(int index) {
        if (membershipBuilder_ == null) {
          ensureMembershipIsMutable();
          membership_.remove(index);
          onChanged();
        } else {
          membershipBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter membership = 6;</code>
       */
      public io.bloombox.schema.analytics.stream.Filter.BloomFilter.Builder getMembershipBuilder(
          int index) {
        return getMembershipFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter membership = 6;</code>
       */
      public io.bloombox.schema.analytics.stream.Filter.BloomFilterOrBuilder getMembershipOrBuilder(
          int index) {
        if (membershipBuilder_ == null) {
          return membership_.get(index);  } else {
          return membershipBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter membership = 6;</code>
       */
      public java.util.List<? extends io.bloombox.schema.analytics.stream.Filter.BloomFilterOrBuilder> 
           getMembershipOrBuilderList() {
        if (membershipBuilder_ != null) {
          return membershipBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(membership_);
        }
      }
      /**
       * <pre>
       * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter membership = 6;</code>
       */
      public io.bloombox.schema.analytics.stream.Filter.BloomFilter.Builder addMembershipBuilder() {
        return getMembershipFieldBuilder().addBuilder(
            io.bloombox.schema.analytics.stream.Filter.BloomFilter.getDefaultInstance());
      }
      /**
       * <pre>
       * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter membership = 6;</code>
       */
      public io.bloombox.schema.analytics.stream.Filter.BloomFilter.Builder addMembershipBuilder(
          int index) {
        return getMembershipFieldBuilder().addBuilder(
            index, io.bloombox.schema.analytics.stream.Filter.BloomFilter.getDefaultInstance());
      }
      /**
       * <pre>
       * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter membership = 6;</code>
       */
      public java.util.List<io.bloombox.schema.analytics.stream.Filter.BloomFilter.Builder> 
           getMembershipBuilderList() {
        return getMembershipFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.bloombox.schema.analytics.stream.Filter.BloomFilter, io.bloombox.schema.analytics.stream.Filter.BloomFilter.Builder, io.bloombox.schema.analytics.stream.Filter.BloomFilterOrBuilder> 
          getMembershipFieldBuilder() {
        if (membershipBuilder_ == null) {
          membershipBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.bloombox.schema.analytics.stream.Filter.BloomFilter, io.bloombox.schema.analytics.stream.Filter.BloomFilter.Builder, io.bloombox.schema.analytics.stream.Filter.BloomFilterOrBuilder>(
                  membership_,
                  ((bitField0_ & 0x00000020) != 0),
                  getParentForChildren(),
                  isClean());
          membership_ = null;
        }
        return membershipBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:bloombox.stream.OITDBloomFilter)
    }

    // @@protoc_insertion_point(class_scope:bloombox.stream.OITDBloomFilter)
    private static final io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter();
    }

    public static io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<OITDBloomFilter>
        PARSER = new com.google.protobuf.AbstractParser<OITDBloomFilter>() {
      @java.lang.Override
      public OITDBloomFilter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new OITDBloomFilter(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<OITDBloomFilter> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<OITDBloomFilter> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface LayeredOITDBloomFilterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:bloombox.stream.LayeredOITDBloomFilter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Specifies layers of temporally-decaying Bloom filters.
     * </pre>
     *
     * <code>repeated .bloombox.stream.OITDBloomFilter filter = 1;</code>
     */
    java.util.List<io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter> 
        getFilterList();
    /**
     * <pre>
     * Specifies layers of temporally-decaying Bloom filters.
     * </pre>
     *
     * <code>repeated .bloombox.stream.OITDBloomFilter filter = 1;</code>
     */
    io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter getFilter(int index);
    /**
     * <pre>
     * Specifies layers of temporally-decaying Bloom filters.
     * </pre>
     *
     * <code>repeated .bloombox.stream.OITDBloomFilter filter = 1;</code>
     */
    int getFilterCount();
    /**
     * <pre>
     * Specifies layers of temporally-decaying Bloom filters.
     * </pre>
     *
     * <code>repeated .bloombox.stream.OITDBloomFilter filter = 1;</code>
     */
    java.util.List<? extends io.bloombox.schema.analytics.stream.Filter.OITDBloomFilterOrBuilder> 
        getFilterOrBuilderList();
    /**
     * <pre>
     * Specifies layers of temporally-decaying Bloom filters.
     * </pre>
     *
     * <code>repeated .bloombox.stream.OITDBloomFilter filter = 1;</code>
     */
    io.bloombox.schema.analytics.stream.Filter.OITDBloomFilterOrBuilder getFilterOrBuilder(
        int index);

    /**
     * <pre>
     * Specifies the layer limit for this individual Bloom filter, upon initialization.
     * </pre>
     *
     * <code>uint32 limit = 2;</code>
     */
    int getLimit();

    /**
     * <pre>
     * Specifies an insertions count, which tracks the number of items globally inserted into each layer.
     * </pre>
     *
     * <code>repeated uint32 insertions = 3;</code>
     */
    java.util.List<java.lang.Integer> getInsertionsList();
    /**
     * <pre>
     * Specifies an insertions count, which tracks the number of items globally inserted into each layer.
     * </pre>
     *
     * <code>repeated uint32 insertions = 3;</code>
     */
    int getInsertionsCount();
    /**
     * <pre>
     * Specifies an insertions count, which tracks the number of items globally inserted into each layer.
     * </pre>
     *
     * <code>repeated uint32 insertions = 3;</code>
     */
    int getInsertions(int index);

    /**
     * <pre>
     * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
     * </pre>
     *
     * <code>repeated .bloombox.stream.BloomFilter membership = 4;</code>
     */
    java.util.List<io.bloombox.schema.analytics.stream.Filter.BloomFilter> 
        getMembershipList();
    /**
     * <pre>
     * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
     * </pre>
     *
     * <code>repeated .bloombox.stream.BloomFilter membership = 4;</code>
     */
    io.bloombox.schema.analytics.stream.Filter.BloomFilter getMembership(int index);
    /**
     * <pre>
     * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
     * </pre>
     *
     * <code>repeated .bloombox.stream.BloomFilter membership = 4;</code>
     */
    int getMembershipCount();
    /**
     * <pre>
     * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
     * </pre>
     *
     * <code>repeated .bloombox.stream.BloomFilter membership = 4;</code>
     */
    java.util.List<? extends io.bloombox.schema.analytics.stream.Filter.BloomFilterOrBuilder> 
        getMembershipOrBuilderList();
    /**
     * <pre>
     * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
     * </pre>
     *
     * <code>repeated .bloombox.stream.BloomFilter membership = 4;</code>
     */
    io.bloombox.schema.analytics.stream.Filter.BloomFilterOrBuilder getMembershipOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Defines a Bloom filter with temporal storage properties, counter support, and layering support, for the purpose of
   * facilitating time-based decay with depth indication. The inner OITD Bloom Filter record can be referenced above.
   * </pre>
   *
   * Protobuf type {@code bloombox.stream.LayeredOITDBloomFilter}
   */
  public  static final class LayeredOITDBloomFilter extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:bloombox.stream.LayeredOITDBloomFilter)
      LayeredOITDBloomFilterOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use LayeredOITDBloomFilter.newBuilder() to construct.
    private LayeredOITDBloomFilter(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private LayeredOITDBloomFilter() {
      filter_ = java.util.Collections.emptyList();
      insertions_ = emptyIntList();
      membership_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private LayeredOITDBloomFilter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                filter_ = new java.util.ArrayList<io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter>();
                mutable_bitField0_ |= 0x00000001;
              }
              filter_.add(
                  input.readMessage(io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.parser(), extensionRegistry));
              break;
            }
            case 16: {

              limit_ = input.readUInt32();
              break;
            }
            case 24: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                insertions_ = newIntList();
                mutable_bitField0_ |= 0x00000004;
              }
              insertions_.addInt(input.readUInt32());
              break;
            }
            case 26: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000004) != 0) && input.getBytesUntilLimit() > 0) {
                insertions_ = newIntList();
                mutable_bitField0_ |= 0x00000004;
              }
              while (input.getBytesUntilLimit() > 0) {
                insertions_.addInt(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) != 0)) {
                membership_ = new java.util.ArrayList<io.bloombox.schema.analytics.stream.Filter.BloomFilter>();
                mutable_bitField0_ |= 0x00000008;
              }
              membership_.add(
                  input.readMessage(io.bloombox.schema.analytics.stream.Filter.BloomFilter.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          filter_ = java.util.Collections.unmodifiableList(filter_);
        }
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          insertions_.makeImmutable(); // C
        }
        if (((mutable_bitField0_ & 0x00000008) != 0)) {
          membership_ = java.util.Collections.unmodifiableList(membership_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.bloombox.schema.analytics.stream.Filter.internal_static_bloombox_stream_LayeredOITDBloomFilter_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.bloombox.schema.analytics.stream.Filter.internal_static_bloombox_stream_LayeredOITDBloomFilter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.bloombox.schema.analytics.stream.Filter.LayeredOITDBloomFilter.class, io.bloombox.schema.analytics.stream.Filter.LayeredOITDBloomFilter.Builder.class);
    }

    private int bitField0_;
    public static final int FILTER_FIELD_NUMBER = 1;
    private java.util.List<io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter> filter_;
    /**
     * <pre>
     * Specifies layers of temporally-decaying Bloom filters.
     * </pre>
     *
     * <code>repeated .bloombox.stream.OITDBloomFilter filter = 1;</code>
     */
    public java.util.List<io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter> getFilterList() {
      return filter_;
    }
    /**
     * <pre>
     * Specifies layers of temporally-decaying Bloom filters.
     * </pre>
     *
     * <code>repeated .bloombox.stream.OITDBloomFilter filter = 1;</code>
     */
    public java.util.List<? extends io.bloombox.schema.analytics.stream.Filter.OITDBloomFilterOrBuilder> 
        getFilterOrBuilderList() {
      return filter_;
    }
    /**
     * <pre>
     * Specifies layers of temporally-decaying Bloom filters.
     * </pre>
     *
     * <code>repeated .bloombox.stream.OITDBloomFilter filter = 1;</code>
     */
    public int getFilterCount() {
      return filter_.size();
    }
    /**
     * <pre>
     * Specifies layers of temporally-decaying Bloom filters.
     * </pre>
     *
     * <code>repeated .bloombox.stream.OITDBloomFilter filter = 1;</code>
     */
    public io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter getFilter(int index) {
      return filter_.get(index);
    }
    /**
     * <pre>
     * Specifies layers of temporally-decaying Bloom filters.
     * </pre>
     *
     * <code>repeated .bloombox.stream.OITDBloomFilter filter = 1;</code>
     */
    public io.bloombox.schema.analytics.stream.Filter.OITDBloomFilterOrBuilder getFilterOrBuilder(
        int index) {
      return filter_.get(index);
    }

    public static final int LIMIT_FIELD_NUMBER = 2;
    private int limit_;
    /**
     * <pre>
     * Specifies the layer limit for this individual Bloom filter, upon initialization.
     * </pre>
     *
     * <code>uint32 limit = 2;</code>
     */
    public int getLimit() {
      return limit_;
    }

    public static final int INSERTIONS_FIELD_NUMBER = 3;
    private com.google.protobuf.Internal.IntList insertions_;
    /**
     * <pre>
     * Specifies an insertions count, which tracks the number of items globally inserted into each layer.
     * </pre>
     *
     * <code>repeated uint32 insertions = 3;</code>
     */
    public java.util.List<java.lang.Integer>
        getInsertionsList() {
      return insertions_;
    }
    /**
     * <pre>
     * Specifies an insertions count, which tracks the number of items globally inserted into each layer.
     * </pre>
     *
     * <code>repeated uint32 insertions = 3;</code>
     */
    public int getInsertionsCount() {
      return insertions_.size();
    }
    /**
     * <pre>
     * Specifies an insertions count, which tracks the number of items globally inserted into each layer.
     * </pre>
     *
     * <code>repeated uint32 insertions = 3;</code>
     */
    public int getInsertions(int index) {
      return insertions_.getInt(index);
    }
    private int insertionsMemoizedSerializedSize = -1;

    public static final int MEMBERSHIP_FIELD_NUMBER = 4;
    private java.util.List<io.bloombox.schema.analytics.stream.Filter.BloomFilter> membership_;
    /**
     * <pre>
     * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
     * </pre>
     *
     * <code>repeated .bloombox.stream.BloomFilter membership = 4;</code>
     */
    public java.util.List<io.bloombox.schema.analytics.stream.Filter.BloomFilter> getMembershipList() {
      return membership_;
    }
    /**
     * <pre>
     * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
     * </pre>
     *
     * <code>repeated .bloombox.stream.BloomFilter membership = 4;</code>
     */
    public java.util.List<? extends io.bloombox.schema.analytics.stream.Filter.BloomFilterOrBuilder> 
        getMembershipOrBuilderList() {
      return membership_;
    }
    /**
     * <pre>
     * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
     * </pre>
     *
     * <code>repeated .bloombox.stream.BloomFilter membership = 4;</code>
     */
    public int getMembershipCount() {
      return membership_.size();
    }
    /**
     * <pre>
     * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
     * </pre>
     *
     * <code>repeated .bloombox.stream.BloomFilter membership = 4;</code>
     */
    public io.bloombox.schema.analytics.stream.Filter.BloomFilter getMembership(int index) {
      return membership_.get(index);
    }
    /**
     * <pre>
     * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
     * </pre>
     *
     * <code>repeated .bloombox.stream.BloomFilter membership = 4;</code>
     */
    public io.bloombox.schema.analytics.stream.Filter.BloomFilterOrBuilder getMembershipOrBuilder(
        int index) {
      return membership_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < filter_.size(); i++) {
        output.writeMessage(1, filter_.get(i));
      }
      if (limit_ != 0) {
        output.writeUInt32(2, limit_);
      }
      if (getInsertionsList().size() > 0) {
        output.writeUInt32NoTag(26);
        output.writeUInt32NoTag(insertionsMemoizedSerializedSize);
      }
      for (int i = 0; i < insertions_.size(); i++) {
        output.writeUInt32NoTag(insertions_.getInt(i));
      }
      for (int i = 0; i < membership_.size(); i++) {
        output.writeMessage(4, membership_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < filter_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, filter_.get(i));
      }
      if (limit_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, limit_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < insertions_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(insertions_.getInt(i));
        }
        size += dataSize;
        if (!getInsertionsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        insertionsMemoizedSerializedSize = dataSize;
      }
      for (int i = 0; i < membership_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, membership_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.bloombox.schema.analytics.stream.Filter.LayeredOITDBloomFilter)) {
        return super.equals(obj);
      }
      io.bloombox.schema.analytics.stream.Filter.LayeredOITDBloomFilter other = (io.bloombox.schema.analytics.stream.Filter.LayeredOITDBloomFilter) obj;

      if (!getFilterList()
          .equals(other.getFilterList())) return false;
      if (getLimit()
          != other.getLimit()) return false;
      if (!getInsertionsList()
          .equals(other.getInsertionsList())) return false;
      if (!getMembershipList()
          .equals(other.getMembershipList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getFilterCount() > 0) {
        hash = (37 * hash) + FILTER_FIELD_NUMBER;
        hash = (53 * hash) + getFilterList().hashCode();
      }
      hash = (37 * hash) + LIMIT_FIELD_NUMBER;
      hash = (53 * hash) + getLimit();
      if (getInsertionsCount() > 0) {
        hash = (37 * hash) + INSERTIONS_FIELD_NUMBER;
        hash = (53 * hash) + getInsertionsList().hashCode();
      }
      if (getMembershipCount() > 0) {
        hash = (37 * hash) + MEMBERSHIP_FIELD_NUMBER;
        hash = (53 * hash) + getMembershipList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.bloombox.schema.analytics.stream.Filter.LayeredOITDBloomFilter parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.analytics.stream.Filter.LayeredOITDBloomFilter parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.analytics.stream.Filter.LayeredOITDBloomFilter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.analytics.stream.Filter.LayeredOITDBloomFilter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.analytics.stream.Filter.LayeredOITDBloomFilter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.schema.analytics.stream.Filter.LayeredOITDBloomFilter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.schema.analytics.stream.Filter.LayeredOITDBloomFilter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.analytics.stream.Filter.LayeredOITDBloomFilter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.analytics.stream.Filter.LayeredOITDBloomFilter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.analytics.stream.Filter.LayeredOITDBloomFilter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.schema.analytics.stream.Filter.LayeredOITDBloomFilter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.schema.analytics.stream.Filter.LayeredOITDBloomFilter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.bloombox.schema.analytics.stream.Filter.LayeredOITDBloomFilter prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Defines a Bloom filter with temporal storage properties, counter support, and layering support, for the purpose of
     * facilitating time-based decay with depth indication. The inner OITD Bloom Filter record can be referenced above.
     * </pre>
     *
     * Protobuf type {@code bloombox.stream.LayeredOITDBloomFilter}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:bloombox.stream.LayeredOITDBloomFilter)
        io.bloombox.schema.analytics.stream.Filter.LayeredOITDBloomFilterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.bloombox.schema.analytics.stream.Filter.internal_static_bloombox_stream_LayeredOITDBloomFilter_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.bloombox.schema.analytics.stream.Filter.internal_static_bloombox_stream_LayeredOITDBloomFilter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.bloombox.schema.analytics.stream.Filter.LayeredOITDBloomFilter.class, io.bloombox.schema.analytics.stream.Filter.LayeredOITDBloomFilter.Builder.class);
      }

      // Construct using io.bloombox.schema.analytics.stream.Filter.LayeredOITDBloomFilter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getFilterFieldBuilder();
          getMembershipFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (filterBuilder_ == null) {
          filter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          filterBuilder_.clear();
        }
        limit_ = 0;

        insertions_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000004);
        if (membershipBuilder_ == null) {
          membership_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          membershipBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.bloombox.schema.analytics.stream.Filter.internal_static_bloombox_stream_LayeredOITDBloomFilter_descriptor;
      }

      @java.lang.Override
      public io.bloombox.schema.analytics.stream.Filter.LayeredOITDBloomFilter getDefaultInstanceForType() {
        return io.bloombox.schema.analytics.stream.Filter.LayeredOITDBloomFilter.getDefaultInstance();
      }

      @java.lang.Override
      public io.bloombox.schema.analytics.stream.Filter.LayeredOITDBloomFilter build() {
        io.bloombox.schema.analytics.stream.Filter.LayeredOITDBloomFilter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.bloombox.schema.analytics.stream.Filter.LayeredOITDBloomFilter buildPartial() {
        io.bloombox.schema.analytics.stream.Filter.LayeredOITDBloomFilter result = new io.bloombox.schema.analytics.stream.Filter.LayeredOITDBloomFilter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (filterBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            filter_ = java.util.Collections.unmodifiableList(filter_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.filter_ = filter_;
        } else {
          result.filter_ = filterBuilder_.build();
        }
        result.limit_ = limit_;
        if (((bitField0_ & 0x00000004) != 0)) {
          insertions_.makeImmutable();
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.insertions_ = insertions_;
        if (membershipBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0)) {
            membership_ = java.util.Collections.unmodifiableList(membership_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.membership_ = membership_;
        } else {
          result.membership_ = membershipBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.bloombox.schema.analytics.stream.Filter.LayeredOITDBloomFilter) {
          return mergeFrom((io.bloombox.schema.analytics.stream.Filter.LayeredOITDBloomFilter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.bloombox.schema.analytics.stream.Filter.LayeredOITDBloomFilter other) {
        if (other == io.bloombox.schema.analytics.stream.Filter.LayeredOITDBloomFilter.getDefaultInstance()) return this;
        if (filterBuilder_ == null) {
          if (!other.filter_.isEmpty()) {
            if (filter_.isEmpty()) {
              filter_ = other.filter_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureFilterIsMutable();
              filter_.addAll(other.filter_);
            }
            onChanged();
          }
        } else {
          if (!other.filter_.isEmpty()) {
            if (filterBuilder_.isEmpty()) {
              filterBuilder_.dispose();
              filterBuilder_ = null;
              filter_ = other.filter_;
              bitField0_ = (bitField0_ & ~0x00000001);
              filterBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getFilterFieldBuilder() : null;
            } else {
              filterBuilder_.addAllMessages(other.filter_);
            }
          }
        }
        if (other.getLimit() != 0) {
          setLimit(other.getLimit());
        }
        if (!other.insertions_.isEmpty()) {
          if (insertions_.isEmpty()) {
            insertions_ = other.insertions_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureInsertionsIsMutable();
            insertions_.addAll(other.insertions_);
          }
          onChanged();
        }
        if (membershipBuilder_ == null) {
          if (!other.membership_.isEmpty()) {
            if (membership_.isEmpty()) {
              membership_ = other.membership_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureMembershipIsMutable();
              membership_.addAll(other.membership_);
            }
            onChanged();
          }
        } else {
          if (!other.membership_.isEmpty()) {
            if (membershipBuilder_.isEmpty()) {
              membershipBuilder_.dispose();
              membershipBuilder_ = null;
              membership_ = other.membership_;
              bitField0_ = (bitField0_ & ~0x00000008);
              membershipBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getMembershipFieldBuilder() : null;
            } else {
              membershipBuilder_.addAllMessages(other.membership_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.bloombox.schema.analytics.stream.Filter.LayeredOITDBloomFilter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.bloombox.schema.analytics.stream.Filter.LayeredOITDBloomFilter) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter> filter_ =
        java.util.Collections.emptyList();
      private void ensureFilterIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          filter_ = new java.util.ArrayList<io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter>(filter_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter, io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.Builder, io.bloombox.schema.analytics.stream.Filter.OITDBloomFilterOrBuilder> filterBuilder_;

      /**
       * <pre>
       * Specifies layers of temporally-decaying Bloom filters.
       * </pre>
       *
       * <code>repeated .bloombox.stream.OITDBloomFilter filter = 1;</code>
       */
      public java.util.List<io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter> getFilterList() {
        if (filterBuilder_ == null) {
          return java.util.Collections.unmodifiableList(filter_);
        } else {
          return filterBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Specifies layers of temporally-decaying Bloom filters.
       * </pre>
       *
       * <code>repeated .bloombox.stream.OITDBloomFilter filter = 1;</code>
       */
      public int getFilterCount() {
        if (filterBuilder_ == null) {
          return filter_.size();
        } else {
          return filterBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Specifies layers of temporally-decaying Bloom filters.
       * </pre>
       *
       * <code>repeated .bloombox.stream.OITDBloomFilter filter = 1;</code>
       */
      public io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter getFilter(int index) {
        if (filterBuilder_ == null) {
          return filter_.get(index);
        } else {
          return filterBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Specifies layers of temporally-decaying Bloom filters.
       * </pre>
       *
       * <code>repeated .bloombox.stream.OITDBloomFilter filter = 1;</code>
       */
      public Builder setFilter(
          int index, io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter value) {
        if (filterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFilterIsMutable();
          filter_.set(index, value);
          onChanged();
        } else {
          filterBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies layers of temporally-decaying Bloom filters.
       * </pre>
       *
       * <code>repeated .bloombox.stream.OITDBloomFilter filter = 1;</code>
       */
      public Builder setFilter(
          int index, io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.Builder builderForValue) {
        if (filterBuilder_ == null) {
          ensureFilterIsMutable();
          filter_.set(index, builderForValue.build());
          onChanged();
        } else {
          filterBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies layers of temporally-decaying Bloom filters.
       * </pre>
       *
       * <code>repeated .bloombox.stream.OITDBloomFilter filter = 1;</code>
       */
      public Builder addFilter(io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter value) {
        if (filterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFilterIsMutable();
          filter_.add(value);
          onChanged();
        } else {
          filterBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies layers of temporally-decaying Bloom filters.
       * </pre>
       *
       * <code>repeated .bloombox.stream.OITDBloomFilter filter = 1;</code>
       */
      public Builder addFilter(
          int index, io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter value) {
        if (filterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFilterIsMutable();
          filter_.add(index, value);
          onChanged();
        } else {
          filterBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies layers of temporally-decaying Bloom filters.
       * </pre>
       *
       * <code>repeated .bloombox.stream.OITDBloomFilter filter = 1;</code>
       */
      public Builder addFilter(
          io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.Builder builderForValue) {
        if (filterBuilder_ == null) {
          ensureFilterIsMutable();
          filter_.add(builderForValue.build());
          onChanged();
        } else {
          filterBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies layers of temporally-decaying Bloom filters.
       * </pre>
       *
       * <code>repeated .bloombox.stream.OITDBloomFilter filter = 1;</code>
       */
      public Builder addFilter(
          int index, io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.Builder builderForValue) {
        if (filterBuilder_ == null) {
          ensureFilterIsMutable();
          filter_.add(index, builderForValue.build());
          onChanged();
        } else {
          filterBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies layers of temporally-decaying Bloom filters.
       * </pre>
       *
       * <code>repeated .bloombox.stream.OITDBloomFilter filter = 1;</code>
       */
      public Builder addAllFilter(
          java.lang.Iterable<? extends io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter> values) {
        if (filterBuilder_ == null) {
          ensureFilterIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, filter_);
          onChanged();
        } else {
          filterBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies layers of temporally-decaying Bloom filters.
       * </pre>
       *
       * <code>repeated .bloombox.stream.OITDBloomFilter filter = 1;</code>
       */
      public Builder clearFilter() {
        if (filterBuilder_ == null) {
          filter_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          filterBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Specifies layers of temporally-decaying Bloom filters.
       * </pre>
       *
       * <code>repeated .bloombox.stream.OITDBloomFilter filter = 1;</code>
       */
      public Builder removeFilter(int index) {
        if (filterBuilder_ == null) {
          ensureFilterIsMutable();
          filter_.remove(index);
          onChanged();
        } else {
          filterBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies layers of temporally-decaying Bloom filters.
       * </pre>
       *
       * <code>repeated .bloombox.stream.OITDBloomFilter filter = 1;</code>
       */
      public io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.Builder getFilterBuilder(
          int index) {
        return getFilterFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Specifies layers of temporally-decaying Bloom filters.
       * </pre>
       *
       * <code>repeated .bloombox.stream.OITDBloomFilter filter = 1;</code>
       */
      public io.bloombox.schema.analytics.stream.Filter.OITDBloomFilterOrBuilder getFilterOrBuilder(
          int index) {
        if (filterBuilder_ == null) {
          return filter_.get(index);  } else {
          return filterBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Specifies layers of temporally-decaying Bloom filters.
       * </pre>
       *
       * <code>repeated .bloombox.stream.OITDBloomFilter filter = 1;</code>
       */
      public java.util.List<? extends io.bloombox.schema.analytics.stream.Filter.OITDBloomFilterOrBuilder> 
           getFilterOrBuilderList() {
        if (filterBuilder_ != null) {
          return filterBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(filter_);
        }
      }
      /**
       * <pre>
       * Specifies layers of temporally-decaying Bloom filters.
       * </pre>
       *
       * <code>repeated .bloombox.stream.OITDBloomFilter filter = 1;</code>
       */
      public io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.Builder addFilterBuilder() {
        return getFilterFieldBuilder().addBuilder(
            io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.getDefaultInstance());
      }
      /**
       * <pre>
       * Specifies layers of temporally-decaying Bloom filters.
       * </pre>
       *
       * <code>repeated .bloombox.stream.OITDBloomFilter filter = 1;</code>
       */
      public io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.Builder addFilterBuilder(
          int index) {
        return getFilterFieldBuilder().addBuilder(
            index, io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.getDefaultInstance());
      }
      /**
       * <pre>
       * Specifies layers of temporally-decaying Bloom filters.
       * </pre>
       *
       * <code>repeated .bloombox.stream.OITDBloomFilter filter = 1;</code>
       */
      public java.util.List<io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.Builder> 
           getFilterBuilderList() {
        return getFilterFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter, io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.Builder, io.bloombox.schema.analytics.stream.Filter.OITDBloomFilterOrBuilder> 
          getFilterFieldBuilder() {
        if (filterBuilder_ == null) {
          filterBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter, io.bloombox.schema.analytics.stream.Filter.OITDBloomFilter.Builder, io.bloombox.schema.analytics.stream.Filter.OITDBloomFilterOrBuilder>(
                  filter_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          filter_ = null;
        }
        return filterBuilder_;
      }

      private int limit_ ;
      /**
       * <pre>
       * Specifies the layer limit for this individual Bloom filter, upon initialization.
       * </pre>
       *
       * <code>uint32 limit = 2;</code>
       */
      public int getLimit() {
        return limit_;
      }
      /**
       * <pre>
       * Specifies the layer limit for this individual Bloom filter, upon initialization.
       * </pre>
       *
       * <code>uint32 limit = 2;</code>
       */
      public Builder setLimit(int value) {
        
        limit_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies the layer limit for this individual Bloom filter, upon initialization.
       * </pre>
       *
       * <code>uint32 limit = 2;</code>
       */
      public Builder clearLimit() {
        
        limit_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.Internal.IntList insertions_ = emptyIntList();
      private void ensureInsertionsIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          insertions_ = mutableCopy(insertions_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <pre>
       * Specifies an insertions count, which tracks the number of items globally inserted into each layer.
       * </pre>
       *
       * <code>repeated uint32 insertions = 3;</code>
       */
      public java.util.List<java.lang.Integer>
          getInsertionsList() {
        return ((bitField0_ & 0x00000004) != 0) ?
                 java.util.Collections.unmodifiableList(insertions_) : insertions_;
      }
      /**
       * <pre>
       * Specifies an insertions count, which tracks the number of items globally inserted into each layer.
       * </pre>
       *
       * <code>repeated uint32 insertions = 3;</code>
       */
      public int getInsertionsCount() {
        return insertions_.size();
      }
      /**
       * <pre>
       * Specifies an insertions count, which tracks the number of items globally inserted into each layer.
       * </pre>
       *
       * <code>repeated uint32 insertions = 3;</code>
       */
      public int getInsertions(int index) {
        return insertions_.getInt(index);
      }
      /**
       * <pre>
       * Specifies an insertions count, which tracks the number of items globally inserted into each layer.
       * </pre>
       *
       * <code>repeated uint32 insertions = 3;</code>
       */
      public Builder setInsertions(
          int index, int value) {
        ensureInsertionsIsMutable();
        insertions_.setInt(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies an insertions count, which tracks the number of items globally inserted into each layer.
       * </pre>
       *
       * <code>repeated uint32 insertions = 3;</code>
       */
      public Builder addInsertions(int value) {
        ensureInsertionsIsMutable();
        insertions_.addInt(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies an insertions count, which tracks the number of items globally inserted into each layer.
       * </pre>
       *
       * <code>repeated uint32 insertions = 3;</code>
       */
      public Builder addAllInsertions(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureInsertionsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, insertions_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Specifies an insertions count, which tracks the number of items globally inserted into each layer.
       * </pre>
       *
       * <code>repeated uint32 insertions = 3;</code>
       */
      public Builder clearInsertions() {
        insertions_ = emptyIntList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      private java.util.List<io.bloombox.schema.analytics.stream.Filter.BloomFilter> membership_ =
        java.util.Collections.emptyList();
      private void ensureMembershipIsMutable() {
        if (!((bitField0_ & 0x00000008) != 0)) {
          membership_ = new java.util.ArrayList<io.bloombox.schema.analytics.stream.Filter.BloomFilter>(membership_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.bloombox.schema.analytics.stream.Filter.BloomFilter, io.bloombox.schema.analytics.stream.Filter.BloomFilter.Builder, io.bloombox.schema.analytics.stream.Filter.BloomFilterOrBuilder> membershipBuilder_;

      /**
       * <pre>
       * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter membership = 4;</code>
       */
      public java.util.List<io.bloombox.schema.analytics.stream.Filter.BloomFilter> getMembershipList() {
        if (membershipBuilder_ == null) {
          return java.util.Collections.unmodifiableList(membership_);
        } else {
          return membershipBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter membership = 4;</code>
       */
      public int getMembershipCount() {
        if (membershipBuilder_ == null) {
          return membership_.size();
        } else {
          return membershipBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter membership = 4;</code>
       */
      public io.bloombox.schema.analytics.stream.Filter.BloomFilter getMembership(int index) {
        if (membershipBuilder_ == null) {
          return membership_.get(index);
        } else {
          return membershipBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter membership = 4;</code>
       */
      public Builder setMembership(
          int index, io.bloombox.schema.analytics.stream.Filter.BloomFilter value) {
        if (membershipBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMembershipIsMutable();
          membership_.set(index, value);
          onChanged();
        } else {
          membershipBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter membership = 4;</code>
       */
      public Builder setMembership(
          int index, io.bloombox.schema.analytics.stream.Filter.BloomFilter.Builder builderForValue) {
        if (membershipBuilder_ == null) {
          ensureMembershipIsMutable();
          membership_.set(index, builderForValue.build());
          onChanged();
        } else {
          membershipBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter membership = 4;</code>
       */
      public Builder addMembership(io.bloombox.schema.analytics.stream.Filter.BloomFilter value) {
        if (membershipBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMembershipIsMutable();
          membership_.add(value);
          onChanged();
        } else {
          membershipBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter membership = 4;</code>
       */
      public Builder addMembership(
          int index, io.bloombox.schema.analytics.stream.Filter.BloomFilter value) {
        if (membershipBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMembershipIsMutable();
          membership_.add(index, value);
          onChanged();
        } else {
          membershipBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter membership = 4;</code>
       */
      public Builder addMembership(
          io.bloombox.schema.analytics.stream.Filter.BloomFilter.Builder builderForValue) {
        if (membershipBuilder_ == null) {
          ensureMembershipIsMutable();
          membership_.add(builderForValue.build());
          onChanged();
        } else {
          membershipBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter membership = 4;</code>
       */
      public Builder addMembership(
          int index, io.bloombox.schema.analytics.stream.Filter.BloomFilter.Builder builderForValue) {
        if (membershipBuilder_ == null) {
          ensureMembershipIsMutable();
          membership_.add(index, builderForValue.build());
          onChanged();
        } else {
          membershipBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter membership = 4;</code>
       */
      public Builder addAllMembership(
          java.lang.Iterable<? extends io.bloombox.schema.analytics.stream.Filter.BloomFilter> values) {
        if (membershipBuilder_ == null) {
          ensureMembershipIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, membership_);
          onChanged();
        } else {
          membershipBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter membership = 4;</code>
       */
      public Builder clearMembership() {
        if (membershipBuilder_ == null) {
          membership_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          membershipBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter membership = 4;</code>
       */
      public Builder removeMembership(int index) {
        if (membershipBuilder_ == null) {
          ensureMembershipIsMutable();
          membership_.remove(index);
          onChanged();
        } else {
          membershipBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter membership = 4;</code>
       */
      public io.bloombox.schema.analytics.stream.Filter.BloomFilter.Builder getMembershipBuilder(
          int index) {
        return getMembershipFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter membership = 4;</code>
       */
      public io.bloombox.schema.analytics.stream.Filter.BloomFilterOrBuilder getMembershipOrBuilder(
          int index) {
        if (membershipBuilder_ == null) {
          return membership_.get(index);  } else {
          return membershipBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter membership = 4;</code>
       */
      public java.util.List<? extends io.bloombox.schema.analytics.stream.Filter.BloomFilterOrBuilder> 
           getMembershipOrBuilderList() {
        if (membershipBuilder_ != null) {
          return membershipBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(membership_);
        }
      }
      /**
       * <pre>
       * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter membership = 4;</code>
       */
      public io.bloombox.schema.analytics.stream.Filter.BloomFilter.Builder addMembershipBuilder() {
        return getMembershipFieldBuilder().addBuilder(
            io.bloombox.schema.analytics.stream.Filter.BloomFilter.getDefaultInstance());
      }
      /**
       * <pre>
       * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter membership = 4;</code>
       */
      public io.bloombox.schema.analytics.stream.Filter.BloomFilter.Builder addMembershipBuilder(
          int index) {
        return getMembershipFieldBuilder().addBuilder(
            index, io.bloombox.schema.analytics.stream.Filter.BloomFilter.getDefaultInstance());
      }
      /**
       * <pre>
       * Specifies a static Bloom filter, which supplants the insertion count array with information about membership.
       * </pre>
       *
       * <code>repeated .bloombox.stream.BloomFilter membership = 4;</code>
       */
      public java.util.List<io.bloombox.schema.analytics.stream.Filter.BloomFilter.Builder> 
           getMembershipBuilderList() {
        return getMembershipFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.bloombox.schema.analytics.stream.Filter.BloomFilter, io.bloombox.schema.analytics.stream.Filter.BloomFilter.Builder, io.bloombox.schema.analytics.stream.Filter.BloomFilterOrBuilder> 
          getMembershipFieldBuilder() {
        if (membershipBuilder_ == null) {
          membershipBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.bloombox.schema.analytics.stream.Filter.BloomFilter, io.bloombox.schema.analytics.stream.Filter.BloomFilter.Builder, io.bloombox.schema.analytics.stream.Filter.BloomFilterOrBuilder>(
                  membership_,
                  ((bitField0_ & 0x00000008) != 0),
                  getParentForChildren(),
                  isClean());
          membership_ = null;
        }
        return membershipBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:bloombox.stream.LayeredOITDBloomFilter)
    }

    // @@protoc_insertion_point(class_scope:bloombox.stream.LayeredOITDBloomFilter)
    private static final io.bloombox.schema.analytics.stream.Filter.LayeredOITDBloomFilter DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.bloombox.schema.analytics.stream.Filter.LayeredOITDBloomFilter();
    }

    public static io.bloombox.schema.analytics.stream.Filter.LayeredOITDBloomFilter getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<LayeredOITDBloomFilter>
        PARSER = new com.google.protobuf.AbstractParser<LayeredOITDBloomFilter>() {
      @java.lang.Override
      public LayeredOITDBloomFilter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LayeredOITDBloomFilter(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<LayeredOITDBloomFilter> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<LayeredOITDBloomFilter> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.bloombox.schema.analytics.stream.Filter.LayeredOITDBloomFilter getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_bloombox_stream_BloomFilter_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_bloombox_stream_BloomFilter_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_bloombox_stream_LayeredBloomFilter_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_bloombox_stream_LayeredBloomFilter_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_bloombox_stream_CountingBloomFilter_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_bloombox_stream_CountingBloomFilter_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_bloombox_stream_OITDBloomFilter_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_bloombox_stream_OITDBloomFilter_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_bloombox_stream_LayeredOITDBloomFilter_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_bloombox_stream_LayeredOITDBloomFilter_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\035analytics/stream/Filter.proto\022\017bloombo" +
      "x.stream\"/\n\013BloomFilter\022\022\n\nhash_count\030\001 " +
      "\001(\r\022\014\n\004bits\030\002 \003(\006\"Q\n\022LayeredBloomFilter\022" +
      ",\n\006filter\030\001 \003(\0132\034.bloombox.stream.BloomF" +
      "ilter\022\r\n\005limit\030\002 \001(\r\"9\n\023CountingBloomFil" +
      "ter\022\022\n\nhash_count\030\001 \001(\r\022\016\n\006bucket\030\002 \003(\006\"" +
      "\236\001\n\017OITDBloomFilter\022\022\n\nhash_count\030\001 \001(\r\022" +
      "\016\n\006bitset\030\002 \003(\006\022\016\n\006bucket\030\003 \003(\006\022\021\n\ttimes" +
      "tamp\030\004 \003(\004\022\022\n\ninsertions\030\005 \003(\r\0220\n\nmember" +
      "ship\030\006 \003(\0132\034.bloombox.stream.BloomFilter" +
      "\"\237\001\n\026LayeredOITDBloomFilter\0220\n\006filter\030\001 " +
      "\003(\0132 .bloombox.stream.OITDBloomFilter\022\r\n" +
      "\005limit\030\002 \001(\r\022\022\n\ninsertions\030\003 \003(\r\0220\n\nmemb" +
      "ership\030\004 \003(\0132\034.bloombox.stream.BloomFilt" +
      "erB7\n#io.bloombox.schema.analytics.strea" +
      "mB\006FilterH\001P\000\242\002\003BBSb\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_bloombox_stream_BloomFilter_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_bloombox_stream_BloomFilter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_bloombox_stream_BloomFilter_descriptor,
        new java.lang.String[] { "HashCount", "Bits", });
    internal_static_bloombox_stream_LayeredBloomFilter_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_bloombox_stream_LayeredBloomFilter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_bloombox_stream_LayeredBloomFilter_descriptor,
        new java.lang.String[] { "Filter", "Limit", });
    internal_static_bloombox_stream_CountingBloomFilter_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_bloombox_stream_CountingBloomFilter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_bloombox_stream_CountingBloomFilter_descriptor,
        new java.lang.String[] { "HashCount", "Bucket", });
    internal_static_bloombox_stream_OITDBloomFilter_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_bloombox_stream_OITDBloomFilter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_bloombox_stream_OITDBloomFilter_descriptor,
        new java.lang.String[] { "HashCount", "Bitset", "Bucket", "Timestamp", "Insertions", "Membership", });
    internal_static_bloombox_stream_LayeredOITDBloomFilter_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_bloombox_stream_LayeredOITDBloomFilter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_bloombox_stream_LayeredOITDBloomFilter_descriptor,
        new java.lang.String[] { "Filter", "Limit", "Insertions", "Membership", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
