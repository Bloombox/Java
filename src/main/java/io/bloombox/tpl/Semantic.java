/*
 * Copyright 2019, Momentum Ideas, Co. All rights reserved.
 *
 * Source and object computer code contained herein is the private intellectual
 * property of Momentum Ideas Co., a Delaware Corporation. Use of this
 * code in source form requires permission in writing before use or the
 * assembly, distribution, or publishing of derivative works, for commercial
 * purposes or any other purpose, from a duly authorized officer of Momentum
 * Ideas Co.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: page/Semantic.proto

package io.bloombox.tpl;

public final class Semantic {
  private Semantic() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * Enumerates known semantic types, which are further mapped to their implementation types in each
   * semantic expression framework by implementing code.
   * </pre>
   *
   * Protobuf enum {@code bloombox.page.Kind}
   */
  public enum Kind
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Default content kind: generic web page or web application.
     * </pre>
     *
     * <code>WEB_PAGE = 0;</code>
     */
    WEB_PAGE(0),
    /**
     * <pre>
     * Master products view: listing of multiple products. Produces impression events in analytics
     * for each section or product displayed to the user.
     * </pre>
     *
     * <code>MASTER = 1;</code>
     */
    MASTER(1),
    /**
     * <pre>
     * Detail product view: information about a single product or product group. Produces view events
     * in analytics for each product or product group displayed to the user.
     * </pre>
     *
     * <code>DETAIL = 2;</code>
     */
    DETAIL(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Default content kind: generic web page or web application.
     * </pre>
     *
     * <code>WEB_PAGE = 0;</code>
     */
    public static final int WEB_PAGE_VALUE = 0;
    /**
     * <pre>
     * Master products view: listing of multiple products. Produces impression events in analytics
     * for each section or product displayed to the user.
     * </pre>
     *
     * <code>MASTER = 1;</code>
     */
    public static final int MASTER_VALUE = 1;
    /**
     * <pre>
     * Detail product view: information about a single product or product group. Produces view events
     * in analytics for each product or product group displayed to the user.
     * </pre>
     *
     * <code>DETAIL = 2;</code>
     */
    public static final int DETAIL_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Kind valueOf(int value) {
      return forNumber(value);
    }

    public static Kind forNumber(int value) {
      switch (value) {
        case 0: return WEB_PAGE;
        case 1: return MASTER;
        case 2: return DETAIL;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Kind>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Kind> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Kind>() {
            public Kind findValueByNumber(int number) {
              return Kind.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return io.bloombox.tpl.Semantic.getDescriptor().getEnumTypes().get(0);
    }

    private static final Kind[] VALUES = values();

    public static Kind valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Kind(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:bloombox.page.Kind)
  }

  /**
   * <pre>
   * Enumerates semantic metadata formats that are supported for rendering into the page.
   * </pre>
   *
   * Protobuf enum {@code bloombox.page.Format}
   */
  public enum Format
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Specifies generic metadata tags as a metadata format.
     * </pre>
     *
     * <code>GENERIC = 0;</code>
     */
    GENERIC(0),
    /**
     * <pre>
     * Specifies OpenGraph tags as a metadata format.
     * </pre>
     *
     * <code>OPENGRAPH = 1;</code>
     */
    OPENGRAPH(1),
    /**
     * <pre>
     * Specifies JSON-LD as a metadata format.
     * </pre>
     *
     * <code>JSON_LD = 2;</code>
     */
    JSON_LD(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Specifies generic metadata tags as a metadata format.
     * </pre>
     *
     * <code>GENERIC = 0;</code>
     */
    public static final int GENERIC_VALUE = 0;
    /**
     * <pre>
     * Specifies OpenGraph tags as a metadata format.
     * </pre>
     *
     * <code>OPENGRAPH = 1;</code>
     */
    public static final int OPENGRAPH_VALUE = 1;
    /**
     * <pre>
     * Specifies JSON-LD as a metadata format.
     * </pre>
     *
     * <code>JSON_LD = 2;</code>
     */
    public static final int JSON_LD_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Format valueOf(int value) {
      return forNumber(value);
    }

    public static Format forNumber(int value) {
      switch (value) {
        case 0: return GENERIC;
        case 1: return OPENGRAPH;
        case 2: return JSON_LD;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Format>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Format> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Format>() {
            public Format findValueByNumber(int number) {
              return Format.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return io.bloombox.tpl.Semantic.getDescriptor().getEnumTypes().get(1);
    }

    private static final Format[] VALUES = values();

    public static Format valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Format(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:bloombox.page.Format)
  }

  public interface SemanticMetadataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:bloombox.page.SemanticMetadata)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Defines the "kind" of content contained on a given page.
     * </pre>
     *
     * <code>.bloombox.page.Kind kind = 1;</code>
     */
    int getKindValue();
    /**
     * <pre>
     * Defines the "kind" of content contained on a given page.
     * </pre>
     *
     * <code>.bloombox.page.Kind kind = 1;</code>
     */
    io.bloombox.tpl.Semantic.Kind getKind();

    /**
     * <pre>
     * Formats to render semantic metadata in.
     * </pre>
     *
     * <code>repeated .bloombox.page.Format format = 2;</code>
     */
    java.util.List<io.bloombox.tpl.Semantic.Format> getFormatList();
    /**
     * <pre>
     * Formats to render semantic metadata in.
     * </pre>
     *
     * <code>repeated .bloombox.page.Format format = 2;</code>
     */
    int getFormatCount();
    /**
     * <pre>
     * Formats to render semantic metadata in.
     * </pre>
     *
     * <code>repeated .bloombox.page.Format format = 2;</code>
     */
    io.bloombox.tpl.Semantic.Format getFormat(int index);
    /**
     * <pre>
     * Formats to render semantic metadata in.
     * </pre>
     *
     * <code>repeated .bloombox.page.Format format = 2;</code>
     */
    java.util.List<java.lang.Integer>
    getFormatValueList();
    /**
     * <pre>
     * Formats to render semantic metadata in.
     * </pre>
     *
     * <code>repeated .bloombox.page.Format format = 2;</code>
     */
    int getFormatValue(int index);

    /**
     * <pre>
     * Describes page-level semantic media.
     * </pre>
     *
     * <code>repeated .bloombox.page.MediaAsset media = 3;</code>
     */
    java.util.List<io.bloombox.tpl.Media.MediaAsset> 
        getMediaList();
    /**
     * <pre>
     * Describes page-level semantic media.
     * </pre>
     *
     * <code>repeated .bloombox.page.MediaAsset media = 3;</code>
     */
    io.bloombox.tpl.Media.MediaAsset getMedia(int index);
    /**
     * <pre>
     * Describes page-level semantic media.
     * </pre>
     *
     * <code>repeated .bloombox.page.MediaAsset media = 3;</code>
     */
    int getMediaCount();
    /**
     * <pre>
     * Describes page-level semantic media.
     * </pre>
     *
     * <code>repeated .bloombox.page.MediaAsset media = 3;</code>
     */
    java.util.List<? extends io.bloombox.tpl.Media.MediaAssetOrBuilder> 
        getMediaOrBuilderList();
    /**
     * <pre>
     * Describes page-level semantic media.
     * </pre>
     *
     * <code>repeated .bloombox.page.MediaAsset media = 3;</code>
     */
    io.bloombox.tpl.Media.MediaAssetOrBuilder getMediaOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Defines the structure of top-level metadata with regard to semantic content, attached to a given
   * web page for emission in meta tags in various formats.
   * </pre>
   *
   * Protobuf type {@code bloombox.page.SemanticMetadata}
   */
  public  static final class SemanticMetadata extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:bloombox.page.SemanticMetadata)
      SemanticMetadataOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SemanticMetadata.newBuilder() to construct.
    private SemanticMetadata(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SemanticMetadata() {
      kind_ = 0;
      format_ = java.util.Collections.emptyList();
      media_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SemanticMetadata(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int rawValue = input.readEnum();

              kind_ = rawValue;
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                format_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000002;
              }
              format_.add(rawValue);
              break;
            }
            case 18: {
              int length = input.readRawVarint32();
              int oldLimit = input.pushLimit(length);
              while(input.getBytesUntilLimit() > 0) {
                int rawValue = input.readEnum();
                if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                  format_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000002;
                }
                format_.add(rawValue);
              }
              input.popLimit(oldLimit);
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                media_ = new java.util.ArrayList<io.bloombox.tpl.Media.MediaAsset>();
                mutable_bitField0_ |= 0x00000004;
              }
              media_.add(
                  input.readMessage(io.bloombox.tpl.Media.MediaAsset.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          format_ = java.util.Collections.unmodifiableList(format_);
        }
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          media_ = java.util.Collections.unmodifiableList(media_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.bloombox.tpl.Semantic.internal_static_bloombox_page_SemanticMetadata_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.bloombox.tpl.Semantic.internal_static_bloombox_page_SemanticMetadata_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.bloombox.tpl.Semantic.SemanticMetadata.class, io.bloombox.tpl.Semantic.SemanticMetadata.Builder.class);
    }

    private int bitField0_;
    public static final int KIND_FIELD_NUMBER = 1;
    private int kind_;
    /**
     * <pre>
     * Defines the "kind" of content contained on a given page.
     * </pre>
     *
     * <code>.bloombox.page.Kind kind = 1;</code>
     */
    public int getKindValue() {
      return kind_;
    }
    /**
     * <pre>
     * Defines the "kind" of content contained on a given page.
     * </pre>
     *
     * <code>.bloombox.page.Kind kind = 1;</code>
     */
    public io.bloombox.tpl.Semantic.Kind getKind() {
      @SuppressWarnings("deprecation")
      io.bloombox.tpl.Semantic.Kind result = io.bloombox.tpl.Semantic.Kind.valueOf(kind_);
      return result == null ? io.bloombox.tpl.Semantic.Kind.UNRECOGNIZED : result;
    }

    public static final int FORMAT_FIELD_NUMBER = 2;
    private java.util.List<java.lang.Integer> format_;
    private static final com.google.protobuf.Internal.ListAdapter.Converter<
        java.lang.Integer, io.bloombox.tpl.Semantic.Format> format_converter_ =
            new com.google.protobuf.Internal.ListAdapter.Converter<
                java.lang.Integer, io.bloombox.tpl.Semantic.Format>() {
              public io.bloombox.tpl.Semantic.Format convert(java.lang.Integer from) {
                @SuppressWarnings("deprecation")
                io.bloombox.tpl.Semantic.Format result = io.bloombox.tpl.Semantic.Format.valueOf(from);
                return result == null ? io.bloombox.tpl.Semantic.Format.UNRECOGNIZED : result;
              }
            };
    /**
     * <pre>
     * Formats to render semantic metadata in.
     * </pre>
     *
     * <code>repeated .bloombox.page.Format format = 2;</code>
     */
    public java.util.List<io.bloombox.tpl.Semantic.Format> getFormatList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, io.bloombox.tpl.Semantic.Format>(format_, format_converter_);
    }
    /**
     * <pre>
     * Formats to render semantic metadata in.
     * </pre>
     *
     * <code>repeated .bloombox.page.Format format = 2;</code>
     */
    public int getFormatCount() {
      return format_.size();
    }
    /**
     * <pre>
     * Formats to render semantic metadata in.
     * </pre>
     *
     * <code>repeated .bloombox.page.Format format = 2;</code>
     */
    public io.bloombox.tpl.Semantic.Format getFormat(int index) {
      return format_converter_.convert(format_.get(index));
    }
    /**
     * <pre>
     * Formats to render semantic metadata in.
     * </pre>
     *
     * <code>repeated .bloombox.page.Format format = 2;</code>
     */
    public java.util.List<java.lang.Integer>
    getFormatValueList() {
      return format_;
    }
    /**
     * <pre>
     * Formats to render semantic metadata in.
     * </pre>
     *
     * <code>repeated .bloombox.page.Format format = 2;</code>
     */
    public int getFormatValue(int index) {
      return format_.get(index);
    }
    private int formatMemoizedSerializedSize;

    public static final int MEDIA_FIELD_NUMBER = 3;
    private java.util.List<io.bloombox.tpl.Media.MediaAsset> media_;
    /**
     * <pre>
     * Describes page-level semantic media.
     * </pre>
     *
     * <code>repeated .bloombox.page.MediaAsset media = 3;</code>
     */
    public java.util.List<io.bloombox.tpl.Media.MediaAsset> getMediaList() {
      return media_;
    }
    /**
     * <pre>
     * Describes page-level semantic media.
     * </pre>
     *
     * <code>repeated .bloombox.page.MediaAsset media = 3;</code>
     */
    public java.util.List<? extends io.bloombox.tpl.Media.MediaAssetOrBuilder> 
        getMediaOrBuilderList() {
      return media_;
    }
    /**
     * <pre>
     * Describes page-level semantic media.
     * </pre>
     *
     * <code>repeated .bloombox.page.MediaAsset media = 3;</code>
     */
    public int getMediaCount() {
      return media_.size();
    }
    /**
     * <pre>
     * Describes page-level semantic media.
     * </pre>
     *
     * <code>repeated .bloombox.page.MediaAsset media = 3;</code>
     */
    public io.bloombox.tpl.Media.MediaAsset getMedia(int index) {
      return media_.get(index);
    }
    /**
     * <pre>
     * Describes page-level semantic media.
     * </pre>
     *
     * <code>repeated .bloombox.page.MediaAsset media = 3;</code>
     */
    public io.bloombox.tpl.Media.MediaAssetOrBuilder getMediaOrBuilder(
        int index) {
      return media_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (kind_ != io.bloombox.tpl.Semantic.Kind.WEB_PAGE.getNumber()) {
        output.writeEnum(1, kind_);
      }
      if (getFormatList().size() > 0) {
        output.writeUInt32NoTag(18);
        output.writeUInt32NoTag(formatMemoizedSerializedSize);
      }
      for (int i = 0; i < format_.size(); i++) {
        output.writeEnumNoTag(format_.get(i));
      }
      for (int i = 0; i < media_.size(); i++) {
        output.writeMessage(3, media_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (kind_ != io.bloombox.tpl.Semantic.Kind.WEB_PAGE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, kind_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < format_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeEnumSizeNoTag(format_.get(i));
        }
        size += dataSize;
        if (!getFormatList().isEmpty()) {  size += 1;
          size += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(dataSize);
        }formatMemoizedSerializedSize = dataSize;
      }
      for (int i = 0; i < media_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, media_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof io.bloombox.tpl.Semantic.SemanticMetadata)) {
        return super.equals(obj);
      }
      io.bloombox.tpl.Semantic.SemanticMetadata other = (io.bloombox.tpl.Semantic.SemanticMetadata) obj;

      if (kind_ != other.kind_) return false;
      if (!format_.equals(other.format_)) return false;
      if (!getMediaList()
          .equals(other.getMediaList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + KIND_FIELD_NUMBER;
      hash = (53 * hash) + kind_;
      if (getFormatCount() > 0) {
        hash = (37 * hash) + FORMAT_FIELD_NUMBER;
        hash = (53 * hash) + format_.hashCode();
      }
      if (getMediaCount() > 0) {
        hash = (37 * hash) + MEDIA_FIELD_NUMBER;
        hash = (53 * hash) + getMediaList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static io.bloombox.tpl.Semantic.SemanticMetadata parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.tpl.Semantic.SemanticMetadata parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.tpl.Semantic.SemanticMetadata parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.tpl.Semantic.SemanticMetadata parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.tpl.Semantic.SemanticMetadata parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.bloombox.tpl.Semantic.SemanticMetadata parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.bloombox.tpl.Semantic.SemanticMetadata parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.tpl.Semantic.SemanticMetadata parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.tpl.Semantic.SemanticMetadata parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static io.bloombox.tpl.Semantic.SemanticMetadata parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static io.bloombox.tpl.Semantic.SemanticMetadata parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static io.bloombox.tpl.Semantic.SemanticMetadata parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(io.bloombox.tpl.Semantic.SemanticMetadata prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Defines the structure of top-level metadata with regard to semantic content, attached to a given
     * web page for emission in meta tags in various formats.
     * </pre>
     *
     * Protobuf type {@code bloombox.page.SemanticMetadata}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:bloombox.page.SemanticMetadata)
        io.bloombox.tpl.Semantic.SemanticMetadataOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return io.bloombox.tpl.Semantic.internal_static_bloombox_page_SemanticMetadata_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return io.bloombox.tpl.Semantic.internal_static_bloombox_page_SemanticMetadata_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                io.bloombox.tpl.Semantic.SemanticMetadata.class, io.bloombox.tpl.Semantic.SemanticMetadata.Builder.class);
      }

      // Construct using io.bloombox.tpl.Semantic.SemanticMetadata.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getMediaFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        kind_ = 0;

        format_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        if (mediaBuilder_ == null) {
          media_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          mediaBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return io.bloombox.tpl.Semantic.internal_static_bloombox_page_SemanticMetadata_descriptor;
      }

      @java.lang.Override
      public io.bloombox.tpl.Semantic.SemanticMetadata getDefaultInstanceForType() {
        return io.bloombox.tpl.Semantic.SemanticMetadata.getDefaultInstance();
      }

      @java.lang.Override
      public io.bloombox.tpl.Semantic.SemanticMetadata build() {
        io.bloombox.tpl.Semantic.SemanticMetadata result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public io.bloombox.tpl.Semantic.SemanticMetadata buildPartial() {
        io.bloombox.tpl.Semantic.SemanticMetadata result = new io.bloombox.tpl.Semantic.SemanticMetadata(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.kind_ = kind_;
        if (((bitField0_ & 0x00000002) != 0)) {
          format_ = java.util.Collections.unmodifiableList(format_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.format_ = format_;
        if (mediaBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            media_ = java.util.Collections.unmodifiableList(media_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.media_ = media_;
        } else {
          result.media_ = mediaBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof io.bloombox.tpl.Semantic.SemanticMetadata) {
          return mergeFrom((io.bloombox.tpl.Semantic.SemanticMetadata)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(io.bloombox.tpl.Semantic.SemanticMetadata other) {
        if (other == io.bloombox.tpl.Semantic.SemanticMetadata.getDefaultInstance()) return this;
        if (other.kind_ != 0) {
          setKindValue(other.getKindValue());
        }
        if (!other.format_.isEmpty()) {
          if (format_.isEmpty()) {
            format_ = other.format_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureFormatIsMutable();
            format_.addAll(other.format_);
          }
          onChanged();
        }
        if (mediaBuilder_ == null) {
          if (!other.media_.isEmpty()) {
            if (media_.isEmpty()) {
              media_ = other.media_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureMediaIsMutable();
              media_.addAll(other.media_);
            }
            onChanged();
          }
        } else {
          if (!other.media_.isEmpty()) {
            if (mediaBuilder_.isEmpty()) {
              mediaBuilder_.dispose();
              mediaBuilder_ = null;
              media_ = other.media_;
              bitField0_ = (bitField0_ & ~0x00000004);
              mediaBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getMediaFieldBuilder() : null;
            } else {
              mediaBuilder_.addAllMessages(other.media_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.bloombox.tpl.Semantic.SemanticMetadata parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.bloombox.tpl.Semantic.SemanticMetadata) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int kind_ = 0;
      /**
       * <pre>
       * Defines the "kind" of content contained on a given page.
       * </pre>
       *
       * <code>.bloombox.page.Kind kind = 1;</code>
       */
      public int getKindValue() {
        return kind_;
      }
      /**
       * <pre>
       * Defines the "kind" of content contained on a given page.
       * </pre>
       *
       * <code>.bloombox.page.Kind kind = 1;</code>
       */
      public Builder setKindValue(int value) {
        kind_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Defines the "kind" of content contained on a given page.
       * </pre>
       *
       * <code>.bloombox.page.Kind kind = 1;</code>
       */
      public io.bloombox.tpl.Semantic.Kind getKind() {
        @SuppressWarnings("deprecation")
        io.bloombox.tpl.Semantic.Kind result = io.bloombox.tpl.Semantic.Kind.valueOf(kind_);
        return result == null ? io.bloombox.tpl.Semantic.Kind.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Defines the "kind" of content contained on a given page.
       * </pre>
       *
       * <code>.bloombox.page.Kind kind = 1;</code>
       */
      public Builder setKind(io.bloombox.tpl.Semantic.Kind value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        kind_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Defines the "kind" of content contained on a given page.
       * </pre>
       *
       * <code>.bloombox.page.Kind kind = 1;</code>
       */
      public Builder clearKind() {
        
        kind_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> format_ =
        java.util.Collections.emptyList();
      private void ensureFormatIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          format_ = new java.util.ArrayList<java.lang.Integer>(format_);
          bitField0_ |= 0x00000002;
        }
      }
      /**
       * <pre>
       * Formats to render semantic metadata in.
       * </pre>
       *
       * <code>repeated .bloombox.page.Format format = 2;</code>
       */
      public java.util.List<io.bloombox.tpl.Semantic.Format> getFormatList() {
        return new com.google.protobuf.Internal.ListAdapter<
            java.lang.Integer, io.bloombox.tpl.Semantic.Format>(format_, format_converter_);
      }
      /**
       * <pre>
       * Formats to render semantic metadata in.
       * </pre>
       *
       * <code>repeated .bloombox.page.Format format = 2;</code>
       */
      public int getFormatCount() {
        return format_.size();
      }
      /**
       * <pre>
       * Formats to render semantic metadata in.
       * </pre>
       *
       * <code>repeated .bloombox.page.Format format = 2;</code>
       */
      public io.bloombox.tpl.Semantic.Format getFormat(int index) {
        return format_converter_.convert(format_.get(index));
      }
      /**
       * <pre>
       * Formats to render semantic metadata in.
       * </pre>
       *
       * <code>repeated .bloombox.page.Format format = 2;</code>
       */
      public Builder setFormat(
          int index, io.bloombox.tpl.Semantic.Format value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFormatIsMutable();
        format_.set(index, value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Formats to render semantic metadata in.
       * </pre>
       *
       * <code>repeated .bloombox.page.Format format = 2;</code>
       */
      public Builder addFormat(io.bloombox.tpl.Semantic.Format value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFormatIsMutable();
        format_.add(value.getNumber());
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Formats to render semantic metadata in.
       * </pre>
       *
       * <code>repeated .bloombox.page.Format format = 2;</code>
       */
      public Builder addAllFormat(
          java.lang.Iterable<? extends io.bloombox.tpl.Semantic.Format> values) {
        ensureFormatIsMutable();
        for (io.bloombox.tpl.Semantic.Format value : values) {
          format_.add(value.getNumber());
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Formats to render semantic metadata in.
       * </pre>
       *
       * <code>repeated .bloombox.page.Format format = 2;</code>
       */
      public Builder clearFormat() {
        format_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Formats to render semantic metadata in.
       * </pre>
       *
       * <code>repeated .bloombox.page.Format format = 2;</code>
       */
      public java.util.List<java.lang.Integer>
      getFormatValueList() {
        return java.util.Collections.unmodifiableList(format_);
      }
      /**
       * <pre>
       * Formats to render semantic metadata in.
       * </pre>
       *
       * <code>repeated .bloombox.page.Format format = 2;</code>
       */
      public int getFormatValue(int index) {
        return format_.get(index);
      }
      /**
       * <pre>
       * Formats to render semantic metadata in.
       * </pre>
       *
       * <code>repeated .bloombox.page.Format format = 2;</code>
       */
      public Builder setFormatValue(
          int index, int value) {
        ensureFormatIsMutable();
        format_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Formats to render semantic metadata in.
       * </pre>
       *
       * <code>repeated .bloombox.page.Format format = 2;</code>
       */
      public Builder addFormatValue(int value) {
        ensureFormatIsMutable();
        format_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Formats to render semantic metadata in.
       * </pre>
       *
       * <code>repeated .bloombox.page.Format format = 2;</code>
       */
      public Builder addAllFormatValue(
          java.lang.Iterable<java.lang.Integer> values) {
        ensureFormatIsMutable();
        for (int value : values) {
          format_.add(value);
        }
        onChanged();
        return this;
      }

      private java.util.List<io.bloombox.tpl.Media.MediaAsset> media_ =
        java.util.Collections.emptyList();
      private void ensureMediaIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          media_ = new java.util.ArrayList<io.bloombox.tpl.Media.MediaAsset>(media_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.bloombox.tpl.Media.MediaAsset, io.bloombox.tpl.Media.MediaAsset.Builder, io.bloombox.tpl.Media.MediaAssetOrBuilder> mediaBuilder_;

      /**
       * <pre>
       * Describes page-level semantic media.
       * </pre>
       *
       * <code>repeated .bloombox.page.MediaAsset media = 3;</code>
       */
      public java.util.List<io.bloombox.tpl.Media.MediaAsset> getMediaList() {
        if (mediaBuilder_ == null) {
          return java.util.Collections.unmodifiableList(media_);
        } else {
          return mediaBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Describes page-level semantic media.
       * </pre>
       *
       * <code>repeated .bloombox.page.MediaAsset media = 3;</code>
       */
      public int getMediaCount() {
        if (mediaBuilder_ == null) {
          return media_.size();
        } else {
          return mediaBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Describes page-level semantic media.
       * </pre>
       *
       * <code>repeated .bloombox.page.MediaAsset media = 3;</code>
       */
      public io.bloombox.tpl.Media.MediaAsset getMedia(int index) {
        if (mediaBuilder_ == null) {
          return media_.get(index);
        } else {
          return mediaBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Describes page-level semantic media.
       * </pre>
       *
       * <code>repeated .bloombox.page.MediaAsset media = 3;</code>
       */
      public Builder setMedia(
          int index, io.bloombox.tpl.Media.MediaAsset value) {
        if (mediaBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMediaIsMutable();
          media_.set(index, value);
          onChanged();
        } else {
          mediaBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Describes page-level semantic media.
       * </pre>
       *
       * <code>repeated .bloombox.page.MediaAsset media = 3;</code>
       */
      public Builder setMedia(
          int index, io.bloombox.tpl.Media.MediaAsset.Builder builderForValue) {
        if (mediaBuilder_ == null) {
          ensureMediaIsMutable();
          media_.set(index, builderForValue.build());
          onChanged();
        } else {
          mediaBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Describes page-level semantic media.
       * </pre>
       *
       * <code>repeated .bloombox.page.MediaAsset media = 3;</code>
       */
      public Builder addMedia(io.bloombox.tpl.Media.MediaAsset value) {
        if (mediaBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMediaIsMutable();
          media_.add(value);
          onChanged();
        } else {
          mediaBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Describes page-level semantic media.
       * </pre>
       *
       * <code>repeated .bloombox.page.MediaAsset media = 3;</code>
       */
      public Builder addMedia(
          int index, io.bloombox.tpl.Media.MediaAsset value) {
        if (mediaBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMediaIsMutable();
          media_.add(index, value);
          onChanged();
        } else {
          mediaBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Describes page-level semantic media.
       * </pre>
       *
       * <code>repeated .bloombox.page.MediaAsset media = 3;</code>
       */
      public Builder addMedia(
          io.bloombox.tpl.Media.MediaAsset.Builder builderForValue) {
        if (mediaBuilder_ == null) {
          ensureMediaIsMutable();
          media_.add(builderForValue.build());
          onChanged();
        } else {
          mediaBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Describes page-level semantic media.
       * </pre>
       *
       * <code>repeated .bloombox.page.MediaAsset media = 3;</code>
       */
      public Builder addMedia(
          int index, io.bloombox.tpl.Media.MediaAsset.Builder builderForValue) {
        if (mediaBuilder_ == null) {
          ensureMediaIsMutable();
          media_.add(index, builderForValue.build());
          onChanged();
        } else {
          mediaBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Describes page-level semantic media.
       * </pre>
       *
       * <code>repeated .bloombox.page.MediaAsset media = 3;</code>
       */
      public Builder addAllMedia(
          java.lang.Iterable<? extends io.bloombox.tpl.Media.MediaAsset> values) {
        if (mediaBuilder_ == null) {
          ensureMediaIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, media_);
          onChanged();
        } else {
          mediaBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Describes page-level semantic media.
       * </pre>
       *
       * <code>repeated .bloombox.page.MediaAsset media = 3;</code>
       */
      public Builder clearMedia() {
        if (mediaBuilder_ == null) {
          media_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          mediaBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Describes page-level semantic media.
       * </pre>
       *
       * <code>repeated .bloombox.page.MediaAsset media = 3;</code>
       */
      public Builder removeMedia(int index) {
        if (mediaBuilder_ == null) {
          ensureMediaIsMutable();
          media_.remove(index);
          onChanged();
        } else {
          mediaBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Describes page-level semantic media.
       * </pre>
       *
       * <code>repeated .bloombox.page.MediaAsset media = 3;</code>
       */
      public io.bloombox.tpl.Media.MediaAsset.Builder getMediaBuilder(
          int index) {
        return getMediaFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Describes page-level semantic media.
       * </pre>
       *
       * <code>repeated .bloombox.page.MediaAsset media = 3;</code>
       */
      public io.bloombox.tpl.Media.MediaAssetOrBuilder getMediaOrBuilder(
          int index) {
        if (mediaBuilder_ == null) {
          return media_.get(index);  } else {
          return mediaBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Describes page-level semantic media.
       * </pre>
       *
       * <code>repeated .bloombox.page.MediaAsset media = 3;</code>
       */
      public java.util.List<? extends io.bloombox.tpl.Media.MediaAssetOrBuilder> 
           getMediaOrBuilderList() {
        if (mediaBuilder_ != null) {
          return mediaBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(media_);
        }
      }
      /**
       * <pre>
       * Describes page-level semantic media.
       * </pre>
       *
       * <code>repeated .bloombox.page.MediaAsset media = 3;</code>
       */
      public io.bloombox.tpl.Media.MediaAsset.Builder addMediaBuilder() {
        return getMediaFieldBuilder().addBuilder(
            io.bloombox.tpl.Media.MediaAsset.getDefaultInstance());
      }
      /**
       * <pre>
       * Describes page-level semantic media.
       * </pre>
       *
       * <code>repeated .bloombox.page.MediaAsset media = 3;</code>
       */
      public io.bloombox.tpl.Media.MediaAsset.Builder addMediaBuilder(
          int index) {
        return getMediaFieldBuilder().addBuilder(
            index, io.bloombox.tpl.Media.MediaAsset.getDefaultInstance());
      }
      /**
       * <pre>
       * Describes page-level semantic media.
       * </pre>
       *
       * <code>repeated .bloombox.page.MediaAsset media = 3;</code>
       */
      public java.util.List<io.bloombox.tpl.Media.MediaAsset.Builder> 
           getMediaBuilderList() {
        return getMediaFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          io.bloombox.tpl.Media.MediaAsset, io.bloombox.tpl.Media.MediaAsset.Builder, io.bloombox.tpl.Media.MediaAssetOrBuilder> 
          getMediaFieldBuilder() {
        if (mediaBuilder_ == null) {
          mediaBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              io.bloombox.tpl.Media.MediaAsset, io.bloombox.tpl.Media.MediaAsset.Builder, io.bloombox.tpl.Media.MediaAssetOrBuilder>(
                  media_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          media_ = null;
        }
        return mediaBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:bloombox.page.SemanticMetadata)
    }

    // @@protoc_insertion_point(class_scope:bloombox.page.SemanticMetadata)
    private static final io.bloombox.tpl.Semantic.SemanticMetadata DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new io.bloombox.tpl.Semantic.SemanticMetadata();
    }

    public static io.bloombox.tpl.Semantic.SemanticMetadata getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SemanticMetadata>
        PARSER = new com.google.protobuf.AbstractParser<SemanticMetadata>() {
      @java.lang.Override
      public SemanticMetadata parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SemanticMetadata(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SemanticMetadata> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SemanticMetadata> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public io.bloombox.tpl.Semantic.SemanticMetadata getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_bloombox_page_SemanticMetadata_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_bloombox_page_SemanticMetadata_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\023page/Semantic.proto\022\rbloombox.page\032\020pa" +
      "ge/Media.proto\"\206\001\n\020SemanticMetadata\022!\n\004k" +
      "ind\030\001 \001(\0162\023.bloombox.page.Kind\022%\n\006format" +
      "\030\002 \003(\0162\025.bloombox.page.Format\022(\n\005media\030\003" +
      " \003(\0132\031.bloombox.page.MediaAsset*,\n\004Kind\022" +
      "\014\n\010WEB_PAGE\020\000\022\n\n\006MASTER\020\001\022\n\n\006DETAIL\020\002*1\n" +
      "\006Format\022\013\n\007GENERIC\020\000\022\r\n\tOPENGRAPH\020\001\022\013\n\007J" +
      "SON_LD\020\002B%\n\017io.bloombox.tplB\010SemanticH\001P" +
      "\000\240\001\001\330\001\001b\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          io.bloombox.tpl.Media.getDescriptor(),
        }, assigner);
    internal_static_bloombox_page_SemanticMetadata_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_bloombox_page_SemanticMetadata_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_bloombox_page_SemanticMetadata_descriptor,
        new java.lang.String[] { "Kind", "Format", "Media", });
    io.bloombox.tpl.Media.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
